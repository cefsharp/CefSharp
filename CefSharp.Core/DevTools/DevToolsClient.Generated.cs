// Copyright Â© 2020 The CefSharp Authors. All rights reserved.
//
// Use of this source code is governed by a BSD-style license that can be found in the LICENSE file.
//
// **This code was generated by a tool, do not change directly**
// CHROMIUM VERSION 123.0.6312.46
using System.Runtime.Serialization;

namespace CefSharp.DevTools.Accessibility
{
    /// <summary>
    /// Enum of possible property types.
    /// </summary>
    public enum AXValueType
    {
        /// <summary>
        /// boolean
        /// </summary>
        [EnumMember(Value = ("boolean"))]
        Boolean,
        /// <summary>
        /// tristate
        /// </summary>
        [EnumMember(Value = ("tristate"))]
        Tristate,
        /// <summary>
        /// booleanOrUndefined
        /// </summary>
        [EnumMember(Value = ("booleanOrUndefined"))]
        BooleanOrUndefined,
        /// <summary>
        /// idref
        /// </summary>
        [EnumMember(Value = ("idref"))]
        Idref,
        /// <summary>
        /// idrefList
        /// </summary>
        [EnumMember(Value = ("idrefList"))]
        IdrefList,
        /// <summary>
        /// integer
        /// </summary>
        [EnumMember(Value = ("integer"))]
        Integer,
        /// <summary>
        /// node
        /// </summary>
        [EnumMember(Value = ("node"))]
        Node,
        /// <summary>
        /// nodeList
        /// </summary>
        [EnumMember(Value = ("nodeList"))]
        NodeList,
        /// <summary>
        /// number
        /// </summary>
        [EnumMember(Value = ("number"))]
        Number,
        /// <summary>
        /// string
        /// </summary>
        [EnumMember(Value = ("string"))]
        String,
        /// <summary>
        /// computedString
        /// </summary>
        [EnumMember(Value = ("computedString"))]
        ComputedString,
        /// <summary>
        /// token
        /// </summary>
        [EnumMember(Value = ("token"))]
        Token,
        /// <summary>
        /// tokenList
        /// </summary>
        [EnumMember(Value = ("tokenList"))]
        TokenList,
        /// <summary>
        /// domRelation
        /// </summary>
        [EnumMember(Value = ("domRelation"))]
        DomRelation,
        /// <summary>
        /// role
        /// </summary>
        [EnumMember(Value = ("role"))]
        Role,
        /// <summary>
        /// internalRole
        /// </summary>
        [EnumMember(Value = ("internalRole"))]
        InternalRole,
        /// <summary>
        /// valueUndefined
        /// </summary>
        [EnumMember(Value = ("valueUndefined"))]
        ValueUndefined
    }

    /// <summary>
    /// Enum of possible property sources.
    /// </summary>
    public enum AXValueSourceType
    {
        /// <summary>
        /// attribute
        /// </summary>
        [EnumMember(Value = ("attribute"))]
        Attribute,
        /// <summary>
        /// implicit
        /// </summary>
        [EnumMember(Value = ("implicit"))]
        Implicit,
        /// <summary>
        /// style
        /// </summary>
        [EnumMember(Value = ("style"))]
        Style,
        /// <summary>
        /// contents
        /// </summary>
        [EnumMember(Value = ("contents"))]
        Contents,
        /// <summary>
        /// placeholder
        /// </summary>
        [EnumMember(Value = ("placeholder"))]
        Placeholder,
        /// <summary>
        /// relatedElement
        /// </summary>
        [EnumMember(Value = ("relatedElement"))]
        RelatedElement
    }

    /// <summary>
    /// Enum of possible native property sources (as a subtype of a particular AXValueSourceType).
    /// </summary>
    public enum AXValueNativeSourceType
    {
        /// <summary>
        /// description
        /// </summary>
        [EnumMember(Value = ("description"))]
        Description,
        /// <summary>
        /// figcaption
        /// </summary>
        [EnumMember(Value = ("figcaption"))]
        Figcaption,
        /// <summary>
        /// label
        /// </summary>
        [EnumMember(Value = ("label"))]
        Label,
        /// <summary>
        /// labelfor
        /// </summary>
        [EnumMember(Value = ("labelfor"))]
        Labelfor,
        /// <summary>
        /// labelwrapped
        /// </summary>
        [EnumMember(Value = ("labelwrapped"))]
        Labelwrapped,
        /// <summary>
        /// legend
        /// </summary>
        [EnumMember(Value = ("legend"))]
        Legend,
        /// <summary>
        /// rubyannotation
        /// </summary>
        [EnumMember(Value = ("rubyannotation"))]
        Rubyannotation,
        /// <summary>
        /// tablecaption
        /// </summary>
        [EnumMember(Value = ("tablecaption"))]
        Tablecaption,
        /// <summary>
        /// title
        /// </summary>
        [EnumMember(Value = ("title"))]
        Title,
        /// <summary>
        /// other
        /// </summary>
        [EnumMember(Value = ("other"))]
        Other
    }

    /// <summary>
    /// A single source for a computed AX property.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AXValueSource : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// What type of source this is.
        /// </summary>
        public CefSharp.DevTools.Accessibility.AXValueSourceType Type
        {
            get
            {
                return (CefSharp.DevTools.Accessibility.AXValueSourceType)(StringToEnum(typeof(CefSharp.DevTools.Accessibility.AXValueSourceType), type));
            }

            set
            {
                this.type = (EnumToString(value));
            }
        }

        /// <summary>
        /// What type of source this is.
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (true))]
        internal string type
        {
            get;
            set;
        }

        /// <summary>
        /// The value of this property source.
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (false))]
        public CefSharp.DevTools.Accessibility.AXValue Value
        {
            get;
            set;
        }

        /// <summary>
        /// The name of the relevant attribute, if any.
        /// </summary>
        [DataMember(Name = ("attribute"), IsRequired = (false))]
        public string Attribute
        {
            get;
            set;
        }

        /// <summary>
        /// The value of the relevant attribute, if any.
        /// </summary>
        [DataMember(Name = ("attributeValue"), IsRequired = (false))]
        public CefSharp.DevTools.Accessibility.AXValue AttributeValue
        {
            get;
            set;
        }

        /// <summary>
        /// Whether this source is superseded by a higher priority source.
        /// </summary>
        [DataMember(Name = ("superseded"), IsRequired = (false))]
        public bool? Superseded
        {
            get;
            set;
        }

        /// <summary>
        /// The native markup source for this value, e.g. a `&lt;label&gt;` element.
        /// </summary>
        public CefSharp.DevTools.Accessibility.AXValueNativeSourceType? NativeSource
        {
            get
            {
                return (CefSharp.DevTools.Accessibility.AXValueNativeSourceType? )(StringToEnum(typeof(CefSharp.DevTools.Accessibility.AXValueNativeSourceType? ), nativeSource));
            }

            set
            {
                this.nativeSource = (EnumToString(value));
            }
        }

        /// <summary>
        /// The native markup source for this value, e.g. a `&lt;label&gt;` element.
        /// </summary>
        [DataMember(Name = ("nativeSource"), IsRequired = (false))]
        internal string nativeSource
        {
            get;
            set;
        }

        /// <summary>
        /// The value, such as a node or node list, of the native source.
        /// </summary>
        [DataMember(Name = ("nativeSourceValue"), IsRequired = (false))]
        public CefSharp.DevTools.Accessibility.AXValue NativeSourceValue
        {
            get;
            set;
        }

        /// <summary>
        /// Whether the value for this property is invalid.
        /// </summary>
        [DataMember(Name = ("invalid"), IsRequired = (false))]
        public bool? Invalid
        {
            get;
            set;
        }

        /// <summary>
        /// Reason for the value being invalid, if it is.
        /// </summary>
        [DataMember(Name = ("invalidReason"), IsRequired = (false))]
        public string InvalidReason
        {
            get;
            set;
        }
    }

    /// <summary>
    /// AXRelatedNode
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AXRelatedNode : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The BackendNodeId of the related DOM node.
        /// </summary>
        [DataMember(Name = ("backendDOMNodeId"), IsRequired = (true))]
        public int BackendDOMNodeId
        {
            get;
            set;
        }

        /// <summary>
        /// The IDRef value provided, if any.
        /// </summary>
        [DataMember(Name = ("idref"), IsRequired = (false))]
        public string Idref
        {
            get;
            set;
        }

        /// <summary>
        /// The text alternative of this node in the current context.
        /// </summary>
        [DataMember(Name = ("text"), IsRequired = (false))]
        public string Text
        {
            get;
            set;
        }
    }

    /// <summary>
    /// AXProperty
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AXProperty : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The name of this property.
        /// </summary>
        public CefSharp.DevTools.Accessibility.AXPropertyName Name
        {
            get
            {
                return (CefSharp.DevTools.Accessibility.AXPropertyName)(StringToEnum(typeof(CefSharp.DevTools.Accessibility.AXPropertyName), name));
            }

            set
            {
                this.name = (EnumToString(value));
            }
        }

        /// <summary>
        /// The name of this property.
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        internal string name
        {
            get;
            set;
        }

        /// <summary>
        /// The value of this property.
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (true))]
        public CefSharp.DevTools.Accessibility.AXValue Value
        {
            get;
            set;
        }
    }

    /// <summary>
    /// A single computed AX property.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AXValue : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The type of this value.
        /// </summary>
        public CefSharp.DevTools.Accessibility.AXValueType Type
        {
            get
            {
                return (CefSharp.DevTools.Accessibility.AXValueType)(StringToEnum(typeof(CefSharp.DevTools.Accessibility.AXValueType), type));
            }

            set
            {
                this.type = (EnumToString(value));
            }
        }

        /// <summary>
        /// The type of this value.
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (true))]
        internal string type
        {
            get;
            set;
        }

        /// <summary>
        /// The computed value of this property.
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (false))]
        public object Value
        {
            get;
            set;
        }

        /// <summary>
        /// One or more related nodes, if applicable.
        /// </summary>
        [DataMember(Name = ("relatedNodes"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Accessibility.AXRelatedNode> RelatedNodes
        {
            get;
            set;
        }

        /// <summary>
        /// The sources which contributed to the computation of this property.
        /// </summary>
        [DataMember(Name = ("sources"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Accessibility.AXValueSource> Sources
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Values of AXProperty name:
    /// - from &apos;busy&apos; to &apos;roledescription&apos;: states which apply to every AX node
    /// - from &apos;live&apos; to &apos;root&apos;: attributes which apply to nodes in live regions
    /// - from &apos;autocomplete&apos; to &apos;valuetext&apos;: attributes which apply to widgets
    /// - from &apos;checked&apos; to &apos;selected&apos;: states which apply to widgets
    /// - from &apos;activedescendant&apos; to &apos;owns&apos; - relationships between elements other than parent/child/sibling.
    /// </summary>
    public enum AXPropertyName
    {
        /// <summary>
        /// busy
        /// </summary>
        [EnumMember(Value = ("busy"))]
        Busy,
        /// <summary>
        /// disabled
        /// </summary>
        [EnumMember(Value = ("disabled"))]
        Disabled,
        /// <summary>
        /// editable
        /// </summary>
        [EnumMember(Value = ("editable"))]
        Editable,
        /// <summary>
        /// focusable
        /// </summary>
        [EnumMember(Value = ("focusable"))]
        Focusable,
        /// <summary>
        /// focused
        /// </summary>
        [EnumMember(Value = ("focused"))]
        Focused,
        /// <summary>
        /// hidden
        /// </summary>
        [EnumMember(Value = ("hidden"))]
        Hidden,
        /// <summary>
        /// hiddenRoot
        /// </summary>
        [EnumMember(Value = ("hiddenRoot"))]
        HiddenRoot,
        /// <summary>
        /// invalid
        /// </summary>
        [EnumMember(Value = ("invalid"))]
        Invalid,
        /// <summary>
        /// keyshortcuts
        /// </summary>
        [EnumMember(Value = ("keyshortcuts"))]
        Keyshortcuts,
        /// <summary>
        /// settable
        /// </summary>
        [EnumMember(Value = ("settable"))]
        Settable,
        /// <summary>
        /// roledescription
        /// </summary>
        [EnumMember(Value = ("roledescription"))]
        Roledescription,
        /// <summary>
        /// live
        /// </summary>
        [EnumMember(Value = ("live"))]
        Live,
        /// <summary>
        /// atomic
        /// </summary>
        [EnumMember(Value = ("atomic"))]
        Atomic,
        /// <summary>
        /// relevant
        /// </summary>
        [EnumMember(Value = ("relevant"))]
        Relevant,
        /// <summary>
        /// root
        /// </summary>
        [EnumMember(Value = ("root"))]
        Root,
        /// <summary>
        /// autocomplete
        /// </summary>
        [EnumMember(Value = ("autocomplete"))]
        Autocomplete,
        /// <summary>
        /// hasPopup
        /// </summary>
        [EnumMember(Value = ("hasPopup"))]
        HasPopup,
        /// <summary>
        /// level
        /// </summary>
        [EnumMember(Value = ("level"))]
        Level,
        /// <summary>
        /// multiselectable
        /// </summary>
        [EnumMember(Value = ("multiselectable"))]
        Multiselectable,
        /// <summary>
        /// orientation
        /// </summary>
        [EnumMember(Value = ("orientation"))]
        Orientation,
        /// <summary>
        /// multiline
        /// </summary>
        [EnumMember(Value = ("multiline"))]
        Multiline,
        /// <summary>
        /// readonly
        /// </summary>
        [EnumMember(Value = ("readonly"))]
        Readonly,
        /// <summary>
        /// required
        /// </summary>
        [EnumMember(Value = ("required"))]
        Required,
        /// <summary>
        /// valuemin
        /// </summary>
        [EnumMember(Value = ("valuemin"))]
        Valuemin,
        /// <summary>
        /// valuemax
        /// </summary>
        [EnumMember(Value = ("valuemax"))]
        Valuemax,
        /// <summary>
        /// valuetext
        /// </summary>
        [EnumMember(Value = ("valuetext"))]
        Valuetext,
        /// <summary>
        /// checked
        /// </summary>
        [EnumMember(Value = ("checked"))]
        Checked,
        /// <summary>
        /// expanded
        /// </summary>
        [EnumMember(Value = ("expanded"))]
        Expanded,
        /// <summary>
        /// modal
        /// </summary>
        [EnumMember(Value = ("modal"))]
        Modal,
        /// <summary>
        /// pressed
        /// </summary>
        [EnumMember(Value = ("pressed"))]
        Pressed,
        /// <summary>
        /// selected
        /// </summary>
        [EnumMember(Value = ("selected"))]
        Selected,
        /// <summary>
        /// activedescendant
        /// </summary>
        [EnumMember(Value = ("activedescendant"))]
        Activedescendant,
        /// <summary>
        /// controls
        /// </summary>
        [EnumMember(Value = ("controls"))]
        Controls,
        /// <summary>
        /// describedby
        /// </summary>
        [EnumMember(Value = ("describedby"))]
        Describedby,
        /// <summary>
        /// details
        /// </summary>
        [EnumMember(Value = ("details"))]
        Details,
        /// <summary>
        /// errormessage
        /// </summary>
        [EnumMember(Value = ("errormessage"))]
        Errormessage,
        /// <summary>
        /// flowto
        /// </summary>
        [EnumMember(Value = ("flowto"))]
        Flowto,
        /// <summary>
        /// labelledby
        /// </summary>
        [EnumMember(Value = ("labelledby"))]
        Labelledby,
        /// <summary>
        /// owns
        /// </summary>
        [EnumMember(Value = ("owns"))]
        Owns
    }

    /// <summary>
    /// A node in the accessibility tree.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AXNode : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Unique identifier for this node.
        /// </summary>
        [DataMember(Name = ("nodeId"), IsRequired = (true))]
        public string NodeId
        {
            get;
            set;
        }

        /// <summary>
        /// Whether this node is ignored for accessibility
        /// </summary>
        [DataMember(Name = ("ignored"), IsRequired = (true))]
        public bool Ignored
        {
            get;
            set;
        }

        /// <summary>
        /// Collection of reasons why this node is hidden.
        /// </summary>
        [DataMember(Name = ("ignoredReasons"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Accessibility.AXProperty> IgnoredReasons
        {
            get;
            set;
        }

        /// <summary>
        /// This `Node`&apos;s role, whether explicit or implicit.
        /// </summary>
        [DataMember(Name = ("role"), IsRequired = (false))]
        public CefSharp.DevTools.Accessibility.AXValue Role
        {
            get;
            set;
        }

        /// <summary>
        /// This `Node`&apos;s Chrome raw role.
        /// </summary>
        [DataMember(Name = ("chromeRole"), IsRequired = (false))]
        public CefSharp.DevTools.Accessibility.AXValue ChromeRole
        {
            get;
            set;
        }

        /// <summary>
        /// The accessible name for this `Node`.
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (false))]
        public CefSharp.DevTools.Accessibility.AXValue Name
        {
            get;
            set;
        }

        /// <summary>
        /// The accessible description for this `Node`.
        /// </summary>
        [DataMember(Name = ("description"), IsRequired = (false))]
        public CefSharp.DevTools.Accessibility.AXValue Description
        {
            get;
            set;
        }

        /// <summary>
        /// The value for this `Node`.
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (false))]
        public CefSharp.DevTools.Accessibility.AXValue Value
        {
            get;
            set;
        }

        /// <summary>
        /// All other properties
        /// </summary>
        [DataMember(Name = ("properties"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Accessibility.AXProperty> Properties
        {
            get;
            set;
        }

        /// <summary>
        /// ID for this node&apos;s parent.
        /// </summary>
        [DataMember(Name = ("parentId"), IsRequired = (false))]
        public string ParentId
        {
            get;
            set;
        }

        /// <summary>
        /// IDs for each of this node&apos;s child nodes.
        /// </summary>
        [DataMember(Name = ("childIds"), IsRequired = (false))]
        public string[] ChildIds
        {
            get;
            set;
        }

        /// <summary>
        /// The backend ID for the associated DOM node, if any.
        /// </summary>
        [DataMember(Name = ("backendDOMNodeId"), IsRequired = (false))]
        public int? BackendDOMNodeId
        {
            get;
            set;
        }

        /// <summary>
        /// The frame ID for the frame associated with this nodes document.
        /// </summary>
        [DataMember(Name = ("frameId"), IsRequired = (false))]
        public string FrameId
        {
            get;
            set;
        }
    }

    /// <summary>
    /// The loadComplete event mirrors the load complete event sent by the browser to assistive
    /// technology when the web page has finished loading.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class LoadCompleteEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// New document root node.
        /// </summary>
        [DataMember(Name = ("root"), IsRequired = (true))]
        public CefSharp.DevTools.Accessibility.AXNode Root
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// The nodesUpdated event is sent every time a previously requested node has changed the in tree.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class NodesUpdatedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Updated node data.
        /// </summary>
        [DataMember(Name = ("nodes"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Accessibility.AXNode> Nodes
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.Animation
{
    /// <summary>
    /// Animation type of `Animation`.
    /// </summary>
    public enum AnimationType
    {
        /// <summary>
        /// CSSTransition
        /// </summary>
        [EnumMember(Value = ("CSSTransition"))]
        CSSTransition,
        /// <summary>
        /// CSSAnimation
        /// </summary>
        [EnumMember(Value = ("CSSAnimation"))]
        CSSAnimation,
        /// <summary>
        /// WebAnimation
        /// </summary>
        [EnumMember(Value = ("WebAnimation"))]
        WebAnimation
    }

    /// <summary>
    /// Animation instance.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class Animation : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// `Animation`&apos;s id.
        /// </summary>
        [DataMember(Name = ("id"), IsRequired = (true))]
        public string Id
        {
            get;
            set;
        }

        /// <summary>
        /// `Animation`&apos;s name.
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// `Animation`&apos;s internal paused state.
        /// </summary>
        [DataMember(Name = ("pausedState"), IsRequired = (true))]
        public bool PausedState
        {
            get;
            set;
        }

        /// <summary>
        /// `Animation`&apos;s play state.
        /// </summary>
        [DataMember(Name = ("playState"), IsRequired = (true))]
        public string PlayState
        {
            get;
            set;
        }

        /// <summary>
        /// `Animation`&apos;s playback rate.
        /// </summary>
        [DataMember(Name = ("playbackRate"), IsRequired = (true))]
        public double PlaybackRate
        {
            get;
            set;
        }

        /// <summary>
        /// `Animation`&apos;s start time.
        /// Milliseconds for time based animations and
        /// percentage [0 - 100] for scroll driven animations
        /// (i.e. when viewOrScrollTimeline exists).
        /// </summary>
        [DataMember(Name = ("startTime"), IsRequired = (true))]
        public double StartTime
        {
            get;
            set;
        }

        /// <summary>
        /// `Animation`&apos;s current time.
        /// </summary>
        [DataMember(Name = ("currentTime"), IsRequired = (true))]
        public double CurrentTime
        {
            get;
            set;
        }

        /// <summary>
        /// Animation type of `Animation`.
        /// </summary>
        public CefSharp.DevTools.Animation.AnimationType Type
        {
            get
            {
                return (CefSharp.DevTools.Animation.AnimationType)(StringToEnum(typeof(CefSharp.DevTools.Animation.AnimationType), type));
            }

            set
            {
                this.type = (EnumToString(value));
            }
        }

        /// <summary>
        /// Animation type of `Animation`.
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (true))]
        internal string type
        {
            get;
            set;
        }

        /// <summary>
        /// `Animation`&apos;s source animation node.
        /// </summary>
        [DataMember(Name = ("source"), IsRequired = (false))]
        public CefSharp.DevTools.Animation.AnimationEffect Source
        {
            get;
            set;
        }

        /// <summary>
        /// A unique ID for `Animation` representing the sources that triggered this CSS
        /// animation/transition.
        /// </summary>
        [DataMember(Name = ("cssId"), IsRequired = (false))]
        public string CssId
        {
            get;
            set;
        }

        /// <summary>
        /// View or scroll timeline
        /// </summary>
        [DataMember(Name = ("viewOrScrollTimeline"), IsRequired = (false))]
        public CefSharp.DevTools.Animation.ViewOrScrollTimeline ViewOrScrollTimeline
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Timeline instance
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ViewOrScrollTimeline : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Scroll container node
        /// </summary>
        [DataMember(Name = ("sourceNodeId"), IsRequired = (false))]
        public int? SourceNodeId
        {
            get;
            set;
        }

        /// <summary>
        /// Represents the starting scroll position of the timeline
        /// as a length offset in pixels from scroll origin.
        /// </summary>
        [DataMember(Name = ("startOffset"), IsRequired = (false))]
        public double? StartOffset
        {
            get;
            set;
        }

        /// <summary>
        /// Represents the ending scroll position of the timeline
        /// as a length offset in pixels from scroll origin.
        /// </summary>
        [DataMember(Name = ("endOffset"), IsRequired = (false))]
        public double? EndOffset
        {
            get;
            set;
        }

        /// <summary>
        /// The element whose principal box&apos;s visibility in the
        /// scrollport defined the progress of the timeline.
        /// Does not exist for animations with ScrollTimeline
        /// </summary>
        [DataMember(Name = ("subjectNodeId"), IsRequired = (false))]
        public int? SubjectNodeId
        {
            get;
            set;
        }

        /// <summary>
        /// Orientation of the scroll
        /// </summary>
        public CefSharp.DevTools.DOM.ScrollOrientation Axis
        {
            get
            {
                return (CefSharp.DevTools.DOM.ScrollOrientation)(StringToEnum(typeof(CefSharp.DevTools.DOM.ScrollOrientation), axis));
            }

            set
            {
                this.axis = (EnumToString(value));
            }
        }

        /// <summary>
        /// Orientation of the scroll
        /// </summary>
        [DataMember(Name = ("axis"), IsRequired = (true))]
        internal string axis
        {
            get;
            set;
        }
    }

    /// <summary>
    /// AnimationEffect instance
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AnimationEffect : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// `AnimationEffect`&apos;s delay.
        /// </summary>
        [DataMember(Name = ("delay"), IsRequired = (true))]
        public double Delay
        {
            get;
            set;
        }

        /// <summary>
        /// `AnimationEffect`&apos;s end delay.
        /// </summary>
        [DataMember(Name = ("endDelay"), IsRequired = (true))]
        public double EndDelay
        {
            get;
            set;
        }

        /// <summary>
        /// `AnimationEffect`&apos;s iteration start.
        /// </summary>
        [DataMember(Name = ("iterationStart"), IsRequired = (true))]
        public double IterationStart
        {
            get;
            set;
        }

        /// <summary>
        /// `AnimationEffect`&apos;s iterations.
        /// </summary>
        [DataMember(Name = ("iterations"), IsRequired = (true))]
        public double Iterations
        {
            get;
            set;
        }

        /// <summary>
        /// `AnimationEffect`&apos;s iteration duration.
        /// Milliseconds for time based animations and
        /// percentage [0 - 100] for scroll driven animations
        /// (i.e. when viewOrScrollTimeline exists).
        /// </summary>
        [DataMember(Name = ("duration"), IsRequired = (true))]
        public double Duration
        {
            get;
            set;
        }

        /// <summary>
        /// `AnimationEffect`&apos;s playback direction.
        /// </summary>
        [DataMember(Name = ("direction"), IsRequired = (true))]
        public string Direction
        {
            get;
            set;
        }

        /// <summary>
        /// `AnimationEffect`&apos;s fill mode.
        /// </summary>
        [DataMember(Name = ("fill"), IsRequired = (true))]
        public string Fill
        {
            get;
            set;
        }

        /// <summary>
        /// `AnimationEffect`&apos;s target node.
        /// </summary>
        [DataMember(Name = ("backendNodeId"), IsRequired = (false))]
        public int? BackendNodeId
        {
            get;
            set;
        }

        /// <summary>
        /// `AnimationEffect`&apos;s keyframes.
        /// </summary>
        [DataMember(Name = ("keyframesRule"), IsRequired = (false))]
        public CefSharp.DevTools.Animation.KeyframesRule KeyframesRule
        {
            get;
            set;
        }

        /// <summary>
        /// `AnimationEffect`&apos;s timing function.
        /// </summary>
        [DataMember(Name = ("easing"), IsRequired = (true))]
        public string Easing
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Keyframes Rule
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class KeyframesRule : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// CSS keyframed animation&apos;s name.
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (false))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// List of animation keyframes.
        /// </summary>
        [DataMember(Name = ("keyframes"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Animation.KeyframeStyle> Keyframes
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Keyframe Style
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class KeyframeStyle : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Keyframe&apos;s time offset.
        /// </summary>
        [DataMember(Name = ("offset"), IsRequired = (true))]
        public string Offset
        {
            get;
            set;
        }

        /// <summary>
        /// `AnimationEffect`&apos;s timing function.
        /// </summary>
        [DataMember(Name = ("easing"), IsRequired = (true))]
        public string Easing
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Event for when an animation has been cancelled.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class AnimationCanceledEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Id of the animation that was cancelled.
        /// </summary>
        [DataMember(Name = ("id"), IsRequired = (true))]
        public string Id
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Event for each animation that has been created.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class AnimationCreatedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Id of the animation that was created.
        /// </summary>
        [DataMember(Name = ("id"), IsRequired = (true))]
        public string Id
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Event for animation that has been started.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class AnimationStartedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Animation that was started.
        /// </summary>
        [DataMember(Name = ("animation"), IsRequired = (true))]
        public CefSharp.DevTools.Animation.Animation Animation
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.Audits
{
    /// <summary>
    /// Information about a cookie that is affected by an inspector issue.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AffectedCookie : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The following three properties uniquely identify a cookie
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// Path
        /// </summary>
        [DataMember(Name = ("path"), IsRequired = (true))]
        public string Path
        {
            get;
            set;
        }

        /// <summary>
        /// Domain
        /// </summary>
        [DataMember(Name = ("domain"), IsRequired = (true))]
        public string Domain
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Information about a request that is affected by an inspector issue.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AffectedRequest : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The unique request id.
        /// </summary>
        [DataMember(Name = ("requestId"), IsRequired = (true))]
        public string RequestId
        {
            get;
            set;
        }

        /// <summary>
        /// Url
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (false))]
        public string Url
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Information about the frame affected by an inspector issue.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AffectedFrame : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// FrameId
        /// </summary>
        [DataMember(Name = ("frameId"), IsRequired = (true))]
        public string FrameId
        {
            get;
            set;
        }
    }

    /// <summary>
    /// CookieExclusionReason
    /// </summary>
    public enum CookieExclusionReason
    {
        /// <summary>
        /// ExcludeSameSiteUnspecifiedTreatedAsLax
        /// </summary>
        [EnumMember(Value = ("ExcludeSameSiteUnspecifiedTreatedAsLax"))]
        ExcludeSameSiteUnspecifiedTreatedAsLax,
        /// <summary>
        /// ExcludeSameSiteNoneInsecure
        /// </summary>
        [EnumMember(Value = ("ExcludeSameSiteNoneInsecure"))]
        ExcludeSameSiteNoneInsecure,
        /// <summary>
        /// ExcludeSameSiteLax
        /// </summary>
        [EnumMember(Value = ("ExcludeSameSiteLax"))]
        ExcludeSameSiteLax,
        /// <summary>
        /// ExcludeSameSiteStrict
        /// </summary>
        [EnumMember(Value = ("ExcludeSameSiteStrict"))]
        ExcludeSameSiteStrict,
        /// <summary>
        /// ExcludeInvalidSameParty
        /// </summary>
        [EnumMember(Value = ("ExcludeInvalidSameParty"))]
        ExcludeInvalidSameParty,
        /// <summary>
        /// ExcludeSamePartyCrossPartyContext
        /// </summary>
        [EnumMember(Value = ("ExcludeSamePartyCrossPartyContext"))]
        ExcludeSamePartyCrossPartyContext,
        /// <summary>
        /// ExcludeDomainNonASCII
        /// </summary>
        [EnumMember(Value = ("ExcludeDomainNonASCII"))]
        ExcludeDomainNonASCII,
        /// <summary>
        /// ExcludeThirdPartyCookieBlockedInFirstPartySet
        /// </summary>
        [EnumMember(Value = ("ExcludeThirdPartyCookieBlockedInFirstPartySet"))]
        ExcludeThirdPartyCookieBlockedInFirstPartySet,
        /// <summary>
        /// ExcludeThirdPartyPhaseout
        /// </summary>
        [EnumMember(Value = ("ExcludeThirdPartyPhaseout"))]
        ExcludeThirdPartyPhaseout
    }

    /// <summary>
    /// CookieWarningReason
    /// </summary>
    public enum CookieWarningReason
    {
        /// <summary>
        /// WarnSameSiteUnspecifiedCrossSiteContext
        /// </summary>
        [EnumMember(Value = ("WarnSameSiteUnspecifiedCrossSiteContext"))]
        WarnSameSiteUnspecifiedCrossSiteContext,
        /// <summary>
        /// WarnSameSiteNoneInsecure
        /// </summary>
        [EnumMember(Value = ("WarnSameSiteNoneInsecure"))]
        WarnSameSiteNoneInsecure,
        /// <summary>
        /// WarnSameSiteUnspecifiedLaxAllowUnsafe
        /// </summary>
        [EnumMember(Value = ("WarnSameSiteUnspecifiedLaxAllowUnsafe"))]
        WarnSameSiteUnspecifiedLaxAllowUnsafe,
        /// <summary>
        /// WarnSameSiteStrictLaxDowngradeStrict
        /// </summary>
        [EnumMember(Value = ("WarnSameSiteStrictLaxDowngradeStrict"))]
        WarnSameSiteStrictLaxDowngradeStrict,
        /// <summary>
        /// WarnSameSiteStrictCrossDowngradeStrict
        /// </summary>
        [EnumMember(Value = ("WarnSameSiteStrictCrossDowngradeStrict"))]
        WarnSameSiteStrictCrossDowngradeStrict,
        /// <summary>
        /// WarnSameSiteStrictCrossDowngradeLax
        /// </summary>
        [EnumMember(Value = ("WarnSameSiteStrictCrossDowngradeLax"))]
        WarnSameSiteStrictCrossDowngradeLax,
        /// <summary>
        /// WarnSameSiteLaxCrossDowngradeStrict
        /// </summary>
        [EnumMember(Value = ("WarnSameSiteLaxCrossDowngradeStrict"))]
        WarnSameSiteLaxCrossDowngradeStrict,
        /// <summary>
        /// WarnSameSiteLaxCrossDowngradeLax
        /// </summary>
        [EnumMember(Value = ("WarnSameSiteLaxCrossDowngradeLax"))]
        WarnSameSiteLaxCrossDowngradeLax,
        /// <summary>
        /// WarnAttributeValueExceedsMaxSize
        /// </summary>
        [EnumMember(Value = ("WarnAttributeValueExceedsMaxSize"))]
        WarnAttributeValueExceedsMaxSize,
        /// <summary>
        /// WarnDomainNonASCII
        /// </summary>
        [EnumMember(Value = ("WarnDomainNonASCII"))]
        WarnDomainNonASCII,
        /// <summary>
        /// WarnThirdPartyPhaseout
        /// </summary>
        [EnumMember(Value = ("WarnThirdPartyPhaseout"))]
        WarnThirdPartyPhaseout,
        /// <summary>
        /// WarnCrossSiteRedirectDowngradeChangesInclusion
        /// </summary>
        [EnumMember(Value = ("WarnCrossSiteRedirectDowngradeChangesInclusion"))]
        WarnCrossSiteRedirectDowngradeChangesInclusion
    }

    /// <summary>
    /// CookieOperation
    /// </summary>
    public enum CookieOperation
    {
        /// <summary>
        /// SetCookie
        /// </summary>
        [EnumMember(Value = ("SetCookie"))]
        SetCookie,
        /// <summary>
        /// ReadCookie
        /// </summary>
        [EnumMember(Value = ("ReadCookie"))]
        ReadCookie
    }

    /// <summary>
    /// This information is currently necessary, as the front-end has a difficult
    /// time finding a specific cookie. With this, we can convey specific error
    /// information without the cookie.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CookieIssueDetails : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// If AffectedCookie is not set then rawCookieLine contains the raw
        /// Set-Cookie header string. This hints at a problem where the
        /// cookie line is syntactically or semantically malformed in a way
        /// that no valid cookie could be created.
        /// </summary>
        [DataMember(Name = ("cookie"), IsRequired = (false))]
        public CefSharp.DevTools.Audits.AffectedCookie Cookie
        {
            get;
            set;
        }

        /// <summary>
        /// RawCookieLine
        /// </summary>
        [DataMember(Name = ("rawCookieLine"), IsRequired = (false))]
        public string RawCookieLine
        {
            get;
            set;
        }

        /// <summary>
        /// CookieWarningReasons
        /// </summary>
        public CefSharp.DevTools.Audits.CookieWarningReason[] CookieWarningReasons
        {
            get
            {
                return (CefSharp.DevTools.Audits.CookieWarningReason[])(StringToEnum(typeof(CefSharp.DevTools.Audits.CookieWarningReason[]), cookieWarningReasons));
            }

            set
            {
                this.cookieWarningReasons = (EnumToString(value));
            }
        }

        /// <summary>
        /// CookieWarningReasons
        /// </summary>
        [DataMember(Name = ("cookieWarningReasons"), IsRequired = (true))]
        internal string cookieWarningReasons
        {
            get;
            set;
        }

        /// <summary>
        /// CookieExclusionReasons
        /// </summary>
        public CefSharp.DevTools.Audits.CookieExclusionReason[] CookieExclusionReasons
        {
            get
            {
                return (CefSharp.DevTools.Audits.CookieExclusionReason[])(StringToEnum(typeof(CefSharp.DevTools.Audits.CookieExclusionReason[]), cookieExclusionReasons));
            }

            set
            {
                this.cookieExclusionReasons = (EnumToString(value));
            }
        }

        /// <summary>
        /// CookieExclusionReasons
        /// </summary>
        [DataMember(Name = ("cookieExclusionReasons"), IsRequired = (true))]
        internal string cookieExclusionReasons
        {
            get;
            set;
        }

        /// <summary>
        /// Optionally identifies the site-for-cookies and the cookie url, which
        /// may be used by the front-end as additional context.
        /// </summary>
        public CefSharp.DevTools.Audits.CookieOperation Operation
        {
            get
            {
                return (CefSharp.DevTools.Audits.CookieOperation)(StringToEnum(typeof(CefSharp.DevTools.Audits.CookieOperation), operation));
            }

            set
            {
                this.operation = (EnumToString(value));
            }
        }

        /// <summary>
        /// Optionally identifies the site-for-cookies and the cookie url, which
        /// may be used by the front-end as additional context.
        /// </summary>
        [DataMember(Name = ("operation"), IsRequired = (true))]
        internal string operation
        {
            get;
            set;
        }

        /// <summary>
        /// SiteForCookies
        /// </summary>
        [DataMember(Name = ("siteForCookies"), IsRequired = (false))]
        public string SiteForCookies
        {
            get;
            set;
        }

        /// <summary>
        /// CookieUrl
        /// </summary>
        [DataMember(Name = ("cookieUrl"), IsRequired = (false))]
        public string CookieUrl
        {
            get;
            set;
        }

        /// <summary>
        /// Request
        /// </summary>
        [DataMember(Name = ("request"), IsRequired = (false))]
        public CefSharp.DevTools.Audits.AffectedRequest Request
        {
            get;
            set;
        }
    }

    /// <summary>
    /// MixedContentResolutionStatus
    /// </summary>
    public enum MixedContentResolutionStatus
    {
        /// <summary>
        /// MixedContentBlocked
        /// </summary>
        [EnumMember(Value = ("MixedContentBlocked"))]
        MixedContentBlocked,
        /// <summary>
        /// MixedContentAutomaticallyUpgraded
        /// </summary>
        [EnumMember(Value = ("MixedContentAutomaticallyUpgraded"))]
        MixedContentAutomaticallyUpgraded,
        /// <summary>
        /// MixedContentWarning
        /// </summary>
        [EnumMember(Value = ("MixedContentWarning"))]
        MixedContentWarning
    }

    /// <summary>
    /// MixedContentResourceType
    /// </summary>
    public enum MixedContentResourceType
    {
        /// <summary>
        /// AttributionSrc
        /// </summary>
        [EnumMember(Value = ("AttributionSrc"))]
        AttributionSrc,
        /// <summary>
        /// Audio
        /// </summary>
        [EnumMember(Value = ("Audio"))]
        Audio,
        /// <summary>
        /// Beacon
        /// </summary>
        [EnumMember(Value = ("Beacon"))]
        Beacon,
        /// <summary>
        /// CSPReport
        /// </summary>
        [EnumMember(Value = ("CSPReport"))]
        CSPReport,
        /// <summary>
        /// Download
        /// </summary>
        [EnumMember(Value = ("Download"))]
        Download,
        /// <summary>
        /// EventSource
        /// </summary>
        [EnumMember(Value = ("EventSource"))]
        EventSource,
        /// <summary>
        /// Favicon
        /// </summary>
        [EnumMember(Value = ("Favicon"))]
        Favicon,
        /// <summary>
        /// Font
        /// </summary>
        [EnumMember(Value = ("Font"))]
        Font,
        /// <summary>
        /// Form
        /// </summary>
        [EnumMember(Value = ("Form"))]
        Form,
        /// <summary>
        /// Frame
        /// </summary>
        [EnumMember(Value = ("Frame"))]
        Frame,
        /// <summary>
        /// Image
        /// </summary>
        [EnumMember(Value = ("Image"))]
        Image,
        /// <summary>
        /// Import
        /// </summary>
        [EnumMember(Value = ("Import"))]
        Import,
        /// <summary>
        /// JSON
        /// </summary>
        [EnumMember(Value = ("JSON"))]
        JSON,
        /// <summary>
        /// Manifest
        /// </summary>
        [EnumMember(Value = ("Manifest"))]
        Manifest,
        /// <summary>
        /// Ping
        /// </summary>
        [EnumMember(Value = ("Ping"))]
        Ping,
        /// <summary>
        /// PluginData
        /// </summary>
        [EnumMember(Value = ("PluginData"))]
        PluginData,
        /// <summary>
        /// PluginResource
        /// </summary>
        [EnumMember(Value = ("PluginResource"))]
        PluginResource,
        /// <summary>
        /// Prefetch
        /// </summary>
        [EnumMember(Value = ("Prefetch"))]
        Prefetch,
        /// <summary>
        /// Resource
        /// </summary>
        [EnumMember(Value = ("Resource"))]
        Resource,
        /// <summary>
        /// Script
        /// </summary>
        [EnumMember(Value = ("Script"))]
        Script,
        /// <summary>
        /// ServiceWorker
        /// </summary>
        [EnumMember(Value = ("ServiceWorker"))]
        ServiceWorker,
        /// <summary>
        /// SharedWorker
        /// </summary>
        [EnumMember(Value = ("SharedWorker"))]
        SharedWorker,
        /// <summary>
        /// SpeculationRules
        /// </summary>
        [EnumMember(Value = ("SpeculationRules"))]
        SpeculationRules,
        /// <summary>
        /// Stylesheet
        /// </summary>
        [EnumMember(Value = ("Stylesheet"))]
        Stylesheet,
        /// <summary>
        /// Track
        /// </summary>
        [EnumMember(Value = ("Track"))]
        Track,
        /// <summary>
        /// Video
        /// </summary>
        [EnumMember(Value = ("Video"))]
        Video,
        /// <summary>
        /// Worker
        /// </summary>
        [EnumMember(Value = ("Worker"))]
        Worker,
        /// <summary>
        /// XMLHttpRequest
        /// </summary>
        [EnumMember(Value = ("XMLHttpRequest"))]
        XMLHttpRequest,
        /// <summary>
        /// XSLT
        /// </summary>
        [EnumMember(Value = ("XSLT"))]
        XSLT
    }

    /// <summary>
    /// MixedContentIssueDetails
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class MixedContentIssueDetails : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The type of resource causing the mixed content issue (css, js, iframe,
        /// form,...). Marked as optional because it is mapped to from
        /// blink::mojom::RequestContextType, which will be replaced
        /// by network::mojom::RequestDestination
        /// </summary>
        public CefSharp.DevTools.Audits.MixedContentResourceType? ResourceType
        {
            get
            {
                return (CefSharp.DevTools.Audits.MixedContentResourceType? )(StringToEnum(typeof(CefSharp.DevTools.Audits.MixedContentResourceType? ), resourceType));
            }

            set
            {
                this.resourceType = (EnumToString(value));
            }
        }

        /// <summary>
        /// The type of resource causing the mixed content issue (css, js, iframe,
        /// form,...). Marked as optional because it is mapped to from
        /// blink::mojom::RequestContextType, which will be replaced
        /// by network::mojom::RequestDestination
        /// </summary>
        [DataMember(Name = ("resourceType"), IsRequired = (false))]
        internal string resourceType
        {
            get;
            set;
        }

        /// <summary>
        /// The way the mixed content issue is being resolved.
        /// </summary>
        public CefSharp.DevTools.Audits.MixedContentResolutionStatus ResolutionStatus
        {
            get
            {
                return (CefSharp.DevTools.Audits.MixedContentResolutionStatus)(StringToEnum(typeof(CefSharp.DevTools.Audits.MixedContentResolutionStatus), resolutionStatus));
            }

            set
            {
                this.resolutionStatus = (EnumToString(value));
            }
        }

        /// <summary>
        /// The way the mixed content issue is being resolved.
        /// </summary>
        [DataMember(Name = ("resolutionStatus"), IsRequired = (true))]
        internal string resolutionStatus
        {
            get;
            set;
        }

        /// <summary>
        /// The unsafe http url causing the mixed content issue.
        /// </summary>
        [DataMember(Name = ("insecureURL"), IsRequired = (true))]
        public string InsecureURL
        {
            get;
            set;
        }

        /// <summary>
        /// The url responsible for the call to an unsafe url.
        /// </summary>
        [DataMember(Name = ("mainResourceURL"), IsRequired = (true))]
        public string MainResourceURL
        {
            get;
            set;
        }

        /// <summary>
        /// The mixed content request.
        /// Does not always exist (e.g. for unsafe form submission urls).
        /// </summary>
        [DataMember(Name = ("request"), IsRequired = (false))]
        public CefSharp.DevTools.Audits.AffectedRequest Request
        {
            get;
            set;
        }

        /// <summary>
        /// Optional because not every mixed content issue is necessarily linked to a frame.
        /// </summary>
        [DataMember(Name = ("frame"), IsRequired = (false))]
        public CefSharp.DevTools.Audits.AffectedFrame Frame
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Enum indicating the reason a response has been blocked. These reasons are
    /// refinements of the net error BLOCKED_BY_RESPONSE.
    /// </summary>
    public enum BlockedByResponseReason
    {
        /// <summary>
        /// CoepFrameResourceNeedsCoepHeader
        /// </summary>
        [EnumMember(Value = ("CoepFrameResourceNeedsCoepHeader"))]
        CoepFrameResourceNeedsCoepHeader,
        /// <summary>
        /// CoopSandboxedIFrameCannotNavigateToCoopPage
        /// </summary>
        [EnumMember(Value = ("CoopSandboxedIFrameCannotNavigateToCoopPage"))]
        CoopSandboxedIFrameCannotNavigateToCoopPage,
        /// <summary>
        /// CorpNotSameOrigin
        /// </summary>
        [EnumMember(Value = ("CorpNotSameOrigin"))]
        CorpNotSameOrigin,
        /// <summary>
        /// CorpNotSameOriginAfterDefaultedToSameOriginByCoep
        /// </summary>
        [EnumMember(Value = ("CorpNotSameOriginAfterDefaultedToSameOriginByCoep"))]
        CorpNotSameOriginAfterDefaultedToSameOriginByCoep,
        /// <summary>
        /// CorpNotSameSite
        /// </summary>
        [EnumMember(Value = ("CorpNotSameSite"))]
        CorpNotSameSite
    }

    /// <summary>
    /// Details for a request that has been blocked with the BLOCKED_BY_RESPONSE
    /// code. Currently only used for COEP/COOP, but may be extended to include
    /// some CSP errors in the future.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class BlockedByResponseIssueDetails : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Request
        /// </summary>
        [DataMember(Name = ("request"), IsRequired = (true))]
        public CefSharp.DevTools.Audits.AffectedRequest Request
        {
            get;
            set;
        }

        /// <summary>
        /// ParentFrame
        /// </summary>
        [DataMember(Name = ("parentFrame"), IsRequired = (false))]
        public CefSharp.DevTools.Audits.AffectedFrame ParentFrame
        {
            get;
            set;
        }

        /// <summary>
        /// BlockedFrame
        /// </summary>
        [DataMember(Name = ("blockedFrame"), IsRequired = (false))]
        public CefSharp.DevTools.Audits.AffectedFrame BlockedFrame
        {
            get;
            set;
        }

        /// <summary>
        /// Reason
        /// </summary>
        public CefSharp.DevTools.Audits.BlockedByResponseReason Reason
        {
            get
            {
                return (CefSharp.DevTools.Audits.BlockedByResponseReason)(StringToEnum(typeof(CefSharp.DevTools.Audits.BlockedByResponseReason), reason));
            }

            set
            {
                this.reason = (EnumToString(value));
            }
        }

        /// <summary>
        /// Reason
        /// </summary>
        [DataMember(Name = ("reason"), IsRequired = (true))]
        internal string reason
        {
            get;
            set;
        }
    }

    /// <summary>
    /// HeavyAdResolutionStatus
    /// </summary>
    public enum HeavyAdResolutionStatus
    {
        /// <summary>
        /// HeavyAdBlocked
        /// </summary>
        [EnumMember(Value = ("HeavyAdBlocked"))]
        HeavyAdBlocked,
        /// <summary>
        /// HeavyAdWarning
        /// </summary>
        [EnumMember(Value = ("HeavyAdWarning"))]
        HeavyAdWarning
    }

    /// <summary>
    /// HeavyAdReason
    /// </summary>
    public enum HeavyAdReason
    {
        /// <summary>
        /// NetworkTotalLimit
        /// </summary>
        [EnumMember(Value = ("NetworkTotalLimit"))]
        NetworkTotalLimit,
        /// <summary>
        /// CpuTotalLimit
        /// </summary>
        [EnumMember(Value = ("CpuTotalLimit"))]
        CpuTotalLimit,
        /// <summary>
        /// CpuPeakLimit
        /// </summary>
        [EnumMember(Value = ("CpuPeakLimit"))]
        CpuPeakLimit
    }

    /// <summary>
    /// HeavyAdIssueDetails
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class HeavyAdIssueDetails : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The resolution status, either blocking the content or warning.
        /// </summary>
        public CefSharp.DevTools.Audits.HeavyAdResolutionStatus Resolution
        {
            get
            {
                return (CefSharp.DevTools.Audits.HeavyAdResolutionStatus)(StringToEnum(typeof(CefSharp.DevTools.Audits.HeavyAdResolutionStatus), resolution));
            }

            set
            {
                this.resolution = (EnumToString(value));
            }
        }

        /// <summary>
        /// The resolution status, either blocking the content or warning.
        /// </summary>
        [DataMember(Name = ("resolution"), IsRequired = (true))]
        internal string resolution
        {
            get;
            set;
        }

        /// <summary>
        /// The reason the ad was blocked, total network or cpu or peak cpu.
        /// </summary>
        public CefSharp.DevTools.Audits.HeavyAdReason Reason
        {
            get
            {
                return (CefSharp.DevTools.Audits.HeavyAdReason)(StringToEnum(typeof(CefSharp.DevTools.Audits.HeavyAdReason), reason));
            }

            set
            {
                this.reason = (EnumToString(value));
            }
        }

        /// <summary>
        /// The reason the ad was blocked, total network or cpu or peak cpu.
        /// </summary>
        [DataMember(Name = ("reason"), IsRequired = (true))]
        internal string reason
        {
            get;
            set;
        }

        /// <summary>
        /// The frame that was blocked.
        /// </summary>
        [DataMember(Name = ("frame"), IsRequired = (true))]
        public CefSharp.DevTools.Audits.AffectedFrame Frame
        {
            get;
            set;
        }
    }

    /// <summary>
    /// ContentSecurityPolicyViolationType
    /// </summary>
    public enum ContentSecurityPolicyViolationType
    {
        /// <summary>
        /// kInlineViolation
        /// </summary>
        [EnumMember(Value = ("kInlineViolation"))]
        KInlineViolation,
        /// <summary>
        /// kEvalViolation
        /// </summary>
        [EnumMember(Value = ("kEvalViolation"))]
        KEvalViolation,
        /// <summary>
        /// kURLViolation
        /// </summary>
        [EnumMember(Value = ("kURLViolation"))]
        KURLViolation,
        /// <summary>
        /// kTrustedTypesSinkViolation
        /// </summary>
        [EnumMember(Value = ("kTrustedTypesSinkViolation"))]
        KTrustedTypesSinkViolation,
        /// <summary>
        /// kTrustedTypesPolicyViolation
        /// </summary>
        [EnumMember(Value = ("kTrustedTypesPolicyViolation"))]
        KTrustedTypesPolicyViolation,
        /// <summary>
        /// kWasmEvalViolation
        /// </summary>
        [EnumMember(Value = ("kWasmEvalViolation"))]
        KWasmEvalViolation
    }

    /// <summary>
    /// SourceCodeLocation
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class SourceCodeLocation : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// ScriptId
        /// </summary>
        [DataMember(Name = ("scriptId"), IsRequired = (false))]
        public string ScriptId
        {
            get;
            set;
        }

        /// <summary>
        /// Url
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (true))]
        public string Url
        {
            get;
            set;
        }

        /// <summary>
        /// LineNumber
        /// </summary>
        [DataMember(Name = ("lineNumber"), IsRequired = (true))]
        public int LineNumber
        {
            get;
            set;
        }

        /// <summary>
        /// ColumnNumber
        /// </summary>
        [DataMember(Name = ("columnNumber"), IsRequired = (true))]
        public int ColumnNumber
        {
            get;
            set;
        }
    }

    /// <summary>
    /// ContentSecurityPolicyIssueDetails
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ContentSecurityPolicyIssueDetails : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The url not included in allowed sources.
        /// </summary>
        [DataMember(Name = ("blockedURL"), IsRequired = (false))]
        public string BlockedURL
        {
            get;
            set;
        }

        /// <summary>
        /// Specific directive that is violated, causing the CSP issue.
        /// </summary>
        [DataMember(Name = ("violatedDirective"), IsRequired = (true))]
        public string ViolatedDirective
        {
            get;
            set;
        }

        /// <summary>
        /// IsReportOnly
        /// </summary>
        [DataMember(Name = ("isReportOnly"), IsRequired = (true))]
        public bool IsReportOnly
        {
            get;
            set;
        }

        /// <summary>
        /// ContentSecurityPolicyViolationType
        /// </summary>
        public CefSharp.DevTools.Audits.ContentSecurityPolicyViolationType ContentSecurityPolicyViolationType
        {
            get
            {
                return (CefSharp.DevTools.Audits.ContentSecurityPolicyViolationType)(StringToEnum(typeof(CefSharp.DevTools.Audits.ContentSecurityPolicyViolationType), contentSecurityPolicyViolationType));
            }

            set
            {
                this.contentSecurityPolicyViolationType = (EnumToString(value));
            }
        }

        /// <summary>
        /// ContentSecurityPolicyViolationType
        /// </summary>
        [DataMember(Name = ("contentSecurityPolicyViolationType"), IsRequired = (true))]
        internal string contentSecurityPolicyViolationType
        {
            get;
            set;
        }

        /// <summary>
        /// FrameAncestor
        /// </summary>
        [DataMember(Name = ("frameAncestor"), IsRequired = (false))]
        public CefSharp.DevTools.Audits.AffectedFrame FrameAncestor
        {
            get;
            set;
        }

        /// <summary>
        /// SourceCodeLocation
        /// </summary>
        [DataMember(Name = ("sourceCodeLocation"), IsRequired = (false))]
        public CefSharp.DevTools.Audits.SourceCodeLocation SourceCodeLocation
        {
            get;
            set;
        }

        /// <summary>
        /// ViolatingNodeId
        /// </summary>
        [DataMember(Name = ("violatingNodeId"), IsRequired = (false))]
        public int? ViolatingNodeId
        {
            get;
            set;
        }
    }

    /// <summary>
    /// SharedArrayBufferIssueType
    /// </summary>
    public enum SharedArrayBufferIssueType
    {
        /// <summary>
        /// TransferIssue
        /// </summary>
        [EnumMember(Value = ("TransferIssue"))]
        TransferIssue,
        /// <summary>
        /// CreationIssue
        /// </summary>
        [EnumMember(Value = ("CreationIssue"))]
        CreationIssue
    }

    /// <summary>
    /// Details for a issue arising from an SAB being instantiated in, or
    /// transferred to a context that is not cross-origin isolated.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class SharedArrayBufferIssueDetails : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// SourceCodeLocation
        /// </summary>
        [DataMember(Name = ("sourceCodeLocation"), IsRequired = (true))]
        public CefSharp.DevTools.Audits.SourceCodeLocation SourceCodeLocation
        {
            get;
            set;
        }

        /// <summary>
        /// IsWarning
        /// </summary>
        [DataMember(Name = ("isWarning"), IsRequired = (true))]
        public bool IsWarning
        {
            get;
            set;
        }

        /// <summary>
        /// Type
        /// </summary>
        public CefSharp.DevTools.Audits.SharedArrayBufferIssueType Type
        {
            get
            {
                return (CefSharp.DevTools.Audits.SharedArrayBufferIssueType)(StringToEnum(typeof(CefSharp.DevTools.Audits.SharedArrayBufferIssueType), type));
            }

            set
            {
                this.type = (EnumToString(value));
            }
        }

        /// <summary>
        /// Type
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (true))]
        internal string type
        {
            get;
            set;
        }
    }

    /// <summary>
    /// LowTextContrastIssueDetails
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class LowTextContrastIssueDetails : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// ViolatingNodeId
        /// </summary>
        [DataMember(Name = ("violatingNodeId"), IsRequired = (true))]
        public int ViolatingNodeId
        {
            get;
            set;
        }

        /// <summary>
        /// ViolatingNodeSelector
        /// </summary>
        [DataMember(Name = ("violatingNodeSelector"), IsRequired = (true))]
        public string ViolatingNodeSelector
        {
            get;
            set;
        }

        /// <summary>
        /// ContrastRatio
        /// </summary>
        [DataMember(Name = ("contrastRatio"), IsRequired = (true))]
        public double ContrastRatio
        {
            get;
            set;
        }

        /// <summary>
        /// ThresholdAA
        /// </summary>
        [DataMember(Name = ("thresholdAA"), IsRequired = (true))]
        public double ThresholdAA
        {
            get;
            set;
        }

        /// <summary>
        /// ThresholdAAA
        /// </summary>
        [DataMember(Name = ("thresholdAAA"), IsRequired = (true))]
        public double ThresholdAAA
        {
            get;
            set;
        }

        /// <summary>
        /// FontSize
        /// </summary>
        [DataMember(Name = ("fontSize"), IsRequired = (true))]
        public string FontSize
        {
            get;
            set;
        }

        /// <summary>
        /// FontWeight
        /// </summary>
        [DataMember(Name = ("fontWeight"), IsRequired = (true))]
        public string FontWeight
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Details for a CORS related issue, e.g. a warning or error related to
    /// CORS RFC1918 enforcement.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CorsIssueDetails : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// CorsErrorStatus
        /// </summary>
        [DataMember(Name = ("corsErrorStatus"), IsRequired = (true))]
        public CefSharp.DevTools.Network.CorsErrorStatus CorsErrorStatus
        {
            get;
            set;
        }

        /// <summary>
        /// IsWarning
        /// </summary>
        [DataMember(Name = ("isWarning"), IsRequired = (true))]
        public bool IsWarning
        {
            get;
            set;
        }

        /// <summary>
        /// Request
        /// </summary>
        [DataMember(Name = ("request"), IsRequired = (true))]
        public CefSharp.DevTools.Audits.AffectedRequest Request
        {
            get;
            set;
        }

        /// <summary>
        /// Location
        /// </summary>
        [DataMember(Name = ("location"), IsRequired = (false))]
        public CefSharp.DevTools.Audits.SourceCodeLocation Location
        {
            get;
            set;
        }

        /// <summary>
        /// InitiatorOrigin
        /// </summary>
        [DataMember(Name = ("initiatorOrigin"), IsRequired = (false))]
        public string InitiatorOrigin
        {
            get;
            set;
        }

        /// <summary>
        /// ResourceIPAddressSpace
        /// </summary>
        public CefSharp.DevTools.Network.IPAddressSpace? ResourceIPAddressSpace
        {
            get
            {
                return (CefSharp.DevTools.Network.IPAddressSpace? )(StringToEnum(typeof(CefSharp.DevTools.Network.IPAddressSpace? ), resourceIPAddressSpace));
            }

            set
            {
                this.resourceIPAddressSpace = (EnumToString(value));
            }
        }

        /// <summary>
        /// ResourceIPAddressSpace
        /// </summary>
        [DataMember(Name = ("resourceIPAddressSpace"), IsRequired = (false))]
        internal string resourceIPAddressSpace
        {
            get;
            set;
        }

        /// <summary>
        /// ClientSecurityState
        /// </summary>
        [DataMember(Name = ("clientSecurityState"), IsRequired = (false))]
        public CefSharp.DevTools.Network.ClientSecurityState ClientSecurityState
        {
            get;
            set;
        }
    }

    /// <summary>
    /// AttributionReportingIssueType
    /// </summary>
    public enum AttributionReportingIssueType
    {
        /// <summary>
        /// PermissionPolicyDisabled
        /// </summary>
        [EnumMember(Value = ("PermissionPolicyDisabled"))]
        PermissionPolicyDisabled,
        /// <summary>
        /// UntrustworthyReportingOrigin
        /// </summary>
        [EnumMember(Value = ("UntrustworthyReportingOrigin"))]
        UntrustworthyReportingOrigin,
        /// <summary>
        /// InsecureContext
        /// </summary>
        [EnumMember(Value = ("InsecureContext"))]
        InsecureContext,
        /// <summary>
        /// InvalidHeader
        /// </summary>
        [EnumMember(Value = ("InvalidHeader"))]
        InvalidHeader,
        /// <summary>
        /// InvalidRegisterTriggerHeader
        /// </summary>
        [EnumMember(Value = ("InvalidRegisterTriggerHeader"))]
        InvalidRegisterTriggerHeader,
        /// <summary>
        /// SourceAndTriggerHeaders
        /// </summary>
        [EnumMember(Value = ("SourceAndTriggerHeaders"))]
        SourceAndTriggerHeaders,
        /// <summary>
        /// SourceIgnored
        /// </summary>
        [EnumMember(Value = ("SourceIgnored"))]
        SourceIgnored,
        /// <summary>
        /// TriggerIgnored
        /// </summary>
        [EnumMember(Value = ("TriggerIgnored"))]
        TriggerIgnored,
        /// <summary>
        /// OsSourceIgnored
        /// </summary>
        [EnumMember(Value = ("OsSourceIgnored"))]
        OsSourceIgnored,
        /// <summary>
        /// OsTriggerIgnored
        /// </summary>
        [EnumMember(Value = ("OsTriggerIgnored"))]
        OsTriggerIgnored,
        /// <summary>
        /// InvalidRegisterOsSourceHeader
        /// </summary>
        [EnumMember(Value = ("InvalidRegisterOsSourceHeader"))]
        InvalidRegisterOsSourceHeader,
        /// <summary>
        /// InvalidRegisterOsTriggerHeader
        /// </summary>
        [EnumMember(Value = ("InvalidRegisterOsTriggerHeader"))]
        InvalidRegisterOsTriggerHeader,
        /// <summary>
        /// WebAndOsHeaders
        /// </summary>
        [EnumMember(Value = ("WebAndOsHeaders"))]
        WebAndOsHeaders,
        /// <summary>
        /// NoWebOrOsSupport
        /// </summary>
        [EnumMember(Value = ("NoWebOrOsSupport"))]
        NoWebOrOsSupport,
        /// <summary>
        /// NavigationRegistrationWithoutTransientUserActivation
        /// </summary>
        [EnumMember(Value = ("NavigationRegistrationWithoutTransientUserActivation"))]
        NavigationRegistrationWithoutTransientUserActivation
    }

    /// <summary>
    /// Details for issues around &quot;Attribution Reporting API&quot; usage.
    /// Explainer: https://github.com/WICG/attribution-reporting-api
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AttributionReportingIssueDetails : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// ViolationType
        /// </summary>
        public CefSharp.DevTools.Audits.AttributionReportingIssueType ViolationType
        {
            get
            {
                return (CefSharp.DevTools.Audits.AttributionReportingIssueType)(StringToEnum(typeof(CefSharp.DevTools.Audits.AttributionReportingIssueType), violationType));
            }

            set
            {
                this.violationType = (EnumToString(value));
            }
        }

        /// <summary>
        /// ViolationType
        /// </summary>
        [DataMember(Name = ("violationType"), IsRequired = (true))]
        internal string violationType
        {
            get;
            set;
        }

        /// <summary>
        /// Request
        /// </summary>
        [DataMember(Name = ("request"), IsRequired = (false))]
        public CefSharp.DevTools.Audits.AffectedRequest Request
        {
            get;
            set;
        }

        /// <summary>
        /// ViolatingNodeId
        /// </summary>
        [DataMember(Name = ("violatingNodeId"), IsRequired = (false))]
        public int? ViolatingNodeId
        {
            get;
            set;
        }

        /// <summary>
        /// InvalidParameter
        /// </summary>
        [DataMember(Name = ("invalidParameter"), IsRequired = (false))]
        public string InvalidParameter
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Details for issues about documents in Quirks Mode
    /// or Limited Quirks Mode that affects page layouting.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class QuirksModeIssueDetails : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// If false, it means the document&apos;s mode is &quot;quirks&quot;
        /// instead of &quot;limited-quirks&quot;.
        /// </summary>
        [DataMember(Name = ("isLimitedQuirksMode"), IsRequired = (true))]
        public bool IsLimitedQuirksMode
        {
            get;
            set;
        }

        /// <summary>
        /// DocumentNodeId
        /// </summary>
        [DataMember(Name = ("documentNodeId"), IsRequired = (true))]
        public int DocumentNodeId
        {
            get;
            set;
        }

        /// <summary>
        /// Url
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (true))]
        public string Url
        {
            get;
            set;
        }

        /// <summary>
        /// FrameId
        /// </summary>
        [DataMember(Name = ("frameId"), IsRequired = (true))]
        public string FrameId
        {
            get;
            set;
        }

        /// <summary>
        /// LoaderId
        /// </summary>
        [DataMember(Name = ("loaderId"), IsRequired = (true))]
        public string LoaderId
        {
            get;
            set;
        }
    }

    /// <summary>
    /// NavigatorUserAgentIssueDetails
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class NavigatorUserAgentIssueDetails : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Url
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (true))]
        public string Url
        {
            get;
            set;
        }

        /// <summary>
        /// Location
        /// </summary>
        [DataMember(Name = ("location"), IsRequired = (false))]
        public CefSharp.DevTools.Audits.SourceCodeLocation Location
        {
            get;
            set;
        }
    }

    /// <summary>
    /// GenericIssueErrorType
    /// </summary>
    public enum GenericIssueErrorType
    {
        /// <summary>
        /// CrossOriginPortalPostMessageError
        /// </summary>
        [EnumMember(Value = ("CrossOriginPortalPostMessageError"))]
        CrossOriginPortalPostMessageError,
        /// <summary>
        /// FormLabelForNameError
        /// </summary>
        [EnumMember(Value = ("FormLabelForNameError"))]
        FormLabelForNameError,
        /// <summary>
        /// FormDuplicateIdForInputError
        /// </summary>
        [EnumMember(Value = ("FormDuplicateIdForInputError"))]
        FormDuplicateIdForInputError,
        /// <summary>
        /// FormInputWithNoLabelError
        /// </summary>
        [EnumMember(Value = ("FormInputWithNoLabelError"))]
        FormInputWithNoLabelError,
        /// <summary>
        /// FormAutocompleteAttributeEmptyError
        /// </summary>
        [EnumMember(Value = ("FormAutocompleteAttributeEmptyError"))]
        FormAutocompleteAttributeEmptyError,
        /// <summary>
        /// FormEmptyIdAndNameAttributesForInputError
        /// </summary>
        [EnumMember(Value = ("FormEmptyIdAndNameAttributesForInputError"))]
        FormEmptyIdAndNameAttributesForInputError,
        /// <summary>
        /// FormAriaLabelledByToNonExistingId
        /// </summary>
        [EnumMember(Value = ("FormAriaLabelledByToNonExistingId"))]
        FormAriaLabelledByToNonExistingId,
        /// <summary>
        /// FormInputAssignedAutocompleteValueToIdOrNameAttributeError
        /// </summary>
        [EnumMember(Value = ("FormInputAssignedAutocompleteValueToIdOrNameAttributeError"))]
        FormInputAssignedAutocompleteValueToIdOrNameAttributeError,
        /// <summary>
        /// FormLabelHasNeitherForNorNestedInput
        /// </summary>
        [EnumMember(Value = ("FormLabelHasNeitherForNorNestedInput"))]
        FormLabelHasNeitherForNorNestedInput,
        /// <summary>
        /// FormLabelForMatchesNonExistingIdError
        /// </summary>
        [EnumMember(Value = ("FormLabelForMatchesNonExistingIdError"))]
        FormLabelForMatchesNonExistingIdError,
        /// <summary>
        /// FormInputHasWrongButWellIntendedAutocompleteValueError
        /// </summary>
        [EnumMember(Value = ("FormInputHasWrongButWellIntendedAutocompleteValueError"))]
        FormInputHasWrongButWellIntendedAutocompleteValueError,
        /// <summary>
        /// ResponseWasBlockedByORB
        /// </summary>
        [EnumMember(Value = ("ResponseWasBlockedByORB"))]
        ResponseWasBlockedByORB
    }

    /// <summary>
    /// Depending on the concrete errorType, different properties are set.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class GenericIssueDetails : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Issues with the same errorType are aggregated in the frontend.
        /// </summary>
        public CefSharp.DevTools.Audits.GenericIssueErrorType ErrorType
        {
            get
            {
                return (CefSharp.DevTools.Audits.GenericIssueErrorType)(StringToEnum(typeof(CefSharp.DevTools.Audits.GenericIssueErrorType), errorType));
            }

            set
            {
                this.errorType = (EnumToString(value));
            }
        }

        /// <summary>
        /// Issues with the same errorType are aggregated in the frontend.
        /// </summary>
        [DataMember(Name = ("errorType"), IsRequired = (true))]
        internal string errorType
        {
            get;
            set;
        }

        /// <summary>
        /// FrameId
        /// </summary>
        [DataMember(Name = ("frameId"), IsRequired = (false))]
        public string FrameId
        {
            get;
            set;
        }

        /// <summary>
        /// ViolatingNodeId
        /// </summary>
        [DataMember(Name = ("violatingNodeId"), IsRequired = (false))]
        public int? ViolatingNodeId
        {
            get;
            set;
        }

        /// <summary>
        /// ViolatingNodeAttribute
        /// </summary>
        [DataMember(Name = ("violatingNodeAttribute"), IsRequired = (false))]
        public string ViolatingNodeAttribute
        {
            get;
            set;
        }

        /// <summary>
        /// Request
        /// </summary>
        [DataMember(Name = ("request"), IsRequired = (false))]
        public CefSharp.DevTools.Audits.AffectedRequest Request
        {
            get;
            set;
        }
    }

    /// <summary>
    /// This issue tracks information needed to print a deprecation message.
    /// https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/frame/third_party/blink/renderer/core/frame/deprecation/README.md
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class DeprecationIssueDetails : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// AffectedFrame
        /// </summary>
        [DataMember(Name = ("affectedFrame"), IsRequired = (false))]
        public CefSharp.DevTools.Audits.AffectedFrame AffectedFrame
        {
            get;
            set;
        }

        /// <summary>
        /// SourceCodeLocation
        /// </summary>
        [DataMember(Name = ("sourceCodeLocation"), IsRequired = (true))]
        public CefSharp.DevTools.Audits.SourceCodeLocation SourceCodeLocation
        {
            get;
            set;
        }

        /// <summary>
        /// One of the deprecation names from third_party/blink/renderer/core/frame/deprecation/deprecation.json5
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (true))]
        public string Type
        {
            get;
            set;
        }
    }

    /// <summary>
    /// This issue warns about sites in the redirect chain of a finished navigation
    /// that may be flagged as trackers and have their state cleared if they don&apos;t
    /// receive a user interaction. Note that in this context &apos;site&apos; means eTLD+1.
    /// For example, if the URL `https://example.test:80/bounce` was in the
    /// redirect chain, the site reported would be `example.test`.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class BounceTrackingIssueDetails : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// TrackingSites
        /// </summary>
        [DataMember(Name = ("trackingSites"), IsRequired = (true))]
        public string[] TrackingSites
        {
            get;
            set;
        }
    }

    /// <summary>
    /// This issue warns about third-party sites that are accessing cookies on the
    /// current page, and have been permitted due to having a global metadata grant.
    /// Note that in this context &apos;site&apos; means eTLD+1. For example, if the URL
    /// `https://example.test:80/web_page` was accessing cookies, the site reported
    /// would be `example.test`.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CookieDeprecationMetadataIssueDetails : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// AllowedSites
        /// </summary>
        [DataMember(Name = ("allowedSites"), IsRequired = (true))]
        public string[] AllowedSites
        {
            get;
            set;
        }
    }

    /// <summary>
    /// ClientHintIssueReason
    /// </summary>
    public enum ClientHintIssueReason
    {
        /// <summary>
        /// MetaTagAllowListInvalidOrigin
        /// </summary>
        [EnumMember(Value = ("MetaTagAllowListInvalidOrigin"))]
        MetaTagAllowListInvalidOrigin,
        /// <summary>
        /// MetaTagModifiedHTML
        /// </summary>
        [EnumMember(Value = ("MetaTagModifiedHTML"))]
        MetaTagModifiedHTML
    }

    /// <summary>
    /// FederatedAuthRequestIssueDetails
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class FederatedAuthRequestIssueDetails : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// FederatedAuthRequestIssueReason
        /// </summary>
        public CefSharp.DevTools.Audits.FederatedAuthRequestIssueReason FederatedAuthRequestIssueReason
        {
            get
            {
                return (CefSharp.DevTools.Audits.FederatedAuthRequestIssueReason)(StringToEnum(typeof(CefSharp.DevTools.Audits.FederatedAuthRequestIssueReason), federatedAuthRequestIssueReason));
            }

            set
            {
                this.federatedAuthRequestIssueReason = (EnumToString(value));
            }
        }

        /// <summary>
        /// FederatedAuthRequestIssueReason
        /// </summary>
        [DataMember(Name = ("federatedAuthRequestIssueReason"), IsRequired = (true))]
        internal string federatedAuthRequestIssueReason
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Represents the failure reason when a federated authentication reason fails.
    /// Should be updated alongside RequestIdTokenStatus in
    /// third_party/blink/public/mojom/devtools/inspector_issue.mojom to include
    /// all cases except for success.
    /// </summary>
    public enum FederatedAuthRequestIssueReason
    {
        /// <summary>
        /// ShouldEmbargo
        /// </summary>
        [EnumMember(Value = ("ShouldEmbargo"))]
        ShouldEmbargo,
        /// <summary>
        /// TooManyRequests
        /// </summary>
        [EnumMember(Value = ("TooManyRequests"))]
        TooManyRequests,
        /// <summary>
        /// WellKnownHttpNotFound
        /// </summary>
        [EnumMember(Value = ("WellKnownHttpNotFound"))]
        WellKnownHttpNotFound,
        /// <summary>
        /// WellKnownNoResponse
        /// </summary>
        [EnumMember(Value = ("WellKnownNoResponse"))]
        WellKnownNoResponse,
        /// <summary>
        /// WellKnownInvalidResponse
        /// </summary>
        [EnumMember(Value = ("WellKnownInvalidResponse"))]
        WellKnownInvalidResponse,
        /// <summary>
        /// WellKnownListEmpty
        /// </summary>
        [EnumMember(Value = ("WellKnownListEmpty"))]
        WellKnownListEmpty,
        /// <summary>
        /// WellKnownInvalidContentType
        /// </summary>
        [EnumMember(Value = ("WellKnownInvalidContentType"))]
        WellKnownInvalidContentType,
        /// <summary>
        /// ConfigNotInWellKnown
        /// </summary>
        [EnumMember(Value = ("ConfigNotInWellKnown"))]
        ConfigNotInWellKnown,
        /// <summary>
        /// WellKnownTooBig
        /// </summary>
        [EnumMember(Value = ("WellKnownTooBig"))]
        WellKnownTooBig,
        /// <summary>
        /// ConfigHttpNotFound
        /// </summary>
        [EnumMember(Value = ("ConfigHttpNotFound"))]
        ConfigHttpNotFound,
        /// <summary>
        /// ConfigNoResponse
        /// </summary>
        [EnumMember(Value = ("ConfigNoResponse"))]
        ConfigNoResponse,
        /// <summary>
        /// ConfigInvalidResponse
        /// </summary>
        [EnumMember(Value = ("ConfigInvalidResponse"))]
        ConfigInvalidResponse,
        /// <summary>
        /// ConfigInvalidContentType
        /// </summary>
        [EnumMember(Value = ("ConfigInvalidContentType"))]
        ConfigInvalidContentType,
        /// <summary>
        /// ClientMetadataHttpNotFound
        /// </summary>
        [EnumMember(Value = ("ClientMetadataHttpNotFound"))]
        ClientMetadataHttpNotFound,
        /// <summary>
        /// ClientMetadataNoResponse
        /// </summary>
        [EnumMember(Value = ("ClientMetadataNoResponse"))]
        ClientMetadataNoResponse,
        /// <summary>
        /// ClientMetadataInvalidResponse
        /// </summary>
        [EnumMember(Value = ("ClientMetadataInvalidResponse"))]
        ClientMetadataInvalidResponse,
        /// <summary>
        /// ClientMetadataInvalidContentType
        /// </summary>
        [EnumMember(Value = ("ClientMetadataInvalidContentType"))]
        ClientMetadataInvalidContentType,
        /// <summary>
        /// DisabledInSettings
        /// </summary>
        [EnumMember(Value = ("DisabledInSettings"))]
        DisabledInSettings,
        /// <summary>
        /// ErrorFetchingSignin
        /// </summary>
        [EnumMember(Value = ("ErrorFetchingSignin"))]
        ErrorFetchingSignin,
        /// <summary>
        /// InvalidSigninResponse
        /// </summary>
        [EnumMember(Value = ("InvalidSigninResponse"))]
        InvalidSigninResponse,
        /// <summary>
        /// AccountsHttpNotFound
        /// </summary>
        [EnumMember(Value = ("AccountsHttpNotFound"))]
        AccountsHttpNotFound,
        /// <summary>
        /// AccountsNoResponse
        /// </summary>
        [EnumMember(Value = ("AccountsNoResponse"))]
        AccountsNoResponse,
        /// <summary>
        /// AccountsInvalidResponse
        /// </summary>
        [EnumMember(Value = ("AccountsInvalidResponse"))]
        AccountsInvalidResponse,
        /// <summary>
        /// AccountsListEmpty
        /// </summary>
        [EnumMember(Value = ("AccountsListEmpty"))]
        AccountsListEmpty,
        /// <summary>
        /// AccountsInvalidContentType
        /// </summary>
        [EnumMember(Value = ("AccountsInvalidContentType"))]
        AccountsInvalidContentType,
        /// <summary>
        /// IdTokenHttpNotFound
        /// </summary>
        [EnumMember(Value = ("IdTokenHttpNotFound"))]
        IdTokenHttpNotFound,
        /// <summary>
        /// IdTokenNoResponse
        /// </summary>
        [EnumMember(Value = ("IdTokenNoResponse"))]
        IdTokenNoResponse,
        /// <summary>
        /// IdTokenInvalidResponse
        /// </summary>
        [EnumMember(Value = ("IdTokenInvalidResponse"))]
        IdTokenInvalidResponse,
        /// <summary>
        /// IdTokenIdpErrorResponse
        /// </summary>
        [EnumMember(Value = ("IdTokenIdpErrorResponse"))]
        IdTokenIdpErrorResponse,
        /// <summary>
        /// IdTokenCrossSiteIdpErrorResponse
        /// </summary>
        [EnumMember(Value = ("IdTokenCrossSiteIdpErrorResponse"))]
        IdTokenCrossSiteIdpErrorResponse,
        /// <summary>
        /// IdTokenInvalidRequest
        /// </summary>
        [EnumMember(Value = ("IdTokenInvalidRequest"))]
        IdTokenInvalidRequest,
        /// <summary>
        /// IdTokenInvalidContentType
        /// </summary>
        [EnumMember(Value = ("IdTokenInvalidContentType"))]
        IdTokenInvalidContentType,
        /// <summary>
        /// ErrorIdToken
        /// </summary>
        [EnumMember(Value = ("ErrorIdToken"))]
        ErrorIdToken,
        /// <summary>
        /// Canceled
        /// </summary>
        [EnumMember(Value = ("Canceled"))]
        Canceled,
        /// <summary>
        /// RpPageNotVisible
        /// </summary>
        [EnumMember(Value = ("RpPageNotVisible"))]
        RpPageNotVisible,
        /// <summary>
        /// SilentMediationFailure
        /// </summary>
        [EnumMember(Value = ("SilentMediationFailure"))]
        SilentMediationFailure,
        /// <summary>
        /// ThirdPartyCookiesBlocked
        /// </summary>
        [EnumMember(Value = ("ThirdPartyCookiesBlocked"))]
        ThirdPartyCookiesBlocked,
        /// <summary>
        /// NotSignedInWithIdp
        /// </summary>
        [EnumMember(Value = ("NotSignedInWithIdp"))]
        NotSignedInWithIdp
    }

    /// <summary>
    /// FederatedAuthUserInfoRequestIssueDetails
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class FederatedAuthUserInfoRequestIssueDetails : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// FederatedAuthUserInfoRequestIssueReason
        /// </summary>
        public CefSharp.DevTools.Audits.FederatedAuthUserInfoRequestIssueReason FederatedAuthUserInfoRequestIssueReason
        {
            get
            {
                return (CefSharp.DevTools.Audits.FederatedAuthUserInfoRequestIssueReason)(StringToEnum(typeof(CefSharp.DevTools.Audits.FederatedAuthUserInfoRequestIssueReason), federatedAuthUserInfoRequestIssueReason));
            }

            set
            {
                this.federatedAuthUserInfoRequestIssueReason = (EnumToString(value));
            }
        }

        /// <summary>
        /// FederatedAuthUserInfoRequestIssueReason
        /// </summary>
        [DataMember(Name = ("federatedAuthUserInfoRequestIssueReason"), IsRequired = (true))]
        internal string federatedAuthUserInfoRequestIssueReason
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Represents the failure reason when a getUserInfo() call fails.
    /// Should be updated alongside FederatedAuthUserInfoRequestResult in
    /// third_party/blink/public/mojom/devtools/inspector_issue.mojom.
    /// </summary>
    public enum FederatedAuthUserInfoRequestIssueReason
    {
        /// <summary>
        /// NotSameOrigin
        /// </summary>
        [EnumMember(Value = ("NotSameOrigin"))]
        NotSameOrigin,
        /// <summary>
        /// NotIframe
        /// </summary>
        [EnumMember(Value = ("NotIframe"))]
        NotIframe,
        /// <summary>
        /// NotPotentiallyTrustworthy
        /// </summary>
        [EnumMember(Value = ("NotPotentiallyTrustworthy"))]
        NotPotentiallyTrustworthy,
        /// <summary>
        /// NoApiPermission
        /// </summary>
        [EnumMember(Value = ("NoApiPermission"))]
        NoApiPermission,
        /// <summary>
        /// NotSignedInWithIdp
        /// </summary>
        [EnumMember(Value = ("NotSignedInWithIdp"))]
        NotSignedInWithIdp,
        /// <summary>
        /// NoAccountSharingPermission
        /// </summary>
        [EnumMember(Value = ("NoAccountSharingPermission"))]
        NoAccountSharingPermission,
        /// <summary>
        /// InvalidConfigOrWellKnown
        /// </summary>
        [EnumMember(Value = ("InvalidConfigOrWellKnown"))]
        InvalidConfigOrWellKnown,
        /// <summary>
        /// InvalidAccountsResponse
        /// </summary>
        [EnumMember(Value = ("InvalidAccountsResponse"))]
        InvalidAccountsResponse,
        /// <summary>
        /// NoReturningUserFromFetchedAccounts
        /// </summary>
        [EnumMember(Value = ("NoReturningUserFromFetchedAccounts"))]
        NoReturningUserFromFetchedAccounts
    }

    /// <summary>
    /// This issue tracks client hints related issues. It&apos;s used to deprecate old
    /// features, encourage the use of new ones, and provide general guidance.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ClientHintIssueDetails : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// SourceCodeLocation
        /// </summary>
        [DataMember(Name = ("sourceCodeLocation"), IsRequired = (true))]
        public CefSharp.DevTools.Audits.SourceCodeLocation SourceCodeLocation
        {
            get;
            set;
        }

        /// <summary>
        /// ClientHintIssueReason
        /// </summary>
        public CefSharp.DevTools.Audits.ClientHintIssueReason ClientHintIssueReason
        {
            get
            {
                return (CefSharp.DevTools.Audits.ClientHintIssueReason)(StringToEnum(typeof(CefSharp.DevTools.Audits.ClientHintIssueReason), clientHintIssueReason));
            }

            set
            {
                this.clientHintIssueReason = (EnumToString(value));
            }
        }

        /// <summary>
        /// ClientHintIssueReason
        /// </summary>
        [DataMember(Name = ("clientHintIssueReason"), IsRequired = (true))]
        internal string clientHintIssueReason
        {
            get;
            set;
        }
    }

    /// <summary>
    /// FailedRequestInfo
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class FailedRequestInfo : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The URL that failed to load.
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (true))]
        public string Url
        {
            get;
            set;
        }

        /// <summary>
        /// The failure message for the failed request.
        /// </summary>
        [DataMember(Name = ("failureMessage"), IsRequired = (true))]
        public string FailureMessage
        {
            get;
            set;
        }

        /// <summary>
        /// RequestId
        /// </summary>
        [DataMember(Name = ("requestId"), IsRequired = (false))]
        public string RequestId
        {
            get;
            set;
        }
    }

    /// <summary>
    /// StyleSheetLoadingIssueReason
    /// </summary>
    public enum StyleSheetLoadingIssueReason
    {
        /// <summary>
        /// LateImportRule
        /// </summary>
        [EnumMember(Value = ("LateImportRule"))]
        LateImportRule,
        /// <summary>
        /// RequestFailed
        /// </summary>
        [EnumMember(Value = ("RequestFailed"))]
        RequestFailed
    }

    /// <summary>
    /// This issue warns when a referenced stylesheet couldn&apos;t be loaded.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class StylesheetLoadingIssueDetails : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Source code position that referenced the failing stylesheet.
        /// </summary>
        [DataMember(Name = ("sourceCodeLocation"), IsRequired = (true))]
        public CefSharp.DevTools.Audits.SourceCodeLocation SourceCodeLocation
        {
            get;
            set;
        }

        /// <summary>
        /// Reason why the stylesheet couldn&apos;t be loaded.
        /// </summary>
        public CefSharp.DevTools.Audits.StyleSheetLoadingIssueReason StyleSheetLoadingIssueReason
        {
            get
            {
                return (CefSharp.DevTools.Audits.StyleSheetLoadingIssueReason)(StringToEnum(typeof(CefSharp.DevTools.Audits.StyleSheetLoadingIssueReason), styleSheetLoadingIssueReason));
            }

            set
            {
                this.styleSheetLoadingIssueReason = (EnumToString(value));
            }
        }

        /// <summary>
        /// Reason why the stylesheet couldn&apos;t be loaded.
        /// </summary>
        [DataMember(Name = ("styleSheetLoadingIssueReason"), IsRequired = (true))]
        internal string styleSheetLoadingIssueReason
        {
            get;
            set;
        }

        /// <summary>
        /// Contains additional info when the failure was due to a request.
        /// </summary>
        [DataMember(Name = ("failedRequestInfo"), IsRequired = (false))]
        public CefSharp.DevTools.Audits.FailedRequestInfo FailedRequestInfo
        {
            get;
            set;
        }
    }

    /// <summary>
    /// PropertyRuleIssueReason
    /// </summary>
    public enum PropertyRuleIssueReason
    {
        /// <summary>
        /// InvalidSyntax
        /// </summary>
        [EnumMember(Value = ("InvalidSyntax"))]
        InvalidSyntax,
        /// <summary>
        /// InvalidInitialValue
        /// </summary>
        [EnumMember(Value = ("InvalidInitialValue"))]
        InvalidInitialValue,
        /// <summary>
        /// InvalidInherits
        /// </summary>
        [EnumMember(Value = ("InvalidInherits"))]
        InvalidInherits,
        /// <summary>
        /// InvalidName
        /// </summary>
        [EnumMember(Value = ("InvalidName"))]
        InvalidName
    }

    /// <summary>
    /// This issue warns about errors in property rules that lead to property
    /// registrations being ignored.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class PropertyRuleIssueDetails : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Source code position of the property rule.
        /// </summary>
        [DataMember(Name = ("sourceCodeLocation"), IsRequired = (true))]
        public CefSharp.DevTools.Audits.SourceCodeLocation SourceCodeLocation
        {
            get;
            set;
        }

        /// <summary>
        /// Reason why the property rule was discarded.
        /// </summary>
        public CefSharp.DevTools.Audits.PropertyRuleIssueReason PropertyRuleIssueReason
        {
            get
            {
                return (CefSharp.DevTools.Audits.PropertyRuleIssueReason)(StringToEnum(typeof(CefSharp.DevTools.Audits.PropertyRuleIssueReason), propertyRuleIssueReason));
            }

            set
            {
                this.propertyRuleIssueReason = (EnumToString(value));
            }
        }

        /// <summary>
        /// Reason why the property rule was discarded.
        /// </summary>
        [DataMember(Name = ("propertyRuleIssueReason"), IsRequired = (true))]
        internal string propertyRuleIssueReason
        {
            get;
            set;
        }

        /// <summary>
        /// The value of the property rule property that failed to parse
        /// </summary>
        [DataMember(Name = ("propertyValue"), IsRequired = (false))]
        public string PropertyValue
        {
            get;
            set;
        }
    }

    /// <summary>
    /// A unique identifier for the type of issue. Each type may use one of the
    /// optional fields in InspectorIssueDetails to convey more specific
    /// information about the kind of issue.
    /// </summary>
    public enum InspectorIssueCode
    {
        /// <summary>
        /// CookieIssue
        /// </summary>
        [EnumMember(Value = ("CookieIssue"))]
        CookieIssue,
        /// <summary>
        /// MixedContentIssue
        /// </summary>
        [EnumMember(Value = ("MixedContentIssue"))]
        MixedContentIssue,
        /// <summary>
        /// BlockedByResponseIssue
        /// </summary>
        [EnumMember(Value = ("BlockedByResponseIssue"))]
        BlockedByResponseIssue,
        /// <summary>
        /// HeavyAdIssue
        /// </summary>
        [EnumMember(Value = ("HeavyAdIssue"))]
        HeavyAdIssue,
        /// <summary>
        /// ContentSecurityPolicyIssue
        /// </summary>
        [EnumMember(Value = ("ContentSecurityPolicyIssue"))]
        ContentSecurityPolicyIssue,
        /// <summary>
        /// SharedArrayBufferIssue
        /// </summary>
        [EnumMember(Value = ("SharedArrayBufferIssue"))]
        SharedArrayBufferIssue,
        /// <summary>
        /// LowTextContrastIssue
        /// </summary>
        [EnumMember(Value = ("LowTextContrastIssue"))]
        LowTextContrastIssue,
        /// <summary>
        /// CorsIssue
        /// </summary>
        [EnumMember(Value = ("CorsIssue"))]
        CorsIssue,
        /// <summary>
        /// AttributionReportingIssue
        /// </summary>
        [EnumMember(Value = ("AttributionReportingIssue"))]
        AttributionReportingIssue,
        /// <summary>
        /// QuirksModeIssue
        /// </summary>
        [EnumMember(Value = ("QuirksModeIssue"))]
        QuirksModeIssue,
        /// <summary>
        /// NavigatorUserAgentIssue
        /// </summary>
        [EnumMember(Value = ("NavigatorUserAgentIssue"))]
        NavigatorUserAgentIssue,
        /// <summary>
        /// GenericIssue
        /// </summary>
        [EnumMember(Value = ("GenericIssue"))]
        GenericIssue,
        /// <summary>
        /// DeprecationIssue
        /// </summary>
        [EnumMember(Value = ("DeprecationIssue"))]
        DeprecationIssue,
        /// <summary>
        /// ClientHintIssue
        /// </summary>
        [EnumMember(Value = ("ClientHintIssue"))]
        ClientHintIssue,
        /// <summary>
        /// FederatedAuthRequestIssue
        /// </summary>
        [EnumMember(Value = ("FederatedAuthRequestIssue"))]
        FederatedAuthRequestIssue,
        /// <summary>
        /// BounceTrackingIssue
        /// </summary>
        [EnumMember(Value = ("BounceTrackingIssue"))]
        BounceTrackingIssue,
        /// <summary>
        /// CookieDeprecationMetadataIssue
        /// </summary>
        [EnumMember(Value = ("CookieDeprecationMetadataIssue"))]
        CookieDeprecationMetadataIssue,
        /// <summary>
        /// StylesheetLoadingIssue
        /// </summary>
        [EnumMember(Value = ("StylesheetLoadingIssue"))]
        StylesheetLoadingIssue,
        /// <summary>
        /// FederatedAuthUserInfoRequestIssue
        /// </summary>
        [EnumMember(Value = ("FederatedAuthUserInfoRequestIssue"))]
        FederatedAuthUserInfoRequestIssue,
        /// <summary>
        /// PropertyRuleIssue
        /// </summary>
        [EnumMember(Value = ("PropertyRuleIssue"))]
        PropertyRuleIssue
    }

    /// <summary>
    /// This struct holds a list of optional fields with additional information
    /// specific to the kind of issue. When adding a new issue code, please also
    /// add a new optional field to this type.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class InspectorIssueDetails : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// CookieIssueDetails
        /// </summary>
        [DataMember(Name = ("cookieIssueDetails"), IsRequired = (false))]
        public CefSharp.DevTools.Audits.CookieIssueDetails CookieIssueDetails
        {
            get;
            set;
        }

        /// <summary>
        /// MixedContentIssueDetails
        /// </summary>
        [DataMember(Name = ("mixedContentIssueDetails"), IsRequired = (false))]
        public CefSharp.DevTools.Audits.MixedContentIssueDetails MixedContentIssueDetails
        {
            get;
            set;
        }

        /// <summary>
        /// BlockedByResponseIssueDetails
        /// </summary>
        [DataMember(Name = ("blockedByResponseIssueDetails"), IsRequired = (false))]
        public CefSharp.DevTools.Audits.BlockedByResponseIssueDetails BlockedByResponseIssueDetails
        {
            get;
            set;
        }

        /// <summary>
        /// HeavyAdIssueDetails
        /// </summary>
        [DataMember(Name = ("heavyAdIssueDetails"), IsRequired = (false))]
        public CefSharp.DevTools.Audits.HeavyAdIssueDetails HeavyAdIssueDetails
        {
            get;
            set;
        }

        /// <summary>
        /// ContentSecurityPolicyIssueDetails
        /// </summary>
        [DataMember(Name = ("contentSecurityPolicyIssueDetails"), IsRequired = (false))]
        public CefSharp.DevTools.Audits.ContentSecurityPolicyIssueDetails ContentSecurityPolicyIssueDetails
        {
            get;
            set;
        }

        /// <summary>
        /// SharedArrayBufferIssueDetails
        /// </summary>
        [DataMember(Name = ("sharedArrayBufferIssueDetails"), IsRequired = (false))]
        public CefSharp.DevTools.Audits.SharedArrayBufferIssueDetails SharedArrayBufferIssueDetails
        {
            get;
            set;
        }

        /// <summary>
        /// LowTextContrastIssueDetails
        /// </summary>
        [DataMember(Name = ("lowTextContrastIssueDetails"), IsRequired = (false))]
        public CefSharp.DevTools.Audits.LowTextContrastIssueDetails LowTextContrastIssueDetails
        {
            get;
            set;
        }

        /// <summary>
        /// CorsIssueDetails
        /// </summary>
        [DataMember(Name = ("corsIssueDetails"), IsRequired = (false))]
        public CefSharp.DevTools.Audits.CorsIssueDetails CorsIssueDetails
        {
            get;
            set;
        }

        /// <summary>
        /// AttributionReportingIssueDetails
        /// </summary>
        [DataMember(Name = ("attributionReportingIssueDetails"), IsRequired = (false))]
        public CefSharp.DevTools.Audits.AttributionReportingIssueDetails AttributionReportingIssueDetails
        {
            get;
            set;
        }

        /// <summary>
        /// QuirksModeIssueDetails
        /// </summary>
        [DataMember(Name = ("quirksModeIssueDetails"), IsRequired = (false))]
        public CefSharp.DevTools.Audits.QuirksModeIssueDetails QuirksModeIssueDetails
        {
            get;
            set;
        }

        /// <summary>
        /// NavigatorUserAgentIssueDetails
        /// </summary>
        [DataMember(Name = ("navigatorUserAgentIssueDetails"), IsRequired = (false))]
        public CefSharp.DevTools.Audits.NavigatorUserAgentIssueDetails NavigatorUserAgentIssueDetails
        {
            get;
            set;
        }

        /// <summary>
        /// GenericIssueDetails
        /// </summary>
        [DataMember(Name = ("genericIssueDetails"), IsRequired = (false))]
        public CefSharp.DevTools.Audits.GenericIssueDetails GenericIssueDetails
        {
            get;
            set;
        }

        /// <summary>
        /// DeprecationIssueDetails
        /// </summary>
        [DataMember(Name = ("deprecationIssueDetails"), IsRequired = (false))]
        public CefSharp.DevTools.Audits.DeprecationIssueDetails DeprecationIssueDetails
        {
            get;
            set;
        }

        /// <summary>
        /// ClientHintIssueDetails
        /// </summary>
        [DataMember(Name = ("clientHintIssueDetails"), IsRequired = (false))]
        public CefSharp.DevTools.Audits.ClientHintIssueDetails ClientHintIssueDetails
        {
            get;
            set;
        }

        /// <summary>
        /// FederatedAuthRequestIssueDetails
        /// </summary>
        [DataMember(Name = ("federatedAuthRequestIssueDetails"), IsRequired = (false))]
        public CefSharp.DevTools.Audits.FederatedAuthRequestIssueDetails FederatedAuthRequestIssueDetails
        {
            get;
            set;
        }

        /// <summary>
        /// BounceTrackingIssueDetails
        /// </summary>
        [DataMember(Name = ("bounceTrackingIssueDetails"), IsRequired = (false))]
        public CefSharp.DevTools.Audits.BounceTrackingIssueDetails BounceTrackingIssueDetails
        {
            get;
            set;
        }

        /// <summary>
        /// CookieDeprecationMetadataIssueDetails
        /// </summary>
        [DataMember(Name = ("cookieDeprecationMetadataIssueDetails"), IsRequired = (false))]
        public CefSharp.DevTools.Audits.CookieDeprecationMetadataIssueDetails CookieDeprecationMetadataIssueDetails
        {
            get;
            set;
        }

        /// <summary>
        /// StylesheetLoadingIssueDetails
        /// </summary>
        [DataMember(Name = ("stylesheetLoadingIssueDetails"), IsRequired = (false))]
        public CefSharp.DevTools.Audits.StylesheetLoadingIssueDetails StylesheetLoadingIssueDetails
        {
            get;
            set;
        }

        /// <summary>
        /// PropertyRuleIssueDetails
        /// </summary>
        [DataMember(Name = ("propertyRuleIssueDetails"), IsRequired = (false))]
        public CefSharp.DevTools.Audits.PropertyRuleIssueDetails PropertyRuleIssueDetails
        {
            get;
            set;
        }

        /// <summary>
        /// FederatedAuthUserInfoRequestIssueDetails
        /// </summary>
        [DataMember(Name = ("federatedAuthUserInfoRequestIssueDetails"), IsRequired = (false))]
        public CefSharp.DevTools.Audits.FederatedAuthUserInfoRequestIssueDetails FederatedAuthUserInfoRequestIssueDetails
        {
            get;
            set;
        }
    }

    /// <summary>
    /// An inspector issue reported from the back-end.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class InspectorIssue : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Code
        /// </summary>
        public CefSharp.DevTools.Audits.InspectorIssueCode Code
        {
            get
            {
                return (CefSharp.DevTools.Audits.InspectorIssueCode)(StringToEnum(typeof(CefSharp.DevTools.Audits.InspectorIssueCode), code));
            }

            set
            {
                this.code = (EnumToString(value));
            }
        }

        /// <summary>
        /// Code
        /// </summary>
        [DataMember(Name = ("code"), IsRequired = (true))]
        internal string code
        {
            get;
            set;
        }

        /// <summary>
        /// Details
        /// </summary>
        [DataMember(Name = ("details"), IsRequired = (true))]
        public CefSharp.DevTools.Audits.InspectorIssueDetails Details
        {
            get;
            set;
        }

        /// <summary>
        /// A unique id for this issue. May be omitted if no other entity (e.g.
        /// exception, CDP message, etc.) is referencing this issue.
        /// </summary>
        [DataMember(Name = ("issueId"), IsRequired = (false))]
        public string IssueId
        {
            get;
            set;
        }
    }

    /// <summary>
    /// issueAdded
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class IssueAddedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Issue
        /// </summary>
        [DataMember(Name = ("issue"), IsRequired = (true))]
        public CefSharp.DevTools.Audits.InspectorIssue Issue
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.Autofill
{
    /// <summary>
    /// CreditCard
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CreditCard : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// 16-digit credit card number.
        /// </summary>
        [DataMember(Name = ("number"), IsRequired = (true))]
        public string Number
        {
            get;
            set;
        }

        /// <summary>
        /// Name of the credit card owner.
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// 2-digit expiry month.
        /// </summary>
        [DataMember(Name = ("expiryMonth"), IsRequired = (true))]
        public string ExpiryMonth
        {
            get;
            set;
        }

        /// <summary>
        /// 4-digit expiry year.
        /// </summary>
        [DataMember(Name = ("expiryYear"), IsRequired = (true))]
        public string ExpiryYear
        {
            get;
            set;
        }

        /// <summary>
        /// 3-digit card verification code.
        /// </summary>
        [DataMember(Name = ("cvc"), IsRequired = (true))]
        public string Cvc
        {
            get;
            set;
        }
    }

    /// <summary>
    /// AddressField
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AddressField : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// address field name, for example GIVEN_NAME.
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// address field value, for example Jon Doe.
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (true))]
        public string Value
        {
            get;
            set;
        }
    }

    /// <summary>
    /// A list of address fields.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AddressFields : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Fields
        /// </summary>
        [DataMember(Name = ("fields"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Autofill.AddressField> Fields
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Address
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class Address : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// fields and values defining an address.
        /// </summary>
        [DataMember(Name = ("fields"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Autofill.AddressField> Fields
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Defines how an address can be displayed like in chrome://settings/addresses.
    /// Address UI is a two dimensional array, each inner array is an &quot;address information line&quot;, and when rendered in a UI surface should be displayed as such.
    /// The following address UI for instance:
    /// [[{name: &quot;GIVE_NAME&quot;, value: &quot;Jon&quot;}, {name: &quot;FAMILY_NAME&quot;, value: &quot;Doe&quot;}], [{name: &quot;CITY&quot;, value: &quot;Munich&quot;}, {name: &quot;ZIP&quot;, value: &quot;81456&quot;}]]
    /// should allow the receiver to render:
    /// Jon Doe
    /// Munich 81456
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AddressUI : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// A two dimension array containing the representation of values from an address profile.
        /// </summary>
        [DataMember(Name = ("addressFields"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Autofill.AddressFields> AddressFields
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Specified whether a filled field was done so by using the html autocomplete attribute or autofill heuristics.
    /// </summary>
    public enum FillingStrategy
    {
        /// <summary>
        /// autocompleteAttribute
        /// </summary>
        [EnumMember(Value = ("autocompleteAttribute"))]
        AutocompleteAttribute,
        /// <summary>
        /// autofillInferred
        /// </summary>
        [EnumMember(Value = ("autofillInferred"))]
        AutofillInferred
    }

    /// <summary>
    /// FilledField
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class FilledField : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The type of the field, e.g text, password etc.
        /// </summary>
        [DataMember(Name = ("htmlType"), IsRequired = (true))]
        public string HtmlType
        {
            get;
            set;
        }

        /// <summary>
        /// the html id
        /// </summary>
        [DataMember(Name = ("id"), IsRequired = (true))]
        public string Id
        {
            get;
            set;
        }

        /// <summary>
        /// the html name
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// the field value
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (true))]
        public string Value
        {
            get;
            set;
        }

        /// <summary>
        /// The actual field type, e.g FAMILY_NAME
        /// </summary>
        [DataMember(Name = ("autofillType"), IsRequired = (true))]
        public string AutofillType
        {
            get;
            set;
        }

        /// <summary>
        /// The filling strategy
        /// </summary>
        public CefSharp.DevTools.Autofill.FillingStrategy FillingStrategy
        {
            get
            {
                return (CefSharp.DevTools.Autofill.FillingStrategy)(StringToEnum(typeof(CefSharp.DevTools.Autofill.FillingStrategy), fillingStrategy));
            }

            set
            {
                this.fillingStrategy = (EnumToString(value));
            }
        }

        /// <summary>
        /// The filling strategy
        /// </summary>
        [DataMember(Name = ("fillingStrategy"), IsRequired = (true))]
        internal string fillingStrategy
        {
            get;
            set;
        }

        /// <summary>
        /// The frame the field belongs to
        /// </summary>
        [DataMember(Name = ("frameId"), IsRequired = (true))]
        public string FrameId
        {
            get;
            set;
        }

        /// <summary>
        /// The form field&apos;s DOM node
        /// </summary>
        [DataMember(Name = ("fieldId"), IsRequired = (true))]
        public int FieldId
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Emitted when an address form is filled.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class AddressFormFilledEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Information about the fields that were filled
        /// </summary>
        [DataMember(Name = ("filledFields"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Autofill.FilledField> FilledFields
        {
            get;
            private set;
        }

        /// <summary>
        /// An UI representation of the address used to fill the form.
        /// Consists of a 2D array where each child represents an address/profile line.
        /// </summary>
        [DataMember(Name = ("addressUi"), IsRequired = (true))]
        public CefSharp.DevTools.Autofill.AddressUI AddressUi
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.BackgroundService
{
    /// <summary>
    /// The Background Service that will be associated with the commands/events.
    /// Every Background Service operates independently, but they share the same
    /// API.
    /// </summary>
    public enum ServiceName
    {
        /// <summary>
        /// backgroundFetch
        /// </summary>
        [EnumMember(Value = ("backgroundFetch"))]
        BackgroundFetch,
        /// <summary>
        /// backgroundSync
        /// </summary>
        [EnumMember(Value = ("backgroundSync"))]
        BackgroundSync,
        /// <summary>
        /// pushMessaging
        /// </summary>
        [EnumMember(Value = ("pushMessaging"))]
        PushMessaging,
        /// <summary>
        /// notifications
        /// </summary>
        [EnumMember(Value = ("notifications"))]
        Notifications,
        /// <summary>
        /// paymentHandler
        /// </summary>
        [EnumMember(Value = ("paymentHandler"))]
        PaymentHandler,
        /// <summary>
        /// periodicBackgroundSync
        /// </summary>
        [EnumMember(Value = ("periodicBackgroundSync"))]
        PeriodicBackgroundSync
    }

    /// <summary>
    /// A key-value pair for additional event information to pass along.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class EventMetadata : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Key
        /// </summary>
        [DataMember(Name = ("key"), IsRequired = (true))]
        public string Key
        {
            get;
            set;
        }

        /// <summary>
        /// Value
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (true))]
        public string Value
        {
            get;
            set;
        }
    }

    /// <summary>
    /// BackgroundServiceEvent
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class BackgroundServiceEvent : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Timestamp of the event (in seconds).
        /// </summary>
        [DataMember(Name = ("timestamp"), IsRequired = (true))]
        public double Timestamp
        {
            get;
            set;
        }

        /// <summary>
        /// The origin this event belongs to.
        /// </summary>
        [DataMember(Name = ("origin"), IsRequired = (true))]
        public string Origin
        {
            get;
            set;
        }

        /// <summary>
        /// The Service Worker ID that initiated the event.
        /// </summary>
        [DataMember(Name = ("serviceWorkerRegistrationId"), IsRequired = (true))]
        public string ServiceWorkerRegistrationId
        {
            get;
            set;
        }

        /// <summary>
        /// The Background Service this event belongs to.
        /// </summary>
        public CefSharp.DevTools.BackgroundService.ServiceName Service
        {
            get
            {
                return (CefSharp.DevTools.BackgroundService.ServiceName)(StringToEnum(typeof(CefSharp.DevTools.BackgroundService.ServiceName), service));
            }

            set
            {
                this.service = (EnumToString(value));
            }
        }

        /// <summary>
        /// The Background Service this event belongs to.
        /// </summary>
        [DataMember(Name = ("service"), IsRequired = (true))]
        internal string service
        {
            get;
            set;
        }

        /// <summary>
        /// A description of the event.
        /// </summary>
        [DataMember(Name = ("eventName"), IsRequired = (true))]
        public string EventName
        {
            get;
            set;
        }

        /// <summary>
        /// An identifier that groups related events together.
        /// </summary>
        [DataMember(Name = ("instanceId"), IsRequired = (true))]
        public string InstanceId
        {
            get;
            set;
        }

        /// <summary>
        /// A list of event-specific information.
        /// </summary>
        [DataMember(Name = ("eventMetadata"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.BackgroundService.EventMetadata> EventMetadata
        {
            get;
            set;
        }

        /// <summary>
        /// Storage key this event belongs to.
        /// </summary>
        [DataMember(Name = ("storageKey"), IsRequired = (true))]
        public string StorageKey
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Called when the recording state for the service has been updated.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class RecordingStateChangedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// IsRecording
        /// </summary>
        [DataMember(Name = ("isRecording"), IsRequired = (true))]
        public bool IsRecording
        {
            get;
            private set;
        }

        /// <summary>
        /// Service
        /// </summary>
        public CefSharp.DevTools.BackgroundService.ServiceName Service
        {
            get
            {
                return (CefSharp.DevTools.BackgroundService.ServiceName)(StringToEnum(typeof(CefSharp.DevTools.BackgroundService.ServiceName), service));
            }

            set
            {
                this.service = (EnumToString(value));
            }
        }

        /// <summary>
        /// Service
        /// </summary>
        [DataMember(Name = ("service"), IsRequired = (true))]
        internal string service
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Called with all existing backgroundServiceEvents when enabled, and all new
    /// events afterwards if enabled and recording.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class BackgroundServiceEventReceivedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// BackgroundServiceEvent
        /// </summary>
        [DataMember(Name = ("backgroundServiceEvent"), IsRequired = (true))]
        public CefSharp.DevTools.BackgroundService.BackgroundServiceEvent BackgroundServiceEvent
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.Browser
{
    /// <summary>
    /// The state of the browser window.
    /// </summary>
    public enum WindowState
    {
        /// <summary>
        /// normal
        /// </summary>
        [EnumMember(Value = ("normal"))]
        Normal,
        /// <summary>
        /// minimized
        /// </summary>
        [EnumMember(Value = ("minimized"))]
        Minimized,
        /// <summary>
        /// maximized
        /// </summary>
        [EnumMember(Value = ("maximized"))]
        Maximized,
        /// <summary>
        /// fullscreen
        /// </summary>
        [EnumMember(Value = ("fullscreen"))]
        Fullscreen
    }

    /// <summary>
    /// Browser window bounds information
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class Bounds : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The offset from the left edge of the screen to the window in pixels.
        /// </summary>
        [DataMember(Name = ("left"), IsRequired = (false))]
        public int? Left
        {
            get;
            set;
        }

        /// <summary>
        /// The offset from the top edge of the screen to the window in pixels.
        /// </summary>
        [DataMember(Name = ("top"), IsRequired = (false))]
        public int? Top
        {
            get;
            set;
        }

        /// <summary>
        /// The window width in pixels.
        /// </summary>
        [DataMember(Name = ("width"), IsRequired = (false))]
        public int? Width
        {
            get;
            set;
        }

        /// <summary>
        /// The window height in pixels.
        /// </summary>
        [DataMember(Name = ("height"), IsRequired = (false))]
        public int? Height
        {
            get;
            set;
        }

        /// <summary>
        /// The window state. Default to normal.
        /// </summary>
        public CefSharp.DevTools.Browser.WindowState? WindowState
        {
            get
            {
                return (CefSharp.DevTools.Browser.WindowState? )(StringToEnum(typeof(CefSharp.DevTools.Browser.WindowState? ), windowState));
            }

            set
            {
                this.windowState = (EnumToString(value));
            }
        }

        /// <summary>
        /// The window state. Default to normal.
        /// </summary>
        [DataMember(Name = ("windowState"), IsRequired = (false))]
        internal string windowState
        {
            get;
            set;
        }
    }

    /// <summary>
    /// PermissionType
    /// </summary>
    public enum PermissionType
    {
        /// <summary>
        /// accessibilityEvents
        /// </summary>
        [EnumMember(Value = ("accessibilityEvents"))]
        AccessibilityEvents,
        /// <summary>
        /// audioCapture
        /// </summary>
        [EnumMember(Value = ("audioCapture"))]
        AudioCapture,
        /// <summary>
        /// backgroundSync
        /// </summary>
        [EnumMember(Value = ("backgroundSync"))]
        BackgroundSync,
        /// <summary>
        /// backgroundFetch
        /// </summary>
        [EnumMember(Value = ("backgroundFetch"))]
        BackgroundFetch,
        /// <summary>
        /// capturedSurfaceControl
        /// </summary>
        [EnumMember(Value = ("capturedSurfaceControl"))]
        CapturedSurfaceControl,
        /// <summary>
        /// clipboardReadWrite
        /// </summary>
        [EnumMember(Value = ("clipboardReadWrite"))]
        ClipboardReadWrite,
        /// <summary>
        /// clipboardSanitizedWrite
        /// </summary>
        [EnumMember(Value = ("clipboardSanitizedWrite"))]
        ClipboardSanitizedWrite,
        /// <summary>
        /// displayCapture
        /// </summary>
        [EnumMember(Value = ("displayCapture"))]
        DisplayCapture,
        /// <summary>
        /// durableStorage
        /// </summary>
        [EnumMember(Value = ("durableStorage"))]
        DurableStorage,
        /// <summary>
        /// flash
        /// </summary>
        [EnumMember(Value = ("flash"))]
        Flash,
        /// <summary>
        /// geolocation
        /// </summary>
        [EnumMember(Value = ("geolocation"))]
        Geolocation,
        /// <summary>
        /// idleDetection
        /// </summary>
        [EnumMember(Value = ("idleDetection"))]
        IdleDetection,
        /// <summary>
        /// localFonts
        /// </summary>
        [EnumMember(Value = ("localFonts"))]
        LocalFonts,
        /// <summary>
        /// midi
        /// </summary>
        [EnumMember(Value = ("midi"))]
        Midi,
        /// <summary>
        /// midiSysex
        /// </summary>
        [EnumMember(Value = ("midiSysex"))]
        MidiSysex,
        /// <summary>
        /// nfc
        /// </summary>
        [EnumMember(Value = ("nfc"))]
        Nfc,
        /// <summary>
        /// notifications
        /// </summary>
        [EnumMember(Value = ("notifications"))]
        Notifications,
        /// <summary>
        /// paymentHandler
        /// </summary>
        [EnumMember(Value = ("paymentHandler"))]
        PaymentHandler,
        /// <summary>
        /// periodicBackgroundSync
        /// </summary>
        [EnumMember(Value = ("periodicBackgroundSync"))]
        PeriodicBackgroundSync,
        /// <summary>
        /// protectedMediaIdentifier
        /// </summary>
        [EnumMember(Value = ("protectedMediaIdentifier"))]
        ProtectedMediaIdentifier,
        /// <summary>
        /// sensors
        /// </summary>
        [EnumMember(Value = ("sensors"))]
        Sensors,
        /// <summary>
        /// storageAccess
        /// </summary>
        [EnumMember(Value = ("storageAccess"))]
        StorageAccess,
        /// <summary>
        /// speakerSelection
        /// </summary>
        [EnumMember(Value = ("speakerSelection"))]
        SpeakerSelection,
        /// <summary>
        /// topLevelStorageAccess
        /// </summary>
        [EnumMember(Value = ("topLevelStorageAccess"))]
        TopLevelStorageAccess,
        /// <summary>
        /// videoCapture
        /// </summary>
        [EnumMember(Value = ("videoCapture"))]
        VideoCapture,
        /// <summary>
        /// videoCapturePanTiltZoom
        /// </summary>
        [EnumMember(Value = ("videoCapturePanTiltZoom"))]
        VideoCapturePanTiltZoom,
        /// <summary>
        /// wakeLockScreen
        /// </summary>
        [EnumMember(Value = ("wakeLockScreen"))]
        WakeLockScreen,
        /// <summary>
        /// wakeLockSystem
        /// </summary>
        [EnumMember(Value = ("wakeLockSystem"))]
        WakeLockSystem,
        /// <summary>
        /// windowManagement
        /// </summary>
        [EnumMember(Value = ("windowManagement"))]
        WindowManagement
    }

    /// <summary>
    /// PermissionSetting
    /// </summary>
    public enum PermissionSetting
    {
        /// <summary>
        /// granted
        /// </summary>
        [EnumMember(Value = ("granted"))]
        Granted,
        /// <summary>
        /// denied
        /// </summary>
        [EnumMember(Value = ("denied"))]
        Denied,
        /// <summary>
        /// prompt
        /// </summary>
        [EnumMember(Value = ("prompt"))]
        Prompt
    }

    /// <summary>
    /// Definition of PermissionDescriptor defined in the Permissions API:
    /// https://w3c.github.io/permissions/#dom-permissiondescriptor.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class PermissionDescriptor : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Name of permission.
        /// See https://cs.chromium.org/chromium/src/third_party/blink/renderer/modules/permissions/permission_descriptor.idl for valid permission names.
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// For &quot;midi&quot; permission, may also specify sysex control.
        /// </summary>
        [DataMember(Name = ("sysex"), IsRequired = (false))]
        public bool? Sysex
        {
            get;
            set;
        }

        /// <summary>
        /// For &quot;push&quot; permission, may specify userVisibleOnly.
        /// Note that userVisibleOnly = true is the only currently supported type.
        /// </summary>
        [DataMember(Name = ("userVisibleOnly"), IsRequired = (false))]
        public bool? UserVisibleOnly
        {
            get;
            set;
        }

        /// <summary>
        /// For &quot;clipboard&quot; permission, may specify allowWithoutSanitization.
        /// </summary>
        [DataMember(Name = ("allowWithoutSanitization"), IsRequired = (false))]
        public bool? AllowWithoutSanitization
        {
            get;
            set;
        }

        /// <summary>
        /// For &quot;camera&quot; permission, may specify panTiltZoom.
        /// </summary>
        [DataMember(Name = ("panTiltZoom"), IsRequired = (false))]
        public bool? PanTiltZoom
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Browser command ids used by executeBrowserCommand.
    /// </summary>
    public enum BrowserCommandId
    {
        /// <summary>
        /// openTabSearch
        /// </summary>
        [EnumMember(Value = ("openTabSearch"))]
        OpenTabSearch,
        /// <summary>
        /// closeTabSearch
        /// </summary>
        [EnumMember(Value = ("closeTabSearch"))]
        CloseTabSearch
    }

    /// <summary>
    /// Chrome histogram bucket.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class Bucket : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Minimum value (inclusive).
        /// </summary>
        [DataMember(Name = ("low"), IsRequired = (true))]
        public int Low
        {
            get;
            set;
        }

        /// <summary>
        /// Maximum value (exclusive).
        /// </summary>
        [DataMember(Name = ("high"), IsRequired = (true))]
        public int High
        {
            get;
            set;
        }

        /// <summary>
        /// Number of samples.
        /// </summary>
        [DataMember(Name = ("count"), IsRequired = (true))]
        public int Count
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Chrome histogram.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class Histogram : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Name.
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// Sum of sample values.
        /// </summary>
        [DataMember(Name = ("sum"), IsRequired = (true))]
        public int Sum
        {
            get;
            set;
        }

        /// <summary>
        /// Total number of samples.
        /// </summary>
        [DataMember(Name = ("count"), IsRequired = (true))]
        public int Count
        {
            get;
            set;
        }

        /// <summary>
        /// Buckets.
        /// </summary>
        [DataMember(Name = ("buckets"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Browser.Bucket> Buckets
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Fired when page is about to start a download.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class DownloadWillBeginEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Id of the frame that caused the download to begin.
        /// </summary>
        [DataMember(Name = ("frameId"), IsRequired = (true))]
        public string FrameId
        {
            get;
            private set;
        }

        /// <summary>
        /// Global unique identifier of the download.
        /// </summary>
        [DataMember(Name = ("guid"), IsRequired = (true))]
        public string Guid
        {
            get;
            private set;
        }

        /// <summary>
        /// URL of the resource being downloaded.
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (true))]
        public string Url
        {
            get;
            private set;
        }

        /// <summary>
        /// Suggested file name of the resource (the actual name of the file saved on disk may differ).
        /// </summary>
        [DataMember(Name = ("suggestedFilename"), IsRequired = (true))]
        public string SuggestedFilename
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Download status.
    /// </summary>
    public enum DownloadProgressState
    {
        /// <summary>
        /// inProgress
        /// </summary>
        [EnumMember(Value = ("inProgress"))]
        InProgress,
        /// <summary>
        /// completed
        /// </summary>
        [EnumMember(Value = ("completed"))]
        Completed,
        /// <summary>
        /// canceled
        /// </summary>
        [EnumMember(Value = ("canceled"))]
        Canceled
    }

    /// <summary>
    /// Fired when download makes progress. Last call has |done| == true.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class DownloadProgressEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Global unique identifier of the download.
        /// </summary>
        [DataMember(Name = ("guid"), IsRequired = (true))]
        public string Guid
        {
            get;
            private set;
        }

        /// <summary>
        /// Total expected bytes to download.
        /// </summary>
        [DataMember(Name = ("totalBytes"), IsRequired = (true))]
        public double TotalBytes
        {
            get;
            private set;
        }

        /// <summary>
        /// Total bytes received.
        /// </summary>
        [DataMember(Name = ("receivedBytes"), IsRequired = (true))]
        public double ReceivedBytes
        {
            get;
            private set;
        }

        /// <summary>
        /// Download status.
        /// </summary>
        public CefSharp.DevTools.Browser.DownloadProgressState State
        {
            get
            {
                return (CefSharp.DevTools.Browser.DownloadProgressState)(StringToEnum(typeof(CefSharp.DevTools.Browser.DownloadProgressState), state));
            }

            set
            {
                this.state = (EnumToString(value));
            }
        }

        /// <summary>
        /// Download status.
        /// </summary>
        [DataMember(Name = ("state"), IsRequired = (true))]
        internal string state
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.CSS
{
    /// <summary>
    /// Stylesheet type: &quot;injected&quot; for stylesheets injected via extension, &quot;user-agent&quot; for user-agent
    /// stylesheets, &quot;inspector&quot; for stylesheets created by the inspector (i.e. those holding the &quot;via
    /// inspector&quot; rules), &quot;regular&quot; for regular stylesheets.
    /// </summary>
    public enum StyleSheetOrigin
    {
        /// <summary>
        /// injected
        /// </summary>
        [EnumMember(Value = ("injected"))]
        Injected,
        /// <summary>
        /// user-agent
        /// </summary>
        [EnumMember(Value = ("user-agent"))]
        UserAgent,
        /// <summary>
        /// inspector
        /// </summary>
        [EnumMember(Value = ("inspector"))]
        Inspector,
        /// <summary>
        /// regular
        /// </summary>
        [EnumMember(Value = ("regular"))]
        Regular
    }

    /// <summary>
    /// CSS rule collection for a single pseudo style.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class PseudoElementMatches : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Pseudo element type.
        /// </summary>
        public CefSharp.DevTools.DOM.PseudoType PseudoType
        {
            get
            {
                return (CefSharp.DevTools.DOM.PseudoType)(StringToEnum(typeof(CefSharp.DevTools.DOM.PseudoType), pseudoType));
            }

            set
            {
                this.pseudoType = (EnumToString(value));
            }
        }

        /// <summary>
        /// Pseudo element type.
        /// </summary>
        [DataMember(Name = ("pseudoType"), IsRequired = (true))]
        internal string pseudoType
        {
            get;
            set;
        }

        /// <summary>
        /// Pseudo element custom ident.
        /// </summary>
        [DataMember(Name = ("pseudoIdentifier"), IsRequired = (false))]
        public string PseudoIdentifier
        {
            get;
            set;
        }

        /// <summary>
        /// Matches of CSS rules applicable to the pseudo style.
        /// </summary>
        [DataMember(Name = ("matches"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.CSS.RuleMatch> Matches
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Inherited CSS rule collection from ancestor node.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class InheritedStyleEntry : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The ancestor node&apos;s inline style, if any, in the style inheritance chain.
        /// </summary>
        [DataMember(Name = ("inlineStyle"), IsRequired = (false))]
        public CefSharp.DevTools.CSS.CSSStyle InlineStyle
        {
            get;
            set;
        }

        /// <summary>
        /// Matches of CSS rules matching the ancestor node in the style inheritance chain.
        /// </summary>
        [DataMember(Name = ("matchedCSSRules"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.CSS.RuleMatch> MatchedCSSRules
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Inherited pseudo element matches from pseudos of an ancestor node.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class InheritedPseudoElementMatches : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Matches of pseudo styles from the pseudos of an ancestor node.
        /// </summary>
        [DataMember(Name = ("pseudoElements"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.CSS.PseudoElementMatches> PseudoElements
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Match data for a CSS rule.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class RuleMatch : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// CSS rule in the match.
        /// </summary>
        [DataMember(Name = ("rule"), IsRequired = (true))]
        public CefSharp.DevTools.CSS.CSSRule Rule
        {
            get;
            set;
        }

        /// <summary>
        /// Matching selector indices in the rule&apos;s selectorList selectors (0-based).
        /// </summary>
        [DataMember(Name = ("matchingSelectors"), IsRequired = (true))]
        public int[] MatchingSelectors
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Data for a simple selector (these are delimited by commas in a selector list).
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class Value : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Value text.
        /// </summary>
        [DataMember(Name = ("text"), IsRequired = (true))]
        public string Text
        {
            get;
            set;
        }

        /// <summary>
        /// Value range in the underlying resource (if available).
        /// </summary>
        [DataMember(Name = ("range"), IsRequired = (false))]
        public CefSharp.DevTools.CSS.SourceRange Range
        {
            get;
            set;
        }

        /// <summary>
        /// Specificity of the selector.
        /// </summary>
        [DataMember(Name = ("specificity"), IsRequired = (false))]
        public CefSharp.DevTools.CSS.Specificity Specificity
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Specificity:
    /// https://drafts.csswg.org/selectors/#specificity-rules
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class Specificity : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The a component, which represents the number of ID selectors.
        /// </summary>
        [DataMember(Name = ("a"), IsRequired = (true))]
        public int A
        {
            get;
            set;
        }

        /// <summary>
        /// The b component, which represents the number of class selectors, attributes selectors, and
        /// pseudo-classes.
        /// </summary>
        [DataMember(Name = ("b"), IsRequired = (true))]
        public int B
        {
            get;
            set;
        }

        /// <summary>
        /// The c component, which represents the number of type selectors and pseudo-elements.
        /// </summary>
        [DataMember(Name = ("c"), IsRequired = (true))]
        public int C
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Selector list data.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class SelectorList : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Selectors in the list.
        /// </summary>
        [DataMember(Name = ("selectors"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.CSS.Value> Selectors
        {
            get;
            set;
        }

        /// <summary>
        /// Rule selector text.
        /// </summary>
        [DataMember(Name = ("text"), IsRequired = (true))]
        public string Text
        {
            get;
            set;
        }
    }

    /// <summary>
    /// CSS stylesheet metainformation.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CSSStyleSheetHeader : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The stylesheet identifier.
        /// </summary>
        [DataMember(Name = ("styleSheetId"), IsRequired = (true))]
        public string StyleSheetId
        {
            get;
            set;
        }

        /// <summary>
        /// Owner frame identifier.
        /// </summary>
        [DataMember(Name = ("frameId"), IsRequired = (true))]
        public string FrameId
        {
            get;
            set;
        }

        /// <summary>
        /// Stylesheet resource URL. Empty if this is a constructed stylesheet created using
        /// new CSSStyleSheet() (but non-empty if this is a constructed stylesheet imported
        /// as a CSS module script).
        /// </summary>
        [DataMember(Name = ("sourceURL"), IsRequired = (true))]
        public string SourceURL
        {
            get;
            set;
        }

        /// <summary>
        /// URL of source map associated with the stylesheet (if any).
        /// </summary>
        [DataMember(Name = ("sourceMapURL"), IsRequired = (false))]
        public string SourceMapURL
        {
            get;
            set;
        }

        /// <summary>
        /// Stylesheet origin.
        /// </summary>
        public CefSharp.DevTools.CSS.StyleSheetOrigin Origin
        {
            get
            {
                return (CefSharp.DevTools.CSS.StyleSheetOrigin)(StringToEnum(typeof(CefSharp.DevTools.CSS.StyleSheetOrigin), origin));
            }

            set
            {
                this.origin = (EnumToString(value));
            }
        }

        /// <summary>
        /// Stylesheet origin.
        /// </summary>
        [DataMember(Name = ("origin"), IsRequired = (true))]
        internal string origin
        {
            get;
            set;
        }

        /// <summary>
        /// Stylesheet title.
        /// </summary>
        [DataMember(Name = ("title"), IsRequired = (true))]
        public string Title
        {
            get;
            set;
        }

        /// <summary>
        /// The backend id for the owner node of the stylesheet.
        /// </summary>
        [DataMember(Name = ("ownerNode"), IsRequired = (false))]
        public int? OwnerNode
        {
            get;
            set;
        }

        /// <summary>
        /// Denotes whether the stylesheet is disabled.
        /// </summary>
        [DataMember(Name = ("disabled"), IsRequired = (true))]
        public bool Disabled
        {
            get;
            set;
        }

        /// <summary>
        /// Whether the sourceURL field value comes from the sourceURL comment.
        /// </summary>
        [DataMember(Name = ("hasSourceURL"), IsRequired = (false))]
        public bool? HasSourceURL
        {
            get;
            set;
        }

        /// <summary>
        /// Whether this stylesheet is created for STYLE tag by parser. This flag is not set for
        /// document.written STYLE tags.
        /// </summary>
        [DataMember(Name = ("isInline"), IsRequired = (true))]
        public bool IsInline
        {
            get;
            set;
        }

        /// <summary>
        /// Whether this stylesheet is mutable. Inline stylesheets become mutable
        /// after they have been modified via CSSOM API.
        /// `&lt;link&gt;` element&apos;s stylesheets become mutable only if DevTools modifies them.
        /// Constructed stylesheets (new CSSStyleSheet()) are mutable immediately after creation.
        /// </summary>
        [DataMember(Name = ("isMutable"), IsRequired = (true))]
        public bool IsMutable
        {
            get;
            set;
        }

        /// <summary>
        /// True if this stylesheet is created through new CSSStyleSheet() or imported as a
        /// CSS module script.
        /// </summary>
        [DataMember(Name = ("isConstructed"), IsRequired = (true))]
        public bool IsConstructed
        {
            get;
            set;
        }

        /// <summary>
        /// Line offset of the stylesheet within the resource (zero based).
        /// </summary>
        [DataMember(Name = ("startLine"), IsRequired = (true))]
        public double StartLine
        {
            get;
            set;
        }

        /// <summary>
        /// Column offset of the stylesheet within the resource (zero based).
        /// </summary>
        [DataMember(Name = ("startColumn"), IsRequired = (true))]
        public double StartColumn
        {
            get;
            set;
        }

        /// <summary>
        /// Size of the content (in characters).
        /// </summary>
        [DataMember(Name = ("length"), IsRequired = (true))]
        public double Length
        {
            get;
            set;
        }

        /// <summary>
        /// Line offset of the end of the stylesheet within the resource (zero based).
        /// </summary>
        [DataMember(Name = ("endLine"), IsRequired = (true))]
        public double EndLine
        {
            get;
            set;
        }

        /// <summary>
        /// Column offset of the end of the stylesheet within the resource (zero based).
        /// </summary>
        [DataMember(Name = ("endColumn"), IsRequired = (true))]
        public double EndColumn
        {
            get;
            set;
        }

        /// <summary>
        /// If the style sheet was loaded from a network resource, this indicates when the resource failed to load
        /// </summary>
        [DataMember(Name = ("loadingFailed"), IsRequired = (false))]
        public bool? LoadingFailed
        {
            get;
            set;
        }
    }

    /// <summary>
    /// CSS rule representation.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CSSRule : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The css style sheet identifier (absent for user agent stylesheet and user-specified
        /// stylesheet rules) this rule came from.
        /// </summary>
        [DataMember(Name = ("styleSheetId"), IsRequired = (false))]
        public string StyleSheetId
        {
            get;
            set;
        }

        /// <summary>
        /// Rule selector data.
        /// </summary>
        [DataMember(Name = ("selectorList"), IsRequired = (true))]
        public CefSharp.DevTools.CSS.SelectorList SelectorList
        {
            get;
            set;
        }

        /// <summary>
        /// Array of selectors from ancestor style rules, sorted by distance from the current rule.
        /// </summary>
        [DataMember(Name = ("nestingSelectors"), IsRequired = (false))]
        public string[] NestingSelectors
        {
            get;
            set;
        }

        /// <summary>
        /// Parent stylesheet&apos;s origin.
        /// </summary>
        public CefSharp.DevTools.CSS.StyleSheetOrigin Origin
        {
            get
            {
                return (CefSharp.DevTools.CSS.StyleSheetOrigin)(StringToEnum(typeof(CefSharp.DevTools.CSS.StyleSheetOrigin), origin));
            }

            set
            {
                this.origin = (EnumToString(value));
            }
        }

        /// <summary>
        /// Parent stylesheet&apos;s origin.
        /// </summary>
        [DataMember(Name = ("origin"), IsRequired = (true))]
        internal string origin
        {
            get;
            set;
        }

        /// <summary>
        /// Associated style declaration.
        /// </summary>
        [DataMember(Name = ("style"), IsRequired = (true))]
        public CefSharp.DevTools.CSS.CSSStyle Style
        {
            get;
            set;
        }

        /// <summary>
        /// Media list array (for rules involving media queries). The array enumerates media queries
        /// starting with the innermost one, going outwards.
        /// </summary>
        [DataMember(Name = ("media"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.CSS.CSSMedia> Media
        {
            get;
            set;
        }

        /// <summary>
        /// Container query list array (for rules involving container queries).
        /// The array enumerates container queries starting with the innermost one, going outwards.
        /// </summary>
        [DataMember(Name = ("containerQueries"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.CSS.CSSContainerQuery> ContainerQueries
        {
            get;
            set;
        }

        /// <summary>
        /// @supports CSS at-rule array.
        /// The array enumerates @supports at-rules starting with the innermost one, going outwards.
        /// </summary>
        [DataMember(Name = ("supports"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.CSS.CSSSupports> Supports
        {
            get;
            set;
        }

        /// <summary>
        /// Cascade layer array. Contains the layer hierarchy that this rule belongs to starting
        /// with the innermost layer and going outwards.
        /// </summary>
        [DataMember(Name = ("layers"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.CSS.CSSLayer> Layers
        {
            get;
            set;
        }

        /// <summary>
        /// @scope CSS at-rule array.
        /// The array enumerates @scope at-rules starting with the innermost one, going outwards.
        /// </summary>
        [DataMember(Name = ("scopes"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.CSS.CSSScope> Scopes
        {
            get;
            set;
        }

        /// <summary>
        /// The array keeps the types of ancestor CSSRules from the innermost going outwards.
        /// </summary>
        public CefSharp.DevTools.CSS.CSSRuleType[] RuleTypes
        {
            get
            {
                return (CefSharp.DevTools.CSS.CSSRuleType[])(StringToEnum(typeof(CefSharp.DevTools.CSS.CSSRuleType[]), ruleTypes));
            }

            set
            {
                this.ruleTypes = (EnumToString(value));
            }
        }

        /// <summary>
        /// The array keeps the types of ancestor CSSRules from the innermost going outwards.
        /// </summary>
        [DataMember(Name = ("ruleTypes"), IsRequired = (false))]
        internal string ruleTypes
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Enum indicating the type of a CSS rule, used to represent the order of a style rule&apos;s ancestors.
    /// This list only contains rule types that are collected during the ancestor rule collection.
    /// </summary>
    public enum CSSRuleType
    {
        /// <summary>
        /// MediaRule
        /// </summary>
        [EnumMember(Value = ("MediaRule"))]
        MediaRule,
        /// <summary>
        /// SupportsRule
        /// </summary>
        [EnumMember(Value = ("SupportsRule"))]
        SupportsRule,
        /// <summary>
        /// ContainerRule
        /// </summary>
        [EnumMember(Value = ("ContainerRule"))]
        ContainerRule,
        /// <summary>
        /// LayerRule
        /// </summary>
        [EnumMember(Value = ("LayerRule"))]
        LayerRule,
        /// <summary>
        /// ScopeRule
        /// </summary>
        [EnumMember(Value = ("ScopeRule"))]
        ScopeRule,
        /// <summary>
        /// StyleRule
        /// </summary>
        [EnumMember(Value = ("StyleRule"))]
        StyleRule
    }

    /// <summary>
    /// CSS coverage information.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class RuleUsage : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The css style sheet identifier (absent for user agent stylesheet and user-specified
        /// stylesheet rules) this rule came from.
        /// </summary>
        [DataMember(Name = ("styleSheetId"), IsRequired = (true))]
        public string StyleSheetId
        {
            get;
            set;
        }

        /// <summary>
        /// Offset of the start of the rule (including selector) from the beginning of the stylesheet.
        /// </summary>
        [DataMember(Name = ("startOffset"), IsRequired = (true))]
        public double StartOffset
        {
            get;
            set;
        }

        /// <summary>
        /// Offset of the end of the rule body from the beginning of the stylesheet.
        /// </summary>
        [DataMember(Name = ("endOffset"), IsRequired = (true))]
        public double EndOffset
        {
            get;
            set;
        }

        /// <summary>
        /// Indicates whether the rule was actually used by some element in the page.
        /// </summary>
        [DataMember(Name = ("used"), IsRequired = (true))]
        public bool Used
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Text range within a resource. All numbers are zero-based.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class SourceRange : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Start line of range.
        /// </summary>
        [DataMember(Name = ("startLine"), IsRequired = (true))]
        public int StartLine
        {
            get;
            set;
        }

        /// <summary>
        /// Start column of range (inclusive).
        /// </summary>
        [DataMember(Name = ("startColumn"), IsRequired = (true))]
        public int StartColumn
        {
            get;
            set;
        }

        /// <summary>
        /// End line of range
        /// </summary>
        [DataMember(Name = ("endLine"), IsRequired = (true))]
        public int EndLine
        {
            get;
            set;
        }

        /// <summary>
        /// End column of range (exclusive).
        /// </summary>
        [DataMember(Name = ("endColumn"), IsRequired = (true))]
        public int EndColumn
        {
            get;
            set;
        }
    }

    /// <summary>
    /// ShorthandEntry
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ShorthandEntry : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Shorthand name.
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// Shorthand value.
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (true))]
        public string Value
        {
            get;
            set;
        }

        /// <summary>
        /// Whether the property has &quot;!important&quot; annotation (implies `false` if absent).
        /// </summary>
        [DataMember(Name = ("important"), IsRequired = (false))]
        public bool? Important
        {
            get;
            set;
        }
    }

    /// <summary>
    /// CSSComputedStyleProperty
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CSSComputedStyleProperty : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Computed style property name.
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// Computed style property value.
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (true))]
        public string Value
        {
            get;
            set;
        }
    }

    /// <summary>
    /// CSS style representation.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CSSStyle : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The css style sheet identifier (absent for user agent stylesheet and user-specified
        /// stylesheet rules) this rule came from.
        /// </summary>
        [DataMember(Name = ("styleSheetId"), IsRequired = (false))]
        public string StyleSheetId
        {
            get;
            set;
        }

        /// <summary>
        /// CSS properties in the style.
        /// </summary>
        [DataMember(Name = ("cssProperties"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.CSS.CSSProperty> CssProperties
        {
            get;
            set;
        }

        /// <summary>
        /// Computed values for all shorthands found in the style.
        /// </summary>
        [DataMember(Name = ("shorthandEntries"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.CSS.ShorthandEntry> ShorthandEntries
        {
            get;
            set;
        }

        /// <summary>
        /// Style declaration text (if available).
        /// </summary>
        [DataMember(Name = ("cssText"), IsRequired = (false))]
        public string CssText
        {
            get;
            set;
        }

        /// <summary>
        /// Style declaration range in the enclosing stylesheet (if available).
        /// </summary>
        [DataMember(Name = ("range"), IsRequired = (false))]
        public CefSharp.DevTools.CSS.SourceRange Range
        {
            get;
            set;
        }
    }

    /// <summary>
    /// CSS property declaration data.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CSSProperty : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The property name.
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// The property value.
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (true))]
        public string Value
        {
            get;
            set;
        }

        /// <summary>
        /// Whether the property has &quot;!important&quot; annotation (implies `false` if absent).
        /// </summary>
        [DataMember(Name = ("important"), IsRequired = (false))]
        public bool? Important
        {
            get;
            set;
        }

        /// <summary>
        /// Whether the property is implicit (implies `false` if absent).
        /// </summary>
        [DataMember(Name = ("implicit"), IsRequired = (false))]
        public bool? Implicit
        {
            get;
            set;
        }

        /// <summary>
        /// The full property text as specified in the style.
        /// </summary>
        [DataMember(Name = ("text"), IsRequired = (false))]
        public string Text
        {
            get;
            set;
        }

        /// <summary>
        /// Whether the property is understood by the browser (implies `true` if absent).
        /// </summary>
        [DataMember(Name = ("parsedOk"), IsRequired = (false))]
        public bool? ParsedOk
        {
            get;
            set;
        }

        /// <summary>
        /// Whether the property is disabled by the user (present for source-based properties only).
        /// </summary>
        [DataMember(Name = ("disabled"), IsRequired = (false))]
        public bool? Disabled
        {
            get;
            set;
        }

        /// <summary>
        /// The entire property range in the enclosing style declaration (if available).
        /// </summary>
        [DataMember(Name = ("range"), IsRequired = (false))]
        public CefSharp.DevTools.CSS.SourceRange Range
        {
            get;
            set;
        }

        /// <summary>
        /// Parsed longhand components of this property if it is a shorthand.
        /// This field will be empty if the given property is not a shorthand.
        /// </summary>
        [DataMember(Name = ("longhandProperties"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.CSS.CSSProperty> LonghandProperties
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Source of the media query: &quot;mediaRule&quot; if specified by a @media rule, &quot;importRule&quot; if
    /// specified by an @import rule, &quot;linkedSheet&quot; if specified by a &quot;media&quot; attribute in a linked
    /// stylesheet&apos;s LINK tag, &quot;inlineSheet&quot; if specified by a &quot;media&quot; attribute in an inline
    /// stylesheet&apos;s STYLE tag.
    /// </summary>
    public enum CSSMediaSource
    {
        /// <summary>
        /// mediaRule
        /// </summary>
        [EnumMember(Value = ("mediaRule"))]
        MediaRule,
        /// <summary>
        /// importRule
        /// </summary>
        [EnumMember(Value = ("importRule"))]
        ImportRule,
        /// <summary>
        /// linkedSheet
        /// </summary>
        [EnumMember(Value = ("linkedSheet"))]
        LinkedSheet,
        /// <summary>
        /// inlineSheet
        /// </summary>
        [EnumMember(Value = ("inlineSheet"))]
        InlineSheet
    }

    /// <summary>
    /// CSS media rule descriptor.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CSSMedia : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Media query text.
        /// </summary>
        [DataMember(Name = ("text"), IsRequired = (true))]
        public string Text
        {
            get;
            set;
        }

        /// <summary>
        /// Source of the media query: &quot;mediaRule&quot; if specified by a @media rule, &quot;importRule&quot; if
        /// specified by an @import rule, &quot;linkedSheet&quot; if specified by a &quot;media&quot; attribute in a linked
        /// stylesheet&apos;s LINK tag, &quot;inlineSheet&quot; if specified by a &quot;media&quot; attribute in an inline
        /// stylesheet&apos;s STYLE tag.
        /// </summary>
        public CefSharp.DevTools.CSS.CSSMediaSource Source
        {
            get
            {
                return (CefSharp.DevTools.CSS.CSSMediaSource)(StringToEnum(typeof(CefSharp.DevTools.CSS.CSSMediaSource), source));
            }

            set
            {
                this.source = (EnumToString(value));
            }
        }

        /// <summary>
        /// Source of the media query: &quot;mediaRule&quot; if specified by a @media rule, &quot;importRule&quot; if
        /// specified by an @import rule, &quot;linkedSheet&quot; if specified by a &quot;media&quot; attribute in a linked
        /// stylesheet&apos;s LINK tag, &quot;inlineSheet&quot; if specified by a &quot;media&quot; attribute in an inline
        /// stylesheet&apos;s STYLE tag.
        /// </summary>
        [DataMember(Name = ("source"), IsRequired = (true))]
        internal string source
        {
            get;
            set;
        }

        /// <summary>
        /// URL of the document containing the media query description.
        /// </summary>
        [DataMember(Name = ("sourceURL"), IsRequired = (false))]
        public string SourceURL
        {
            get;
            set;
        }

        /// <summary>
        /// The associated rule (@media or @import) header range in the enclosing stylesheet (if
        /// available).
        /// </summary>
        [DataMember(Name = ("range"), IsRequired = (false))]
        public CefSharp.DevTools.CSS.SourceRange Range
        {
            get;
            set;
        }

        /// <summary>
        /// Identifier of the stylesheet containing this object (if exists).
        /// </summary>
        [DataMember(Name = ("styleSheetId"), IsRequired = (false))]
        public string StyleSheetId
        {
            get;
            set;
        }

        /// <summary>
        /// Array of media queries.
        /// </summary>
        [DataMember(Name = ("mediaList"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.CSS.MediaQuery> MediaList
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Media query descriptor.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class MediaQuery : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Array of media query expressions.
        /// </summary>
        [DataMember(Name = ("expressions"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.CSS.MediaQueryExpression> Expressions
        {
            get;
            set;
        }

        /// <summary>
        /// Whether the media query condition is satisfied.
        /// </summary>
        [DataMember(Name = ("active"), IsRequired = (true))]
        public bool Active
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Media query expression descriptor.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class MediaQueryExpression : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Media query expression value.
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (true))]
        public double Value
        {
            get;
            set;
        }

        /// <summary>
        /// Media query expression units.
        /// </summary>
        [DataMember(Name = ("unit"), IsRequired = (true))]
        public string Unit
        {
            get;
            set;
        }

        /// <summary>
        /// Media query expression feature.
        /// </summary>
        [DataMember(Name = ("feature"), IsRequired = (true))]
        public string Feature
        {
            get;
            set;
        }

        /// <summary>
        /// The associated range of the value text in the enclosing stylesheet (if available).
        /// </summary>
        [DataMember(Name = ("valueRange"), IsRequired = (false))]
        public CefSharp.DevTools.CSS.SourceRange ValueRange
        {
            get;
            set;
        }

        /// <summary>
        /// Computed length of media query expression (if applicable).
        /// </summary>
        [DataMember(Name = ("computedLength"), IsRequired = (false))]
        public double? ComputedLength
        {
            get;
            set;
        }
    }

    /// <summary>
    /// CSS container query rule descriptor.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CSSContainerQuery : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Container query text.
        /// </summary>
        [DataMember(Name = ("text"), IsRequired = (true))]
        public string Text
        {
            get;
            set;
        }

        /// <summary>
        /// The associated rule header range in the enclosing stylesheet (if
        /// available).
        /// </summary>
        [DataMember(Name = ("range"), IsRequired = (false))]
        public CefSharp.DevTools.CSS.SourceRange Range
        {
            get;
            set;
        }

        /// <summary>
        /// Identifier of the stylesheet containing this object (if exists).
        /// </summary>
        [DataMember(Name = ("styleSheetId"), IsRequired = (false))]
        public string StyleSheetId
        {
            get;
            set;
        }

        /// <summary>
        /// Optional name for the container.
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (false))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// Optional physical axes queried for the container.
        /// </summary>
        public CefSharp.DevTools.DOM.PhysicalAxes? PhysicalAxes
        {
            get
            {
                return (CefSharp.DevTools.DOM.PhysicalAxes? )(StringToEnum(typeof(CefSharp.DevTools.DOM.PhysicalAxes? ), physicalAxes));
            }

            set
            {
                this.physicalAxes = (EnumToString(value));
            }
        }

        /// <summary>
        /// Optional physical axes queried for the container.
        /// </summary>
        [DataMember(Name = ("physicalAxes"), IsRequired = (false))]
        internal string physicalAxes
        {
            get;
            set;
        }

        /// <summary>
        /// Optional logical axes queried for the container.
        /// </summary>
        public CefSharp.DevTools.DOM.LogicalAxes? LogicalAxes
        {
            get
            {
                return (CefSharp.DevTools.DOM.LogicalAxes? )(StringToEnum(typeof(CefSharp.DevTools.DOM.LogicalAxes? ), logicalAxes));
            }

            set
            {
                this.logicalAxes = (EnumToString(value));
            }
        }

        /// <summary>
        /// Optional logical axes queried for the container.
        /// </summary>
        [DataMember(Name = ("logicalAxes"), IsRequired = (false))]
        internal string logicalAxes
        {
            get;
            set;
        }
    }

    /// <summary>
    /// CSS Supports at-rule descriptor.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CSSSupports : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Supports rule text.
        /// </summary>
        [DataMember(Name = ("text"), IsRequired = (true))]
        public string Text
        {
            get;
            set;
        }

        /// <summary>
        /// Whether the supports condition is satisfied.
        /// </summary>
        [DataMember(Name = ("active"), IsRequired = (true))]
        public bool Active
        {
            get;
            set;
        }

        /// <summary>
        /// The associated rule header range in the enclosing stylesheet (if
        /// available).
        /// </summary>
        [DataMember(Name = ("range"), IsRequired = (false))]
        public CefSharp.DevTools.CSS.SourceRange Range
        {
            get;
            set;
        }

        /// <summary>
        /// Identifier of the stylesheet containing this object (if exists).
        /// </summary>
        [DataMember(Name = ("styleSheetId"), IsRequired = (false))]
        public string StyleSheetId
        {
            get;
            set;
        }
    }

    /// <summary>
    /// CSS Scope at-rule descriptor.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CSSScope : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Scope rule text.
        /// </summary>
        [DataMember(Name = ("text"), IsRequired = (true))]
        public string Text
        {
            get;
            set;
        }

        /// <summary>
        /// The associated rule header range in the enclosing stylesheet (if
        /// available).
        /// </summary>
        [DataMember(Name = ("range"), IsRequired = (false))]
        public CefSharp.DevTools.CSS.SourceRange Range
        {
            get;
            set;
        }

        /// <summary>
        /// Identifier of the stylesheet containing this object (if exists).
        /// </summary>
        [DataMember(Name = ("styleSheetId"), IsRequired = (false))]
        public string StyleSheetId
        {
            get;
            set;
        }
    }

    /// <summary>
    /// CSS Layer at-rule descriptor.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CSSLayer : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Layer name.
        /// </summary>
        [DataMember(Name = ("text"), IsRequired = (true))]
        public string Text
        {
            get;
            set;
        }

        /// <summary>
        /// The associated rule header range in the enclosing stylesheet (if
        /// available).
        /// </summary>
        [DataMember(Name = ("range"), IsRequired = (false))]
        public CefSharp.DevTools.CSS.SourceRange Range
        {
            get;
            set;
        }

        /// <summary>
        /// Identifier of the stylesheet containing this object (if exists).
        /// </summary>
        [DataMember(Name = ("styleSheetId"), IsRequired = (false))]
        public string StyleSheetId
        {
            get;
            set;
        }
    }

    /// <summary>
    /// CSS Layer data.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CSSLayerData : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Layer name.
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// Direct sub-layers
        /// </summary>
        [DataMember(Name = ("subLayers"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.CSS.CSSLayerData> SubLayers
        {
            get;
            set;
        }

        /// <summary>
        /// Layer order. The order determines the order of the layer in the cascade order.
        /// A higher number has higher priority in the cascade order.
        /// </summary>
        [DataMember(Name = ("order"), IsRequired = (true))]
        public double Order
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Information about amount of glyphs that were rendered with given font.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class PlatformFontUsage : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Font&apos;s family name reported by platform.
        /// </summary>
        [DataMember(Name = ("familyName"), IsRequired = (true))]
        public string FamilyName
        {
            get;
            set;
        }

        /// <summary>
        /// Font&apos;s PostScript name reported by platform.
        /// </summary>
        [DataMember(Name = ("postScriptName"), IsRequired = (true))]
        public string PostScriptName
        {
            get;
            set;
        }

        /// <summary>
        /// Indicates if the font was downloaded or resolved locally.
        /// </summary>
        [DataMember(Name = ("isCustomFont"), IsRequired = (true))]
        public bool IsCustomFont
        {
            get;
            set;
        }

        /// <summary>
        /// Amount of glyphs that were rendered with this font.
        /// </summary>
        [DataMember(Name = ("glyphCount"), IsRequired = (true))]
        public double GlyphCount
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Information about font variation axes for variable fonts
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class FontVariationAxis : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The font-variation-setting tag (a.k.a. &quot;axis tag&quot;).
        /// </summary>
        [DataMember(Name = ("tag"), IsRequired = (true))]
        public string Tag
        {
            get;
            set;
        }

        /// <summary>
        /// Human-readable variation name in the default language (normally, &quot;en&quot;).
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// The minimum value (inclusive) the font supports for this tag.
        /// </summary>
        [DataMember(Name = ("minValue"), IsRequired = (true))]
        public double MinValue
        {
            get;
            set;
        }

        /// <summary>
        /// The maximum value (inclusive) the font supports for this tag.
        /// </summary>
        [DataMember(Name = ("maxValue"), IsRequired = (true))]
        public double MaxValue
        {
            get;
            set;
        }

        /// <summary>
        /// The default value.
        /// </summary>
        [DataMember(Name = ("defaultValue"), IsRequired = (true))]
        public double DefaultValue
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Properties of a web font: https://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions
    /// and additional information such as platformFontFamily and fontVariationAxes.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class FontFace : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The font-family.
        /// </summary>
        [DataMember(Name = ("fontFamily"), IsRequired = (true))]
        public string FontFamily
        {
            get;
            set;
        }

        /// <summary>
        /// The font-style.
        /// </summary>
        [DataMember(Name = ("fontStyle"), IsRequired = (true))]
        public string FontStyle
        {
            get;
            set;
        }

        /// <summary>
        /// The font-variant.
        /// </summary>
        [DataMember(Name = ("fontVariant"), IsRequired = (true))]
        public string FontVariant
        {
            get;
            set;
        }

        /// <summary>
        /// The font-weight.
        /// </summary>
        [DataMember(Name = ("fontWeight"), IsRequired = (true))]
        public string FontWeight
        {
            get;
            set;
        }

        /// <summary>
        /// The font-stretch.
        /// </summary>
        [DataMember(Name = ("fontStretch"), IsRequired = (true))]
        public string FontStretch
        {
            get;
            set;
        }

        /// <summary>
        /// The font-display.
        /// </summary>
        [DataMember(Name = ("fontDisplay"), IsRequired = (true))]
        public string FontDisplay
        {
            get;
            set;
        }

        /// <summary>
        /// The unicode-range.
        /// </summary>
        [DataMember(Name = ("unicodeRange"), IsRequired = (true))]
        public string UnicodeRange
        {
            get;
            set;
        }

        /// <summary>
        /// The src.
        /// </summary>
        [DataMember(Name = ("src"), IsRequired = (true))]
        public string Src
        {
            get;
            set;
        }

        /// <summary>
        /// The resolved platform font family
        /// </summary>
        [DataMember(Name = ("platformFontFamily"), IsRequired = (true))]
        public string PlatformFontFamily
        {
            get;
            set;
        }

        /// <summary>
        /// Available variation settings (a.k.a. &quot;axes&quot;).
        /// </summary>
        [DataMember(Name = ("fontVariationAxes"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.CSS.FontVariationAxis> FontVariationAxes
        {
            get;
            set;
        }
    }

    /// <summary>
    /// CSS try rule representation.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CSSTryRule : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The css style sheet identifier (absent for user agent stylesheet and user-specified
        /// stylesheet rules) this rule came from.
        /// </summary>
        [DataMember(Name = ("styleSheetId"), IsRequired = (false))]
        public string StyleSheetId
        {
            get;
            set;
        }

        /// <summary>
        /// Parent stylesheet&apos;s origin.
        /// </summary>
        public CefSharp.DevTools.CSS.StyleSheetOrigin Origin
        {
            get
            {
                return (CefSharp.DevTools.CSS.StyleSheetOrigin)(StringToEnum(typeof(CefSharp.DevTools.CSS.StyleSheetOrigin), origin));
            }

            set
            {
                this.origin = (EnumToString(value));
            }
        }

        /// <summary>
        /// Parent stylesheet&apos;s origin.
        /// </summary>
        [DataMember(Name = ("origin"), IsRequired = (true))]
        internal string origin
        {
            get;
            set;
        }

        /// <summary>
        /// Associated style declaration.
        /// </summary>
        [DataMember(Name = ("style"), IsRequired = (true))]
        public CefSharp.DevTools.CSS.CSSStyle Style
        {
            get;
            set;
        }
    }

    /// <summary>
    /// CSS position-fallback rule representation.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CSSPositionFallbackRule : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Name
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public CefSharp.DevTools.CSS.Value Name
        {
            get;
            set;
        }

        /// <summary>
        /// List of keyframes.
        /// </summary>
        [DataMember(Name = ("tryRules"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.CSS.CSSTryRule> TryRules
        {
            get;
            set;
        }
    }

    /// <summary>
    /// CSS keyframes rule representation.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CSSKeyframesRule : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Animation name.
        /// </summary>
        [DataMember(Name = ("animationName"), IsRequired = (true))]
        public CefSharp.DevTools.CSS.Value AnimationName
        {
            get;
            set;
        }

        /// <summary>
        /// List of keyframes.
        /// </summary>
        [DataMember(Name = ("keyframes"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.CSS.CSSKeyframeRule> Keyframes
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Representation of a custom property registration through CSS.registerProperty
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CSSPropertyRegistration : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// PropertyName
        /// </summary>
        [DataMember(Name = ("propertyName"), IsRequired = (true))]
        public string PropertyName
        {
            get;
            set;
        }

        /// <summary>
        /// InitialValue
        /// </summary>
        [DataMember(Name = ("initialValue"), IsRequired = (false))]
        public CefSharp.DevTools.CSS.Value InitialValue
        {
            get;
            set;
        }

        /// <summary>
        /// Inherits
        /// </summary>
        [DataMember(Name = ("inherits"), IsRequired = (true))]
        public bool Inherits
        {
            get;
            set;
        }

        /// <summary>
        /// Syntax
        /// </summary>
        [DataMember(Name = ("syntax"), IsRequired = (true))]
        public string Syntax
        {
            get;
            set;
        }
    }

    /// <summary>
    /// CSS font-palette-values rule representation.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CSSFontPaletteValuesRule : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The css style sheet identifier (absent for user agent stylesheet and user-specified
        /// stylesheet rules) this rule came from.
        /// </summary>
        [DataMember(Name = ("styleSheetId"), IsRequired = (false))]
        public string StyleSheetId
        {
            get;
            set;
        }

        /// <summary>
        /// Parent stylesheet&apos;s origin.
        /// </summary>
        public CefSharp.DevTools.CSS.StyleSheetOrigin Origin
        {
            get
            {
                return (CefSharp.DevTools.CSS.StyleSheetOrigin)(StringToEnum(typeof(CefSharp.DevTools.CSS.StyleSheetOrigin), origin));
            }

            set
            {
                this.origin = (EnumToString(value));
            }
        }

        /// <summary>
        /// Parent stylesheet&apos;s origin.
        /// </summary>
        [DataMember(Name = ("origin"), IsRequired = (true))]
        internal string origin
        {
            get;
            set;
        }

        /// <summary>
        /// Associated font palette name.
        /// </summary>
        [DataMember(Name = ("fontPaletteName"), IsRequired = (true))]
        public CefSharp.DevTools.CSS.Value FontPaletteName
        {
            get;
            set;
        }

        /// <summary>
        /// Associated style declaration.
        /// </summary>
        [DataMember(Name = ("style"), IsRequired = (true))]
        public CefSharp.DevTools.CSS.CSSStyle Style
        {
            get;
            set;
        }
    }

    /// <summary>
    /// CSS property at-rule representation.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CSSPropertyRule : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The css style sheet identifier (absent for user agent stylesheet and user-specified
        /// stylesheet rules) this rule came from.
        /// </summary>
        [DataMember(Name = ("styleSheetId"), IsRequired = (false))]
        public string StyleSheetId
        {
            get;
            set;
        }

        /// <summary>
        /// Parent stylesheet&apos;s origin.
        /// </summary>
        public CefSharp.DevTools.CSS.StyleSheetOrigin Origin
        {
            get
            {
                return (CefSharp.DevTools.CSS.StyleSheetOrigin)(StringToEnum(typeof(CefSharp.DevTools.CSS.StyleSheetOrigin), origin));
            }

            set
            {
                this.origin = (EnumToString(value));
            }
        }

        /// <summary>
        /// Parent stylesheet&apos;s origin.
        /// </summary>
        [DataMember(Name = ("origin"), IsRequired = (true))]
        internal string origin
        {
            get;
            set;
        }

        /// <summary>
        /// Associated property name.
        /// </summary>
        [DataMember(Name = ("propertyName"), IsRequired = (true))]
        public CefSharp.DevTools.CSS.Value PropertyName
        {
            get;
            set;
        }

        /// <summary>
        /// Associated style declaration.
        /// </summary>
        [DataMember(Name = ("style"), IsRequired = (true))]
        public CefSharp.DevTools.CSS.CSSStyle Style
        {
            get;
            set;
        }
    }

    /// <summary>
    /// CSS keyframe rule representation.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CSSKeyframeRule : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The css style sheet identifier (absent for user agent stylesheet and user-specified
        /// stylesheet rules) this rule came from.
        /// </summary>
        [DataMember(Name = ("styleSheetId"), IsRequired = (false))]
        public string StyleSheetId
        {
            get;
            set;
        }

        /// <summary>
        /// Parent stylesheet&apos;s origin.
        /// </summary>
        public CefSharp.DevTools.CSS.StyleSheetOrigin Origin
        {
            get
            {
                return (CefSharp.DevTools.CSS.StyleSheetOrigin)(StringToEnum(typeof(CefSharp.DevTools.CSS.StyleSheetOrigin), origin));
            }

            set
            {
                this.origin = (EnumToString(value));
            }
        }

        /// <summary>
        /// Parent stylesheet&apos;s origin.
        /// </summary>
        [DataMember(Name = ("origin"), IsRequired = (true))]
        internal string origin
        {
            get;
            set;
        }

        /// <summary>
        /// Associated key text.
        /// </summary>
        [DataMember(Name = ("keyText"), IsRequired = (true))]
        public CefSharp.DevTools.CSS.Value KeyText
        {
            get;
            set;
        }

        /// <summary>
        /// Associated style declaration.
        /// </summary>
        [DataMember(Name = ("style"), IsRequired = (true))]
        public CefSharp.DevTools.CSS.CSSStyle Style
        {
            get;
            set;
        }
    }

    /// <summary>
    /// A descriptor of operation to mutate style declaration text.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class StyleDeclarationEdit : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The css style sheet identifier.
        /// </summary>
        [DataMember(Name = ("styleSheetId"), IsRequired = (true))]
        public string StyleSheetId
        {
            get;
            set;
        }

        /// <summary>
        /// The range of the style text in the enclosing stylesheet.
        /// </summary>
        [DataMember(Name = ("range"), IsRequired = (true))]
        public CefSharp.DevTools.CSS.SourceRange Range
        {
            get;
            set;
        }

        /// <summary>
        /// New style text.
        /// </summary>
        [DataMember(Name = ("text"), IsRequired = (true))]
        public string Text
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Fires whenever a web font is updated.  A non-empty font parameter indicates a successfully loaded
    /// web font.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class FontsUpdatedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// The web font that has loaded.
        /// </summary>
        [DataMember(Name = ("font"), IsRequired = (false))]
        public CefSharp.DevTools.CSS.FontFace Font
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired whenever an active document stylesheet is added.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class StyleSheetAddedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Added stylesheet metainfo.
        /// </summary>
        [DataMember(Name = ("header"), IsRequired = (true))]
        public CefSharp.DevTools.CSS.CSSStyleSheetHeader Header
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired whenever a stylesheet is changed as a result of the client operation.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class StyleSheetChangedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// StyleSheetId
        /// </summary>
        [DataMember(Name = ("styleSheetId"), IsRequired = (true))]
        public string StyleSheetId
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired whenever an active document stylesheet is removed.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class StyleSheetRemovedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Identifier of the removed stylesheet.
        /// </summary>
        [DataMember(Name = ("styleSheetId"), IsRequired = (true))]
        public string StyleSheetId
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.CacheStorage
{
    /// <summary>
    /// type of HTTP response cached
    /// </summary>
    public enum CachedResponseType
    {
        /// <summary>
        /// basic
        /// </summary>
        [EnumMember(Value = ("basic"))]
        Basic,
        /// <summary>
        /// cors
        /// </summary>
        [EnumMember(Value = ("cors"))]
        Cors,
        /// <summary>
        /// default
        /// </summary>
        [EnumMember(Value = ("default"))]
        Default,
        /// <summary>
        /// error
        /// </summary>
        [EnumMember(Value = ("error"))]
        Error,
        /// <summary>
        /// opaqueResponse
        /// </summary>
        [EnumMember(Value = ("opaqueResponse"))]
        OpaqueResponse,
        /// <summary>
        /// opaqueRedirect
        /// </summary>
        [EnumMember(Value = ("opaqueRedirect"))]
        OpaqueRedirect
    }

    /// <summary>
    /// Data entry.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class DataEntry : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Request URL.
        /// </summary>
        [DataMember(Name = ("requestURL"), IsRequired = (true))]
        public string RequestURL
        {
            get;
            set;
        }

        /// <summary>
        /// Request method.
        /// </summary>
        [DataMember(Name = ("requestMethod"), IsRequired = (true))]
        public string RequestMethod
        {
            get;
            set;
        }

        /// <summary>
        /// Request headers
        /// </summary>
        [DataMember(Name = ("requestHeaders"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.CacheStorage.Header> RequestHeaders
        {
            get;
            set;
        }

        /// <summary>
        /// Number of seconds since epoch.
        /// </summary>
        [DataMember(Name = ("responseTime"), IsRequired = (true))]
        public double ResponseTime
        {
            get;
            set;
        }

        /// <summary>
        /// HTTP response status code.
        /// </summary>
        [DataMember(Name = ("responseStatus"), IsRequired = (true))]
        public int ResponseStatus
        {
            get;
            set;
        }

        /// <summary>
        /// HTTP response status text.
        /// </summary>
        [DataMember(Name = ("responseStatusText"), IsRequired = (true))]
        public string ResponseStatusText
        {
            get;
            set;
        }

        /// <summary>
        /// HTTP response type
        /// </summary>
        public CefSharp.DevTools.CacheStorage.CachedResponseType ResponseType
        {
            get
            {
                return (CefSharp.DevTools.CacheStorage.CachedResponseType)(StringToEnum(typeof(CefSharp.DevTools.CacheStorage.CachedResponseType), responseType));
            }

            set
            {
                this.responseType = (EnumToString(value));
            }
        }

        /// <summary>
        /// HTTP response type
        /// </summary>
        [DataMember(Name = ("responseType"), IsRequired = (true))]
        internal string responseType
        {
            get;
            set;
        }

        /// <summary>
        /// Response headers
        /// </summary>
        [DataMember(Name = ("responseHeaders"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.CacheStorage.Header> ResponseHeaders
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Cache identifier.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class Cache : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// An opaque unique id of the cache.
        /// </summary>
        [DataMember(Name = ("cacheId"), IsRequired = (true))]
        public string CacheId
        {
            get;
            set;
        }

        /// <summary>
        /// Security origin of the cache.
        /// </summary>
        [DataMember(Name = ("securityOrigin"), IsRequired = (true))]
        public string SecurityOrigin
        {
            get;
            set;
        }

        /// <summary>
        /// Storage key of the cache.
        /// </summary>
        [DataMember(Name = ("storageKey"), IsRequired = (true))]
        public string StorageKey
        {
            get;
            set;
        }

        /// <summary>
        /// Storage bucket of the cache.
        /// </summary>
        [DataMember(Name = ("storageBucket"), IsRequired = (false))]
        public CefSharp.DevTools.Storage.StorageBucket StorageBucket
        {
            get;
            set;
        }

        /// <summary>
        /// The name of the cache.
        /// </summary>
        [DataMember(Name = ("cacheName"), IsRequired = (true))]
        public string CacheName
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Header
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class Header : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Name
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// Value
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (true))]
        public string Value
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Cached response
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CachedResponse : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Entry content, base64-encoded.
        /// </summary>
        [DataMember(Name = ("body"), IsRequired = (true))]
        public byte[] Body
        {
            get;
            set;
        }
    }
}

namespace CefSharp.DevTools.Cast
{
    /// <summary>
    /// Sink
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class Sink : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Name
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// Id
        /// </summary>
        [DataMember(Name = ("id"), IsRequired = (true))]
        public string Id
        {
            get;
            set;
        }

        /// <summary>
        /// Text describing the current session. Present only if there is an active
        /// session on the sink.
        /// </summary>
        [DataMember(Name = ("session"), IsRequired = (false))]
        public string Session
        {
            get;
            set;
        }
    }

    /// <summary>
    /// This is fired whenever the list of available sinks changes. A sink is a
    /// device or a software surface that you can cast to.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class SinksUpdatedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Sinks
        /// </summary>
        [DataMember(Name = ("sinks"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Cast.Sink> Sinks
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// This is fired whenever the outstanding issue/error message changes.
    /// |issueMessage| is empty if there is no issue.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class IssueUpdatedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// IssueMessage
        /// </summary>
        [DataMember(Name = ("issueMessage"), IsRequired = (true))]
        public string IssueMessage
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.DOM
{
    /// <summary>
    /// Backend node with a friendly name.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class BackendNode : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// `Node`&apos;s nodeType.
        /// </summary>
        [DataMember(Name = ("nodeType"), IsRequired = (true))]
        public int NodeType
        {
            get;
            set;
        }

        /// <summary>
        /// `Node`&apos;s nodeName.
        /// </summary>
        [DataMember(Name = ("nodeName"), IsRequired = (true))]
        public string NodeName
        {
            get;
            set;
        }

        /// <summary>
        /// BackendNodeId
        /// </summary>
        [DataMember(Name = ("backendNodeId"), IsRequired = (true))]
        public int BackendNodeId
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Pseudo element type.
    /// </summary>
    public enum PseudoType
    {
        /// <summary>
        /// first-line
        /// </summary>
        [EnumMember(Value = ("first-line"))]
        FirstLine,
        /// <summary>
        /// first-letter
        /// </summary>
        [EnumMember(Value = ("first-letter"))]
        FirstLetter,
        /// <summary>
        /// before
        /// </summary>
        [EnumMember(Value = ("before"))]
        Before,
        /// <summary>
        /// after
        /// </summary>
        [EnumMember(Value = ("after"))]
        After,
        /// <summary>
        /// marker
        /// </summary>
        [EnumMember(Value = ("marker"))]
        Marker,
        /// <summary>
        /// backdrop
        /// </summary>
        [EnumMember(Value = ("backdrop"))]
        Backdrop,
        /// <summary>
        /// selection
        /// </summary>
        [EnumMember(Value = ("selection"))]
        Selection,
        /// <summary>
        /// target-text
        /// </summary>
        [EnumMember(Value = ("target-text"))]
        TargetText,
        /// <summary>
        /// spelling-error
        /// </summary>
        [EnumMember(Value = ("spelling-error"))]
        SpellingError,
        /// <summary>
        /// grammar-error
        /// </summary>
        [EnumMember(Value = ("grammar-error"))]
        GrammarError,
        /// <summary>
        /// highlight
        /// </summary>
        [EnumMember(Value = ("highlight"))]
        Highlight,
        /// <summary>
        /// first-line-inherited
        /// </summary>
        [EnumMember(Value = ("first-line-inherited"))]
        FirstLineInherited,
        /// <summary>
        /// scrollbar
        /// </summary>
        [EnumMember(Value = ("scrollbar"))]
        Scrollbar,
        /// <summary>
        /// scrollbar-thumb
        /// </summary>
        [EnumMember(Value = ("scrollbar-thumb"))]
        ScrollbarThumb,
        /// <summary>
        /// scrollbar-button
        /// </summary>
        [EnumMember(Value = ("scrollbar-button"))]
        ScrollbarButton,
        /// <summary>
        /// scrollbar-track
        /// </summary>
        [EnumMember(Value = ("scrollbar-track"))]
        ScrollbarTrack,
        /// <summary>
        /// scrollbar-track-piece
        /// </summary>
        [EnumMember(Value = ("scrollbar-track-piece"))]
        ScrollbarTrackPiece,
        /// <summary>
        /// scrollbar-corner
        /// </summary>
        [EnumMember(Value = ("scrollbar-corner"))]
        ScrollbarCorner,
        /// <summary>
        /// resizer
        /// </summary>
        [EnumMember(Value = ("resizer"))]
        Resizer,
        /// <summary>
        /// input-list-button
        /// </summary>
        [EnumMember(Value = ("input-list-button"))]
        InputListButton,
        /// <summary>
        /// view-transition
        /// </summary>
        [EnumMember(Value = ("view-transition"))]
        ViewTransition,
        /// <summary>
        /// view-transition-group
        /// </summary>
        [EnumMember(Value = ("view-transition-group"))]
        ViewTransitionGroup,
        /// <summary>
        /// view-transition-image-pair
        /// </summary>
        [EnumMember(Value = ("view-transition-image-pair"))]
        ViewTransitionImagePair,
        /// <summary>
        /// view-transition-old
        /// </summary>
        [EnumMember(Value = ("view-transition-old"))]
        ViewTransitionOld,
        /// <summary>
        /// view-transition-new
        /// </summary>
        [EnumMember(Value = ("view-transition-new"))]
        ViewTransitionNew
    }

    /// <summary>
    /// Shadow root type.
    /// </summary>
    public enum ShadowRootType
    {
        /// <summary>
        /// user-agent
        /// </summary>
        [EnumMember(Value = ("user-agent"))]
        UserAgent,
        /// <summary>
        /// open
        /// </summary>
        [EnumMember(Value = ("open"))]
        Open,
        /// <summary>
        /// closed
        /// </summary>
        [EnumMember(Value = ("closed"))]
        Closed
    }

    /// <summary>
    /// Document compatibility mode.
    /// </summary>
    public enum CompatibilityMode
    {
        /// <summary>
        /// QuirksMode
        /// </summary>
        [EnumMember(Value = ("QuirksMode"))]
        QuirksMode,
        /// <summary>
        /// LimitedQuirksMode
        /// </summary>
        [EnumMember(Value = ("LimitedQuirksMode"))]
        LimitedQuirksMode,
        /// <summary>
        /// NoQuirksMode
        /// </summary>
        [EnumMember(Value = ("NoQuirksMode"))]
        NoQuirksMode
    }

    /// <summary>
    /// ContainerSelector physical axes
    /// </summary>
    public enum PhysicalAxes
    {
        /// <summary>
        /// Horizontal
        /// </summary>
        [EnumMember(Value = ("Horizontal"))]
        Horizontal,
        /// <summary>
        /// Vertical
        /// </summary>
        [EnumMember(Value = ("Vertical"))]
        Vertical,
        /// <summary>
        /// Both
        /// </summary>
        [EnumMember(Value = ("Both"))]
        Both
    }

    /// <summary>
    /// ContainerSelector logical axes
    /// </summary>
    public enum LogicalAxes
    {
        /// <summary>
        /// Inline
        /// </summary>
        [EnumMember(Value = ("Inline"))]
        Inline,
        /// <summary>
        /// Block
        /// </summary>
        [EnumMember(Value = ("Block"))]
        Block,
        /// <summary>
        /// Both
        /// </summary>
        [EnumMember(Value = ("Both"))]
        Both
    }

    /// <summary>
    /// Physical scroll orientation
    /// </summary>
    public enum ScrollOrientation
    {
        /// <summary>
        /// horizontal
        /// </summary>
        [EnumMember(Value = ("horizontal"))]
        Horizontal,
        /// <summary>
        /// vertical
        /// </summary>
        [EnumMember(Value = ("vertical"))]
        Vertical
    }

    /// <summary>
    /// DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes.
    /// DOMNode is a base node mirror type.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class Node : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Node identifier that is passed into the rest of the DOM messages as the `nodeId`. Backend
        /// will only push node with given `id` once. It is aware of all requested nodes and will only
        /// fire DOM events for nodes known to the client.
        /// </summary>
        [DataMember(Name = ("nodeId"), IsRequired = (true))]
        public int NodeId
        {
            get;
            set;
        }

        /// <summary>
        /// The id of the parent node if any.
        /// </summary>
        [DataMember(Name = ("parentId"), IsRequired = (false))]
        public int? ParentId
        {
            get;
            set;
        }

        /// <summary>
        /// The BackendNodeId for this node.
        /// </summary>
        [DataMember(Name = ("backendNodeId"), IsRequired = (true))]
        public int BackendNodeId
        {
            get;
            set;
        }

        /// <summary>
        /// `Node`&apos;s nodeType.
        /// </summary>
        [DataMember(Name = ("nodeType"), IsRequired = (true))]
        public int NodeType
        {
            get;
            set;
        }

        /// <summary>
        /// `Node`&apos;s nodeName.
        /// </summary>
        [DataMember(Name = ("nodeName"), IsRequired = (true))]
        public string NodeName
        {
            get;
            set;
        }

        /// <summary>
        /// `Node`&apos;s localName.
        /// </summary>
        [DataMember(Name = ("localName"), IsRequired = (true))]
        public string LocalName
        {
            get;
            set;
        }

        /// <summary>
        /// `Node`&apos;s nodeValue.
        /// </summary>
        [DataMember(Name = ("nodeValue"), IsRequired = (true))]
        public string NodeValue
        {
            get;
            set;
        }

        /// <summary>
        /// Child count for `Container` nodes.
        /// </summary>
        [DataMember(Name = ("childNodeCount"), IsRequired = (false))]
        public int? ChildNodeCount
        {
            get;
            set;
        }

        /// <summary>
        /// Child nodes of this node when requested with children.
        /// </summary>
        [DataMember(Name = ("children"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.DOM.Node> Children
        {
            get;
            set;
        }

        /// <summary>
        /// Attributes of the `Element` node in the form of flat array `[name1, value1, name2, value2]`.
        /// </summary>
        [DataMember(Name = ("attributes"), IsRequired = (false))]
        public string[] Attributes
        {
            get;
            set;
        }

        /// <summary>
        /// Document URL that `Document` or `FrameOwner` node points to.
        /// </summary>
        [DataMember(Name = ("documentURL"), IsRequired = (false))]
        public string DocumentURL
        {
            get;
            set;
        }

        /// <summary>
        /// Base URL that `Document` or `FrameOwner` node uses for URL completion.
        /// </summary>
        [DataMember(Name = ("baseURL"), IsRequired = (false))]
        public string BaseURL
        {
            get;
            set;
        }

        /// <summary>
        /// `DocumentType`&apos;s publicId.
        /// </summary>
        [DataMember(Name = ("publicId"), IsRequired = (false))]
        public string PublicId
        {
            get;
            set;
        }

        /// <summary>
        /// `DocumentType`&apos;s systemId.
        /// </summary>
        [DataMember(Name = ("systemId"), IsRequired = (false))]
        public string SystemId
        {
            get;
            set;
        }

        /// <summary>
        /// `DocumentType`&apos;s internalSubset.
        /// </summary>
        [DataMember(Name = ("internalSubset"), IsRequired = (false))]
        public string InternalSubset
        {
            get;
            set;
        }

        /// <summary>
        /// `Document`&apos;s XML version in case of XML documents.
        /// </summary>
        [DataMember(Name = ("xmlVersion"), IsRequired = (false))]
        public string XmlVersion
        {
            get;
            set;
        }

        /// <summary>
        /// `Attr`&apos;s name.
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (false))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// `Attr`&apos;s value.
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (false))]
        public string Value
        {
            get;
            set;
        }

        /// <summary>
        /// Pseudo element type for this node.
        /// </summary>
        public CefSharp.DevTools.DOM.PseudoType? PseudoType
        {
            get
            {
                return (CefSharp.DevTools.DOM.PseudoType? )(StringToEnum(typeof(CefSharp.DevTools.DOM.PseudoType? ), pseudoType));
            }

            set
            {
                this.pseudoType = (EnumToString(value));
            }
        }

        /// <summary>
        /// Pseudo element type for this node.
        /// </summary>
        [DataMember(Name = ("pseudoType"), IsRequired = (false))]
        internal string pseudoType
        {
            get;
            set;
        }

        /// <summary>
        /// Pseudo element identifier for this node. Only present if there is a
        /// valid pseudoType.
        /// </summary>
        [DataMember(Name = ("pseudoIdentifier"), IsRequired = (false))]
        public string PseudoIdentifier
        {
            get;
            set;
        }

        /// <summary>
        /// Shadow root type.
        /// </summary>
        public CefSharp.DevTools.DOM.ShadowRootType? ShadowRootType
        {
            get
            {
                return (CefSharp.DevTools.DOM.ShadowRootType? )(StringToEnum(typeof(CefSharp.DevTools.DOM.ShadowRootType? ), shadowRootType));
            }

            set
            {
                this.shadowRootType = (EnumToString(value));
            }
        }

        /// <summary>
        /// Shadow root type.
        /// </summary>
        [DataMember(Name = ("shadowRootType"), IsRequired = (false))]
        internal string shadowRootType
        {
            get;
            set;
        }

        /// <summary>
        /// Frame ID for frame owner elements.
        /// </summary>
        [DataMember(Name = ("frameId"), IsRequired = (false))]
        public string FrameId
        {
            get;
            set;
        }

        /// <summary>
        /// Content document for frame owner elements.
        /// </summary>
        [DataMember(Name = ("contentDocument"), IsRequired = (false))]
        public CefSharp.DevTools.DOM.Node ContentDocument
        {
            get;
            set;
        }

        /// <summary>
        /// Shadow root list for given element host.
        /// </summary>
        [DataMember(Name = ("shadowRoots"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.DOM.Node> ShadowRoots
        {
            get;
            set;
        }

        /// <summary>
        /// Content document fragment for template elements.
        /// </summary>
        [DataMember(Name = ("templateContent"), IsRequired = (false))]
        public CefSharp.DevTools.DOM.Node TemplateContent
        {
            get;
            set;
        }

        /// <summary>
        /// Pseudo elements associated with this node.
        /// </summary>
        [DataMember(Name = ("pseudoElements"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.DOM.Node> PseudoElements
        {
            get;
            set;
        }

        /// <summary>
        /// Deprecated, as the HTML Imports API has been removed (crbug.com/937746).
        /// This property used to return the imported document for the HTMLImport links.
        /// The property is always undefined now.
        /// </summary>
        [DataMember(Name = ("importedDocument"), IsRequired = (false))]
        public CefSharp.DevTools.DOM.Node ImportedDocument
        {
            get;
            set;
        }

        /// <summary>
        /// Distributed nodes for given insertion point.
        /// </summary>
        [DataMember(Name = ("distributedNodes"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.DOM.BackendNode> DistributedNodes
        {
            get;
            set;
        }

        /// <summary>
        /// Whether the node is SVG.
        /// </summary>
        [DataMember(Name = ("isSVG"), IsRequired = (false))]
        public bool? IsSVG
        {
            get;
            set;
        }

        /// <summary>
        /// CompatibilityMode
        /// </summary>
        public CefSharp.DevTools.DOM.CompatibilityMode? CompatibilityMode
        {
            get
            {
                return (CefSharp.DevTools.DOM.CompatibilityMode? )(StringToEnum(typeof(CefSharp.DevTools.DOM.CompatibilityMode? ), compatibilityMode));
            }

            set
            {
                this.compatibilityMode = (EnumToString(value));
            }
        }

        /// <summary>
        /// CompatibilityMode
        /// </summary>
        [DataMember(Name = ("compatibilityMode"), IsRequired = (false))]
        internal string compatibilityMode
        {
            get;
            set;
        }

        /// <summary>
        /// AssignedSlot
        /// </summary>
        [DataMember(Name = ("assignedSlot"), IsRequired = (false))]
        public CefSharp.DevTools.DOM.BackendNode AssignedSlot
        {
            get;
            set;
        }
    }

    /// <summary>
    /// A structure holding an RGBA color.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class RGBA : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The red component, in the [0-255] range.
        /// </summary>
        [DataMember(Name = ("r"), IsRequired = (true))]
        public int R
        {
            get;
            set;
        }

        /// <summary>
        /// The green component, in the [0-255] range.
        /// </summary>
        [DataMember(Name = ("g"), IsRequired = (true))]
        public int G
        {
            get;
            set;
        }

        /// <summary>
        /// The blue component, in the [0-255] range.
        /// </summary>
        [DataMember(Name = ("b"), IsRequired = (true))]
        public int B
        {
            get;
            set;
        }

        /// <summary>
        /// The alpha component, in the [0-1] range (default: 1).
        /// </summary>
        [DataMember(Name = ("a"), IsRequired = (false))]
        public double? A
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Box model.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class BoxModel : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Content box
        /// </summary>
        [DataMember(Name = ("content"), IsRequired = (true))]
        public double[] Content
        {
            get;
            set;
        }

        /// <summary>
        /// Padding box
        /// </summary>
        [DataMember(Name = ("padding"), IsRequired = (true))]
        public double[] Padding
        {
            get;
            set;
        }

        /// <summary>
        /// Border box
        /// </summary>
        [DataMember(Name = ("border"), IsRequired = (true))]
        public double[] Border
        {
            get;
            set;
        }

        /// <summary>
        /// Margin box
        /// </summary>
        [DataMember(Name = ("margin"), IsRequired = (true))]
        public double[] Margin
        {
            get;
            set;
        }

        /// <summary>
        /// Node width
        /// </summary>
        [DataMember(Name = ("width"), IsRequired = (true))]
        public int Width
        {
            get;
            set;
        }

        /// <summary>
        /// Node height
        /// </summary>
        [DataMember(Name = ("height"), IsRequired = (true))]
        public int Height
        {
            get;
            set;
        }

        /// <summary>
        /// Shape outside coordinates
        /// </summary>
        [DataMember(Name = ("shapeOutside"), IsRequired = (false))]
        public CefSharp.DevTools.DOM.ShapeOutsideInfo ShapeOutside
        {
            get;
            set;
        }
    }

    /// <summary>
    /// CSS Shape Outside details.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ShapeOutsideInfo : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Shape bounds
        /// </summary>
        [DataMember(Name = ("bounds"), IsRequired = (true))]
        public double[] Bounds
        {
            get;
            set;
        }

        /// <summary>
        /// Shape coordinate details
        /// </summary>
        [DataMember(Name = ("shape"), IsRequired = (true))]
        public object[] Shape
        {
            get;
            set;
        }

        /// <summary>
        /// Margin shape bounds
        /// </summary>
        [DataMember(Name = ("marginShape"), IsRequired = (true))]
        public object[] MarginShape
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Rectangle.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class Rect : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// X coordinate
        /// </summary>
        [DataMember(Name = ("x"), IsRequired = (true))]
        public double X
        {
            get;
            set;
        }

        /// <summary>
        /// Y coordinate
        /// </summary>
        [DataMember(Name = ("y"), IsRequired = (true))]
        public double Y
        {
            get;
            set;
        }

        /// <summary>
        /// Rectangle width
        /// </summary>
        [DataMember(Name = ("width"), IsRequired = (true))]
        public double Width
        {
            get;
            set;
        }

        /// <summary>
        /// Rectangle height
        /// </summary>
        [DataMember(Name = ("height"), IsRequired = (true))]
        public double Height
        {
            get;
            set;
        }
    }

    /// <summary>
    /// CSSComputedStyleProperty
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CSSComputedStyleProperty : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Computed style property name.
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// Computed style property value.
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (true))]
        public string Value
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Fired when `Element`&apos;s attribute is modified.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class AttributeModifiedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Id of the node that has changed.
        /// </summary>
        [DataMember(Name = ("nodeId"), IsRequired = (true))]
        public int NodeId
        {
            get;
            private set;
        }

        /// <summary>
        /// Attribute name.
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            private set;
        }

        /// <summary>
        /// Attribute value.
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (true))]
        public string Value
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when `Element`&apos;s attribute is removed.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class AttributeRemovedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Id of the node that has changed.
        /// </summary>
        [DataMember(Name = ("nodeId"), IsRequired = (true))]
        public int NodeId
        {
            get;
            private set;
        }

        /// <summary>
        /// A ttribute name.
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Mirrors `DOMCharacterDataModified` event.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class CharacterDataModifiedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Id of the node that has changed.
        /// </summary>
        [DataMember(Name = ("nodeId"), IsRequired = (true))]
        public int NodeId
        {
            get;
            private set;
        }

        /// <summary>
        /// New text value.
        /// </summary>
        [DataMember(Name = ("characterData"), IsRequired = (true))]
        public string CharacterData
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when `Container`&apos;s child node count has changed.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class ChildNodeCountUpdatedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Id of the node that has changed.
        /// </summary>
        [DataMember(Name = ("nodeId"), IsRequired = (true))]
        public int NodeId
        {
            get;
            private set;
        }

        /// <summary>
        /// New node count.
        /// </summary>
        [DataMember(Name = ("childNodeCount"), IsRequired = (true))]
        public int ChildNodeCount
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Mirrors `DOMNodeInserted` event.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class ChildNodeInsertedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Id of the node that has changed.
        /// </summary>
        [DataMember(Name = ("parentNodeId"), IsRequired = (true))]
        public int ParentNodeId
        {
            get;
            private set;
        }

        /// <summary>
        /// Id of the previous sibling.
        /// </summary>
        [DataMember(Name = ("previousNodeId"), IsRequired = (true))]
        public int PreviousNodeId
        {
            get;
            private set;
        }

        /// <summary>
        /// Inserted node data.
        /// </summary>
        [DataMember(Name = ("node"), IsRequired = (true))]
        public CefSharp.DevTools.DOM.Node Node
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Mirrors `DOMNodeRemoved` event.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class ChildNodeRemovedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Parent id.
        /// </summary>
        [DataMember(Name = ("parentNodeId"), IsRequired = (true))]
        public int ParentNodeId
        {
            get;
            private set;
        }

        /// <summary>
        /// Id of the node that has been removed.
        /// </summary>
        [DataMember(Name = ("nodeId"), IsRequired = (true))]
        public int NodeId
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Called when distribution is changed.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class DistributedNodesUpdatedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Insertion point where distributed nodes were updated.
        /// </summary>
        [DataMember(Name = ("insertionPointId"), IsRequired = (true))]
        public int InsertionPointId
        {
            get;
            private set;
        }

        /// <summary>
        /// Distributed nodes for given insertion point.
        /// </summary>
        [DataMember(Name = ("distributedNodes"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.DOM.BackendNode> DistributedNodes
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when `Element`&apos;s inline style is modified via a CSS property modification.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class InlineStyleInvalidatedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Ids of the nodes for which the inline styles have been invalidated.
        /// </summary>
        [DataMember(Name = ("nodeIds"), IsRequired = (true))]
        public int[] NodeIds
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Called when a pseudo element is added to an element.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class PseudoElementAddedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Pseudo element&apos;s parent element id.
        /// </summary>
        [DataMember(Name = ("parentId"), IsRequired = (true))]
        public int ParentId
        {
            get;
            private set;
        }

        /// <summary>
        /// The added pseudo element.
        /// </summary>
        [DataMember(Name = ("pseudoElement"), IsRequired = (true))]
        public CefSharp.DevTools.DOM.Node PseudoElement
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Called when a pseudo element is removed from an element.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class PseudoElementRemovedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Pseudo element&apos;s parent element id.
        /// </summary>
        [DataMember(Name = ("parentId"), IsRequired = (true))]
        public int ParentId
        {
            get;
            private set;
        }

        /// <summary>
        /// The removed pseudo element id.
        /// </summary>
        [DataMember(Name = ("pseudoElementId"), IsRequired = (true))]
        public int PseudoElementId
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when backend wants to provide client with the missing DOM structure. This happens upon
    /// most of the calls requesting node ids.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class SetChildNodesEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Parent node id to populate with children.
        /// </summary>
        [DataMember(Name = ("parentId"), IsRequired = (true))]
        public int ParentId
        {
            get;
            private set;
        }

        /// <summary>
        /// Child nodes array.
        /// </summary>
        [DataMember(Name = ("nodes"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.DOM.Node> Nodes
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Called when shadow root is popped from the element.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class ShadowRootPoppedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Host element id.
        /// </summary>
        [DataMember(Name = ("hostId"), IsRequired = (true))]
        public int HostId
        {
            get;
            private set;
        }

        /// <summary>
        /// Shadow root id.
        /// </summary>
        [DataMember(Name = ("rootId"), IsRequired = (true))]
        public int RootId
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Called when shadow root is pushed into the element.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class ShadowRootPushedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Host element id.
        /// </summary>
        [DataMember(Name = ("hostId"), IsRequired = (true))]
        public int HostId
        {
            get;
            private set;
        }

        /// <summary>
        /// Shadow root.
        /// </summary>
        [DataMember(Name = ("root"), IsRequired = (true))]
        public CefSharp.DevTools.DOM.Node Root
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.DOMDebugger
{
    /// <summary>
    /// DOM breakpoint type.
    /// </summary>
    public enum DOMBreakpointType
    {
        /// <summary>
        /// subtree-modified
        /// </summary>
        [EnumMember(Value = ("subtree-modified"))]
        SubtreeModified,
        /// <summary>
        /// attribute-modified
        /// </summary>
        [EnumMember(Value = ("attribute-modified"))]
        AttributeModified,
        /// <summary>
        /// node-removed
        /// </summary>
        [EnumMember(Value = ("node-removed"))]
        NodeRemoved
    }

    /// <summary>
    /// CSP Violation type.
    /// </summary>
    public enum CSPViolationType
    {
        /// <summary>
        /// trustedtype-sink-violation
        /// </summary>
        [EnumMember(Value = ("trustedtype-sink-violation"))]
        TrustedtypeSinkViolation,
        /// <summary>
        /// trustedtype-policy-violation
        /// </summary>
        [EnumMember(Value = ("trustedtype-policy-violation"))]
        TrustedtypePolicyViolation
    }

    /// <summary>
    /// Object event listener.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class EventListener : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// `EventListener`&apos;s type.
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (true))]
        public string Type
        {
            get;
            set;
        }

        /// <summary>
        /// `EventListener`&apos;s useCapture.
        /// </summary>
        [DataMember(Name = ("useCapture"), IsRequired = (true))]
        public bool UseCapture
        {
            get;
            set;
        }

        /// <summary>
        /// `EventListener`&apos;s passive flag.
        /// </summary>
        [DataMember(Name = ("passive"), IsRequired = (true))]
        public bool Passive
        {
            get;
            set;
        }

        /// <summary>
        /// `EventListener`&apos;s once flag.
        /// </summary>
        [DataMember(Name = ("once"), IsRequired = (true))]
        public bool Once
        {
            get;
            set;
        }

        /// <summary>
        /// Script id of the handler code.
        /// </summary>
        [DataMember(Name = ("scriptId"), IsRequired = (true))]
        public string ScriptId
        {
            get;
            set;
        }

        /// <summary>
        /// Line number in the script (0-based).
        /// </summary>
        [DataMember(Name = ("lineNumber"), IsRequired = (true))]
        public int LineNumber
        {
            get;
            set;
        }

        /// <summary>
        /// Column number in the script (0-based).
        /// </summary>
        [DataMember(Name = ("columnNumber"), IsRequired = (true))]
        public int ColumnNumber
        {
            get;
            set;
        }

        /// <summary>
        /// Event handler function value.
        /// </summary>
        [DataMember(Name = ("handler"), IsRequired = (false))]
        public CefSharp.DevTools.Runtime.RemoteObject Handler
        {
            get;
            set;
        }

        /// <summary>
        /// Event original handler function value.
        /// </summary>
        [DataMember(Name = ("originalHandler"), IsRequired = (false))]
        public CefSharp.DevTools.Runtime.RemoteObject OriginalHandler
        {
            get;
            set;
        }

        /// <summary>
        /// Node the listener is added to (if any).
        /// </summary>
        [DataMember(Name = ("backendNodeId"), IsRequired = (false))]
        public int? BackendNodeId
        {
            get;
            set;
        }
    }
}

namespace CefSharp.DevTools.DOMSnapshot
{
    /// <summary>
    /// A Node in the DOM tree.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class DOMNode : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// `Node`&apos;s nodeType.
        /// </summary>
        [DataMember(Name = ("nodeType"), IsRequired = (true))]
        public int NodeType
        {
            get;
            set;
        }

        /// <summary>
        /// `Node`&apos;s nodeName.
        /// </summary>
        [DataMember(Name = ("nodeName"), IsRequired = (true))]
        public string NodeName
        {
            get;
            set;
        }

        /// <summary>
        /// `Node`&apos;s nodeValue.
        /// </summary>
        [DataMember(Name = ("nodeValue"), IsRequired = (true))]
        public string NodeValue
        {
            get;
            set;
        }

        /// <summary>
        /// Only set for textarea elements, contains the text value.
        /// </summary>
        [DataMember(Name = ("textValue"), IsRequired = (false))]
        public string TextValue
        {
            get;
            set;
        }

        /// <summary>
        /// Only set for input elements, contains the input&apos;s associated text value.
        /// </summary>
        [DataMember(Name = ("inputValue"), IsRequired = (false))]
        public string InputValue
        {
            get;
            set;
        }

        /// <summary>
        /// Only set for radio and checkbox input elements, indicates if the element has been checked
        /// </summary>
        [DataMember(Name = ("inputChecked"), IsRequired = (false))]
        public bool? InputChecked
        {
            get;
            set;
        }

        /// <summary>
        /// Only set for option elements, indicates if the element has been selected
        /// </summary>
        [DataMember(Name = ("optionSelected"), IsRequired = (false))]
        public bool? OptionSelected
        {
            get;
            set;
        }

        /// <summary>
        /// `Node`&apos;s id, corresponds to DOM.Node.backendNodeId.
        /// </summary>
        [DataMember(Name = ("backendNodeId"), IsRequired = (true))]
        public int BackendNodeId
        {
            get;
            set;
        }

        /// <summary>
        /// The indexes of the node&apos;s child nodes in the `domNodes` array returned by `getSnapshot`, if
        /// any.
        /// </summary>
        [DataMember(Name = ("childNodeIndexes"), IsRequired = (false))]
        public int[] ChildNodeIndexes
        {
            get;
            set;
        }

        /// <summary>
        /// Attributes of an `Element` node.
        /// </summary>
        [DataMember(Name = ("attributes"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.DOMSnapshot.NameValue> Attributes
        {
            get;
            set;
        }

        /// <summary>
        /// Indexes of pseudo elements associated with this node in the `domNodes` array returned by
        /// `getSnapshot`, if any.
        /// </summary>
        [DataMember(Name = ("pseudoElementIndexes"), IsRequired = (false))]
        public int[] PseudoElementIndexes
        {
            get;
            set;
        }

        /// <summary>
        /// The index of the node&apos;s related layout tree node in the `layoutTreeNodes` array returned by
        /// `getSnapshot`, if any.
        /// </summary>
        [DataMember(Name = ("layoutNodeIndex"), IsRequired = (false))]
        public int? LayoutNodeIndex
        {
            get;
            set;
        }

        /// <summary>
        /// Document URL that `Document` or `FrameOwner` node points to.
        /// </summary>
        [DataMember(Name = ("documentURL"), IsRequired = (false))]
        public string DocumentURL
        {
            get;
            set;
        }

        /// <summary>
        /// Base URL that `Document` or `FrameOwner` node uses for URL completion.
        /// </summary>
        [DataMember(Name = ("baseURL"), IsRequired = (false))]
        public string BaseURL
        {
            get;
            set;
        }

        /// <summary>
        /// Only set for documents, contains the document&apos;s content language.
        /// </summary>
        [DataMember(Name = ("contentLanguage"), IsRequired = (false))]
        public string ContentLanguage
        {
            get;
            set;
        }

        /// <summary>
        /// Only set for documents, contains the document&apos;s character set encoding.
        /// </summary>
        [DataMember(Name = ("documentEncoding"), IsRequired = (false))]
        public string DocumentEncoding
        {
            get;
            set;
        }

        /// <summary>
        /// `DocumentType` node&apos;s publicId.
        /// </summary>
        [DataMember(Name = ("publicId"), IsRequired = (false))]
        public string PublicId
        {
            get;
            set;
        }

        /// <summary>
        /// `DocumentType` node&apos;s systemId.
        /// </summary>
        [DataMember(Name = ("systemId"), IsRequired = (false))]
        public string SystemId
        {
            get;
            set;
        }

        /// <summary>
        /// Frame ID for frame owner elements and also for the document node.
        /// </summary>
        [DataMember(Name = ("frameId"), IsRequired = (false))]
        public string FrameId
        {
            get;
            set;
        }

        /// <summary>
        /// The index of a frame owner element&apos;s content document in the `domNodes` array returned by
        /// `getSnapshot`, if any.
        /// </summary>
        [DataMember(Name = ("contentDocumentIndex"), IsRequired = (false))]
        public int? ContentDocumentIndex
        {
            get;
            set;
        }

        /// <summary>
        /// Type of a pseudo element node.
        /// </summary>
        public CefSharp.DevTools.DOM.PseudoType? PseudoType
        {
            get
            {
                return (CefSharp.DevTools.DOM.PseudoType? )(StringToEnum(typeof(CefSharp.DevTools.DOM.PseudoType? ), pseudoType));
            }

            set
            {
                this.pseudoType = (EnumToString(value));
            }
        }

        /// <summary>
        /// Type of a pseudo element node.
        /// </summary>
        [DataMember(Name = ("pseudoType"), IsRequired = (false))]
        internal string pseudoType
        {
            get;
            set;
        }

        /// <summary>
        /// Shadow root type.
        /// </summary>
        public CefSharp.DevTools.DOM.ShadowRootType? ShadowRootType
        {
            get
            {
                return (CefSharp.DevTools.DOM.ShadowRootType? )(StringToEnum(typeof(CefSharp.DevTools.DOM.ShadowRootType? ), shadowRootType));
            }

            set
            {
                this.shadowRootType = (EnumToString(value));
            }
        }

        /// <summary>
        /// Shadow root type.
        /// </summary>
        [DataMember(Name = ("shadowRootType"), IsRequired = (false))]
        internal string shadowRootType
        {
            get;
            set;
        }

        /// <summary>
        /// Whether this DOM node responds to mouse clicks. This includes nodes that have had click
        /// event listeners attached via JavaScript as well as anchor tags that naturally navigate when
        /// clicked.
        /// </summary>
        [DataMember(Name = ("isClickable"), IsRequired = (false))]
        public bool? IsClickable
        {
            get;
            set;
        }

        /// <summary>
        /// Details of the node&apos;s event listeners, if any.
        /// </summary>
        [DataMember(Name = ("eventListeners"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.DOMDebugger.EventListener> EventListeners
        {
            get;
            set;
        }

        /// <summary>
        /// The selected url for nodes with a srcset attribute.
        /// </summary>
        [DataMember(Name = ("currentSourceURL"), IsRequired = (false))]
        public string CurrentSourceURL
        {
            get;
            set;
        }

        /// <summary>
        /// The url of the script (if any) that generates this node.
        /// </summary>
        [DataMember(Name = ("originURL"), IsRequired = (false))]
        public string OriginURL
        {
            get;
            set;
        }

        /// <summary>
        /// Scroll offsets, set when this node is a Document.
        /// </summary>
        [DataMember(Name = ("scrollOffsetX"), IsRequired = (false))]
        public double? ScrollOffsetX
        {
            get;
            set;
        }

        /// <summary>
        /// ScrollOffsetY
        /// </summary>
        [DataMember(Name = ("scrollOffsetY"), IsRequired = (false))]
        public double? ScrollOffsetY
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Details of post layout rendered text positions. The exact layout should not be regarded as
    /// stable and may change between versions.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class InlineTextBox : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The bounding box in document coordinates. Note that scroll offset of the document is ignored.
        /// </summary>
        [DataMember(Name = ("boundingBox"), IsRequired = (true))]
        public CefSharp.DevTools.DOM.Rect BoundingBox
        {
            get;
            set;
        }

        /// <summary>
        /// The starting index in characters, for this post layout textbox substring. Characters that
        /// would be represented as a surrogate pair in UTF-16 have length 2.
        /// </summary>
        [DataMember(Name = ("startCharacterIndex"), IsRequired = (true))]
        public int StartCharacterIndex
        {
            get;
            set;
        }

        /// <summary>
        /// The number of characters in this post layout textbox substring. Characters that would be
        /// represented as a surrogate pair in UTF-16 have length 2.
        /// </summary>
        [DataMember(Name = ("numCharacters"), IsRequired = (true))]
        public int NumCharacters
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Details of an element in the DOM tree with a LayoutObject.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class LayoutTreeNode : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The index of the related DOM node in the `domNodes` array returned by `getSnapshot`.
        /// </summary>
        [DataMember(Name = ("domNodeIndex"), IsRequired = (true))]
        public int DomNodeIndex
        {
            get;
            set;
        }

        /// <summary>
        /// The bounding box in document coordinates. Note that scroll offset of the document is ignored.
        /// </summary>
        [DataMember(Name = ("boundingBox"), IsRequired = (true))]
        public CefSharp.DevTools.DOM.Rect BoundingBox
        {
            get;
            set;
        }

        /// <summary>
        /// Contents of the LayoutText, if any.
        /// </summary>
        [DataMember(Name = ("layoutText"), IsRequired = (false))]
        public string LayoutText
        {
            get;
            set;
        }

        /// <summary>
        /// The post-layout inline text nodes, if any.
        /// </summary>
        [DataMember(Name = ("inlineTextNodes"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.DOMSnapshot.InlineTextBox> InlineTextNodes
        {
            get;
            set;
        }

        /// <summary>
        /// Index into the `computedStyles` array returned by `getSnapshot`.
        /// </summary>
        [DataMember(Name = ("styleIndex"), IsRequired = (false))]
        public int? StyleIndex
        {
            get;
            set;
        }

        /// <summary>
        /// Global paint order index, which is determined by the stacking order of the nodes. Nodes
        /// that are painted together will have the same index. Only provided if includePaintOrder in
        /// getSnapshot was true.
        /// </summary>
        [DataMember(Name = ("paintOrder"), IsRequired = (false))]
        public int? PaintOrder
        {
            get;
            set;
        }

        /// <summary>
        /// Set to true to indicate the element begins a new stacking context.
        /// </summary>
        [DataMember(Name = ("isStackingContext"), IsRequired = (false))]
        public bool? IsStackingContext
        {
            get;
            set;
        }
    }

    /// <summary>
    /// A subset of the full ComputedStyle as defined by the request whitelist.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ComputedStyle : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Name/value pairs of computed style properties.
        /// </summary>
        [DataMember(Name = ("properties"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.DOMSnapshot.NameValue> Properties
        {
            get;
            set;
        }
    }

    /// <summary>
    /// A name/value pair.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class NameValue : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Attribute/property name.
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// Attribute/property value.
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (true))]
        public string Value
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Data that is only present on rare nodes.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class RareStringData : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Index
        /// </summary>
        [DataMember(Name = ("index"), IsRequired = (true))]
        public int[] Index
        {
            get;
            set;
        }

        /// <summary>
        /// Value
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (true))]
        public int[] Value
        {
            get;
            set;
        }
    }

    /// <summary>
    /// RareBooleanData
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class RareBooleanData : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Index
        /// </summary>
        [DataMember(Name = ("index"), IsRequired = (true))]
        public int[] Index
        {
            get;
            set;
        }
    }

    /// <summary>
    /// RareIntegerData
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class RareIntegerData : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Index
        /// </summary>
        [DataMember(Name = ("index"), IsRequired = (true))]
        public int[] Index
        {
            get;
            set;
        }

        /// <summary>
        /// Value
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (true))]
        public int[] Value
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Document snapshot.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class DocumentSnapshot : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Document URL that `Document` or `FrameOwner` node points to.
        /// </summary>
        [DataMember(Name = ("documentURL"), IsRequired = (true))]
        public int DocumentURL
        {
            get;
            set;
        }

        /// <summary>
        /// Document title.
        /// </summary>
        [DataMember(Name = ("title"), IsRequired = (true))]
        public int Title
        {
            get;
            set;
        }

        /// <summary>
        /// Base URL that `Document` or `FrameOwner` node uses for URL completion.
        /// </summary>
        [DataMember(Name = ("baseURL"), IsRequired = (true))]
        public int BaseURL
        {
            get;
            set;
        }

        /// <summary>
        /// Contains the document&apos;s content language.
        /// </summary>
        [DataMember(Name = ("contentLanguage"), IsRequired = (true))]
        public int ContentLanguage
        {
            get;
            set;
        }

        /// <summary>
        /// Contains the document&apos;s character set encoding.
        /// </summary>
        [DataMember(Name = ("encodingName"), IsRequired = (true))]
        public int EncodingName
        {
            get;
            set;
        }

        /// <summary>
        /// `DocumentType` node&apos;s publicId.
        /// </summary>
        [DataMember(Name = ("publicId"), IsRequired = (true))]
        public int PublicId
        {
            get;
            set;
        }

        /// <summary>
        /// `DocumentType` node&apos;s systemId.
        /// </summary>
        [DataMember(Name = ("systemId"), IsRequired = (true))]
        public int SystemId
        {
            get;
            set;
        }

        /// <summary>
        /// Frame ID for frame owner elements and also for the document node.
        /// </summary>
        [DataMember(Name = ("frameId"), IsRequired = (true))]
        public int FrameId
        {
            get;
            set;
        }

        /// <summary>
        /// A table with dom nodes.
        /// </summary>
        [DataMember(Name = ("nodes"), IsRequired = (true))]
        public CefSharp.DevTools.DOMSnapshot.NodeTreeSnapshot Nodes
        {
            get;
            set;
        }

        /// <summary>
        /// The nodes in the layout tree.
        /// </summary>
        [DataMember(Name = ("layout"), IsRequired = (true))]
        public CefSharp.DevTools.DOMSnapshot.LayoutTreeSnapshot Layout
        {
            get;
            set;
        }

        /// <summary>
        /// The post-layout inline text nodes.
        /// </summary>
        [DataMember(Name = ("textBoxes"), IsRequired = (true))]
        public CefSharp.DevTools.DOMSnapshot.TextBoxSnapshot TextBoxes
        {
            get;
            set;
        }

        /// <summary>
        /// Horizontal scroll offset.
        /// </summary>
        [DataMember(Name = ("scrollOffsetX"), IsRequired = (false))]
        public double? ScrollOffsetX
        {
            get;
            set;
        }

        /// <summary>
        /// Vertical scroll offset.
        /// </summary>
        [DataMember(Name = ("scrollOffsetY"), IsRequired = (false))]
        public double? ScrollOffsetY
        {
            get;
            set;
        }

        /// <summary>
        /// Document content width.
        /// </summary>
        [DataMember(Name = ("contentWidth"), IsRequired = (false))]
        public double? ContentWidth
        {
            get;
            set;
        }

        /// <summary>
        /// Document content height.
        /// </summary>
        [DataMember(Name = ("contentHeight"), IsRequired = (false))]
        public double? ContentHeight
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Table containing nodes.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class NodeTreeSnapshot : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Parent node index.
        /// </summary>
        [DataMember(Name = ("parentIndex"), IsRequired = (false))]
        public int[] ParentIndex
        {
            get;
            set;
        }

        /// <summary>
        /// `Node`&apos;s nodeType.
        /// </summary>
        [DataMember(Name = ("nodeType"), IsRequired = (false))]
        public int[] NodeType
        {
            get;
            set;
        }

        /// <summary>
        /// Type of the shadow root the `Node` is in. String values are equal to the `ShadowRootType` enum.
        /// </summary>
        [DataMember(Name = ("shadowRootType"), IsRequired = (false))]
        public CefSharp.DevTools.DOMSnapshot.RareStringData ShadowRootType
        {
            get;
            set;
        }

        /// <summary>
        /// `Node`&apos;s nodeName.
        /// </summary>
        [DataMember(Name = ("nodeName"), IsRequired = (false))]
        public int[] NodeName
        {
            get;
            set;
        }

        /// <summary>
        /// `Node`&apos;s nodeValue.
        /// </summary>
        [DataMember(Name = ("nodeValue"), IsRequired = (false))]
        public int[] NodeValue
        {
            get;
            set;
        }

        /// <summary>
        /// `Node`&apos;s id, corresponds to DOM.Node.backendNodeId.
        /// </summary>
        [DataMember(Name = ("backendNodeId"), IsRequired = (false))]
        public int[] BackendNodeId
        {
            get;
            set;
        }

        /// <summary>
        /// Attributes of an `Element` node. Flatten name, value pairs.
        /// </summary>
        [DataMember(Name = ("attributes"), IsRequired = (false))]
        public int[] Attributes
        {
            get;
            set;
        }

        /// <summary>
        /// Only set for textarea elements, contains the text value.
        /// </summary>
        [DataMember(Name = ("textValue"), IsRequired = (false))]
        public CefSharp.DevTools.DOMSnapshot.RareStringData TextValue
        {
            get;
            set;
        }

        /// <summary>
        /// Only set for input elements, contains the input&apos;s associated text value.
        /// </summary>
        [DataMember(Name = ("inputValue"), IsRequired = (false))]
        public CefSharp.DevTools.DOMSnapshot.RareStringData InputValue
        {
            get;
            set;
        }

        /// <summary>
        /// Only set for radio and checkbox input elements, indicates if the element has been checked
        /// </summary>
        [DataMember(Name = ("inputChecked"), IsRequired = (false))]
        public CefSharp.DevTools.DOMSnapshot.RareBooleanData InputChecked
        {
            get;
            set;
        }

        /// <summary>
        /// Only set for option elements, indicates if the element has been selected
        /// </summary>
        [DataMember(Name = ("optionSelected"), IsRequired = (false))]
        public CefSharp.DevTools.DOMSnapshot.RareBooleanData OptionSelected
        {
            get;
            set;
        }

        /// <summary>
        /// The index of the document in the list of the snapshot documents.
        /// </summary>
        [DataMember(Name = ("contentDocumentIndex"), IsRequired = (false))]
        public CefSharp.DevTools.DOMSnapshot.RareIntegerData ContentDocumentIndex
        {
            get;
            set;
        }

        /// <summary>
        /// Type of a pseudo element node.
        /// </summary>
        [DataMember(Name = ("pseudoType"), IsRequired = (false))]
        public CefSharp.DevTools.DOMSnapshot.RareStringData PseudoType
        {
            get;
            set;
        }

        /// <summary>
        /// Pseudo element identifier for this node. Only present if there is a
        /// valid pseudoType.
        /// </summary>
        [DataMember(Name = ("pseudoIdentifier"), IsRequired = (false))]
        public CefSharp.DevTools.DOMSnapshot.RareStringData PseudoIdentifier
        {
            get;
            set;
        }

        /// <summary>
        /// Whether this DOM node responds to mouse clicks. This includes nodes that have had click
        /// event listeners attached via JavaScript as well as anchor tags that naturally navigate when
        /// clicked.
        /// </summary>
        [DataMember(Name = ("isClickable"), IsRequired = (false))]
        public CefSharp.DevTools.DOMSnapshot.RareBooleanData IsClickable
        {
            get;
            set;
        }

        /// <summary>
        /// The selected url for nodes with a srcset attribute.
        /// </summary>
        [DataMember(Name = ("currentSourceURL"), IsRequired = (false))]
        public CefSharp.DevTools.DOMSnapshot.RareStringData CurrentSourceURL
        {
            get;
            set;
        }

        /// <summary>
        /// The url of the script (if any) that generates this node.
        /// </summary>
        [DataMember(Name = ("originURL"), IsRequired = (false))]
        public CefSharp.DevTools.DOMSnapshot.RareStringData OriginURL
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Table of details of an element in the DOM tree with a LayoutObject.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class LayoutTreeSnapshot : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Index of the corresponding node in the `NodeTreeSnapshot` array returned by `captureSnapshot`.
        /// </summary>
        [DataMember(Name = ("nodeIndex"), IsRequired = (true))]
        public int[] NodeIndex
        {
            get;
            set;
        }

        /// <summary>
        /// Array of indexes specifying computed style strings, filtered according to the `computedStyles` parameter passed to `captureSnapshot`.
        /// </summary>
        [DataMember(Name = ("styles"), IsRequired = (true))]
        public int[] Styles
        {
            get;
            set;
        }

        /// <summary>
        /// The absolute position bounding box.
        /// </summary>
        [DataMember(Name = ("bounds"), IsRequired = (true))]
        public double[] Bounds
        {
            get;
            set;
        }

        /// <summary>
        /// Contents of the LayoutText, if any.
        /// </summary>
        [DataMember(Name = ("text"), IsRequired = (true))]
        public int[] Text
        {
            get;
            set;
        }

        /// <summary>
        /// Stacking context information.
        /// </summary>
        [DataMember(Name = ("stackingContexts"), IsRequired = (true))]
        public CefSharp.DevTools.DOMSnapshot.RareBooleanData StackingContexts
        {
            get;
            set;
        }

        /// <summary>
        /// Global paint order index, which is determined by the stacking order of the nodes. Nodes
        /// that are painted together will have the same index. Only provided if includePaintOrder in
        /// captureSnapshot was true.
        /// </summary>
        [DataMember(Name = ("paintOrders"), IsRequired = (false))]
        public int[] PaintOrders
        {
            get;
            set;
        }

        /// <summary>
        /// The offset rect of nodes. Only available when includeDOMRects is set to true
        /// </summary>
        [DataMember(Name = ("offsetRects"), IsRequired = (false))]
        public double[] OffsetRects
        {
            get;
            set;
        }

        /// <summary>
        /// The scroll rect of nodes. Only available when includeDOMRects is set to true
        /// </summary>
        [DataMember(Name = ("scrollRects"), IsRequired = (false))]
        public double[] ScrollRects
        {
            get;
            set;
        }

        /// <summary>
        /// The client rect of nodes. Only available when includeDOMRects is set to true
        /// </summary>
        [DataMember(Name = ("clientRects"), IsRequired = (false))]
        public double[] ClientRects
        {
            get;
            set;
        }

        /// <summary>
        /// The list of background colors that are blended with colors of overlapping elements.
        /// </summary>
        [DataMember(Name = ("blendedBackgroundColors"), IsRequired = (false))]
        public int[] BlendedBackgroundColors
        {
            get;
            set;
        }

        /// <summary>
        /// The list of computed text opacities.
        /// </summary>
        [DataMember(Name = ("textColorOpacities"), IsRequired = (false))]
        public double[] TextColorOpacities
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Table of details of the post layout rendered text positions. The exact layout should not be regarded as
    /// stable and may change between versions.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class TextBoxSnapshot : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Index of the layout tree node that owns this box collection.
        /// </summary>
        [DataMember(Name = ("layoutIndex"), IsRequired = (true))]
        public int[] LayoutIndex
        {
            get;
            set;
        }

        /// <summary>
        /// The absolute position bounding box.
        /// </summary>
        [DataMember(Name = ("bounds"), IsRequired = (true))]
        public double[] Bounds
        {
            get;
            set;
        }

        /// <summary>
        /// The starting index in characters, for this post layout textbox substring. Characters that
        /// would be represented as a surrogate pair in UTF-16 have length 2.
        /// </summary>
        [DataMember(Name = ("start"), IsRequired = (true))]
        public int[] Start
        {
            get;
            set;
        }

        /// <summary>
        /// The number of characters in this post layout textbox substring. Characters that would be
        /// represented as a surrogate pair in UTF-16 have length 2.
        /// </summary>
        [DataMember(Name = ("length"), IsRequired = (true))]
        public int[] Length
        {
            get;
            set;
        }
    }
}

namespace CefSharp.DevTools.DOMStorage
{
    /// <summary>
    /// DOM Storage identifier.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class StorageId : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Security origin for the storage.
        /// </summary>
        [DataMember(Name = ("securityOrigin"), IsRequired = (false))]
        public string SecurityOrigin
        {
            get;
            set;
        }

        /// <summary>
        /// Represents a key by which DOM Storage keys its CachedStorageAreas
        /// </summary>
        [DataMember(Name = ("storageKey"), IsRequired = (false))]
        public string StorageKey
        {
            get;
            set;
        }

        /// <summary>
        /// Whether the storage is local storage (not session storage).
        /// </summary>
        [DataMember(Name = ("isLocalStorage"), IsRequired = (true))]
        public bool IsLocalStorage
        {
            get;
            set;
        }
    }

    /// <summary>
    /// domStorageItemAdded
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class DomStorageItemAddedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// StorageId
        /// </summary>
        [DataMember(Name = ("storageId"), IsRequired = (true))]
        public CefSharp.DevTools.DOMStorage.StorageId StorageId
        {
            get;
            private set;
        }

        /// <summary>
        /// Key
        /// </summary>
        [DataMember(Name = ("key"), IsRequired = (true))]
        public string Key
        {
            get;
            private set;
        }

        /// <summary>
        /// NewValue
        /// </summary>
        [DataMember(Name = ("newValue"), IsRequired = (true))]
        public string NewValue
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// domStorageItemRemoved
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class DomStorageItemRemovedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// StorageId
        /// </summary>
        [DataMember(Name = ("storageId"), IsRequired = (true))]
        public CefSharp.DevTools.DOMStorage.StorageId StorageId
        {
            get;
            private set;
        }

        /// <summary>
        /// Key
        /// </summary>
        [DataMember(Name = ("key"), IsRequired = (true))]
        public string Key
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// domStorageItemUpdated
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class DomStorageItemUpdatedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// StorageId
        /// </summary>
        [DataMember(Name = ("storageId"), IsRequired = (true))]
        public CefSharp.DevTools.DOMStorage.StorageId StorageId
        {
            get;
            private set;
        }

        /// <summary>
        /// Key
        /// </summary>
        [DataMember(Name = ("key"), IsRequired = (true))]
        public string Key
        {
            get;
            private set;
        }

        /// <summary>
        /// OldValue
        /// </summary>
        [DataMember(Name = ("oldValue"), IsRequired = (true))]
        public string OldValue
        {
            get;
            private set;
        }

        /// <summary>
        /// NewValue
        /// </summary>
        [DataMember(Name = ("newValue"), IsRequired = (true))]
        public string NewValue
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// domStorageItemsCleared
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class DomStorageItemsClearedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// StorageId
        /// </summary>
        [DataMember(Name = ("storageId"), IsRequired = (true))]
        public CefSharp.DevTools.DOMStorage.StorageId StorageId
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.Database
{
    /// <summary>
    /// Database object.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class Database : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Database ID.
        /// </summary>
        [DataMember(Name = ("id"), IsRequired = (true))]
        public string Id
        {
            get;
            set;
        }

        /// <summary>
        /// Database domain.
        /// </summary>
        [DataMember(Name = ("domain"), IsRequired = (true))]
        public string Domain
        {
            get;
            set;
        }

        /// <summary>
        /// Database name.
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// Database version.
        /// </summary>
        [DataMember(Name = ("version"), IsRequired = (true))]
        public string Version
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Database error.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class Error : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Error message.
        /// </summary>
        [DataMember(Name = ("message"), IsRequired = (true))]
        public string Message
        {
            get;
            set;
        }

        /// <summary>
        /// Error code.
        /// </summary>
        [DataMember(Name = ("code"), IsRequired = (true))]
        public int Code
        {
            get;
            set;
        }
    }

    /// <summary>
    /// addDatabase
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class AddDatabaseEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Database
        /// </summary>
        [DataMember(Name = ("database"), IsRequired = (true))]
        public CefSharp.DevTools.Database.Database Database
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.Emulation
{
    /// <summary>
    /// Orientation type.
    /// </summary>
    public enum ScreenOrientationType
    {
        /// <summary>
        /// portraitPrimary
        /// </summary>
        [EnumMember(Value = ("portraitPrimary"))]
        PortraitPrimary,
        /// <summary>
        /// portraitSecondary
        /// </summary>
        [EnumMember(Value = ("portraitSecondary"))]
        PortraitSecondary,
        /// <summary>
        /// landscapePrimary
        /// </summary>
        [EnumMember(Value = ("landscapePrimary"))]
        LandscapePrimary,
        /// <summary>
        /// landscapeSecondary
        /// </summary>
        [EnumMember(Value = ("landscapeSecondary"))]
        LandscapeSecondary
    }

    /// <summary>
    /// Screen orientation.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ScreenOrientation : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Orientation type.
        /// </summary>
        public CefSharp.DevTools.Emulation.ScreenOrientationType Type
        {
            get
            {
                return (CefSharp.DevTools.Emulation.ScreenOrientationType)(StringToEnum(typeof(CefSharp.DevTools.Emulation.ScreenOrientationType), type));
            }

            set
            {
                this.type = (EnumToString(value));
            }
        }

        /// <summary>
        /// Orientation type.
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (true))]
        internal string type
        {
            get;
            set;
        }

        /// <summary>
        /// Orientation angle.
        /// </summary>
        [DataMember(Name = ("angle"), IsRequired = (true))]
        public int Angle
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Orientation of a display feature in relation to screen
    /// </summary>
    public enum DisplayFeatureOrientation
    {
        /// <summary>
        /// vertical
        /// </summary>
        [EnumMember(Value = ("vertical"))]
        Vertical,
        /// <summary>
        /// horizontal
        /// </summary>
        [EnumMember(Value = ("horizontal"))]
        Horizontal
    }

    /// <summary>
    /// DisplayFeature
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class DisplayFeature : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Orientation of a display feature in relation to screen
        /// </summary>
        public CefSharp.DevTools.Emulation.DisplayFeatureOrientation Orientation
        {
            get
            {
                return (CefSharp.DevTools.Emulation.DisplayFeatureOrientation)(StringToEnum(typeof(CefSharp.DevTools.Emulation.DisplayFeatureOrientation), orientation));
            }

            set
            {
                this.orientation = (EnumToString(value));
            }
        }

        /// <summary>
        /// Orientation of a display feature in relation to screen
        /// </summary>
        [DataMember(Name = ("orientation"), IsRequired = (true))]
        internal string orientation
        {
            get;
            set;
        }

        /// <summary>
        /// The offset from the screen origin in either the x (for vertical
        /// orientation) or y (for horizontal orientation) direction.
        /// </summary>
        [DataMember(Name = ("offset"), IsRequired = (true))]
        public int Offset
        {
            get;
            set;
        }

        /// <summary>
        /// A display feature may mask content such that it is not physically
        /// displayed - this length along with the offset describes this area.
        /// A display feature that only splits content will have a 0 mask_length.
        /// </summary>
        [DataMember(Name = ("maskLength"), IsRequired = (true))]
        public int MaskLength
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Current posture of the device
    /// </summary>
    public enum DevicePostureType
    {
        /// <summary>
        /// continuous
        /// </summary>
        [EnumMember(Value = ("continuous"))]
        Continuous,
        /// <summary>
        /// folded
        /// </summary>
        [EnumMember(Value = ("folded"))]
        Folded
    }

    /// <summary>
    /// DevicePosture
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class DevicePosture : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Current posture of the device
        /// </summary>
        public CefSharp.DevTools.Emulation.DevicePostureType Type
        {
            get
            {
                return (CefSharp.DevTools.Emulation.DevicePostureType)(StringToEnum(typeof(CefSharp.DevTools.Emulation.DevicePostureType), type));
            }

            set
            {
                this.type = (EnumToString(value));
            }
        }

        /// <summary>
        /// Current posture of the device
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (true))]
        internal string type
        {
            get;
            set;
        }
    }

    /// <summary>
    /// MediaFeature
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class MediaFeature : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Name
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// Value
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (true))]
        public string Value
        {
            get;
            set;
        }
    }

    /// <summary>
    /// advance: If the scheduler runs out of immediate work, the virtual time base may fast forward to
    /// allow the next delayed task (if any) to run; pause: The virtual time base may not advance;
    /// pauseIfNetworkFetchesPending: The virtual time base may not advance if there are any pending
    /// resource fetches.
    /// </summary>
    public enum VirtualTimePolicy
    {
        /// <summary>
        /// advance
        /// </summary>
        [EnumMember(Value = ("advance"))]
        Advance,
        /// <summary>
        /// pause
        /// </summary>
        [EnumMember(Value = ("pause"))]
        Pause,
        /// <summary>
        /// pauseIfNetworkFetchesPending
        /// </summary>
        [EnumMember(Value = ("pauseIfNetworkFetchesPending"))]
        PauseIfNetworkFetchesPending
    }

    /// <summary>
    /// Used to specify User Agent Client Hints to emulate. See https://wicg.github.io/ua-client-hints
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class UserAgentBrandVersion : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Brand
        /// </summary>
        [DataMember(Name = ("brand"), IsRequired = (true))]
        public string Brand
        {
            get;
            set;
        }

        /// <summary>
        /// Version
        /// </summary>
        [DataMember(Name = ("version"), IsRequired = (true))]
        public string Version
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Used to specify User Agent Client Hints to emulate. See https://wicg.github.io/ua-client-hints
    /// Missing optional values will be filled in by the target with what it would normally use.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class UserAgentMetadata : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Brands appearing in Sec-CH-UA.
        /// </summary>
        [DataMember(Name = ("brands"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Emulation.UserAgentBrandVersion> Brands
        {
            get;
            set;
        }

        /// <summary>
        /// Brands appearing in Sec-CH-UA-Full-Version-List.
        /// </summary>
        [DataMember(Name = ("fullVersionList"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Emulation.UserAgentBrandVersion> FullVersionList
        {
            get;
            set;
        }

        /// <summary>
        /// FullVersion
        /// </summary>
        [DataMember(Name = ("fullVersion"), IsRequired = (false))]
        public string FullVersion
        {
            get;
            set;
        }

        /// <summary>
        /// Platform
        /// </summary>
        [DataMember(Name = ("platform"), IsRequired = (true))]
        public string Platform
        {
            get;
            set;
        }

        /// <summary>
        /// PlatformVersion
        /// </summary>
        [DataMember(Name = ("platformVersion"), IsRequired = (true))]
        public string PlatformVersion
        {
            get;
            set;
        }

        /// <summary>
        /// Architecture
        /// </summary>
        [DataMember(Name = ("architecture"), IsRequired = (true))]
        public string Architecture
        {
            get;
            set;
        }

        /// <summary>
        /// Model
        /// </summary>
        [DataMember(Name = ("model"), IsRequired = (true))]
        public string Model
        {
            get;
            set;
        }

        /// <summary>
        /// Mobile
        /// </summary>
        [DataMember(Name = ("mobile"), IsRequired = (true))]
        public bool Mobile
        {
            get;
            set;
        }

        /// <summary>
        /// Bitness
        /// </summary>
        [DataMember(Name = ("bitness"), IsRequired = (false))]
        public string Bitness
        {
            get;
            set;
        }

        /// <summary>
        /// Wow64
        /// </summary>
        [DataMember(Name = ("wow64"), IsRequired = (false))]
        public bool? Wow64
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Used to specify sensor types to emulate.
    /// See https://w3c.github.io/sensors/#automation for more information.
    /// </summary>
    public enum SensorType
    {
        /// <summary>
        /// absolute-orientation
        /// </summary>
        [EnumMember(Value = ("absolute-orientation"))]
        AbsoluteOrientation,
        /// <summary>
        /// accelerometer
        /// </summary>
        [EnumMember(Value = ("accelerometer"))]
        Accelerometer,
        /// <summary>
        /// ambient-light
        /// </summary>
        [EnumMember(Value = ("ambient-light"))]
        AmbientLight,
        /// <summary>
        /// gravity
        /// </summary>
        [EnumMember(Value = ("gravity"))]
        Gravity,
        /// <summary>
        /// gyroscope
        /// </summary>
        [EnumMember(Value = ("gyroscope"))]
        Gyroscope,
        /// <summary>
        /// linear-acceleration
        /// </summary>
        [EnumMember(Value = ("linear-acceleration"))]
        LinearAcceleration,
        /// <summary>
        /// magnetometer
        /// </summary>
        [EnumMember(Value = ("magnetometer"))]
        Magnetometer,
        /// <summary>
        /// proximity
        /// </summary>
        [EnumMember(Value = ("proximity"))]
        Proximity,
        /// <summary>
        /// relative-orientation
        /// </summary>
        [EnumMember(Value = ("relative-orientation"))]
        RelativeOrientation
    }

    /// <summary>
    /// SensorMetadata
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class SensorMetadata : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Available
        /// </summary>
        [DataMember(Name = ("available"), IsRequired = (false))]
        public bool? Available
        {
            get;
            set;
        }

        /// <summary>
        /// MinimumFrequency
        /// </summary>
        [DataMember(Name = ("minimumFrequency"), IsRequired = (false))]
        public double? MinimumFrequency
        {
            get;
            set;
        }

        /// <summary>
        /// MaximumFrequency
        /// </summary>
        [DataMember(Name = ("maximumFrequency"), IsRequired = (false))]
        public double? MaximumFrequency
        {
            get;
            set;
        }
    }

    /// <summary>
    /// SensorReadingSingle
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class SensorReadingSingle : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Value
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (true))]
        public double Value
        {
            get;
            set;
        }
    }

    /// <summary>
    /// SensorReadingXYZ
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class SensorReadingXYZ : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// X
        /// </summary>
        [DataMember(Name = ("x"), IsRequired = (true))]
        public double X
        {
            get;
            set;
        }

        /// <summary>
        /// Y
        /// </summary>
        [DataMember(Name = ("y"), IsRequired = (true))]
        public double Y
        {
            get;
            set;
        }

        /// <summary>
        /// Z
        /// </summary>
        [DataMember(Name = ("z"), IsRequired = (true))]
        public double Z
        {
            get;
            set;
        }
    }

    /// <summary>
    /// SensorReadingQuaternion
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class SensorReadingQuaternion : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// X
        /// </summary>
        [DataMember(Name = ("x"), IsRequired = (true))]
        public double X
        {
            get;
            set;
        }

        /// <summary>
        /// Y
        /// </summary>
        [DataMember(Name = ("y"), IsRequired = (true))]
        public double Y
        {
            get;
            set;
        }

        /// <summary>
        /// Z
        /// </summary>
        [DataMember(Name = ("z"), IsRequired = (true))]
        public double Z
        {
            get;
            set;
        }

        /// <summary>
        /// W
        /// </summary>
        [DataMember(Name = ("w"), IsRequired = (true))]
        public double W
        {
            get;
            set;
        }
    }

    /// <summary>
    /// SensorReading
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class SensorReading : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Single
        /// </summary>
        [DataMember(Name = ("single"), IsRequired = (false))]
        public CefSharp.DevTools.Emulation.SensorReadingSingle Single
        {
            get;
            set;
        }

        /// <summary>
        /// Xyz
        /// </summary>
        [DataMember(Name = ("xyz"), IsRequired = (false))]
        public CefSharp.DevTools.Emulation.SensorReadingXYZ Xyz
        {
            get;
            set;
        }

        /// <summary>
        /// Quaternion
        /// </summary>
        [DataMember(Name = ("quaternion"), IsRequired = (false))]
        public CefSharp.DevTools.Emulation.SensorReadingQuaternion Quaternion
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Enum of image types that can be disabled.
    /// </summary>
    public enum DisabledImageType
    {
        /// <summary>
        /// avif
        /// </summary>
        [EnumMember(Value = ("avif"))]
        Avif,
        /// <summary>
        /// webp
        /// </summary>
        [EnumMember(Value = ("webp"))]
        Webp
    }
}

namespace CefSharp.DevTools.HeadlessExperimental
{
    /// <summary>
    /// Image compression format (defaults to png).
    /// </summary>
    public enum ScreenshotParamsFormat
    {
        /// <summary>
        /// jpeg
        /// </summary>
        [EnumMember(Value = ("jpeg"))]
        Jpeg,
        /// <summary>
        /// png
        /// </summary>
        [EnumMember(Value = ("png"))]
        Png,
        /// <summary>
        /// webp
        /// </summary>
        [EnumMember(Value = ("webp"))]
        Webp
    }

    /// <summary>
    /// Encoding options for a screenshot.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ScreenshotParams : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Image compression format (defaults to png).
        /// </summary>
        public CefSharp.DevTools.HeadlessExperimental.ScreenshotParamsFormat? Format
        {
            get
            {
                return (CefSharp.DevTools.HeadlessExperimental.ScreenshotParamsFormat? )(StringToEnum(typeof(CefSharp.DevTools.HeadlessExperimental.ScreenshotParamsFormat? ), format));
            }

            set
            {
                this.format = (EnumToString(value));
            }
        }

        /// <summary>
        /// Image compression format (defaults to png).
        /// </summary>
        [DataMember(Name = ("format"), IsRequired = (false))]
        internal string format
        {
            get;
            set;
        }

        /// <summary>
        /// Compression quality from range [0..100] (jpeg and webp only).
        /// </summary>
        [DataMember(Name = ("quality"), IsRequired = (false))]
        public int? Quality
        {
            get;
            set;
        }

        /// <summary>
        /// Optimize image encoding for speed, not for resulting size (defaults to false)
        /// </summary>
        [DataMember(Name = ("optimizeForSpeed"), IsRequired = (false))]
        public bool? OptimizeForSpeed
        {
            get;
            set;
        }
    }
}

namespace CefSharp.DevTools.IndexedDB
{
    /// <summary>
    /// Database with an array of object stores.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class DatabaseWithObjectStores : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Database name.
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// Database version (type is not &apos;integer&apos;, as the standard
        /// requires the version number to be &apos;unsigned long long&apos;)
        /// </summary>
        [DataMember(Name = ("version"), IsRequired = (true))]
        public double Version
        {
            get;
            set;
        }

        /// <summary>
        /// Object stores in this database.
        /// </summary>
        [DataMember(Name = ("objectStores"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.IndexedDB.ObjectStore> ObjectStores
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Object store.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ObjectStore : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Object store name.
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// Object store key path.
        /// </summary>
        [DataMember(Name = ("keyPath"), IsRequired = (true))]
        public CefSharp.DevTools.IndexedDB.KeyPath KeyPath
        {
            get;
            set;
        }

        /// <summary>
        /// If true, object store has auto increment flag set.
        /// </summary>
        [DataMember(Name = ("autoIncrement"), IsRequired = (true))]
        public bool AutoIncrement
        {
            get;
            set;
        }

        /// <summary>
        /// Indexes in this object store.
        /// </summary>
        [DataMember(Name = ("indexes"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.IndexedDB.ObjectStoreIndex> Indexes
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Object store index.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ObjectStoreIndex : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Index name.
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// Index key path.
        /// </summary>
        [DataMember(Name = ("keyPath"), IsRequired = (true))]
        public CefSharp.DevTools.IndexedDB.KeyPath KeyPath
        {
            get;
            set;
        }

        /// <summary>
        /// If true, index is unique.
        /// </summary>
        [DataMember(Name = ("unique"), IsRequired = (true))]
        public bool Unique
        {
            get;
            set;
        }

        /// <summary>
        /// If true, index allows multiple entries for a key.
        /// </summary>
        [DataMember(Name = ("multiEntry"), IsRequired = (true))]
        public bool MultiEntry
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Key type.
    /// </summary>
    public enum KeyType
    {
        /// <summary>
        /// number
        /// </summary>
        [EnumMember(Value = ("number"))]
        Number,
        /// <summary>
        /// string
        /// </summary>
        [EnumMember(Value = ("string"))]
        String,
        /// <summary>
        /// date
        /// </summary>
        [EnumMember(Value = ("date"))]
        Date,
        /// <summary>
        /// array
        /// </summary>
        [EnumMember(Value = ("array"))]
        Array
    }

    /// <summary>
    /// Key.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class Key : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Key type.
        /// </summary>
        public CefSharp.DevTools.IndexedDB.KeyType Type
        {
            get
            {
                return (CefSharp.DevTools.IndexedDB.KeyType)(StringToEnum(typeof(CefSharp.DevTools.IndexedDB.KeyType), type));
            }

            set
            {
                this.type = (EnumToString(value));
            }
        }

        /// <summary>
        /// Key type.
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (true))]
        internal string type
        {
            get;
            set;
        }

        /// <summary>
        /// Number value.
        /// </summary>
        [DataMember(Name = ("number"), IsRequired = (false))]
        public double? Number
        {
            get;
            set;
        }

        /// <summary>
        /// String value.
        /// </summary>
        [DataMember(Name = ("string"), IsRequired = (false))]
        public string String
        {
            get;
            set;
        }

        /// <summary>
        /// Date value.
        /// </summary>
        [DataMember(Name = ("date"), IsRequired = (false))]
        public double? Date
        {
            get;
            set;
        }

        /// <summary>
        /// Array value.
        /// </summary>
        [DataMember(Name = ("array"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.IndexedDB.Key> Array
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Key range.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class KeyRange : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Lower bound.
        /// </summary>
        [DataMember(Name = ("lower"), IsRequired = (false))]
        public CefSharp.DevTools.IndexedDB.Key Lower
        {
            get;
            set;
        }

        /// <summary>
        /// Upper bound.
        /// </summary>
        [DataMember(Name = ("upper"), IsRequired = (false))]
        public CefSharp.DevTools.IndexedDB.Key Upper
        {
            get;
            set;
        }

        /// <summary>
        /// If true lower bound is open.
        /// </summary>
        [DataMember(Name = ("lowerOpen"), IsRequired = (true))]
        public bool LowerOpen
        {
            get;
            set;
        }

        /// <summary>
        /// If true upper bound is open.
        /// </summary>
        [DataMember(Name = ("upperOpen"), IsRequired = (true))]
        public bool UpperOpen
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Data entry.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class DataEntry : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Key object.
        /// </summary>
        [DataMember(Name = ("key"), IsRequired = (true))]
        public CefSharp.DevTools.Runtime.RemoteObject Key
        {
            get;
            set;
        }

        /// <summary>
        /// Primary key object.
        /// </summary>
        [DataMember(Name = ("primaryKey"), IsRequired = (true))]
        public CefSharp.DevTools.Runtime.RemoteObject PrimaryKey
        {
            get;
            set;
        }

        /// <summary>
        /// Value object.
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (true))]
        public CefSharp.DevTools.Runtime.RemoteObject Value
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Key path type.
    /// </summary>
    public enum KeyPathType
    {
        /// <summary>
        /// null
        /// </summary>
        [EnumMember(Value = ("null"))]
        Null,
        /// <summary>
        /// string
        /// </summary>
        [EnumMember(Value = ("string"))]
        String,
        /// <summary>
        /// array
        /// </summary>
        [EnumMember(Value = ("array"))]
        Array
    }

    /// <summary>
    /// Key path.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class KeyPath : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Key path type.
        /// </summary>
        public CefSharp.DevTools.IndexedDB.KeyPathType Type
        {
            get
            {
                return (CefSharp.DevTools.IndexedDB.KeyPathType)(StringToEnum(typeof(CefSharp.DevTools.IndexedDB.KeyPathType), type));
            }

            set
            {
                this.type = (EnumToString(value));
            }
        }

        /// <summary>
        /// Key path type.
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (true))]
        internal string type
        {
            get;
            set;
        }

        /// <summary>
        /// String value.
        /// </summary>
        [DataMember(Name = ("string"), IsRequired = (false))]
        public string String
        {
            get;
            set;
        }

        /// <summary>
        /// Array value.
        /// </summary>
        [DataMember(Name = ("array"), IsRequired = (false))]
        public string[] Array
        {
            get;
            set;
        }
    }
}

namespace CefSharp.DevTools.Input
{
    /// <summary>
    /// TouchPoint
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class TouchPoint : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// X coordinate of the event relative to the main frame&apos;s viewport in CSS pixels.
        /// </summary>
        [DataMember(Name = ("x"), IsRequired = (true))]
        public double X
        {
            get;
            set;
        }

        /// <summary>
        /// Y coordinate of the event relative to the main frame&apos;s viewport in CSS pixels. 0 refers to
        /// the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.
        /// </summary>
        [DataMember(Name = ("y"), IsRequired = (true))]
        public double Y
        {
            get;
            set;
        }

        /// <summary>
        /// X radius of the touch area (default: 1.0).
        /// </summary>
        [DataMember(Name = ("radiusX"), IsRequired = (false))]
        public double? RadiusX
        {
            get;
            set;
        }

        /// <summary>
        /// Y radius of the touch area (default: 1.0).
        /// </summary>
        [DataMember(Name = ("radiusY"), IsRequired = (false))]
        public double? RadiusY
        {
            get;
            set;
        }

        /// <summary>
        /// Rotation angle (default: 0.0).
        /// </summary>
        [DataMember(Name = ("rotationAngle"), IsRequired = (false))]
        public double? RotationAngle
        {
            get;
            set;
        }

        /// <summary>
        /// Force (default: 1.0).
        /// </summary>
        [DataMember(Name = ("force"), IsRequired = (false))]
        public double? Force
        {
            get;
            set;
        }

        /// <summary>
        /// The normalized tangential pressure, which has a range of [-1,1] (default: 0).
        /// </summary>
        [DataMember(Name = ("tangentialPressure"), IsRequired = (false))]
        public double? TangentialPressure
        {
            get;
            set;
        }

        /// <summary>
        /// The plane angle between the Y-Z plane and the plane containing both the stylus axis and the Y axis, in degrees of the range [-90,90], a positive tiltX is to the right (default: 0)
        /// </summary>
        [DataMember(Name = ("tiltX"), IsRequired = (false))]
        public double? TiltX
        {
            get;
            set;
        }

        /// <summary>
        /// The plane angle between the X-Z plane and the plane containing both the stylus axis and the X axis, in degrees of the range [-90,90], a positive tiltY is towards the user (default: 0).
        /// </summary>
        [DataMember(Name = ("tiltY"), IsRequired = (false))]
        public double? TiltY
        {
            get;
            set;
        }

        /// <summary>
        /// The clockwise rotation of a pen stylus around its own major axis, in degrees in the range [0,359] (default: 0).
        /// </summary>
        [DataMember(Name = ("twist"), IsRequired = (false))]
        public int? Twist
        {
            get;
            set;
        }

        /// <summary>
        /// Identifier used to track touch sources between events, must be unique within an event.
        /// </summary>
        [DataMember(Name = ("id"), IsRequired = (false))]
        public double? Id
        {
            get;
            set;
        }
    }

    /// <summary>
    /// GestureSourceType
    /// </summary>
    public enum GestureSourceType
    {
        /// <summary>
        /// default
        /// </summary>
        [EnumMember(Value = ("default"))]
        Default,
        /// <summary>
        /// touch
        /// </summary>
        [EnumMember(Value = ("touch"))]
        Touch,
        /// <summary>
        /// mouse
        /// </summary>
        [EnumMember(Value = ("mouse"))]
        Mouse
    }

    /// <summary>
    /// MouseButton
    /// </summary>
    public enum MouseButton
    {
        /// <summary>
        /// none
        /// </summary>
        [EnumMember(Value = ("none"))]
        None,
        /// <summary>
        /// left
        /// </summary>
        [EnumMember(Value = ("left"))]
        Left,
        /// <summary>
        /// middle
        /// </summary>
        [EnumMember(Value = ("middle"))]
        Middle,
        /// <summary>
        /// right
        /// </summary>
        [EnumMember(Value = ("right"))]
        Right,
        /// <summary>
        /// back
        /// </summary>
        [EnumMember(Value = ("back"))]
        Back,
        /// <summary>
        /// forward
        /// </summary>
        [EnumMember(Value = ("forward"))]
        Forward
    }

    /// <summary>
    /// DragDataItem
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class DragDataItem : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Mime type of the dragged data.
        /// </summary>
        [DataMember(Name = ("mimeType"), IsRequired = (true))]
        public string MimeType
        {
            get;
            set;
        }

        /// <summary>
        /// Depending of the value of `mimeType`, it contains the dragged link,
        /// text, HTML markup or any other data.
        /// </summary>
        [DataMember(Name = ("data"), IsRequired = (true))]
        public string Data
        {
            get;
            set;
        }

        /// <summary>
        /// Title associated with a link. Only valid when `mimeType` == &quot;text/uri-list&quot;.
        /// </summary>
        [DataMember(Name = ("title"), IsRequired = (false))]
        public string Title
        {
            get;
            set;
        }

        /// <summary>
        /// Stores the base URL for the contained markup. Only valid when `mimeType`
        /// == &quot;text/html&quot;.
        /// </summary>
        [DataMember(Name = ("baseURL"), IsRequired = (false))]
        public string BaseURL
        {
            get;
            set;
        }
    }

    /// <summary>
    /// DragData
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class DragData : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Items
        /// </summary>
        [DataMember(Name = ("items"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Input.DragDataItem> Items
        {
            get;
            set;
        }

        /// <summary>
        /// List of filenames that should be included when dropping
        /// </summary>
        [DataMember(Name = ("files"), IsRequired = (false))]
        public string[] Files
        {
            get;
            set;
        }

        /// <summary>
        /// Bit field representing allowed drag operations. Copy = 1, Link = 2, Move = 16
        /// </summary>
        [DataMember(Name = ("dragOperationsMask"), IsRequired = (true))]
        public int DragOperationsMask
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Emitted only when `Input.setInterceptDrags` is enabled. Use this data with `Input.dispatchDragEvent` to
    /// restore normal drag and drop behavior.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class DragInterceptedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Data
        /// </summary>
        [DataMember(Name = ("data"), IsRequired = (true))]
        public CefSharp.DevTools.Input.DragData Data
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.Inspector
{
    /// <summary>
    /// Fired when remote debugging connection is about to be terminated. Contains detach reason.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class DetachedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// The reason why connection has been terminated.
        /// </summary>
        [DataMember(Name = ("reason"), IsRequired = (true))]
        public string Reason
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.LayerTree
{
    /// <summary>
    /// Reason for rectangle to force scrolling on the main thread
    /// </summary>
    public enum ScrollRectType
    {
        /// <summary>
        /// RepaintsOnScroll
        /// </summary>
        [EnumMember(Value = ("RepaintsOnScroll"))]
        RepaintsOnScroll,
        /// <summary>
        /// TouchEventHandler
        /// </summary>
        [EnumMember(Value = ("TouchEventHandler"))]
        TouchEventHandler,
        /// <summary>
        /// WheelEventHandler
        /// </summary>
        [EnumMember(Value = ("WheelEventHandler"))]
        WheelEventHandler
    }

    /// <summary>
    /// Rectangle where scrolling happens on the main thread.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ScrollRect : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Rectangle itself.
        /// </summary>
        [DataMember(Name = ("rect"), IsRequired = (true))]
        public CefSharp.DevTools.DOM.Rect Rect
        {
            get;
            set;
        }

        /// <summary>
        /// Reason for rectangle to force scrolling on the main thread
        /// </summary>
        public CefSharp.DevTools.LayerTree.ScrollRectType Type
        {
            get
            {
                return (CefSharp.DevTools.LayerTree.ScrollRectType)(StringToEnum(typeof(CefSharp.DevTools.LayerTree.ScrollRectType), type));
            }

            set
            {
                this.type = (EnumToString(value));
            }
        }

        /// <summary>
        /// Reason for rectangle to force scrolling on the main thread
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (true))]
        internal string type
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Sticky position constraints.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class StickyPositionConstraint : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Layout rectangle of the sticky element before being shifted
        /// </summary>
        [DataMember(Name = ("stickyBoxRect"), IsRequired = (true))]
        public CefSharp.DevTools.DOM.Rect StickyBoxRect
        {
            get;
            set;
        }

        /// <summary>
        /// Layout rectangle of the containing block of the sticky element
        /// </summary>
        [DataMember(Name = ("containingBlockRect"), IsRequired = (true))]
        public CefSharp.DevTools.DOM.Rect ContainingBlockRect
        {
            get;
            set;
        }

        /// <summary>
        /// The nearest sticky layer that shifts the sticky box
        /// </summary>
        [DataMember(Name = ("nearestLayerShiftingStickyBox"), IsRequired = (false))]
        public string NearestLayerShiftingStickyBox
        {
            get;
            set;
        }

        /// <summary>
        /// The nearest sticky layer that shifts the containing block
        /// </summary>
        [DataMember(Name = ("nearestLayerShiftingContainingBlock"), IsRequired = (false))]
        public string NearestLayerShiftingContainingBlock
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Serialized fragment of layer picture along with its offset within the layer.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class PictureTile : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Offset from owning layer left boundary
        /// </summary>
        [DataMember(Name = ("x"), IsRequired = (true))]
        public double X
        {
            get;
            set;
        }

        /// <summary>
        /// Offset from owning layer top boundary
        /// </summary>
        [DataMember(Name = ("y"), IsRequired = (true))]
        public double Y
        {
            get;
            set;
        }

        /// <summary>
        /// Base64-encoded snapshot data.
        /// </summary>
        [DataMember(Name = ("picture"), IsRequired = (true))]
        public byte[] Picture
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Information about a compositing layer.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class Layer : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The unique id for this layer.
        /// </summary>
        [DataMember(Name = ("layerId"), IsRequired = (true))]
        public string LayerId
        {
            get;
            set;
        }

        /// <summary>
        /// The id of parent (not present for root).
        /// </summary>
        [DataMember(Name = ("parentLayerId"), IsRequired = (false))]
        public string ParentLayerId
        {
            get;
            set;
        }

        /// <summary>
        /// The backend id for the node associated with this layer.
        /// </summary>
        [DataMember(Name = ("backendNodeId"), IsRequired = (false))]
        public int? BackendNodeId
        {
            get;
            set;
        }

        /// <summary>
        /// Offset from parent layer, X coordinate.
        /// </summary>
        [DataMember(Name = ("offsetX"), IsRequired = (true))]
        public double OffsetX
        {
            get;
            set;
        }

        /// <summary>
        /// Offset from parent layer, Y coordinate.
        /// </summary>
        [DataMember(Name = ("offsetY"), IsRequired = (true))]
        public double OffsetY
        {
            get;
            set;
        }

        /// <summary>
        /// Layer width.
        /// </summary>
        [DataMember(Name = ("width"), IsRequired = (true))]
        public double Width
        {
            get;
            set;
        }

        /// <summary>
        /// Layer height.
        /// </summary>
        [DataMember(Name = ("height"), IsRequired = (true))]
        public double Height
        {
            get;
            set;
        }

        /// <summary>
        /// Transformation matrix for layer, default is identity matrix
        /// </summary>
        [DataMember(Name = ("transform"), IsRequired = (false))]
        public double[] Transform
        {
            get;
            set;
        }

        /// <summary>
        /// Transform anchor point X, absent if no transform specified
        /// </summary>
        [DataMember(Name = ("anchorX"), IsRequired = (false))]
        public double? AnchorX
        {
            get;
            set;
        }

        /// <summary>
        /// Transform anchor point Y, absent if no transform specified
        /// </summary>
        [DataMember(Name = ("anchorY"), IsRequired = (false))]
        public double? AnchorY
        {
            get;
            set;
        }

        /// <summary>
        /// Transform anchor point Z, absent if no transform specified
        /// </summary>
        [DataMember(Name = ("anchorZ"), IsRequired = (false))]
        public double? AnchorZ
        {
            get;
            set;
        }

        /// <summary>
        /// Indicates how many time this layer has painted.
        /// </summary>
        [DataMember(Name = ("paintCount"), IsRequired = (true))]
        public int PaintCount
        {
            get;
            set;
        }

        /// <summary>
        /// Indicates whether this layer hosts any content, rather than being used for
        /// transform/scrolling purposes only.
        /// </summary>
        [DataMember(Name = ("drawsContent"), IsRequired = (true))]
        public bool DrawsContent
        {
            get;
            set;
        }

        /// <summary>
        /// Set if layer is not visible.
        /// </summary>
        [DataMember(Name = ("invisible"), IsRequired = (false))]
        public bool? Invisible
        {
            get;
            set;
        }

        /// <summary>
        /// Rectangles scrolling on main thread only.
        /// </summary>
        [DataMember(Name = ("scrollRects"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.LayerTree.ScrollRect> ScrollRects
        {
            get;
            set;
        }

        /// <summary>
        /// Sticky position constraint information
        /// </summary>
        [DataMember(Name = ("stickyPositionConstraint"), IsRequired = (false))]
        public CefSharp.DevTools.LayerTree.StickyPositionConstraint StickyPositionConstraint
        {
            get;
            set;
        }
    }

    /// <summary>
    /// layerPainted
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class LayerPaintedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// The id of the painted layer.
        /// </summary>
        [DataMember(Name = ("layerId"), IsRequired = (true))]
        public string LayerId
        {
            get;
            private set;
        }

        /// <summary>
        /// Clip rectangle.
        /// </summary>
        [DataMember(Name = ("clip"), IsRequired = (true))]
        public CefSharp.DevTools.DOM.Rect Clip
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// layerTreeDidChange
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class LayerTreeDidChangeEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Layer tree, absent if not in the compositing mode.
        /// </summary>
        [DataMember(Name = ("layers"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.LayerTree.Layer> Layers
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.Log
{
    /// <summary>
    /// Log entry source.
    /// </summary>
    public enum LogEntrySource
    {
        /// <summary>
        /// xml
        /// </summary>
        [EnumMember(Value = ("xml"))]
        Xml,
        /// <summary>
        /// javascript
        /// </summary>
        [EnumMember(Value = ("javascript"))]
        Javascript,
        /// <summary>
        /// network
        /// </summary>
        [EnumMember(Value = ("network"))]
        Network,
        /// <summary>
        /// storage
        /// </summary>
        [EnumMember(Value = ("storage"))]
        Storage,
        /// <summary>
        /// appcache
        /// </summary>
        [EnumMember(Value = ("appcache"))]
        Appcache,
        /// <summary>
        /// rendering
        /// </summary>
        [EnumMember(Value = ("rendering"))]
        Rendering,
        /// <summary>
        /// security
        /// </summary>
        [EnumMember(Value = ("security"))]
        Security,
        /// <summary>
        /// deprecation
        /// </summary>
        [EnumMember(Value = ("deprecation"))]
        Deprecation,
        /// <summary>
        /// worker
        /// </summary>
        [EnumMember(Value = ("worker"))]
        Worker,
        /// <summary>
        /// violation
        /// </summary>
        [EnumMember(Value = ("violation"))]
        Violation,
        /// <summary>
        /// intervention
        /// </summary>
        [EnumMember(Value = ("intervention"))]
        Intervention,
        /// <summary>
        /// recommendation
        /// </summary>
        [EnumMember(Value = ("recommendation"))]
        Recommendation,
        /// <summary>
        /// other
        /// </summary>
        [EnumMember(Value = ("other"))]
        Other
    }

    /// <summary>
    /// Log entry severity.
    /// </summary>
    public enum LogEntryLevel
    {
        /// <summary>
        /// verbose
        /// </summary>
        [EnumMember(Value = ("verbose"))]
        Verbose,
        /// <summary>
        /// info
        /// </summary>
        [EnumMember(Value = ("info"))]
        Info,
        /// <summary>
        /// warning
        /// </summary>
        [EnumMember(Value = ("warning"))]
        Warning,
        /// <summary>
        /// error
        /// </summary>
        [EnumMember(Value = ("error"))]
        Error
    }

    /// <summary>
    /// LogEntryCategory
    /// </summary>
    public enum LogEntryCategory
    {
        /// <summary>
        /// cors
        /// </summary>
        [EnumMember(Value = ("cors"))]
        Cors
    }

    /// <summary>
    /// Log entry.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class LogEntry : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Log entry source.
        /// </summary>
        public CefSharp.DevTools.Log.LogEntrySource Source
        {
            get
            {
                return (CefSharp.DevTools.Log.LogEntrySource)(StringToEnum(typeof(CefSharp.DevTools.Log.LogEntrySource), source));
            }

            set
            {
                this.source = (EnumToString(value));
            }
        }

        /// <summary>
        /// Log entry source.
        /// </summary>
        [DataMember(Name = ("source"), IsRequired = (true))]
        internal string source
        {
            get;
            set;
        }

        /// <summary>
        /// Log entry severity.
        /// </summary>
        public CefSharp.DevTools.Log.LogEntryLevel Level
        {
            get
            {
                return (CefSharp.DevTools.Log.LogEntryLevel)(StringToEnum(typeof(CefSharp.DevTools.Log.LogEntryLevel), level));
            }

            set
            {
                this.level = (EnumToString(value));
            }
        }

        /// <summary>
        /// Log entry severity.
        /// </summary>
        [DataMember(Name = ("level"), IsRequired = (true))]
        internal string level
        {
            get;
            set;
        }

        /// <summary>
        /// Logged text.
        /// </summary>
        [DataMember(Name = ("text"), IsRequired = (true))]
        public string Text
        {
            get;
            set;
        }

        /// <summary>
        /// Category
        /// </summary>
        public CefSharp.DevTools.Log.LogEntryCategory? Category
        {
            get
            {
                return (CefSharp.DevTools.Log.LogEntryCategory? )(StringToEnum(typeof(CefSharp.DevTools.Log.LogEntryCategory? ), category));
            }

            set
            {
                this.category = (EnumToString(value));
            }
        }

        /// <summary>
        /// Category
        /// </summary>
        [DataMember(Name = ("category"), IsRequired = (false))]
        internal string category
        {
            get;
            set;
        }

        /// <summary>
        /// Timestamp when this entry was added.
        /// </summary>
        [DataMember(Name = ("timestamp"), IsRequired = (true))]
        public double Timestamp
        {
            get;
            set;
        }

        /// <summary>
        /// URL of the resource if known.
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (false))]
        public string Url
        {
            get;
            set;
        }

        /// <summary>
        /// Line number in the resource.
        /// </summary>
        [DataMember(Name = ("lineNumber"), IsRequired = (false))]
        public int? LineNumber
        {
            get;
            set;
        }

        /// <summary>
        /// JavaScript stack trace.
        /// </summary>
        [DataMember(Name = ("stackTrace"), IsRequired = (false))]
        public CefSharp.DevTools.Runtime.StackTrace StackTrace
        {
            get;
            set;
        }

        /// <summary>
        /// Identifier of the network request associated with this entry.
        /// </summary>
        [DataMember(Name = ("networkRequestId"), IsRequired = (false))]
        public string NetworkRequestId
        {
            get;
            set;
        }

        /// <summary>
        /// Identifier of the worker associated with this entry.
        /// </summary>
        [DataMember(Name = ("workerId"), IsRequired = (false))]
        public string WorkerId
        {
            get;
            set;
        }

        /// <summary>
        /// Call arguments.
        /// </summary>
        [DataMember(Name = ("args"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Runtime.RemoteObject> Args
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Violation type.
    /// </summary>
    public enum ViolationSettingName
    {
        /// <summary>
        /// longTask
        /// </summary>
        [EnumMember(Value = ("longTask"))]
        LongTask,
        /// <summary>
        /// longLayout
        /// </summary>
        [EnumMember(Value = ("longLayout"))]
        LongLayout,
        /// <summary>
        /// blockedEvent
        /// </summary>
        [EnumMember(Value = ("blockedEvent"))]
        BlockedEvent,
        /// <summary>
        /// blockedParser
        /// </summary>
        [EnumMember(Value = ("blockedParser"))]
        BlockedParser,
        /// <summary>
        /// discouragedAPIUse
        /// </summary>
        [EnumMember(Value = ("discouragedAPIUse"))]
        DiscouragedAPIUse,
        /// <summary>
        /// handler
        /// </summary>
        [EnumMember(Value = ("handler"))]
        Handler,
        /// <summary>
        /// recurringHandler
        /// </summary>
        [EnumMember(Value = ("recurringHandler"))]
        RecurringHandler
    }

    /// <summary>
    /// Violation configuration setting.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ViolationSetting : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Violation type.
        /// </summary>
        public CefSharp.DevTools.Log.ViolationSettingName Name
        {
            get
            {
                return (CefSharp.DevTools.Log.ViolationSettingName)(StringToEnum(typeof(CefSharp.DevTools.Log.ViolationSettingName), name));
            }

            set
            {
                this.name = (EnumToString(value));
            }
        }

        /// <summary>
        /// Violation type.
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        internal string name
        {
            get;
            set;
        }

        /// <summary>
        /// Time threshold to trigger upon.
        /// </summary>
        [DataMember(Name = ("threshold"), IsRequired = (true))]
        public double Threshold
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Issued when new message was logged.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class EntryAddedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// The entry.
        /// </summary>
        [DataMember(Name = ("entry"), IsRequired = (true))]
        public CefSharp.DevTools.Log.LogEntry Entry
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.Memory
{
    /// <summary>
    /// Memory pressure level.
    /// </summary>
    public enum PressureLevel
    {
        /// <summary>
        /// moderate
        /// </summary>
        [EnumMember(Value = ("moderate"))]
        Moderate,
        /// <summary>
        /// critical
        /// </summary>
        [EnumMember(Value = ("critical"))]
        Critical
    }

    /// <summary>
    /// Heap profile sample.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class SamplingProfileNode : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Size of the sampled allocation.
        /// </summary>
        [DataMember(Name = ("size"), IsRequired = (true))]
        public double Size
        {
            get;
            set;
        }

        /// <summary>
        /// Total bytes attributed to this sample.
        /// </summary>
        [DataMember(Name = ("total"), IsRequired = (true))]
        public double Total
        {
            get;
            set;
        }

        /// <summary>
        /// Execution stack at the point of allocation.
        /// </summary>
        [DataMember(Name = ("stack"), IsRequired = (true))]
        public string[] Stack
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Array of heap profile samples.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class SamplingProfile : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Samples
        /// </summary>
        [DataMember(Name = ("samples"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Memory.SamplingProfileNode> Samples
        {
            get;
            set;
        }

        /// <summary>
        /// Modules
        /// </summary>
        [DataMember(Name = ("modules"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Memory.Module> Modules
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Executable module information
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class Module : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Name of the module.
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// UUID of the module.
        /// </summary>
        [DataMember(Name = ("uuid"), IsRequired = (true))]
        public string Uuid
        {
            get;
            set;
        }

        /// <summary>
        /// Base address where the module is loaded into memory. Encoded as a decimal
        /// or hexadecimal (0x prefixed) string.
        /// </summary>
        [DataMember(Name = ("baseAddress"), IsRequired = (true))]
        public string BaseAddress
        {
            get;
            set;
        }

        /// <summary>
        /// Size of the module in bytes.
        /// </summary>
        [DataMember(Name = ("size"), IsRequired = (true))]
        public double Size
        {
            get;
            set;
        }
    }
}

namespace CefSharp.DevTools.Network
{
    /// <summary>
    /// Resource type as it was perceived by the rendering engine.
    /// </summary>
    public enum ResourceType
    {
        /// <summary>
        /// Document
        /// </summary>
        [EnumMember(Value = ("Document"))]
        Document,
        /// <summary>
        /// Stylesheet
        /// </summary>
        [EnumMember(Value = ("Stylesheet"))]
        Stylesheet,
        /// <summary>
        /// Image
        /// </summary>
        [EnumMember(Value = ("Image"))]
        Image,
        /// <summary>
        /// Media
        /// </summary>
        [EnumMember(Value = ("Media"))]
        Media,
        /// <summary>
        /// Font
        /// </summary>
        [EnumMember(Value = ("Font"))]
        Font,
        /// <summary>
        /// Script
        /// </summary>
        [EnumMember(Value = ("Script"))]
        Script,
        /// <summary>
        /// TextTrack
        /// </summary>
        [EnumMember(Value = ("TextTrack"))]
        TextTrack,
        /// <summary>
        /// XHR
        /// </summary>
        [EnumMember(Value = ("XHR"))]
        XHR,
        /// <summary>
        /// Fetch
        /// </summary>
        [EnumMember(Value = ("Fetch"))]
        Fetch,
        /// <summary>
        /// Prefetch
        /// </summary>
        [EnumMember(Value = ("Prefetch"))]
        Prefetch,
        /// <summary>
        /// EventSource
        /// </summary>
        [EnumMember(Value = ("EventSource"))]
        EventSource,
        /// <summary>
        /// WebSocket
        /// </summary>
        [EnumMember(Value = ("WebSocket"))]
        WebSocket,
        /// <summary>
        /// Manifest
        /// </summary>
        [EnumMember(Value = ("Manifest"))]
        Manifest,
        /// <summary>
        /// SignedExchange
        /// </summary>
        [EnumMember(Value = ("SignedExchange"))]
        SignedExchange,
        /// <summary>
        /// Ping
        /// </summary>
        [EnumMember(Value = ("Ping"))]
        Ping,
        /// <summary>
        /// CSPViolationReport
        /// </summary>
        [EnumMember(Value = ("CSPViolationReport"))]
        CSPViolationReport,
        /// <summary>
        /// Preflight
        /// </summary>
        [EnumMember(Value = ("Preflight"))]
        Preflight,
        /// <summary>
        /// Other
        /// </summary>
        [EnumMember(Value = ("Other"))]
        Other
    }

    /// <summary>
    /// Network level fetch failure reason.
    /// </summary>
    public enum ErrorReason
    {
        /// <summary>
        /// Failed
        /// </summary>
        [EnumMember(Value = ("Failed"))]
        Failed,
        /// <summary>
        /// Aborted
        /// </summary>
        [EnumMember(Value = ("Aborted"))]
        Aborted,
        /// <summary>
        /// TimedOut
        /// </summary>
        [EnumMember(Value = ("TimedOut"))]
        TimedOut,
        /// <summary>
        /// AccessDenied
        /// </summary>
        [EnumMember(Value = ("AccessDenied"))]
        AccessDenied,
        /// <summary>
        /// ConnectionClosed
        /// </summary>
        [EnumMember(Value = ("ConnectionClosed"))]
        ConnectionClosed,
        /// <summary>
        /// ConnectionReset
        /// </summary>
        [EnumMember(Value = ("ConnectionReset"))]
        ConnectionReset,
        /// <summary>
        /// ConnectionRefused
        /// </summary>
        [EnumMember(Value = ("ConnectionRefused"))]
        ConnectionRefused,
        /// <summary>
        /// ConnectionAborted
        /// </summary>
        [EnumMember(Value = ("ConnectionAborted"))]
        ConnectionAborted,
        /// <summary>
        /// ConnectionFailed
        /// </summary>
        [EnumMember(Value = ("ConnectionFailed"))]
        ConnectionFailed,
        /// <summary>
        /// NameNotResolved
        /// </summary>
        [EnumMember(Value = ("NameNotResolved"))]
        NameNotResolved,
        /// <summary>
        /// InternetDisconnected
        /// </summary>
        [EnumMember(Value = ("InternetDisconnected"))]
        InternetDisconnected,
        /// <summary>
        /// AddressUnreachable
        /// </summary>
        [EnumMember(Value = ("AddressUnreachable"))]
        AddressUnreachable,
        /// <summary>
        /// BlockedByClient
        /// </summary>
        [EnumMember(Value = ("BlockedByClient"))]
        BlockedByClient,
        /// <summary>
        /// BlockedByResponse
        /// </summary>
        [EnumMember(Value = ("BlockedByResponse"))]
        BlockedByResponse
    }

    /// <summary>
    /// The underlying connection technology that the browser is supposedly using.
    /// </summary>
    public enum ConnectionType
    {
        /// <summary>
        /// none
        /// </summary>
        [EnumMember(Value = ("none"))]
        None,
        /// <summary>
        /// cellular2g
        /// </summary>
        [EnumMember(Value = ("cellular2g"))]
        Cellular2g,
        /// <summary>
        /// cellular3g
        /// </summary>
        [EnumMember(Value = ("cellular3g"))]
        Cellular3g,
        /// <summary>
        /// cellular4g
        /// </summary>
        [EnumMember(Value = ("cellular4g"))]
        Cellular4g,
        /// <summary>
        /// bluetooth
        /// </summary>
        [EnumMember(Value = ("bluetooth"))]
        Bluetooth,
        /// <summary>
        /// ethernet
        /// </summary>
        [EnumMember(Value = ("ethernet"))]
        Ethernet,
        /// <summary>
        /// wifi
        /// </summary>
        [EnumMember(Value = ("wifi"))]
        Wifi,
        /// <summary>
        /// wimax
        /// </summary>
        [EnumMember(Value = ("wimax"))]
        Wimax,
        /// <summary>
        /// other
        /// </summary>
        [EnumMember(Value = ("other"))]
        Other
    }

    /// <summary>
    /// Represents the cookie&apos;s &apos;SameSite&apos; status:
    /// https://tools.ietf.org/html/draft-west-first-party-cookies
    /// </summary>
    public enum CookieSameSite
    {
        /// <summary>
        /// Strict
        /// </summary>
        [EnumMember(Value = ("Strict"))]
        Strict,
        /// <summary>
        /// Lax
        /// </summary>
        [EnumMember(Value = ("Lax"))]
        Lax,
        /// <summary>
        /// None
        /// </summary>
        [EnumMember(Value = ("None"))]
        None
    }

    /// <summary>
    /// Represents the cookie&apos;s &apos;Priority&apos; status:
    /// https://tools.ietf.org/html/draft-west-cookie-priority-00
    /// </summary>
    public enum CookiePriority
    {
        /// <summary>
        /// Low
        /// </summary>
        [EnumMember(Value = ("Low"))]
        Low,
        /// <summary>
        /// Medium
        /// </summary>
        [EnumMember(Value = ("Medium"))]
        Medium,
        /// <summary>
        /// High
        /// </summary>
        [EnumMember(Value = ("High"))]
        High
    }

    /// <summary>
    /// Represents the source scheme of the origin that originally set the cookie.
    /// A value of &quot;Unset&quot; allows protocol clients to emulate legacy cookie scope for the scheme.
    /// This is a temporary ability and it will be removed in the future.
    /// </summary>
    public enum CookieSourceScheme
    {
        /// <summary>
        /// Unset
        /// </summary>
        [EnumMember(Value = ("Unset"))]
        Unset,
        /// <summary>
        /// NonSecure
        /// </summary>
        [EnumMember(Value = ("NonSecure"))]
        NonSecure,
        /// <summary>
        /// Secure
        /// </summary>
        [EnumMember(Value = ("Secure"))]
        Secure
    }

    /// <summary>
    /// Timing information for the request.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ResourceTiming : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Timing&apos;s requestTime is a baseline in seconds, while the other numbers are ticks in
        /// milliseconds relatively to this requestTime.
        /// </summary>
        [DataMember(Name = ("requestTime"), IsRequired = (true))]
        public double RequestTime
        {
            get;
            set;
        }

        /// <summary>
        /// Started resolving proxy.
        /// </summary>
        [DataMember(Name = ("proxyStart"), IsRequired = (true))]
        public double ProxyStart
        {
            get;
            set;
        }

        /// <summary>
        /// Finished resolving proxy.
        /// </summary>
        [DataMember(Name = ("proxyEnd"), IsRequired = (true))]
        public double ProxyEnd
        {
            get;
            set;
        }

        /// <summary>
        /// Started DNS address resolve.
        /// </summary>
        [DataMember(Name = ("dnsStart"), IsRequired = (true))]
        public double DnsStart
        {
            get;
            set;
        }

        /// <summary>
        /// Finished DNS address resolve.
        /// </summary>
        [DataMember(Name = ("dnsEnd"), IsRequired = (true))]
        public double DnsEnd
        {
            get;
            set;
        }

        /// <summary>
        /// Started connecting to the remote host.
        /// </summary>
        [DataMember(Name = ("connectStart"), IsRequired = (true))]
        public double ConnectStart
        {
            get;
            set;
        }

        /// <summary>
        /// Connected to the remote host.
        /// </summary>
        [DataMember(Name = ("connectEnd"), IsRequired = (true))]
        public double ConnectEnd
        {
            get;
            set;
        }

        /// <summary>
        /// Started SSL handshake.
        /// </summary>
        [DataMember(Name = ("sslStart"), IsRequired = (true))]
        public double SslStart
        {
            get;
            set;
        }

        /// <summary>
        /// Finished SSL handshake.
        /// </summary>
        [DataMember(Name = ("sslEnd"), IsRequired = (true))]
        public double SslEnd
        {
            get;
            set;
        }

        /// <summary>
        /// Started running ServiceWorker.
        /// </summary>
        [DataMember(Name = ("workerStart"), IsRequired = (true))]
        public double WorkerStart
        {
            get;
            set;
        }

        /// <summary>
        /// Finished Starting ServiceWorker.
        /// </summary>
        [DataMember(Name = ("workerReady"), IsRequired = (true))]
        public double WorkerReady
        {
            get;
            set;
        }

        /// <summary>
        /// Started fetch event.
        /// </summary>
        [DataMember(Name = ("workerFetchStart"), IsRequired = (true))]
        public double WorkerFetchStart
        {
            get;
            set;
        }

        /// <summary>
        /// Settled fetch event respondWith promise.
        /// </summary>
        [DataMember(Name = ("workerRespondWithSettled"), IsRequired = (true))]
        public double WorkerRespondWithSettled
        {
            get;
            set;
        }

        /// <summary>
        /// Started sending request.
        /// </summary>
        [DataMember(Name = ("sendStart"), IsRequired = (true))]
        public double SendStart
        {
            get;
            set;
        }

        /// <summary>
        /// Finished sending request.
        /// </summary>
        [DataMember(Name = ("sendEnd"), IsRequired = (true))]
        public double SendEnd
        {
            get;
            set;
        }

        /// <summary>
        /// Time the server started pushing request.
        /// </summary>
        [DataMember(Name = ("pushStart"), IsRequired = (true))]
        public double PushStart
        {
            get;
            set;
        }

        /// <summary>
        /// Time the server finished pushing request.
        /// </summary>
        [DataMember(Name = ("pushEnd"), IsRequired = (true))]
        public double PushEnd
        {
            get;
            set;
        }

        /// <summary>
        /// Started receiving response headers.
        /// </summary>
        [DataMember(Name = ("receiveHeadersStart"), IsRequired = (true))]
        public double ReceiveHeadersStart
        {
            get;
            set;
        }

        /// <summary>
        /// Finished receiving response headers.
        /// </summary>
        [DataMember(Name = ("receiveHeadersEnd"), IsRequired = (true))]
        public double ReceiveHeadersEnd
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Loading priority of a resource request.
    /// </summary>
    public enum ResourcePriority
    {
        /// <summary>
        /// VeryLow
        /// </summary>
        [EnumMember(Value = ("VeryLow"))]
        VeryLow,
        /// <summary>
        /// Low
        /// </summary>
        [EnumMember(Value = ("Low"))]
        Low,
        /// <summary>
        /// Medium
        /// </summary>
        [EnumMember(Value = ("Medium"))]
        Medium,
        /// <summary>
        /// High
        /// </summary>
        [EnumMember(Value = ("High"))]
        High,
        /// <summary>
        /// VeryHigh
        /// </summary>
        [EnumMember(Value = ("VeryHigh"))]
        VeryHigh
    }

    /// <summary>
    /// Post data entry for HTTP request
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class PostDataEntry : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Bytes
        /// </summary>
        [DataMember(Name = ("bytes"), IsRequired = (false))]
        public byte[] Bytes
        {
            get;
            set;
        }
    }

    /// <summary>
    /// The referrer policy of the request, as defined in https://www.w3.org/TR/referrer-policy/
    /// </summary>
    public enum RequestReferrerPolicy
    {
        /// <summary>
        /// unsafe-url
        /// </summary>
        [EnumMember(Value = ("unsafe-url"))]
        UnsafeUrl,
        /// <summary>
        /// no-referrer-when-downgrade
        /// </summary>
        [EnumMember(Value = ("no-referrer-when-downgrade"))]
        NoReferrerWhenDowngrade,
        /// <summary>
        /// no-referrer
        /// </summary>
        [EnumMember(Value = ("no-referrer"))]
        NoReferrer,
        /// <summary>
        /// origin
        /// </summary>
        [EnumMember(Value = ("origin"))]
        Origin,
        /// <summary>
        /// origin-when-cross-origin
        /// </summary>
        [EnumMember(Value = ("origin-when-cross-origin"))]
        OriginWhenCrossOrigin,
        /// <summary>
        /// same-origin
        /// </summary>
        [EnumMember(Value = ("same-origin"))]
        SameOrigin,
        /// <summary>
        /// strict-origin
        /// </summary>
        [EnumMember(Value = ("strict-origin"))]
        StrictOrigin,
        /// <summary>
        /// strict-origin-when-cross-origin
        /// </summary>
        [EnumMember(Value = ("strict-origin-when-cross-origin"))]
        StrictOriginWhenCrossOrigin
    }

    /// <summary>
    /// HTTP request data.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class Request : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Request URL (without fragment).
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (true))]
        public string Url
        {
            get;
            set;
        }

        /// <summary>
        /// Fragment of the requested URL starting with hash, if present.
        /// </summary>
        [DataMember(Name = ("urlFragment"), IsRequired = (false))]
        public string UrlFragment
        {
            get;
            set;
        }

        /// <summary>
        /// HTTP request method.
        /// </summary>
        [DataMember(Name = ("method"), IsRequired = (true))]
        public string Method
        {
            get;
            set;
        }

        /// <summary>
        /// HTTP request headers.
        /// </summary>
        [DataMember(Name = ("headers"), IsRequired = (true))]
        public CefSharp.DevTools.Network.Headers Headers
        {
            get;
            set;
        }

        /// <summary>
        /// HTTP POST request data.
        /// </summary>
        [DataMember(Name = ("postData"), IsRequired = (false))]
        public string PostData
        {
            get;
            set;
        }

        /// <summary>
        /// True when the request has POST data. Note that postData might still be omitted when this flag is true when the data is too long.
        /// </summary>
        [DataMember(Name = ("hasPostData"), IsRequired = (false))]
        public bool? HasPostData
        {
            get;
            set;
        }

        /// <summary>
        /// Request body elements. This will be converted from base64 to binary
        /// </summary>
        [DataMember(Name = ("postDataEntries"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Network.PostDataEntry> PostDataEntries
        {
            get;
            set;
        }

        /// <summary>
        /// The mixed content type of the request.
        /// </summary>
        public CefSharp.DevTools.Security.MixedContentType? MixedContentType
        {
            get
            {
                return (CefSharp.DevTools.Security.MixedContentType? )(StringToEnum(typeof(CefSharp.DevTools.Security.MixedContentType? ), mixedContentType));
            }

            set
            {
                this.mixedContentType = (EnumToString(value));
            }
        }

        /// <summary>
        /// The mixed content type of the request.
        /// </summary>
        [DataMember(Name = ("mixedContentType"), IsRequired = (false))]
        internal string mixedContentType
        {
            get;
            set;
        }

        /// <summary>
        /// Priority of the resource request at the time request is sent.
        /// </summary>
        public CefSharp.DevTools.Network.ResourcePriority InitialPriority
        {
            get
            {
                return (CefSharp.DevTools.Network.ResourcePriority)(StringToEnum(typeof(CefSharp.DevTools.Network.ResourcePriority), initialPriority));
            }

            set
            {
                this.initialPriority = (EnumToString(value));
            }
        }

        /// <summary>
        /// Priority of the resource request at the time request is sent.
        /// </summary>
        [DataMember(Name = ("initialPriority"), IsRequired = (true))]
        internal string initialPriority
        {
            get;
            set;
        }

        /// <summary>
        /// The referrer policy of the request, as defined in https://www.w3.org/TR/referrer-policy/
        /// </summary>
        public CefSharp.DevTools.Network.RequestReferrerPolicy ReferrerPolicy
        {
            get
            {
                return (CefSharp.DevTools.Network.RequestReferrerPolicy)(StringToEnum(typeof(CefSharp.DevTools.Network.RequestReferrerPolicy), referrerPolicy));
            }

            set
            {
                this.referrerPolicy = (EnumToString(value));
            }
        }

        /// <summary>
        /// The referrer policy of the request, as defined in https://www.w3.org/TR/referrer-policy/
        /// </summary>
        [DataMember(Name = ("referrerPolicy"), IsRequired = (true))]
        internal string referrerPolicy
        {
            get;
            set;
        }

        /// <summary>
        /// Whether is loaded via link preload.
        /// </summary>
        [DataMember(Name = ("isLinkPreload"), IsRequired = (false))]
        public bool? IsLinkPreload
        {
            get;
            set;
        }

        /// <summary>
        /// Set for requests when the TrustToken API is used. Contains the parameters
        /// passed by the developer (e.g. via &quot;fetch&quot;) as understood by the backend.
        /// </summary>
        [DataMember(Name = ("trustTokenParams"), IsRequired = (false))]
        public CefSharp.DevTools.Network.TrustTokenParams TrustTokenParams
        {
            get;
            set;
        }

        /// <summary>
        /// True if this resource request is considered to be the &apos;same site&apos; as the
        /// request corresponding to the main frame.
        /// </summary>
        [DataMember(Name = ("isSameSite"), IsRequired = (false))]
        public bool? IsSameSite
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Details of a signed certificate timestamp (SCT).
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class SignedCertificateTimestamp : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Validation status.
        /// </summary>
        [DataMember(Name = ("status"), IsRequired = (true))]
        public string Status
        {
            get;
            set;
        }

        /// <summary>
        /// Origin.
        /// </summary>
        [DataMember(Name = ("origin"), IsRequired = (true))]
        public string Origin
        {
            get;
            set;
        }

        /// <summary>
        /// Log name / description.
        /// </summary>
        [DataMember(Name = ("logDescription"), IsRequired = (true))]
        public string LogDescription
        {
            get;
            set;
        }

        /// <summary>
        /// Log ID.
        /// </summary>
        [DataMember(Name = ("logId"), IsRequired = (true))]
        public string LogId
        {
            get;
            set;
        }

        /// <summary>
        /// Issuance date. Unlike TimeSinceEpoch, this contains the number of
        /// milliseconds since January 1, 1970, UTC, not the number of seconds.
        /// </summary>
        [DataMember(Name = ("timestamp"), IsRequired = (true))]
        public double Timestamp
        {
            get;
            set;
        }

        /// <summary>
        /// Hash algorithm.
        /// </summary>
        [DataMember(Name = ("hashAlgorithm"), IsRequired = (true))]
        public string HashAlgorithm
        {
            get;
            set;
        }

        /// <summary>
        /// Signature algorithm.
        /// </summary>
        [DataMember(Name = ("signatureAlgorithm"), IsRequired = (true))]
        public string SignatureAlgorithm
        {
            get;
            set;
        }

        /// <summary>
        /// Signature data.
        /// </summary>
        [DataMember(Name = ("signatureData"), IsRequired = (true))]
        public string SignatureData
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Security details about a request.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class SecurityDetails : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Protocol name (e.g. &quot;TLS 1.2&quot; or &quot;QUIC&quot;).
        /// </summary>
        [DataMember(Name = ("protocol"), IsRequired = (true))]
        public string Protocol
        {
            get;
            set;
        }

        /// <summary>
        /// Key Exchange used by the connection, or the empty string if not applicable.
        /// </summary>
        [DataMember(Name = ("keyExchange"), IsRequired = (true))]
        public string KeyExchange
        {
            get;
            set;
        }

        /// <summary>
        /// (EC)DH group used by the connection, if applicable.
        /// </summary>
        [DataMember(Name = ("keyExchangeGroup"), IsRequired = (false))]
        public string KeyExchangeGroup
        {
            get;
            set;
        }

        /// <summary>
        /// Cipher name.
        /// </summary>
        [DataMember(Name = ("cipher"), IsRequired = (true))]
        public string Cipher
        {
            get;
            set;
        }

        /// <summary>
        /// TLS MAC. Note that AEAD ciphers do not have separate MACs.
        /// </summary>
        [DataMember(Name = ("mac"), IsRequired = (false))]
        public string Mac
        {
            get;
            set;
        }

        /// <summary>
        /// Certificate ID value.
        /// </summary>
        [DataMember(Name = ("certificateId"), IsRequired = (true))]
        public int CertificateId
        {
            get;
            set;
        }

        /// <summary>
        /// Certificate subject name.
        /// </summary>
        [DataMember(Name = ("subjectName"), IsRequired = (true))]
        public string SubjectName
        {
            get;
            set;
        }

        /// <summary>
        /// Subject Alternative Name (SAN) DNS names and IP addresses.
        /// </summary>
        [DataMember(Name = ("sanList"), IsRequired = (true))]
        public string[] SanList
        {
            get;
            set;
        }

        /// <summary>
        /// Name of the issuing CA.
        /// </summary>
        [DataMember(Name = ("issuer"), IsRequired = (true))]
        public string Issuer
        {
            get;
            set;
        }

        /// <summary>
        /// Certificate valid from date.
        /// </summary>
        [DataMember(Name = ("validFrom"), IsRequired = (true))]
        public double ValidFrom
        {
            get;
            set;
        }

        /// <summary>
        /// Certificate valid to (expiration) date
        /// </summary>
        [DataMember(Name = ("validTo"), IsRequired = (true))]
        public double ValidTo
        {
            get;
            set;
        }

        /// <summary>
        /// List of signed certificate timestamps (SCTs).
        /// </summary>
        [DataMember(Name = ("signedCertificateTimestampList"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Network.SignedCertificateTimestamp> SignedCertificateTimestampList
        {
            get;
            set;
        }

        /// <summary>
        /// Whether the request complied with Certificate Transparency policy
        /// </summary>
        public CefSharp.DevTools.Network.CertificateTransparencyCompliance CertificateTransparencyCompliance
        {
            get
            {
                return (CefSharp.DevTools.Network.CertificateTransparencyCompliance)(StringToEnum(typeof(CefSharp.DevTools.Network.CertificateTransparencyCompliance), certificateTransparencyCompliance));
            }

            set
            {
                this.certificateTransparencyCompliance = (EnumToString(value));
            }
        }

        /// <summary>
        /// Whether the request complied with Certificate Transparency policy
        /// </summary>
        [DataMember(Name = ("certificateTransparencyCompliance"), IsRequired = (true))]
        internal string certificateTransparencyCompliance
        {
            get;
            set;
        }

        /// <summary>
        /// The signature algorithm used by the server in the TLS server signature,
        /// represented as a TLS SignatureScheme code point. Omitted if not
        /// applicable or not known.
        /// </summary>
        [DataMember(Name = ("serverSignatureAlgorithm"), IsRequired = (false))]
        public int? ServerSignatureAlgorithm
        {
            get;
            set;
        }

        /// <summary>
        /// Whether the connection used Encrypted ClientHello
        /// </summary>
        [DataMember(Name = ("encryptedClientHello"), IsRequired = (true))]
        public bool EncryptedClientHello
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Whether the request complied with Certificate Transparency policy.
    /// </summary>
    public enum CertificateTransparencyCompliance
    {
        /// <summary>
        /// unknown
        /// </summary>
        [EnumMember(Value = ("unknown"))]
        Unknown,
        /// <summary>
        /// not-compliant
        /// </summary>
        [EnumMember(Value = ("not-compliant"))]
        NotCompliant,
        /// <summary>
        /// compliant
        /// </summary>
        [EnumMember(Value = ("compliant"))]
        Compliant
    }

    /// <summary>
    /// The reason why request was blocked.
    /// </summary>
    public enum BlockedReason
    {
        /// <summary>
        /// other
        /// </summary>
        [EnumMember(Value = ("other"))]
        Other,
        /// <summary>
        /// csp
        /// </summary>
        [EnumMember(Value = ("csp"))]
        Csp,
        /// <summary>
        /// mixed-content
        /// </summary>
        [EnumMember(Value = ("mixed-content"))]
        MixedContent,
        /// <summary>
        /// origin
        /// </summary>
        [EnumMember(Value = ("origin"))]
        Origin,
        /// <summary>
        /// inspector
        /// </summary>
        [EnumMember(Value = ("inspector"))]
        Inspector,
        /// <summary>
        /// subresource-filter
        /// </summary>
        [EnumMember(Value = ("subresource-filter"))]
        SubresourceFilter,
        /// <summary>
        /// content-type
        /// </summary>
        [EnumMember(Value = ("content-type"))]
        ContentType,
        /// <summary>
        /// coep-frame-resource-needs-coep-header
        /// </summary>
        [EnumMember(Value = ("coep-frame-resource-needs-coep-header"))]
        CoepFrameResourceNeedsCoepHeader,
        /// <summary>
        /// coop-sandboxed-iframe-cannot-navigate-to-coop-page
        /// </summary>
        [EnumMember(Value = ("coop-sandboxed-iframe-cannot-navigate-to-coop-page"))]
        CoopSandboxedIframeCannotNavigateToCoopPage,
        /// <summary>
        /// corp-not-same-origin
        /// </summary>
        [EnumMember(Value = ("corp-not-same-origin"))]
        CorpNotSameOrigin,
        /// <summary>
        /// corp-not-same-origin-after-defaulted-to-same-origin-by-coep
        /// </summary>
        [EnumMember(Value = ("corp-not-same-origin-after-defaulted-to-same-origin-by-coep"))]
        CorpNotSameOriginAfterDefaultedToSameOriginByCoep,
        /// <summary>
        /// corp-not-same-site
        /// </summary>
        [EnumMember(Value = ("corp-not-same-site"))]
        CorpNotSameSite
    }

    /// <summary>
    /// The reason why request was blocked.
    /// </summary>
    public enum CorsError
    {
        /// <summary>
        /// DisallowedByMode
        /// </summary>
        [EnumMember(Value = ("DisallowedByMode"))]
        DisallowedByMode,
        /// <summary>
        /// InvalidResponse
        /// </summary>
        [EnumMember(Value = ("InvalidResponse"))]
        InvalidResponse,
        /// <summary>
        /// WildcardOriginNotAllowed
        /// </summary>
        [EnumMember(Value = ("WildcardOriginNotAllowed"))]
        WildcardOriginNotAllowed,
        /// <summary>
        /// MissingAllowOriginHeader
        /// </summary>
        [EnumMember(Value = ("MissingAllowOriginHeader"))]
        MissingAllowOriginHeader,
        /// <summary>
        /// MultipleAllowOriginValues
        /// </summary>
        [EnumMember(Value = ("MultipleAllowOriginValues"))]
        MultipleAllowOriginValues,
        /// <summary>
        /// InvalidAllowOriginValue
        /// </summary>
        [EnumMember(Value = ("InvalidAllowOriginValue"))]
        InvalidAllowOriginValue,
        /// <summary>
        /// AllowOriginMismatch
        /// </summary>
        [EnumMember(Value = ("AllowOriginMismatch"))]
        AllowOriginMismatch,
        /// <summary>
        /// InvalidAllowCredentials
        /// </summary>
        [EnumMember(Value = ("InvalidAllowCredentials"))]
        InvalidAllowCredentials,
        /// <summary>
        /// CorsDisabledScheme
        /// </summary>
        [EnumMember(Value = ("CorsDisabledScheme"))]
        CorsDisabledScheme,
        /// <summary>
        /// PreflightInvalidStatus
        /// </summary>
        [EnumMember(Value = ("PreflightInvalidStatus"))]
        PreflightInvalidStatus,
        /// <summary>
        /// PreflightDisallowedRedirect
        /// </summary>
        [EnumMember(Value = ("PreflightDisallowedRedirect"))]
        PreflightDisallowedRedirect,
        /// <summary>
        /// PreflightWildcardOriginNotAllowed
        /// </summary>
        [EnumMember(Value = ("PreflightWildcardOriginNotAllowed"))]
        PreflightWildcardOriginNotAllowed,
        /// <summary>
        /// PreflightMissingAllowOriginHeader
        /// </summary>
        [EnumMember(Value = ("PreflightMissingAllowOriginHeader"))]
        PreflightMissingAllowOriginHeader,
        /// <summary>
        /// PreflightMultipleAllowOriginValues
        /// </summary>
        [EnumMember(Value = ("PreflightMultipleAllowOriginValues"))]
        PreflightMultipleAllowOriginValues,
        /// <summary>
        /// PreflightInvalidAllowOriginValue
        /// </summary>
        [EnumMember(Value = ("PreflightInvalidAllowOriginValue"))]
        PreflightInvalidAllowOriginValue,
        /// <summary>
        /// PreflightAllowOriginMismatch
        /// </summary>
        [EnumMember(Value = ("PreflightAllowOriginMismatch"))]
        PreflightAllowOriginMismatch,
        /// <summary>
        /// PreflightInvalidAllowCredentials
        /// </summary>
        [EnumMember(Value = ("PreflightInvalidAllowCredentials"))]
        PreflightInvalidAllowCredentials,
        /// <summary>
        /// PreflightMissingAllowExternal
        /// </summary>
        [EnumMember(Value = ("PreflightMissingAllowExternal"))]
        PreflightMissingAllowExternal,
        /// <summary>
        /// PreflightInvalidAllowExternal
        /// </summary>
        [EnumMember(Value = ("PreflightInvalidAllowExternal"))]
        PreflightInvalidAllowExternal,
        /// <summary>
        /// PreflightMissingAllowPrivateNetwork
        /// </summary>
        [EnumMember(Value = ("PreflightMissingAllowPrivateNetwork"))]
        PreflightMissingAllowPrivateNetwork,
        /// <summary>
        /// PreflightInvalidAllowPrivateNetwork
        /// </summary>
        [EnumMember(Value = ("PreflightInvalidAllowPrivateNetwork"))]
        PreflightInvalidAllowPrivateNetwork,
        /// <summary>
        /// InvalidAllowMethodsPreflightResponse
        /// </summary>
        [EnumMember(Value = ("InvalidAllowMethodsPreflightResponse"))]
        InvalidAllowMethodsPreflightResponse,
        /// <summary>
        /// InvalidAllowHeadersPreflightResponse
        /// </summary>
        [EnumMember(Value = ("InvalidAllowHeadersPreflightResponse"))]
        InvalidAllowHeadersPreflightResponse,
        /// <summary>
        /// MethodDisallowedByPreflightResponse
        /// </summary>
        [EnumMember(Value = ("MethodDisallowedByPreflightResponse"))]
        MethodDisallowedByPreflightResponse,
        /// <summary>
        /// HeaderDisallowedByPreflightResponse
        /// </summary>
        [EnumMember(Value = ("HeaderDisallowedByPreflightResponse"))]
        HeaderDisallowedByPreflightResponse,
        /// <summary>
        /// RedirectContainsCredentials
        /// </summary>
        [EnumMember(Value = ("RedirectContainsCredentials"))]
        RedirectContainsCredentials,
        /// <summary>
        /// InsecurePrivateNetwork
        /// </summary>
        [EnumMember(Value = ("InsecurePrivateNetwork"))]
        InsecurePrivateNetwork,
        /// <summary>
        /// InvalidPrivateNetworkAccess
        /// </summary>
        [EnumMember(Value = ("InvalidPrivateNetworkAccess"))]
        InvalidPrivateNetworkAccess,
        /// <summary>
        /// UnexpectedPrivateNetworkAccess
        /// </summary>
        [EnumMember(Value = ("UnexpectedPrivateNetworkAccess"))]
        UnexpectedPrivateNetworkAccess,
        /// <summary>
        /// NoCorsRedirectModeNotFollow
        /// </summary>
        [EnumMember(Value = ("NoCorsRedirectModeNotFollow"))]
        NoCorsRedirectModeNotFollow,
        /// <summary>
        /// PreflightMissingPrivateNetworkAccessId
        /// </summary>
        [EnumMember(Value = ("PreflightMissingPrivateNetworkAccessId"))]
        PreflightMissingPrivateNetworkAccessId,
        /// <summary>
        /// PreflightMissingPrivateNetworkAccessName
        /// </summary>
        [EnumMember(Value = ("PreflightMissingPrivateNetworkAccessName"))]
        PreflightMissingPrivateNetworkAccessName,
        /// <summary>
        /// PrivateNetworkAccessPermissionUnavailable
        /// </summary>
        [EnumMember(Value = ("PrivateNetworkAccessPermissionUnavailable"))]
        PrivateNetworkAccessPermissionUnavailable,
        /// <summary>
        /// PrivateNetworkAccessPermissionDenied
        /// </summary>
        [EnumMember(Value = ("PrivateNetworkAccessPermissionDenied"))]
        PrivateNetworkAccessPermissionDenied
    }

    /// <summary>
    /// CorsErrorStatus
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CorsErrorStatus : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// CorsError
        /// </summary>
        public CefSharp.DevTools.Network.CorsError CorsError
        {
            get
            {
                return (CefSharp.DevTools.Network.CorsError)(StringToEnum(typeof(CefSharp.DevTools.Network.CorsError), corsError));
            }

            set
            {
                this.corsError = (EnumToString(value));
            }
        }

        /// <summary>
        /// CorsError
        /// </summary>
        [DataMember(Name = ("corsError"), IsRequired = (true))]
        internal string corsError
        {
            get;
            set;
        }

        /// <summary>
        /// FailedParameter
        /// </summary>
        [DataMember(Name = ("failedParameter"), IsRequired = (true))]
        public string FailedParameter
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Source of serviceworker response.
    /// </summary>
    public enum ServiceWorkerResponseSource
    {
        /// <summary>
        /// cache-storage
        /// </summary>
        [EnumMember(Value = ("cache-storage"))]
        CacheStorage,
        /// <summary>
        /// http-cache
        /// </summary>
        [EnumMember(Value = ("http-cache"))]
        HttpCache,
        /// <summary>
        /// fallback-code
        /// </summary>
        [EnumMember(Value = ("fallback-code"))]
        FallbackCode,
        /// <summary>
        /// network
        /// </summary>
        [EnumMember(Value = ("network"))]
        Network
    }

    /// <summary>
    /// Only set for &quot;token-redemption&quot; operation and determine whether
    /// to request a fresh SRR or use a still valid cached SRR.
    /// </summary>
    public enum TrustTokenParamsRefreshPolicy
    {
        /// <summary>
        /// UseCached
        /// </summary>
        [EnumMember(Value = ("UseCached"))]
        UseCached,
        /// <summary>
        /// Refresh
        /// </summary>
        [EnumMember(Value = ("Refresh"))]
        Refresh
    }

    /// <summary>
    /// Determines what type of Trust Token operation is executed and
    /// depending on the type, some additional parameters. The values
    /// are specified in third_party/blink/renderer/core/fetch/trust_token.idl.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class TrustTokenParams : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Operation
        /// </summary>
        public CefSharp.DevTools.Network.TrustTokenOperationType Operation
        {
            get
            {
                return (CefSharp.DevTools.Network.TrustTokenOperationType)(StringToEnum(typeof(CefSharp.DevTools.Network.TrustTokenOperationType), operation));
            }

            set
            {
                this.operation = (EnumToString(value));
            }
        }

        /// <summary>
        /// Operation
        /// </summary>
        [DataMember(Name = ("operation"), IsRequired = (true))]
        internal string operation
        {
            get;
            set;
        }

        /// <summary>
        /// Only set for &quot;token-redemption&quot; operation and determine whether
        /// to request a fresh SRR or use a still valid cached SRR.
        /// </summary>
        public CefSharp.DevTools.Network.TrustTokenParamsRefreshPolicy RefreshPolicy
        {
            get
            {
                return (CefSharp.DevTools.Network.TrustTokenParamsRefreshPolicy)(StringToEnum(typeof(CefSharp.DevTools.Network.TrustTokenParamsRefreshPolicy), refreshPolicy));
            }

            set
            {
                this.refreshPolicy = (EnumToString(value));
            }
        }

        /// <summary>
        /// Only set for &quot;token-redemption&quot; operation and determine whether
        /// to request a fresh SRR or use a still valid cached SRR.
        /// </summary>
        [DataMember(Name = ("refreshPolicy"), IsRequired = (true))]
        internal string refreshPolicy
        {
            get;
            set;
        }

        /// <summary>
        /// Origins of issuers from whom to request tokens or redemption
        /// records.
        /// </summary>
        [DataMember(Name = ("issuers"), IsRequired = (false))]
        public string[] Issuers
        {
            get;
            set;
        }
    }

    /// <summary>
    /// TrustTokenOperationType
    /// </summary>
    public enum TrustTokenOperationType
    {
        /// <summary>
        /// Issuance
        /// </summary>
        [EnumMember(Value = ("Issuance"))]
        Issuance,
        /// <summary>
        /// Redemption
        /// </summary>
        [EnumMember(Value = ("Redemption"))]
        Redemption,
        /// <summary>
        /// Signing
        /// </summary>
        [EnumMember(Value = ("Signing"))]
        Signing
    }

    /// <summary>
    /// The reason why Chrome uses a specific transport protocol for HTTP semantics.
    /// </summary>
    public enum AlternateProtocolUsage
    {
        /// <summary>
        /// alternativeJobWonWithoutRace
        /// </summary>
        [EnumMember(Value = ("alternativeJobWonWithoutRace"))]
        AlternativeJobWonWithoutRace,
        /// <summary>
        /// alternativeJobWonRace
        /// </summary>
        [EnumMember(Value = ("alternativeJobWonRace"))]
        AlternativeJobWonRace,
        /// <summary>
        /// mainJobWonRace
        /// </summary>
        [EnumMember(Value = ("mainJobWonRace"))]
        MainJobWonRace,
        /// <summary>
        /// mappingMissing
        /// </summary>
        [EnumMember(Value = ("mappingMissing"))]
        MappingMissing,
        /// <summary>
        /// broken
        /// </summary>
        [EnumMember(Value = ("broken"))]
        Broken,
        /// <summary>
        /// dnsAlpnH3JobWonWithoutRace
        /// </summary>
        [EnumMember(Value = ("dnsAlpnH3JobWonWithoutRace"))]
        DnsAlpnH3JobWonWithoutRace,
        /// <summary>
        /// dnsAlpnH3JobWonRace
        /// </summary>
        [EnumMember(Value = ("dnsAlpnH3JobWonRace"))]
        DnsAlpnH3JobWonRace,
        /// <summary>
        /// unspecifiedReason
        /// </summary>
        [EnumMember(Value = ("unspecifiedReason"))]
        UnspecifiedReason
    }

    /// <summary>
    /// Source of service worker router.
    /// </summary>
    public enum ServiceWorkerRouterSource
    {
        /// <summary>
        /// network
        /// </summary>
        [EnumMember(Value = ("network"))]
        Network,
        /// <summary>
        /// cache
        /// </summary>
        [EnumMember(Value = ("cache"))]
        Cache,
        /// <summary>
        /// fetch-event
        /// </summary>
        [EnumMember(Value = ("fetch-event"))]
        FetchEvent,
        /// <summary>
        /// race-network-and-fetch-handler
        /// </summary>
        [EnumMember(Value = ("race-network-and-fetch-handler"))]
        RaceNetworkAndFetchHandler
    }

    /// <summary>
    /// ServiceWorkerRouterInfo
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ServiceWorkerRouterInfo : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// RuleIdMatched
        /// </summary>
        [DataMember(Name = ("ruleIdMatched"), IsRequired = (true))]
        public int RuleIdMatched
        {
            get;
            set;
        }

        /// <summary>
        /// MatchedSourceType
        /// </summary>
        public CefSharp.DevTools.Network.ServiceWorkerRouterSource MatchedSourceType
        {
            get
            {
                return (CefSharp.DevTools.Network.ServiceWorkerRouterSource)(StringToEnum(typeof(CefSharp.DevTools.Network.ServiceWorkerRouterSource), matchedSourceType));
            }

            set
            {
                this.matchedSourceType = (EnumToString(value));
            }
        }

        /// <summary>
        /// MatchedSourceType
        /// </summary>
        [DataMember(Name = ("matchedSourceType"), IsRequired = (true))]
        internal string matchedSourceType
        {
            get;
            set;
        }
    }

    /// <summary>
    /// HTTP response data.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class Response : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Response URL. This URL can be different from CachedResource.url in case of redirect.
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (true))]
        public string Url
        {
            get;
            set;
        }

        /// <summary>
        /// HTTP response status code.
        /// </summary>
        [DataMember(Name = ("status"), IsRequired = (true))]
        public int Status
        {
            get;
            set;
        }

        /// <summary>
        /// HTTP response status text.
        /// </summary>
        [DataMember(Name = ("statusText"), IsRequired = (true))]
        public string StatusText
        {
            get;
            set;
        }

        /// <summary>
        /// HTTP response headers.
        /// </summary>
        [DataMember(Name = ("headers"), IsRequired = (true))]
        public CefSharp.DevTools.Network.Headers Headers
        {
            get;
            set;
        }

        /// <summary>
        /// HTTP response headers text. This has been replaced by the headers in Network.responseReceivedExtraInfo.
        /// </summary>
        [DataMember(Name = ("headersText"), IsRequired = (false))]
        public string HeadersText
        {
            get;
            set;
        }

        /// <summary>
        /// Resource mimeType as determined by the browser.
        /// </summary>
        [DataMember(Name = ("mimeType"), IsRequired = (true))]
        public string MimeType
        {
            get;
            set;
        }

        /// <summary>
        /// Resource charset as determined by the browser (if applicable).
        /// </summary>
        [DataMember(Name = ("charset"), IsRequired = (true))]
        public string Charset
        {
            get;
            set;
        }

        /// <summary>
        /// Refined HTTP request headers that were actually transmitted over the network.
        /// </summary>
        [DataMember(Name = ("requestHeaders"), IsRequired = (false))]
        public CefSharp.DevTools.Network.Headers RequestHeaders
        {
            get;
            set;
        }

        /// <summary>
        /// HTTP request headers text. This has been replaced by the headers in Network.requestWillBeSentExtraInfo.
        /// </summary>
        [DataMember(Name = ("requestHeadersText"), IsRequired = (false))]
        public string RequestHeadersText
        {
            get;
            set;
        }

        /// <summary>
        /// Specifies whether physical connection was actually reused for this request.
        /// </summary>
        [DataMember(Name = ("connectionReused"), IsRequired = (true))]
        public bool ConnectionReused
        {
            get;
            set;
        }

        /// <summary>
        /// Physical connection id that was actually used for this request.
        /// </summary>
        [DataMember(Name = ("connectionId"), IsRequired = (true))]
        public double ConnectionId
        {
            get;
            set;
        }

        /// <summary>
        /// Remote IP address.
        /// </summary>
        [DataMember(Name = ("remoteIPAddress"), IsRequired = (false))]
        public string RemoteIPAddress
        {
            get;
            set;
        }

        /// <summary>
        /// Remote port.
        /// </summary>
        [DataMember(Name = ("remotePort"), IsRequired = (false))]
        public int? RemotePort
        {
            get;
            set;
        }

        /// <summary>
        /// Specifies that the request was served from the disk cache.
        /// </summary>
        [DataMember(Name = ("fromDiskCache"), IsRequired = (false))]
        public bool? FromDiskCache
        {
            get;
            set;
        }

        /// <summary>
        /// Specifies that the request was served from the ServiceWorker.
        /// </summary>
        [DataMember(Name = ("fromServiceWorker"), IsRequired = (false))]
        public bool? FromServiceWorker
        {
            get;
            set;
        }

        /// <summary>
        /// Specifies that the request was served from the prefetch cache.
        /// </summary>
        [DataMember(Name = ("fromPrefetchCache"), IsRequired = (false))]
        public bool? FromPrefetchCache
        {
            get;
            set;
        }

        /// <summary>
        /// Information about how Service Worker Static Router was used.
        /// </summary>
        [DataMember(Name = ("serviceWorkerRouterInfo"), IsRequired = (false))]
        public CefSharp.DevTools.Network.ServiceWorkerRouterInfo ServiceWorkerRouterInfo
        {
            get;
            set;
        }

        /// <summary>
        /// Total number of bytes received for this request so far.
        /// </summary>
        [DataMember(Name = ("encodedDataLength"), IsRequired = (true))]
        public double EncodedDataLength
        {
            get;
            set;
        }

        /// <summary>
        /// Timing information for the given request.
        /// </summary>
        [DataMember(Name = ("timing"), IsRequired = (false))]
        public CefSharp.DevTools.Network.ResourceTiming Timing
        {
            get;
            set;
        }

        /// <summary>
        /// Response source of response from ServiceWorker.
        /// </summary>
        public CefSharp.DevTools.Network.ServiceWorkerResponseSource? ServiceWorkerResponseSource
        {
            get
            {
                return (CefSharp.DevTools.Network.ServiceWorkerResponseSource? )(StringToEnum(typeof(CefSharp.DevTools.Network.ServiceWorkerResponseSource? ), serviceWorkerResponseSource));
            }

            set
            {
                this.serviceWorkerResponseSource = (EnumToString(value));
            }
        }

        /// <summary>
        /// Response source of response from ServiceWorker.
        /// </summary>
        [DataMember(Name = ("serviceWorkerResponseSource"), IsRequired = (false))]
        internal string serviceWorkerResponseSource
        {
            get;
            set;
        }

        /// <summary>
        /// The time at which the returned response was generated.
        /// </summary>
        [DataMember(Name = ("responseTime"), IsRequired = (false))]
        public double? ResponseTime
        {
            get;
            set;
        }

        /// <summary>
        /// Cache Storage Cache Name.
        /// </summary>
        [DataMember(Name = ("cacheStorageCacheName"), IsRequired = (false))]
        public string CacheStorageCacheName
        {
            get;
            set;
        }

        /// <summary>
        /// Protocol used to fetch this request.
        /// </summary>
        [DataMember(Name = ("protocol"), IsRequired = (false))]
        public string Protocol
        {
            get;
            set;
        }

        /// <summary>
        /// The reason why Chrome uses a specific transport protocol for HTTP semantics.
        /// </summary>
        public CefSharp.DevTools.Network.AlternateProtocolUsage? AlternateProtocolUsage
        {
            get
            {
                return (CefSharp.DevTools.Network.AlternateProtocolUsage? )(StringToEnum(typeof(CefSharp.DevTools.Network.AlternateProtocolUsage? ), alternateProtocolUsage));
            }

            set
            {
                this.alternateProtocolUsage = (EnumToString(value));
            }
        }

        /// <summary>
        /// The reason why Chrome uses a specific transport protocol for HTTP semantics.
        /// </summary>
        [DataMember(Name = ("alternateProtocolUsage"), IsRequired = (false))]
        internal string alternateProtocolUsage
        {
            get;
            set;
        }

        /// <summary>
        /// Security state of the request resource.
        /// </summary>
        public CefSharp.DevTools.Security.SecurityState SecurityState
        {
            get
            {
                return (CefSharp.DevTools.Security.SecurityState)(StringToEnum(typeof(CefSharp.DevTools.Security.SecurityState), securityState));
            }

            set
            {
                this.securityState = (EnumToString(value));
            }
        }

        /// <summary>
        /// Security state of the request resource.
        /// </summary>
        [DataMember(Name = ("securityState"), IsRequired = (true))]
        internal string securityState
        {
            get;
            set;
        }

        /// <summary>
        /// Security details for the request.
        /// </summary>
        [DataMember(Name = ("securityDetails"), IsRequired = (false))]
        public CefSharp.DevTools.Network.SecurityDetails SecurityDetails
        {
            get;
            set;
        }
    }

    /// <summary>
    /// WebSocket request data.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class WebSocketRequest : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// HTTP request headers.
        /// </summary>
        [DataMember(Name = ("headers"), IsRequired = (true))]
        public CefSharp.DevTools.Network.Headers Headers
        {
            get;
            set;
        }
    }

    /// <summary>
    /// WebSocket response data.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class WebSocketResponse : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// HTTP response status code.
        /// </summary>
        [DataMember(Name = ("status"), IsRequired = (true))]
        public int Status
        {
            get;
            set;
        }

        /// <summary>
        /// HTTP response status text.
        /// </summary>
        [DataMember(Name = ("statusText"), IsRequired = (true))]
        public string StatusText
        {
            get;
            set;
        }

        /// <summary>
        /// HTTP response headers.
        /// </summary>
        [DataMember(Name = ("headers"), IsRequired = (true))]
        public CefSharp.DevTools.Network.Headers Headers
        {
            get;
            set;
        }

        /// <summary>
        /// HTTP response headers text.
        /// </summary>
        [DataMember(Name = ("headersText"), IsRequired = (false))]
        public string HeadersText
        {
            get;
            set;
        }

        /// <summary>
        /// HTTP request headers.
        /// </summary>
        [DataMember(Name = ("requestHeaders"), IsRequired = (false))]
        public CefSharp.DevTools.Network.Headers RequestHeaders
        {
            get;
            set;
        }

        /// <summary>
        /// HTTP request headers text.
        /// </summary>
        [DataMember(Name = ("requestHeadersText"), IsRequired = (false))]
        public string RequestHeadersText
        {
            get;
            set;
        }
    }

    /// <summary>
    /// WebSocket message data. This represents an entire WebSocket message, not just a fragmented frame as the name suggests.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class WebSocketFrame : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// WebSocket message opcode.
        /// </summary>
        [DataMember(Name = ("opcode"), IsRequired = (true))]
        public double Opcode
        {
            get;
            set;
        }

        /// <summary>
        /// WebSocket message mask.
        /// </summary>
        [DataMember(Name = ("mask"), IsRequired = (true))]
        public bool Mask
        {
            get;
            set;
        }

        /// <summary>
        /// WebSocket message payload data.
        /// If the opcode is 1, this is a text message and payloadData is a UTF-8 string.
        /// If the opcode isn&apos;t 1, then payloadData is a base64 encoded string representing binary data.
        /// </summary>
        [DataMember(Name = ("payloadData"), IsRequired = (true))]
        public string PayloadData
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Information about the cached resource.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CachedResource : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Resource URL. This is the url of the original network request.
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (true))]
        public string Url
        {
            get;
            set;
        }

        /// <summary>
        /// Type of this resource.
        /// </summary>
        public CefSharp.DevTools.Network.ResourceType Type
        {
            get
            {
                return (CefSharp.DevTools.Network.ResourceType)(StringToEnum(typeof(CefSharp.DevTools.Network.ResourceType), type));
            }

            set
            {
                this.type = (EnumToString(value));
            }
        }

        /// <summary>
        /// Type of this resource.
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (true))]
        internal string type
        {
            get;
            set;
        }

        /// <summary>
        /// Cached response data.
        /// </summary>
        [DataMember(Name = ("response"), IsRequired = (false))]
        public CefSharp.DevTools.Network.Response Response
        {
            get;
            set;
        }

        /// <summary>
        /// Cached response body size.
        /// </summary>
        [DataMember(Name = ("bodySize"), IsRequired = (true))]
        public double BodySize
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Type of this initiator.
    /// </summary>
    public enum InitiatorType
    {
        /// <summary>
        /// parser
        /// </summary>
        [EnumMember(Value = ("parser"))]
        Parser,
        /// <summary>
        /// script
        /// </summary>
        [EnumMember(Value = ("script"))]
        Script,
        /// <summary>
        /// preload
        /// </summary>
        [EnumMember(Value = ("preload"))]
        Preload,
        /// <summary>
        /// SignedExchange
        /// </summary>
        [EnumMember(Value = ("SignedExchange"))]
        SignedExchange,
        /// <summary>
        /// preflight
        /// </summary>
        [EnumMember(Value = ("preflight"))]
        Preflight,
        /// <summary>
        /// other
        /// </summary>
        [EnumMember(Value = ("other"))]
        Other
    }

    /// <summary>
    /// Information about the request initiator.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class Initiator : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Type of this initiator.
        /// </summary>
        public CefSharp.DevTools.Network.InitiatorType Type
        {
            get
            {
                return (CefSharp.DevTools.Network.InitiatorType)(StringToEnum(typeof(CefSharp.DevTools.Network.InitiatorType), type));
            }

            set
            {
                this.type = (EnumToString(value));
            }
        }

        /// <summary>
        /// Type of this initiator.
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (true))]
        internal string type
        {
            get;
            set;
        }

        /// <summary>
        /// Initiator JavaScript stack trace, set for Script only.
        /// </summary>
        [DataMember(Name = ("stack"), IsRequired = (false))]
        public CefSharp.DevTools.Runtime.StackTrace Stack
        {
            get;
            set;
        }

        /// <summary>
        /// Initiator URL, set for Parser type or for Script type (when script is importing module) or for SignedExchange type.
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (false))]
        public string Url
        {
            get;
            set;
        }

        /// <summary>
        /// Initiator line number, set for Parser type or for Script type (when script is importing
        /// module) (0-based).
        /// </summary>
        [DataMember(Name = ("lineNumber"), IsRequired = (false))]
        public double? LineNumber
        {
            get;
            set;
        }

        /// <summary>
        /// Initiator column number, set for Parser type or for Script type (when script is importing
        /// module) (0-based).
        /// </summary>
        [DataMember(Name = ("columnNumber"), IsRequired = (false))]
        public double? ColumnNumber
        {
            get;
            set;
        }

        /// <summary>
        /// Set if another request triggered this request (e.g. preflight).
        /// </summary>
        [DataMember(Name = ("requestId"), IsRequired = (false))]
        public string RequestId
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Cookie object
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class Cookie : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Cookie name.
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// Cookie value.
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (true))]
        public string Value
        {
            get;
            set;
        }

        /// <summary>
        /// Cookie domain.
        /// </summary>
        [DataMember(Name = ("domain"), IsRequired = (true))]
        public string Domain
        {
            get;
            set;
        }

        /// <summary>
        /// Cookie path.
        /// </summary>
        [DataMember(Name = ("path"), IsRequired = (true))]
        public string Path
        {
            get;
            set;
        }

        /// <summary>
        /// Cookie expiration date as the number of seconds since the UNIX epoch.
        /// </summary>
        [DataMember(Name = ("expires"), IsRequired = (true))]
        public double Expires
        {
            get;
            set;
        }

        /// <summary>
        /// Cookie size.
        /// </summary>
        [DataMember(Name = ("size"), IsRequired = (true))]
        public int Size
        {
            get;
            set;
        }

        /// <summary>
        /// True if cookie is http-only.
        /// </summary>
        [DataMember(Name = ("httpOnly"), IsRequired = (true))]
        public bool HttpOnly
        {
            get;
            set;
        }

        /// <summary>
        /// True if cookie is secure.
        /// </summary>
        [DataMember(Name = ("secure"), IsRequired = (true))]
        public bool Secure
        {
            get;
            set;
        }

        /// <summary>
        /// True in case of session cookie.
        /// </summary>
        [DataMember(Name = ("session"), IsRequired = (true))]
        public bool Session
        {
            get;
            set;
        }

        /// <summary>
        /// Cookie SameSite type.
        /// </summary>
        public CefSharp.DevTools.Network.CookieSameSite? SameSite
        {
            get
            {
                return (CefSharp.DevTools.Network.CookieSameSite? )(StringToEnum(typeof(CefSharp.DevTools.Network.CookieSameSite? ), sameSite));
            }

            set
            {
                this.sameSite = (EnumToString(value));
            }
        }

        /// <summary>
        /// Cookie SameSite type.
        /// </summary>
        [DataMember(Name = ("sameSite"), IsRequired = (false))]
        internal string sameSite
        {
            get;
            set;
        }

        /// <summary>
        /// Cookie Priority
        /// </summary>
        public CefSharp.DevTools.Network.CookiePriority Priority
        {
            get
            {
                return (CefSharp.DevTools.Network.CookiePriority)(StringToEnum(typeof(CefSharp.DevTools.Network.CookiePriority), priority));
            }

            set
            {
                this.priority = (EnumToString(value));
            }
        }

        /// <summary>
        /// Cookie Priority
        /// </summary>
        [DataMember(Name = ("priority"), IsRequired = (true))]
        internal string priority
        {
            get;
            set;
        }

        /// <summary>
        /// True if cookie is SameParty.
        /// </summary>
        [DataMember(Name = ("sameParty"), IsRequired = (true))]
        public bool SameParty
        {
            get;
            set;
        }

        /// <summary>
        /// Cookie source scheme type.
        /// </summary>
        public CefSharp.DevTools.Network.CookieSourceScheme SourceScheme
        {
            get
            {
                return (CefSharp.DevTools.Network.CookieSourceScheme)(StringToEnum(typeof(CefSharp.DevTools.Network.CookieSourceScheme), sourceScheme));
            }

            set
            {
                this.sourceScheme = (EnumToString(value));
            }
        }

        /// <summary>
        /// Cookie source scheme type.
        /// </summary>
        [DataMember(Name = ("sourceScheme"), IsRequired = (true))]
        internal string sourceScheme
        {
            get;
            set;
        }

        /// <summary>
        /// Cookie source port. Valid values are {-1, [1, 65535]}, -1 indicates an unspecified port.
        /// An unspecified port value allows protocol clients to emulate legacy cookie scope for the port.
        /// This is a temporary ability and it will be removed in the future.
        /// </summary>
        [DataMember(Name = ("sourcePort"), IsRequired = (true))]
        public int SourcePort
        {
            get;
            set;
        }

        /// <summary>
        /// Cookie partition key. The site of the top-level URL the browser was visiting at the start
        /// of the request to the endpoint that set the cookie.
        /// </summary>
        [DataMember(Name = ("partitionKey"), IsRequired = (false))]
        public string PartitionKey
        {
            get;
            set;
        }

        /// <summary>
        /// True if cookie partition key is opaque.
        /// </summary>
        [DataMember(Name = ("partitionKeyOpaque"), IsRequired = (false))]
        public bool? PartitionKeyOpaque
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Types of reasons why a cookie may not be stored from a response.
    /// </summary>
    public enum SetCookieBlockedReason
    {
        /// <summary>
        /// SecureOnly
        /// </summary>
        [EnumMember(Value = ("SecureOnly"))]
        SecureOnly,
        /// <summary>
        /// SameSiteStrict
        /// </summary>
        [EnumMember(Value = ("SameSiteStrict"))]
        SameSiteStrict,
        /// <summary>
        /// SameSiteLax
        /// </summary>
        [EnumMember(Value = ("SameSiteLax"))]
        SameSiteLax,
        /// <summary>
        /// SameSiteUnspecifiedTreatedAsLax
        /// </summary>
        [EnumMember(Value = ("SameSiteUnspecifiedTreatedAsLax"))]
        SameSiteUnspecifiedTreatedAsLax,
        /// <summary>
        /// SameSiteNoneInsecure
        /// </summary>
        [EnumMember(Value = ("SameSiteNoneInsecure"))]
        SameSiteNoneInsecure,
        /// <summary>
        /// UserPreferences
        /// </summary>
        [EnumMember(Value = ("UserPreferences"))]
        UserPreferences,
        /// <summary>
        /// ThirdPartyPhaseout
        /// </summary>
        [EnumMember(Value = ("ThirdPartyPhaseout"))]
        ThirdPartyPhaseout,
        /// <summary>
        /// ThirdPartyBlockedInFirstPartySet
        /// </summary>
        [EnumMember(Value = ("ThirdPartyBlockedInFirstPartySet"))]
        ThirdPartyBlockedInFirstPartySet,
        /// <summary>
        /// SyntaxError
        /// </summary>
        [EnumMember(Value = ("SyntaxError"))]
        SyntaxError,
        /// <summary>
        /// SchemeNotSupported
        /// </summary>
        [EnumMember(Value = ("SchemeNotSupported"))]
        SchemeNotSupported,
        /// <summary>
        /// OverwriteSecure
        /// </summary>
        [EnumMember(Value = ("OverwriteSecure"))]
        OverwriteSecure,
        /// <summary>
        /// InvalidDomain
        /// </summary>
        [EnumMember(Value = ("InvalidDomain"))]
        InvalidDomain,
        /// <summary>
        /// InvalidPrefix
        /// </summary>
        [EnumMember(Value = ("InvalidPrefix"))]
        InvalidPrefix,
        /// <summary>
        /// UnknownError
        /// </summary>
        [EnumMember(Value = ("UnknownError"))]
        UnknownError,
        /// <summary>
        /// SchemefulSameSiteStrict
        /// </summary>
        [EnumMember(Value = ("SchemefulSameSiteStrict"))]
        SchemefulSameSiteStrict,
        /// <summary>
        /// SchemefulSameSiteLax
        /// </summary>
        [EnumMember(Value = ("SchemefulSameSiteLax"))]
        SchemefulSameSiteLax,
        /// <summary>
        /// SchemefulSameSiteUnspecifiedTreatedAsLax
        /// </summary>
        [EnumMember(Value = ("SchemefulSameSiteUnspecifiedTreatedAsLax"))]
        SchemefulSameSiteUnspecifiedTreatedAsLax,
        /// <summary>
        /// SamePartyFromCrossPartyContext
        /// </summary>
        [EnumMember(Value = ("SamePartyFromCrossPartyContext"))]
        SamePartyFromCrossPartyContext,
        /// <summary>
        /// SamePartyConflictsWithOtherAttributes
        /// </summary>
        [EnumMember(Value = ("SamePartyConflictsWithOtherAttributes"))]
        SamePartyConflictsWithOtherAttributes,
        /// <summary>
        /// NameValuePairExceedsMaxSize
        /// </summary>
        [EnumMember(Value = ("NameValuePairExceedsMaxSize"))]
        NameValuePairExceedsMaxSize,
        /// <summary>
        /// DisallowedCharacter
        /// </summary>
        [EnumMember(Value = ("DisallowedCharacter"))]
        DisallowedCharacter,
        /// <summary>
        /// NoCookieContent
        /// </summary>
        [EnumMember(Value = ("NoCookieContent"))]
        NoCookieContent
    }

    /// <summary>
    /// Types of reasons why a cookie may not be sent with a request.
    /// </summary>
    public enum CookieBlockedReason
    {
        /// <summary>
        /// SecureOnly
        /// </summary>
        [EnumMember(Value = ("SecureOnly"))]
        SecureOnly,
        /// <summary>
        /// NotOnPath
        /// </summary>
        [EnumMember(Value = ("NotOnPath"))]
        NotOnPath,
        /// <summary>
        /// DomainMismatch
        /// </summary>
        [EnumMember(Value = ("DomainMismatch"))]
        DomainMismatch,
        /// <summary>
        /// SameSiteStrict
        /// </summary>
        [EnumMember(Value = ("SameSiteStrict"))]
        SameSiteStrict,
        /// <summary>
        /// SameSiteLax
        /// </summary>
        [EnumMember(Value = ("SameSiteLax"))]
        SameSiteLax,
        /// <summary>
        /// SameSiteUnspecifiedTreatedAsLax
        /// </summary>
        [EnumMember(Value = ("SameSiteUnspecifiedTreatedAsLax"))]
        SameSiteUnspecifiedTreatedAsLax,
        /// <summary>
        /// SameSiteNoneInsecure
        /// </summary>
        [EnumMember(Value = ("SameSiteNoneInsecure"))]
        SameSiteNoneInsecure,
        /// <summary>
        /// UserPreferences
        /// </summary>
        [EnumMember(Value = ("UserPreferences"))]
        UserPreferences,
        /// <summary>
        /// ThirdPartyPhaseout
        /// </summary>
        [EnumMember(Value = ("ThirdPartyPhaseout"))]
        ThirdPartyPhaseout,
        /// <summary>
        /// ThirdPartyBlockedInFirstPartySet
        /// </summary>
        [EnumMember(Value = ("ThirdPartyBlockedInFirstPartySet"))]
        ThirdPartyBlockedInFirstPartySet,
        /// <summary>
        /// UnknownError
        /// </summary>
        [EnumMember(Value = ("UnknownError"))]
        UnknownError,
        /// <summary>
        /// SchemefulSameSiteStrict
        /// </summary>
        [EnumMember(Value = ("SchemefulSameSiteStrict"))]
        SchemefulSameSiteStrict,
        /// <summary>
        /// SchemefulSameSiteLax
        /// </summary>
        [EnumMember(Value = ("SchemefulSameSiteLax"))]
        SchemefulSameSiteLax,
        /// <summary>
        /// SchemefulSameSiteUnspecifiedTreatedAsLax
        /// </summary>
        [EnumMember(Value = ("SchemefulSameSiteUnspecifiedTreatedAsLax"))]
        SchemefulSameSiteUnspecifiedTreatedAsLax,
        /// <summary>
        /// SamePartyFromCrossPartyContext
        /// </summary>
        [EnumMember(Value = ("SamePartyFromCrossPartyContext"))]
        SamePartyFromCrossPartyContext,
        /// <summary>
        /// NameValuePairExceedsMaxSize
        /// </summary>
        [EnumMember(Value = ("NameValuePairExceedsMaxSize"))]
        NameValuePairExceedsMaxSize
    }

    /// <summary>
    /// Types of reasons why a cookie should have been blocked by 3PCD but is exempted for the request.
    /// </summary>
    public enum CookieExemptionReason
    {
        /// <summary>
        /// None
        /// </summary>
        [EnumMember(Value = ("None"))]
        None,
        /// <summary>
        /// UserSetting
        /// </summary>
        [EnumMember(Value = ("UserSetting"))]
        UserSetting,
        /// <summary>
        /// TPCDMetadata
        /// </summary>
        [EnumMember(Value = ("TPCDMetadata"))]
        TPCDMetadata,
        /// <summary>
        /// TPCDDeprecationTrial
        /// </summary>
        [EnumMember(Value = ("TPCDDeprecationTrial"))]
        TPCDDeprecationTrial,
        /// <summary>
        /// TPCDHeuristics
        /// </summary>
        [EnumMember(Value = ("TPCDHeuristics"))]
        TPCDHeuristics,
        /// <summary>
        /// EnterprisePolicy
        /// </summary>
        [EnumMember(Value = ("EnterprisePolicy"))]
        EnterprisePolicy,
        /// <summary>
        /// StorageAccess
        /// </summary>
        [EnumMember(Value = ("StorageAccess"))]
        StorageAccess,
        /// <summary>
        /// TopLevelStorageAccess
        /// </summary>
        [EnumMember(Value = ("TopLevelStorageAccess"))]
        TopLevelStorageAccess,
        /// <summary>
        /// CorsOptIn
        /// </summary>
        [EnumMember(Value = ("CorsOptIn"))]
        CorsOptIn
    }

    /// <summary>
    /// A cookie which was not stored from a response with the corresponding reason.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class BlockedSetCookieWithReason : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The reason(s) this cookie was blocked.
        /// </summary>
        public CefSharp.DevTools.Network.SetCookieBlockedReason[] BlockedReasons
        {
            get
            {
                return (CefSharp.DevTools.Network.SetCookieBlockedReason[])(StringToEnum(typeof(CefSharp.DevTools.Network.SetCookieBlockedReason[]), blockedReasons));
            }

            set
            {
                this.blockedReasons = (EnumToString(value));
            }
        }

        /// <summary>
        /// The reason(s) this cookie was blocked.
        /// </summary>
        [DataMember(Name = ("blockedReasons"), IsRequired = (true))]
        internal string blockedReasons
        {
            get;
            set;
        }

        /// <summary>
        /// The string representing this individual cookie as it would appear in the header.
        /// This is not the entire &quot;cookie&quot; or &quot;set-cookie&quot; header which could have multiple cookies.
        /// </summary>
        [DataMember(Name = ("cookieLine"), IsRequired = (true))]
        public string CookieLine
        {
            get;
            set;
        }

        /// <summary>
        /// The cookie object which represents the cookie which was not stored. It is optional because
        /// sometimes complete cookie information is not available, such as in the case of parsing
        /// errors.
        /// </summary>
        [DataMember(Name = ("cookie"), IsRequired = (false))]
        public CefSharp.DevTools.Network.Cookie Cookie
        {
            get;
            set;
        }
    }

    /// <summary>
    /// A cookie should have been blocked by 3PCD but is exempted and stored from a response with the
    /// corresponding reason. A cookie could only have at most one exemption reason.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ExemptedSetCookieWithReason : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The reason the cookie was exempted.
        /// </summary>
        public CefSharp.DevTools.Network.CookieExemptionReason ExemptionReason
        {
            get
            {
                return (CefSharp.DevTools.Network.CookieExemptionReason)(StringToEnum(typeof(CefSharp.DevTools.Network.CookieExemptionReason), exemptionReason));
            }

            set
            {
                this.exemptionReason = (EnumToString(value));
            }
        }

        /// <summary>
        /// The reason the cookie was exempted.
        /// </summary>
        [DataMember(Name = ("exemptionReason"), IsRequired = (true))]
        internal string exemptionReason
        {
            get;
            set;
        }

        /// <summary>
        /// The cookie object representing the cookie.
        /// </summary>
        [DataMember(Name = ("cookie"), IsRequired = (true))]
        public CefSharp.DevTools.Network.Cookie Cookie
        {
            get;
            set;
        }
    }

    /// <summary>
    /// A cookie associated with the request which may or may not be sent with it.
    /// Includes the cookies itself and reasons for blocking or exemption.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AssociatedCookie : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The cookie object representing the cookie which was not sent.
        /// </summary>
        [DataMember(Name = ("cookie"), IsRequired = (true))]
        public CefSharp.DevTools.Network.Cookie Cookie
        {
            get;
            set;
        }

        /// <summary>
        /// The reason(s) the cookie was blocked. If empty means the cookie is included.
        /// </summary>
        public CefSharp.DevTools.Network.CookieBlockedReason[] BlockedReasons
        {
            get
            {
                return (CefSharp.DevTools.Network.CookieBlockedReason[])(StringToEnum(typeof(CefSharp.DevTools.Network.CookieBlockedReason[]), blockedReasons));
            }

            set
            {
                this.blockedReasons = (EnumToString(value));
            }
        }

        /// <summary>
        /// The reason(s) the cookie was blocked. If empty means the cookie is included.
        /// </summary>
        [DataMember(Name = ("blockedReasons"), IsRequired = (true))]
        internal string blockedReasons
        {
            get;
            set;
        }

        /// <summary>
        /// The reason the cookie should have been blocked by 3PCD but is exempted. A cookie could
        /// only have at most one exemption reason.
        /// </summary>
        public CefSharp.DevTools.Network.CookieExemptionReason? ExemptionReason
        {
            get
            {
                return (CefSharp.DevTools.Network.CookieExemptionReason? )(StringToEnum(typeof(CefSharp.DevTools.Network.CookieExemptionReason? ), exemptionReason));
            }

            set
            {
                this.exemptionReason = (EnumToString(value));
            }
        }

        /// <summary>
        /// The reason the cookie should have been blocked by 3PCD but is exempted. A cookie could
        /// only have at most one exemption reason.
        /// </summary>
        [DataMember(Name = ("exemptionReason"), IsRequired = (false))]
        internal string exemptionReason
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Cookie parameter object
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CookieParam : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Cookie name.
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// Cookie value.
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (true))]
        public string Value
        {
            get;
            set;
        }

        /// <summary>
        /// The request-URI to associate with the setting of the cookie. This value can affect the
        /// default domain, path, source port, and source scheme values of the created cookie.
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (false))]
        public string Url
        {
            get;
            set;
        }

        /// <summary>
        /// Cookie domain.
        /// </summary>
        [DataMember(Name = ("domain"), IsRequired = (false))]
        public string Domain
        {
            get;
            set;
        }

        /// <summary>
        /// Cookie path.
        /// </summary>
        [DataMember(Name = ("path"), IsRequired = (false))]
        public string Path
        {
            get;
            set;
        }

        /// <summary>
        /// True if cookie is secure.
        /// </summary>
        [DataMember(Name = ("secure"), IsRequired = (false))]
        public bool? Secure
        {
            get;
            set;
        }

        /// <summary>
        /// True if cookie is http-only.
        /// </summary>
        [DataMember(Name = ("httpOnly"), IsRequired = (false))]
        public bool? HttpOnly
        {
            get;
            set;
        }

        /// <summary>
        /// Cookie SameSite type.
        /// </summary>
        public CefSharp.DevTools.Network.CookieSameSite? SameSite
        {
            get
            {
                return (CefSharp.DevTools.Network.CookieSameSite? )(StringToEnum(typeof(CefSharp.DevTools.Network.CookieSameSite? ), sameSite));
            }

            set
            {
                this.sameSite = (EnumToString(value));
            }
        }

        /// <summary>
        /// Cookie SameSite type.
        /// </summary>
        [DataMember(Name = ("sameSite"), IsRequired = (false))]
        internal string sameSite
        {
            get;
            set;
        }

        /// <summary>
        /// Cookie expiration date, session cookie if not set
        /// </summary>
        [DataMember(Name = ("expires"), IsRequired = (false))]
        public double? Expires
        {
            get;
            set;
        }

        /// <summary>
        /// Cookie Priority.
        /// </summary>
        public CefSharp.DevTools.Network.CookiePriority? Priority
        {
            get
            {
                return (CefSharp.DevTools.Network.CookiePriority? )(StringToEnum(typeof(CefSharp.DevTools.Network.CookiePriority? ), priority));
            }

            set
            {
                this.priority = (EnumToString(value));
            }
        }

        /// <summary>
        /// Cookie Priority.
        /// </summary>
        [DataMember(Name = ("priority"), IsRequired = (false))]
        internal string priority
        {
            get;
            set;
        }

        /// <summary>
        /// True if cookie is SameParty.
        /// </summary>
        [DataMember(Name = ("sameParty"), IsRequired = (false))]
        public bool? SameParty
        {
            get;
            set;
        }

        /// <summary>
        /// Cookie source scheme type.
        /// </summary>
        public CefSharp.DevTools.Network.CookieSourceScheme? SourceScheme
        {
            get
            {
                return (CefSharp.DevTools.Network.CookieSourceScheme? )(StringToEnum(typeof(CefSharp.DevTools.Network.CookieSourceScheme? ), sourceScheme));
            }

            set
            {
                this.sourceScheme = (EnumToString(value));
            }
        }

        /// <summary>
        /// Cookie source scheme type.
        /// </summary>
        [DataMember(Name = ("sourceScheme"), IsRequired = (false))]
        internal string sourceScheme
        {
            get;
            set;
        }

        /// <summary>
        /// Cookie source port. Valid values are {-1, [1, 65535]}, -1 indicates an unspecified port.
        /// An unspecified port value allows protocol clients to emulate legacy cookie scope for the port.
        /// This is a temporary ability and it will be removed in the future.
        /// </summary>
        [DataMember(Name = ("sourcePort"), IsRequired = (false))]
        public int? SourcePort
        {
            get;
            set;
        }

        /// <summary>
        /// Cookie partition key. The site of the top-level URL the browser was visiting at the start
        /// of the request to the endpoint that set the cookie.
        /// If not set, the cookie will be set as not partitioned.
        /// </summary>
        [DataMember(Name = ("partitionKey"), IsRequired = (false))]
        public string PartitionKey
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Source of the authentication challenge.
    /// </summary>
    public enum AuthChallengeSource
    {
        /// <summary>
        /// Server
        /// </summary>
        [EnumMember(Value = ("Server"))]
        Server,
        /// <summary>
        /// Proxy
        /// </summary>
        [EnumMember(Value = ("Proxy"))]
        Proxy
    }

    /// <summary>
    /// Authorization challenge for HTTP status code 401 or 407.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AuthChallenge : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Source of the authentication challenge.
        /// </summary>
        public CefSharp.DevTools.Network.AuthChallengeSource? Source
        {
            get
            {
                return (CefSharp.DevTools.Network.AuthChallengeSource? )(StringToEnum(typeof(CefSharp.DevTools.Network.AuthChallengeSource? ), source));
            }

            set
            {
                this.source = (EnumToString(value));
            }
        }

        /// <summary>
        /// Source of the authentication challenge.
        /// </summary>
        [DataMember(Name = ("source"), IsRequired = (false))]
        internal string source
        {
            get;
            set;
        }

        /// <summary>
        /// Origin of the challenger.
        /// </summary>
        [DataMember(Name = ("origin"), IsRequired = (true))]
        public string Origin
        {
            get;
            set;
        }

        /// <summary>
        /// The authentication scheme used, such as basic or digest
        /// </summary>
        [DataMember(Name = ("scheme"), IsRequired = (true))]
        public string Scheme
        {
            get;
            set;
        }

        /// <summary>
        /// The realm of the challenge. May be empty.
        /// </summary>
        [DataMember(Name = ("realm"), IsRequired = (true))]
        public string Realm
        {
            get;
            set;
        }
    }

    /// <summary>
    /// The decision on what to do in response to the authorization challenge.  Default means
    /// deferring to the default behavior of the net stack, which will likely either the Cancel
    /// authentication or display a popup dialog box.
    /// </summary>
    public enum AuthChallengeResponseResponse
    {
        /// <summary>
        /// Default
        /// </summary>
        [EnumMember(Value = ("Default"))]
        Default,
        /// <summary>
        /// CancelAuth
        /// </summary>
        [EnumMember(Value = ("CancelAuth"))]
        CancelAuth,
        /// <summary>
        /// ProvideCredentials
        /// </summary>
        [EnumMember(Value = ("ProvideCredentials"))]
        ProvideCredentials
    }

    /// <summary>
    /// Response to an AuthChallenge.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AuthChallengeResponse : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The decision on what to do in response to the authorization challenge.  Default means
        /// deferring to the default behavior of the net stack, which will likely either the Cancel
        /// authentication or display a popup dialog box.
        /// </summary>
        public CefSharp.DevTools.Network.AuthChallengeResponseResponse Response
        {
            get
            {
                return (CefSharp.DevTools.Network.AuthChallengeResponseResponse)(StringToEnum(typeof(CefSharp.DevTools.Network.AuthChallengeResponseResponse), response));
            }

            set
            {
                this.response = (EnumToString(value));
            }
        }

        /// <summary>
        /// The decision on what to do in response to the authorization challenge.  Default means
        /// deferring to the default behavior of the net stack, which will likely either the Cancel
        /// authentication or display a popup dialog box.
        /// </summary>
        [DataMember(Name = ("response"), IsRequired = (true))]
        internal string response
        {
            get;
            set;
        }

        /// <summary>
        /// The username to provide, possibly empty. Should only be set if response is
        /// ProvideCredentials.
        /// </summary>
        [DataMember(Name = ("username"), IsRequired = (false))]
        public string Username
        {
            get;
            set;
        }

        /// <summary>
        /// The password to provide, possibly empty. Should only be set if response is
        /// ProvideCredentials.
        /// </summary>
        [DataMember(Name = ("password"), IsRequired = (false))]
        public string Password
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Stages of the interception to begin intercepting. Request will intercept before the request is
    /// sent. Response will intercept after the response is received.
    /// </summary>
    public enum InterceptionStage
    {
        /// <summary>
        /// Request
        /// </summary>
        [EnumMember(Value = ("Request"))]
        Request,
        /// <summary>
        /// HeadersReceived
        /// </summary>
        [EnumMember(Value = ("HeadersReceived"))]
        HeadersReceived
    }

    /// <summary>
    /// Request pattern for interception.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class RequestPattern : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Wildcards (`&apos;*&apos;` -&gt; zero or more, `&apos;?&apos;` -&gt; exactly one) are allowed. Escape character is
        /// backslash. Omitting is equivalent to `&quot;*&quot;`.
        /// </summary>
        [DataMember(Name = ("urlPattern"), IsRequired = (false))]
        public string UrlPattern
        {
            get;
            set;
        }

        /// <summary>
        /// If set, only requests for matching resource types will be intercepted.
        /// </summary>
        public CefSharp.DevTools.Network.ResourceType? ResourceType
        {
            get
            {
                return (CefSharp.DevTools.Network.ResourceType? )(StringToEnum(typeof(CefSharp.DevTools.Network.ResourceType? ), resourceType));
            }

            set
            {
                this.resourceType = (EnumToString(value));
            }
        }

        /// <summary>
        /// If set, only requests for matching resource types will be intercepted.
        /// </summary>
        [DataMember(Name = ("resourceType"), IsRequired = (false))]
        internal string resourceType
        {
            get;
            set;
        }

        /// <summary>
        /// Stage at which to begin intercepting requests. Default is Request.
        /// </summary>
        public CefSharp.DevTools.Network.InterceptionStage? InterceptionStage
        {
            get
            {
                return (CefSharp.DevTools.Network.InterceptionStage? )(StringToEnum(typeof(CefSharp.DevTools.Network.InterceptionStage? ), interceptionStage));
            }

            set
            {
                this.interceptionStage = (EnumToString(value));
            }
        }

        /// <summary>
        /// Stage at which to begin intercepting requests. Default is Request.
        /// </summary>
        [DataMember(Name = ("interceptionStage"), IsRequired = (false))]
        internal string interceptionStage
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Information about a signed exchange signature.
    /// https://wicg.github.io/webpackage/draft-yasskin-httpbis-origin-signed-exchanges-impl.html#rfc.section.3.1
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class SignedExchangeSignature : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Signed exchange signature label.
        /// </summary>
        [DataMember(Name = ("label"), IsRequired = (true))]
        public string Label
        {
            get;
            set;
        }

        /// <summary>
        /// The hex string of signed exchange signature.
        /// </summary>
        [DataMember(Name = ("signature"), IsRequired = (true))]
        public string Signature
        {
            get;
            set;
        }

        /// <summary>
        /// Signed exchange signature integrity.
        /// </summary>
        [DataMember(Name = ("integrity"), IsRequired = (true))]
        public string Integrity
        {
            get;
            set;
        }

        /// <summary>
        /// Signed exchange signature cert Url.
        /// </summary>
        [DataMember(Name = ("certUrl"), IsRequired = (false))]
        public string CertUrl
        {
            get;
            set;
        }

        /// <summary>
        /// The hex string of signed exchange signature cert sha256.
        /// </summary>
        [DataMember(Name = ("certSha256"), IsRequired = (false))]
        public string CertSha256
        {
            get;
            set;
        }

        /// <summary>
        /// Signed exchange signature validity Url.
        /// </summary>
        [DataMember(Name = ("validityUrl"), IsRequired = (true))]
        public string ValidityUrl
        {
            get;
            set;
        }

        /// <summary>
        /// Signed exchange signature date.
        /// </summary>
        [DataMember(Name = ("date"), IsRequired = (true))]
        public int Date
        {
            get;
            set;
        }

        /// <summary>
        /// Signed exchange signature expires.
        /// </summary>
        [DataMember(Name = ("expires"), IsRequired = (true))]
        public int Expires
        {
            get;
            set;
        }

        /// <summary>
        /// The encoded certificates.
        /// </summary>
        [DataMember(Name = ("certificates"), IsRequired = (false))]
        public string[] Certificates
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Information about a signed exchange header.
    /// https://wicg.github.io/webpackage/draft-yasskin-httpbis-origin-signed-exchanges-impl.html#cbor-representation
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class SignedExchangeHeader : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Signed exchange request URL.
        /// </summary>
        [DataMember(Name = ("requestUrl"), IsRequired = (true))]
        public string RequestUrl
        {
            get;
            set;
        }

        /// <summary>
        /// Signed exchange response code.
        /// </summary>
        [DataMember(Name = ("responseCode"), IsRequired = (true))]
        public int ResponseCode
        {
            get;
            set;
        }

        /// <summary>
        /// Signed exchange response headers.
        /// </summary>
        [DataMember(Name = ("responseHeaders"), IsRequired = (true))]
        public CefSharp.DevTools.Network.Headers ResponseHeaders
        {
            get;
            set;
        }

        /// <summary>
        /// Signed exchange response signature.
        /// </summary>
        [DataMember(Name = ("signatures"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Network.SignedExchangeSignature> Signatures
        {
            get;
            set;
        }

        /// <summary>
        /// Signed exchange header integrity hash in the form of `sha256-&lt;base64-hash-value&gt;`.
        /// </summary>
        [DataMember(Name = ("headerIntegrity"), IsRequired = (true))]
        public string HeaderIntegrity
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Field type for a signed exchange related error.
    /// </summary>
    public enum SignedExchangeErrorField
    {
        /// <summary>
        /// signatureSig
        /// </summary>
        [EnumMember(Value = ("signatureSig"))]
        SignatureSig,
        /// <summary>
        /// signatureIntegrity
        /// </summary>
        [EnumMember(Value = ("signatureIntegrity"))]
        SignatureIntegrity,
        /// <summary>
        /// signatureCertUrl
        /// </summary>
        [EnumMember(Value = ("signatureCertUrl"))]
        SignatureCertUrl,
        /// <summary>
        /// signatureCertSha256
        /// </summary>
        [EnumMember(Value = ("signatureCertSha256"))]
        SignatureCertSha256,
        /// <summary>
        /// signatureValidityUrl
        /// </summary>
        [EnumMember(Value = ("signatureValidityUrl"))]
        SignatureValidityUrl,
        /// <summary>
        /// signatureTimestamps
        /// </summary>
        [EnumMember(Value = ("signatureTimestamps"))]
        SignatureTimestamps
    }

    /// <summary>
    /// Information about a signed exchange response.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class SignedExchangeError : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Error message.
        /// </summary>
        [DataMember(Name = ("message"), IsRequired = (true))]
        public string Message
        {
            get;
            set;
        }

        /// <summary>
        /// The index of the signature which caused the error.
        /// </summary>
        [DataMember(Name = ("signatureIndex"), IsRequired = (false))]
        public int? SignatureIndex
        {
            get;
            set;
        }

        /// <summary>
        /// The field which caused the error.
        /// </summary>
        public CefSharp.DevTools.Network.SignedExchangeErrorField? ErrorField
        {
            get
            {
                return (CefSharp.DevTools.Network.SignedExchangeErrorField? )(StringToEnum(typeof(CefSharp.DevTools.Network.SignedExchangeErrorField? ), errorField));
            }

            set
            {
                this.errorField = (EnumToString(value));
            }
        }

        /// <summary>
        /// The field which caused the error.
        /// </summary>
        [DataMember(Name = ("errorField"), IsRequired = (false))]
        internal string errorField
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Information about a signed exchange response.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class SignedExchangeInfo : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The outer response of signed HTTP exchange which was received from network.
        /// </summary>
        [DataMember(Name = ("outerResponse"), IsRequired = (true))]
        public CefSharp.DevTools.Network.Response OuterResponse
        {
            get;
            set;
        }

        /// <summary>
        /// Information about the signed exchange header.
        /// </summary>
        [DataMember(Name = ("header"), IsRequired = (false))]
        public CefSharp.DevTools.Network.SignedExchangeHeader Header
        {
            get;
            set;
        }

        /// <summary>
        /// Security details for the signed exchange header.
        /// </summary>
        [DataMember(Name = ("securityDetails"), IsRequired = (false))]
        public CefSharp.DevTools.Network.SecurityDetails SecurityDetails
        {
            get;
            set;
        }

        /// <summary>
        /// Errors occurred while handling the signed exchange.
        /// </summary>
        [DataMember(Name = ("errors"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Network.SignedExchangeError> Errors
        {
            get;
            set;
        }
    }

    /// <summary>
    /// List of content encodings supported by the backend.
    /// </summary>
    public enum ContentEncoding
    {
        /// <summary>
        /// deflate
        /// </summary>
        [EnumMember(Value = ("deflate"))]
        Deflate,
        /// <summary>
        /// gzip
        /// </summary>
        [EnumMember(Value = ("gzip"))]
        Gzip,
        /// <summary>
        /// br
        /// </summary>
        [EnumMember(Value = ("br"))]
        Br,
        /// <summary>
        /// zstd
        /// </summary>
        [EnumMember(Value = ("zstd"))]
        Zstd
    }

    /// <summary>
    /// PrivateNetworkRequestPolicy
    /// </summary>
    public enum PrivateNetworkRequestPolicy
    {
        /// <summary>
        /// Allow
        /// </summary>
        [EnumMember(Value = ("Allow"))]
        Allow,
        /// <summary>
        /// BlockFromInsecureToMorePrivate
        /// </summary>
        [EnumMember(Value = ("BlockFromInsecureToMorePrivate"))]
        BlockFromInsecureToMorePrivate,
        /// <summary>
        /// WarnFromInsecureToMorePrivate
        /// </summary>
        [EnumMember(Value = ("WarnFromInsecureToMorePrivate"))]
        WarnFromInsecureToMorePrivate,
        /// <summary>
        /// PreflightBlock
        /// </summary>
        [EnumMember(Value = ("PreflightBlock"))]
        PreflightBlock,
        /// <summary>
        /// PreflightWarn
        /// </summary>
        [EnumMember(Value = ("PreflightWarn"))]
        PreflightWarn
    }

    /// <summary>
    /// IPAddressSpace
    /// </summary>
    public enum IPAddressSpace
    {
        /// <summary>
        /// Local
        /// </summary>
        [EnumMember(Value = ("Local"))]
        Local,
        /// <summary>
        /// Private
        /// </summary>
        [EnumMember(Value = ("Private"))]
        Private,
        /// <summary>
        /// Public
        /// </summary>
        [EnumMember(Value = ("Public"))]
        Public,
        /// <summary>
        /// Unknown
        /// </summary>
        [EnumMember(Value = ("Unknown"))]
        Unknown
    }

    /// <summary>
    /// ConnectTiming
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ConnectTiming : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Timing&apos;s requestTime is a baseline in seconds, while the other numbers are ticks in
        /// milliseconds relatively to this requestTime. Matches ResourceTiming&apos;s requestTime for
        /// the same request (but not for redirected requests).
        /// </summary>
        [DataMember(Name = ("requestTime"), IsRequired = (true))]
        public double RequestTime
        {
            get;
            set;
        }
    }

    /// <summary>
    /// ClientSecurityState
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ClientSecurityState : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// InitiatorIsSecureContext
        /// </summary>
        [DataMember(Name = ("initiatorIsSecureContext"), IsRequired = (true))]
        public bool InitiatorIsSecureContext
        {
            get;
            set;
        }

        /// <summary>
        /// InitiatorIPAddressSpace
        /// </summary>
        public CefSharp.DevTools.Network.IPAddressSpace InitiatorIPAddressSpace
        {
            get
            {
                return (CefSharp.DevTools.Network.IPAddressSpace)(StringToEnum(typeof(CefSharp.DevTools.Network.IPAddressSpace), initiatorIPAddressSpace));
            }

            set
            {
                this.initiatorIPAddressSpace = (EnumToString(value));
            }
        }

        /// <summary>
        /// InitiatorIPAddressSpace
        /// </summary>
        [DataMember(Name = ("initiatorIPAddressSpace"), IsRequired = (true))]
        internal string initiatorIPAddressSpace
        {
            get;
            set;
        }

        /// <summary>
        /// PrivateNetworkRequestPolicy
        /// </summary>
        public CefSharp.DevTools.Network.PrivateNetworkRequestPolicy PrivateNetworkRequestPolicy
        {
            get
            {
                return (CefSharp.DevTools.Network.PrivateNetworkRequestPolicy)(StringToEnum(typeof(CefSharp.DevTools.Network.PrivateNetworkRequestPolicy), privateNetworkRequestPolicy));
            }

            set
            {
                this.privateNetworkRequestPolicy = (EnumToString(value));
            }
        }

        /// <summary>
        /// PrivateNetworkRequestPolicy
        /// </summary>
        [DataMember(Name = ("privateNetworkRequestPolicy"), IsRequired = (true))]
        internal string privateNetworkRequestPolicy
        {
            get;
            set;
        }
    }

    /// <summary>
    /// CrossOriginOpenerPolicyValue
    /// </summary>
    public enum CrossOriginOpenerPolicyValue
    {
        /// <summary>
        /// SameOrigin
        /// </summary>
        [EnumMember(Value = ("SameOrigin"))]
        SameOrigin,
        /// <summary>
        /// SameOriginAllowPopups
        /// </summary>
        [EnumMember(Value = ("SameOriginAllowPopups"))]
        SameOriginAllowPopups,
        /// <summary>
        /// RestrictProperties
        /// </summary>
        [EnumMember(Value = ("RestrictProperties"))]
        RestrictProperties,
        /// <summary>
        /// UnsafeNone
        /// </summary>
        [EnumMember(Value = ("UnsafeNone"))]
        UnsafeNone,
        /// <summary>
        /// SameOriginPlusCoep
        /// </summary>
        [EnumMember(Value = ("SameOriginPlusCoep"))]
        SameOriginPlusCoep,
        /// <summary>
        /// RestrictPropertiesPlusCoep
        /// </summary>
        [EnumMember(Value = ("RestrictPropertiesPlusCoep"))]
        RestrictPropertiesPlusCoep
    }

    /// <summary>
    /// CrossOriginOpenerPolicyStatus
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CrossOriginOpenerPolicyStatus : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Value
        /// </summary>
        public CefSharp.DevTools.Network.CrossOriginOpenerPolicyValue Value
        {
            get
            {
                return (CefSharp.DevTools.Network.CrossOriginOpenerPolicyValue)(StringToEnum(typeof(CefSharp.DevTools.Network.CrossOriginOpenerPolicyValue), value));
            }

            set
            {
                this.value = (EnumToString(value));
            }
        }

        /// <summary>
        /// Value
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (true))]
        internal string value
        {
            get;
            set;
        }

        /// <summary>
        /// ReportOnlyValue
        /// </summary>
        public CefSharp.DevTools.Network.CrossOriginOpenerPolicyValue ReportOnlyValue
        {
            get
            {
                return (CefSharp.DevTools.Network.CrossOriginOpenerPolicyValue)(StringToEnum(typeof(CefSharp.DevTools.Network.CrossOriginOpenerPolicyValue), reportOnlyValue));
            }

            set
            {
                this.reportOnlyValue = (EnumToString(value));
            }
        }

        /// <summary>
        /// ReportOnlyValue
        /// </summary>
        [DataMember(Name = ("reportOnlyValue"), IsRequired = (true))]
        internal string reportOnlyValue
        {
            get;
            set;
        }

        /// <summary>
        /// ReportingEndpoint
        /// </summary>
        [DataMember(Name = ("reportingEndpoint"), IsRequired = (false))]
        public string ReportingEndpoint
        {
            get;
            set;
        }

        /// <summary>
        /// ReportOnlyReportingEndpoint
        /// </summary>
        [DataMember(Name = ("reportOnlyReportingEndpoint"), IsRequired = (false))]
        public string ReportOnlyReportingEndpoint
        {
            get;
            set;
        }
    }

    /// <summary>
    /// CrossOriginEmbedderPolicyValue
    /// </summary>
    public enum CrossOriginEmbedderPolicyValue
    {
        /// <summary>
        /// None
        /// </summary>
        [EnumMember(Value = ("None"))]
        None,
        /// <summary>
        /// Credentialless
        /// </summary>
        [EnumMember(Value = ("Credentialless"))]
        Credentialless,
        /// <summary>
        /// RequireCorp
        /// </summary>
        [EnumMember(Value = ("RequireCorp"))]
        RequireCorp
    }

    /// <summary>
    /// CrossOriginEmbedderPolicyStatus
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CrossOriginEmbedderPolicyStatus : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Value
        /// </summary>
        public CefSharp.DevTools.Network.CrossOriginEmbedderPolicyValue Value
        {
            get
            {
                return (CefSharp.DevTools.Network.CrossOriginEmbedderPolicyValue)(StringToEnum(typeof(CefSharp.DevTools.Network.CrossOriginEmbedderPolicyValue), value));
            }

            set
            {
                this.value = (EnumToString(value));
            }
        }

        /// <summary>
        /// Value
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (true))]
        internal string value
        {
            get;
            set;
        }

        /// <summary>
        /// ReportOnlyValue
        /// </summary>
        public CefSharp.DevTools.Network.CrossOriginEmbedderPolicyValue ReportOnlyValue
        {
            get
            {
                return (CefSharp.DevTools.Network.CrossOriginEmbedderPolicyValue)(StringToEnum(typeof(CefSharp.DevTools.Network.CrossOriginEmbedderPolicyValue), reportOnlyValue));
            }

            set
            {
                this.reportOnlyValue = (EnumToString(value));
            }
        }

        /// <summary>
        /// ReportOnlyValue
        /// </summary>
        [DataMember(Name = ("reportOnlyValue"), IsRequired = (true))]
        internal string reportOnlyValue
        {
            get;
            set;
        }

        /// <summary>
        /// ReportingEndpoint
        /// </summary>
        [DataMember(Name = ("reportingEndpoint"), IsRequired = (false))]
        public string ReportingEndpoint
        {
            get;
            set;
        }

        /// <summary>
        /// ReportOnlyReportingEndpoint
        /// </summary>
        [DataMember(Name = ("reportOnlyReportingEndpoint"), IsRequired = (false))]
        public string ReportOnlyReportingEndpoint
        {
            get;
            set;
        }
    }

    /// <summary>
    /// ContentSecurityPolicySource
    /// </summary>
    public enum ContentSecurityPolicySource
    {
        /// <summary>
        /// HTTP
        /// </summary>
        [EnumMember(Value = ("HTTP"))]
        HTTP,
        /// <summary>
        /// Meta
        /// </summary>
        [EnumMember(Value = ("Meta"))]
        Meta
    }

    /// <summary>
    /// ContentSecurityPolicyStatus
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ContentSecurityPolicyStatus : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// EffectiveDirectives
        /// </summary>
        [DataMember(Name = ("effectiveDirectives"), IsRequired = (true))]
        public string EffectiveDirectives
        {
            get;
            set;
        }

        /// <summary>
        /// IsEnforced
        /// </summary>
        [DataMember(Name = ("isEnforced"), IsRequired = (true))]
        public bool IsEnforced
        {
            get;
            set;
        }

        /// <summary>
        /// Source
        /// </summary>
        public CefSharp.DevTools.Network.ContentSecurityPolicySource Source
        {
            get
            {
                return (CefSharp.DevTools.Network.ContentSecurityPolicySource)(StringToEnum(typeof(CefSharp.DevTools.Network.ContentSecurityPolicySource), source));
            }

            set
            {
                this.source = (EnumToString(value));
            }
        }

        /// <summary>
        /// Source
        /// </summary>
        [DataMember(Name = ("source"), IsRequired = (true))]
        internal string source
        {
            get;
            set;
        }
    }

    /// <summary>
    /// SecurityIsolationStatus
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class SecurityIsolationStatus : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Coop
        /// </summary>
        [DataMember(Name = ("coop"), IsRequired = (false))]
        public CefSharp.DevTools.Network.CrossOriginOpenerPolicyStatus Coop
        {
            get;
            set;
        }

        /// <summary>
        /// Coep
        /// </summary>
        [DataMember(Name = ("coep"), IsRequired = (false))]
        public CefSharp.DevTools.Network.CrossOriginEmbedderPolicyStatus Coep
        {
            get;
            set;
        }

        /// <summary>
        /// Csp
        /// </summary>
        [DataMember(Name = ("csp"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Network.ContentSecurityPolicyStatus> Csp
        {
            get;
            set;
        }
    }

    /// <summary>
    /// The status of a Reporting API report.
    /// </summary>
    public enum ReportStatus
    {
        /// <summary>
        /// Queued
        /// </summary>
        [EnumMember(Value = ("Queued"))]
        Queued,
        /// <summary>
        /// Pending
        /// </summary>
        [EnumMember(Value = ("Pending"))]
        Pending,
        /// <summary>
        /// MarkedForRemoval
        /// </summary>
        [EnumMember(Value = ("MarkedForRemoval"))]
        MarkedForRemoval,
        /// <summary>
        /// Success
        /// </summary>
        [EnumMember(Value = ("Success"))]
        Success
    }

    /// <summary>
    /// An object representing a report generated by the Reporting API.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ReportingApiReport : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Id
        /// </summary>
        [DataMember(Name = ("id"), IsRequired = (true))]
        public string Id
        {
            get;
            set;
        }

        /// <summary>
        /// The URL of the document that triggered the report.
        /// </summary>
        [DataMember(Name = ("initiatorUrl"), IsRequired = (true))]
        public string InitiatorUrl
        {
            get;
            set;
        }

        /// <summary>
        /// The name of the endpoint group that should be used to deliver the report.
        /// </summary>
        [DataMember(Name = ("destination"), IsRequired = (true))]
        public string Destination
        {
            get;
            set;
        }

        /// <summary>
        /// The type of the report (specifies the set of data that is contained in the report body).
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (true))]
        public string Type
        {
            get;
            set;
        }

        /// <summary>
        /// When the report was generated.
        /// </summary>
        [DataMember(Name = ("timestamp"), IsRequired = (true))]
        public double Timestamp
        {
            get;
            set;
        }

        /// <summary>
        /// How many uploads deep the related request was.
        /// </summary>
        [DataMember(Name = ("depth"), IsRequired = (true))]
        public int Depth
        {
            get;
            set;
        }

        /// <summary>
        /// The number of delivery attempts made so far, not including an active attempt.
        /// </summary>
        [DataMember(Name = ("completedAttempts"), IsRequired = (true))]
        public int CompletedAttempts
        {
            get;
            set;
        }

        /// <summary>
        /// Body
        /// </summary>
        [DataMember(Name = ("body"), IsRequired = (true))]
        public object Body
        {
            get;
            set;
        }

        /// <summary>
        /// Status
        /// </summary>
        public CefSharp.DevTools.Network.ReportStatus Status
        {
            get
            {
                return (CefSharp.DevTools.Network.ReportStatus)(StringToEnum(typeof(CefSharp.DevTools.Network.ReportStatus), status));
            }

            set
            {
                this.status = (EnumToString(value));
            }
        }

        /// <summary>
        /// Status
        /// </summary>
        [DataMember(Name = ("status"), IsRequired = (true))]
        internal string status
        {
            get;
            set;
        }
    }

    /// <summary>
    /// ReportingApiEndpoint
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ReportingApiEndpoint : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The URL of the endpoint to which reports may be delivered.
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (true))]
        public string Url
        {
            get;
            set;
        }

        /// <summary>
        /// Name of the endpoint group.
        /// </summary>
        [DataMember(Name = ("groupName"), IsRequired = (true))]
        public string GroupName
        {
            get;
            set;
        }
    }

    /// <summary>
    /// An object providing the result of a network resource load.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class LoadNetworkResourcePageResult : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Success
        /// </summary>
        [DataMember(Name = ("success"), IsRequired = (true))]
        public bool Success
        {
            get;
            set;
        }

        /// <summary>
        /// Optional values used for error reporting.
        /// </summary>
        [DataMember(Name = ("netError"), IsRequired = (false))]
        public double? NetError
        {
            get;
            set;
        }

        /// <summary>
        /// NetErrorName
        /// </summary>
        [DataMember(Name = ("netErrorName"), IsRequired = (false))]
        public string NetErrorName
        {
            get;
            set;
        }

        /// <summary>
        /// HttpStatusCode
        /// </summary>
        [DataMember(Name = ("httpStatusCode"), IsRequired = (false))]
        public double? HttpStatusCode
        {
            get;
            set;
        }

        /// <summary>
        /// If successful, one of the following two fields holds the result.
        /// </summary>
        [DataMember(Name = ("stream"), IsRequired = (false))]
        public string Stream
        {
            get;
            set;
        }

        /// <summary>
        /// Response headers.
        /// </summary>
        [DataMember(Name = ("headers"), IsRequired = (false))]
        public CefSharp.DevTools.Network.Headers Headers
        {
            get;
            set;
        }
    }

    /// <summary>
    /// An options object that may be extended later to better support CORS,
    /// CORB and streaming.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class LoadNetworkResourceOptions : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// DisableCache
        /// </summary>
        [DataMember(Name = ("disableCache"), IsRequired = (true))]
        public bool DisableCache
        {
            get;
            set;
        }

        /// <summary>
        /// IncludeCredentials
        /// </summary>
        [DataMember(Name = ("includeCredentials"), IsRequired = (true))]
        public bool IncludeCredentials
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Fired when data chunk was received over the network.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class DataReceivedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Request identifier.
        /// </summary>
        [DataMember(Name = ("requestId"), IsRequired = (true))]
        public string RequestId
        {
            get;
            private set;
        }

        /// <summary>
        /// Timestamp.
        /// </summary>
        [DataMember(Name = ("timestamp"), IsRequired = (true))]
        public double Timestamp
        {
            get;
            private set;
        }

        /// <summary>
        /// Data chunk length.
        /// </summary>
        [DataMember(Name = ("dataLength"), IsRequired = (true))]
        public int DataLength
        {
            get;
            private set;
        }

        /// <summary>
        /// Actual bytes received (might be less than dataLength for compressed encodings).
        /// </summary>
        [DataMember(Name = ("encodedDataLength"), IsRequired = (true))]
        public int EncodedDataLength
        {
            get;
            private set;
        }

        /// <summary>
        /// Data that was received.
        /// </summary>
        [DataMember(Name = ("data"), IsRequired = (false))]
        public byte[] Data
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when EventSource message is received.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class EventSourceMessageReceivedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Request identifier.
        /// </summary>
        [DataMember(Name = ("requestId"), IsRequired = (true))]
        public string RequestId
        {
            get;
            private set;
        }

        /// <summary>
        /// Timestamp.
        /// </summary>
        [DataMember(Name = ("timestamp"), IsRequired = (true))]
        public double Timestamp
        {
            get;
            private set;
        }

        /// <summary>
        /// Message type.
        /// </summary>
        [DataMember(Name = ("eventName"), IsRequired = (true))]
        public string EventName
        {
            get;
            private set;
        }

        /// <summary>
        /// Message identifier.
        /// </summary>
        [DataMember(Name = ("eventId"), IsRequired = (true))]
        public string EventId
        {
            get;
            private set;
        }

        /// <summary>
        /// Message content.
        /// </summary>
        [DataMember(Name = ("data"), IsRequired = (true))]
        public string Data
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when HTTP request has failed to load.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class LoadingFailedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Request identifier.
        /// </summary>
        [DataMember(Name = ("requestId"), IsRequired = (true))]
        public string RequestId
        {
            get;
            private set;
        }

        /// <summary>
        /// Timestamp.
        /// </summary>
        [DataMember(Name = ("timestamp"), IsRequired = (true))]
        public double Timestamp
        {
            get;
            private set;
        }

        /// <summary>
        /// Resource type.
        /// </summary>
        public CefSharp.DevTools.Network.ResourceType Type
        {
            get
            {
                return (CefSharp.DevTools.Network.ResourceType)(StringToEnum(typeof(CefSharp.DevTools.Network.ResourceType), type));
            }

            set
            {
                this.type = (EnumToString(value));
            }
        }

        /// <summary>
        /// Resource type.
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (true))]
        internal string type
        {
            get;
            private set;
        }

        /// <summary>
        /// Error message. List of network errors: https://cs.chromium.org/chromium/src/net/base/net_error_list.h
        /// </summary>
        [DataMember(Name = ("errorText"), IsRequired = (true))]
        public string ErrorText
        {
            get;
            private set;
        }

        /// <summary>
        /// True if loading was canceled.
        /// </summary>
        [DataMember(Name = ("canceled"), IsRequired = (false))]
        public bool? Canceled
        {
            get;
            private set;
        }

        /// <summary>
        /// The reason why loading was blocked, if any.
        /// </summary>
        public CefSharp.DevTools.Network.BlockedReason? BlockedReason
        {
            get
            {
                return (CefSharp.DevTools.Network.BlockedReason? )(StringToEnum(typeof(CefSharp.DevTools.Network.BlockedReason? ), blockedReason));
            }

            set
            {
                this.blockedReason = (EnumToString(value));
            }
        }

        /// <summary>
        /// The reason why loading was blocked, if any.
        /// </summary>
        [DataMember(Name = ("blockedReason"), IsRequired = (false))]
        internal string blockedReason
        {
            get;
            private set;
        }

        /// <summary>
        /// The reason why loading was blocked by CORS, if any.
        /// </summary>
        [DataMember(Name = ("corsErrorStatus"), IsRequired = (false))]
        public CefSharp.DevTools.Network.CorsErrorStatus CorsErrorStatus
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when HTTP request has finished loading.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class LoadingFinishedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Request identifier.
        /// </summary>
        [DataMember(Name = ("requestId"), IsRequired = (true))]
        public string RequestId
        {
            get;
            private set;
        }

        /// <summary>
        /// Timestamp.
        /// </summary>
        [DataMember(Name = ("timestamp"), IsRequired = (true))]
        public double Timestamp
        {
            get;
            private set;
        }

        /// <summary>
        /// Total number of bytes received for this request.
        /// </summary>
        [DataMember(Name = ("encodedDataLength"), IsRequired = (true))]
        public double EncodedDataLength
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Details of an intercepted HTTP request, which must be either allowed, blocked, modified or
    /// mocked.
    /// Deprecated, use Fetch.requestPaused instead.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class RequestInterceptedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Each request the page makes will have a unique id, however if any redirects are encountered
        /// while processing that fetch, they will be reported with the same id as the original fetch.
        /// Likewise if HTTP authentication is needed then the same fetch id will be used.
        /// </summary>
        [DataMember(Name = ("interceptionId"), IsRequired = (true))]
        public string InterceptionId
        {
            get;
            private set;
        }

        /// <summary>
        /// Request
        /// </summary>
        [DataMember(Name = ("request"), IsRequired = (true))]
        public CefSharp.DevTools.Network.Request Request
        {
            get;
            private set;
        }

        /// <summary>
        /// The id of the frame that initiated the request.
        /// </summary>
        [DataMember(Name = ("frameId"), IsRequired = (true))]
        public string FrameId
        {
            get;
            private set;
        }

        /// <summary>
        /// How the requested resource will be used.
        /// </summary>
        public CefSharp.DevTools.Network.ResourceType ResourceType
        {
            get
            {
                return (CefSharp.DevTools.Network.ResourceType)(StringToEnum(typeof(CefSharp.DevTools.Network.ResourceType), resourceType));
            }

            set
            {
                this.resourceType = (EnumToString(value));
            }
        }

        /// <summary>
        /// How the requested resource will be used.
        /// </summary>
        [DataMember(Name = ("resourceType"), IsRequired = (true))]
        internal string resourceType
        {
            get;
            private set;
        }

        /// <summary>
        /// Whether this is a navigation request, which can abort the navigation completely.
        /// </summary>
        [DataMember(Name = ("isNavigationRequest"), IsRequired = (true))]
        public bool IsNavigationRequest
        {
            get;
            private set;
        }

        /// <summary>
        /// Set if the request is a navigation that will result in a download.
        /// Only present after response is received from the server (i.e. HeadersReceived stage).
        /// </summary>
        [DataMember(Name = ("isDownload"), IsRequired = (false))]
        public bool? IsDownload
        {
            get;
            private set;
        }

        /// <summary>
        /// Redirect location, only sent if a redirect was intercepted.
        /// </summary>
        [DataMember(Name = ("redirectUrl"), IsRequired = (false))]
        public string RedirectUrl
        {
            get;
            private set;
        }

        /// <summary>
        /// Details of the Authorization Challenge encountered. If this is set then
        /// continueInterceptedRequest must contain an authChallengeResponse.
        /// </summary>
        [DataMember(Name = ("authChallenge"), IsRequired = (false))]
        public CefSharp.DevTools.Network.AuthChallenge AuthChallenge
        {
            get;
            private set;
        }

        /// <summary>
        /// Response error if intercepted at response stage or if redirect occurred while intercepting
        /// request.
        /// </summary>
        public CefSharp.DevTools.Network.ErrorReason? ResponseErrorReason
        {
            get
            {
                return (CefSharp.DevTools.Network.ErrorReason? )(StringToEnum(typeof(CefSharp.DevTools.Network.ErrorReason? ), responseErrorReason));
            }

            set
            {
                this.responseErrorReason = (EnumToString(value));
            }
        }

        /// <summary>
        /// Response error if intercepted at response stage or if redirect occurred while intercepting
        /// request.
        /// </summary>
        [DataMember(Name = ("responseErrorReason"), IsRequired = (false))]
        internal string responseErrorReason
        {
            get;
            private set;
        }

        /// <summary>
        /// Response code if intercepted at response stage or if redirect occurred while intercepting
        /// request or auth retry occurred.
        /// </summary>
        [DataMember(Name = ("responseStatusCode"), IsRequired = (false))]
        public int? ResponseStatusCode
        {
            get;
            private set;
        }

        /// <summary>
        /// Response headers if intercepted at the response stage or if redirect occurred while
        /// intercepting request or auth retry occurred.
        /// </summary>
        [DataMember(Name = ("responseHeaders"), IsRequired = (false))]
        public CefSharp.DevTools.Network.Headers ResponseHeaders
        {
            get;
            private set;
        }

        /// <summary>
        /// If the intercepted request had a corresponding requestWillBeSent event fired for it, then
        /// this requestId will be the same as the requestId present in the requestWillBeSent event.
        /// </summary>
        [DataMember(Name = ("requestId"), IsRequired = (false))]
        public string RequestId
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired if request ended up loading from cache.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class RequestServedFromCacheEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Request identifier.
        /// </summary>
        [DataMember(Name = ("requestId"), IsRequired = (true))]
        public string RequestId
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when page is about to send HTTP request.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class RequestWillBeSentEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Request identifier.
        /// </summary>
        [DataMember(Name = ("requestId"), IsRequired = (true))]
        public string RequestId
        {
            get;
            private set;
        }

        /// <summary>
        /// Loader identifier. Empty string if the request is fetched from worker.
        /// </summary>
        [DataMember(Name = ("loaderId"), IsRequired = (true))]
        public string LoaderId
        {
            get;
            private set;
        }

        /// <summary>
        /// URL of the document this request is loaded for.
        /// </summary>
        [DataMember(Name = ("documentURL"), IsRequired = (true))]
        public string DocumentURL
        {
            get;
            private set;
        }

        /// <summary>
        /// Request data.
        /// </summary>
        [DataMember(Name = ("request"), IsRequired = (true))]
        public CefSharp.DevTools.Network.Request Request
        {
            get;
            private set;
        }

        /// <summary>
        /// Timestamp.
        /// </summary>
        [DataMember(Name = ("timestamp"), IsRequired = (true))]
        public double Timestamp
        {
            get;
            private set;
        }

        /// <summary>
        /// Timestamp.
        /// </summary>
        [DataMember(Name = ("wallTime"), IsRequired = (true))]
        public double WallTime
        {
            get;
            private set;
        }

        /// <summary>
        /// Request initiator.
        /// </summary>
        [DataMember(Name = ("initiator"), IsRequired = (true))]
        public CefSharp.DevTools.Network.Initiator Initiator
        {
            get;
            private set;
        }

        /// <summary>
        /// In the case that redirectResponse is populated, this flag indicates whether
        /// requestWillBeSentExtraInfo and responseReceivedExtraInfo events will be or were emitted
        /// for the request which was just redirected.
        /// </summary>
        [DataMember(Name = ("redirectHasExtraInfo"), IsRequired = (true))]
        public bool RedirectHasExtraInfo
        {
            get;
            private set;
        }

        /// <summary>
        /// Redirect response data.
        /// </summary>
        [DataMember(Name = ("redirectResponse"), IsRequired = (false))]
        public CefSharp.DevTools.Network.Response RedirectResponse
        {
            get;
            private set;
        }

        /// <summary>
        /// Type of this resource.
        /// </summary>
        public CefSharp.DevTools.Network.ResourceType? Type
        {
            get
            {
                return (CefSharp.DevTools.Network.ResourceType? )(StringToEnum(typeof(CefSharp.DevTools.Network.ResourceType? ), type));
            }

            set
            {
                this.type = (EnumToString(value));
            }
        }

        /// <summary>
        /// Type of this resource.
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (false))]
        internal string type
        {
            get;
            private set;
        }

        /// <summary>
        /// Frame identifier.
        /// </summary>
        [DataMember(Name = ("frameId"), IsRequired = (false))]
        public string FrameId
        {
            get;
            private set;
        }

        /// <summary>
        /// Whether the request is initiated by a user gesture. Defaults to false.
        /// </summary>
        [DataMember(Name = ("hasUserGesture"), IsRequired = (false))]
        public bool? HasUserGesture
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when resource loading priority is changed
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class ResourceChangedPriorityEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Request identifier.
        /// </summary>
        [DataMember(Name = ("requestId"), IsRequired = (true))]
        public string RequestId
        {
            get;
            private set;
        }

        /// <summary>
        /// New priority
        /// </summary>
        public CefSharp.DevTools.Network.ResourcePriority NewPriority
        {
            get
            {
                return (CefSharp.DevTools.Network.ResourcePriority)(StringToEnum(typeof(CefSharp.DevTools.Network.ResourcePriority), newPriority));
            }

            set
            {
                this.newPriority = (EnumToString(value));
            }
        }

        /// <summary>
        /// New priority
        /// </summary>
        [DataMember(Name = ("newPriority"), IsRequired = (true))]
        internal string newPriority
        {
            get;
            private set;
        }

        /// <summary>
        /// Timestamp.
        /// </summary>
        [DataMember(Name = ("timestamp"), IsRequired = (true))]
        public double Timestamp
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when a signed exchange was received over the network
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class SignedExchangeReceivedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Request identifier.
        /// </summary>
        [DataMember(Name = ("requestId"), IsRequired = (true))]
        public string RequestId
        {
            get;
            private set;
        }

        /// <summary>
        /// Information about the signed exchange response.
        /// </summary>
        [DataMember(Name = ("info"), IsRequired = (true))]
        public CefSharp.DevTools.Network.SignedExchangeInfo Info
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when HTTP response is available.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class ResponseReceivedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Request identifier.
        /// </summary>
        [DataMember(Name = ("requestId"), IsRequired = (true))]
        public string RequestId
        {
            get;
            private set;
        }

        /// <summary>
        /// Loader identifier. Empty string if the request is fetched from worker.
        /// </summary>
        [DataMember(Name = ("loaderId"), IsRequired = (true))]
        public string LoaderId
        {
            get;
            private set;
        }

        /// <summary>
        /// Timestamp.
        /// </summary>
        [DataMember(Name = ("timestamp"), IsRequired = (true))]
        public double Timestamp
        {
            get;
            private set;
        }

        /// <summary>
        /// Resource type.
        /// </summary>
        public CefSharp.DevTools.Network.ResourceType Type
        {
            get
            {
                return (CefSharp.DevTools.Network.ResourceType)(StringToEnum(typeof(CefSharp.DevTools.Network.ResourceType), type));
            }

            set
            {
                this.type = (EnumToString(value));
            }
        }

        /// <summary>
        /// Resource type.
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (true))]
        internal string type
        {
            get;
            private set;
        }

        /// <summary>
        /// Response data.
        /// </summary>
        [DataMember(Name = ("response"), IsRequired = (true))]
        public CefSharp.DevTools.Network.Response Response
        {
            get;
            private set;
        }

        /// <summary>
        /// Indicates whether requestWillBeSentExtraInfo and responseReceivedExtraInfo events will be
        /// or were emitted for this request.
        /// </summary>
        [DataMember(Name = ("hasExtraInfo"), IsRequired = (true))]
        public bool HasExtraInfo
        {
            get;
            private set;
        }

        /// <summary>
        /// Frame identifier.
        /// </summary>
        [DataMember(Name = ("frameId"), IsRequired = (false))]
        public string FrameId
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when WebSocket is closed.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class WebSocketClosedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Request identifier.
        /// </summary>
        [DataMember(Name = ("requestId"), IsRequired = (true))]
        public string RequestId
        {
            get;
            private set;
        }

        /// <summary>
        /// Timestamp.
        /// </summary>
        [DataMember(Name = ("timestamp"), IsRequired = (true))]
        public double Timestamp
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired upon WebSocket creation.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class WebSocketCreatedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Request identifier.
        /// </summary>
        [DataMember(Name = ("requestId"), IsRequired = (true))]
        public string RequestId
        {
            get;
            private set;
        }

        /// <summary>
        /// WebSocket request URL.
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (true))]
        public string Url
        {
            get;
            private set;
        }

        /// <summary>
        /// Request initiator.
        /// </summary>
        [DataMember(Name = ("initiator"), IsRequired = (false))]
        public CefSharp.DevTools.Network.Initiator Initiator
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when WebSocket message error occurs.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class WebSocketFrameErrorEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Request identifier.
        /// </summary>
        [DataMember(Name = ("requestId"), IsRequired = (true))]
        public string RequestId
        {
            get;
            private set;
        }

        /// <summary>
        /// Timestamp.
        /// </summary>
        [DataMember(Name = ("timestamp"), IsRequired = (true))]
        public double Timestamp
        {
            get;
            private set;
        }

        /// <summary>
        /// WebSocket error message.
        /// </summary>
        [DataMember(Name = ("errorMessage"), IsRequired = (true))]
        public string ErrorMessage
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when WebSocket message is received.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class WebSocketFrameReceivedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Request identifier.
        /// </summary>
        [DataMember(Name = ("requestId"), IsRequired = (true))]
        public string RequestId
        {
            get;
            private set;
        }

        /// <summary>
        /// Timestamp.
        /// </summary>
        [DataMember(Name = ("timestamp"), IsRequired = (true))]
        public double Timestamp
        {
            get;
            private set;
        }

        /// <summary>
        /// WebSocket response data.
        /// </summary>
        [DataMember(Name = ("response"), IsRequired = (true))]
        public CefSharp.DevTools.Network.WebSocketFrame Response
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when WebSocket message is sent.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class WebSocketFrameSentEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Request identifier.
        /// </summary>
        [DataMember(Name = ("requestId"), IsRequired = (true))]
        public string RequestId
        {
            get;
            private set;
        }

        /// <summary>
        /// Timestamp.
        /// </summary>
        [DataMember(Name = ("timestamp"), IsRequired = (true))]
        public double Timestamp
        {
            get;
            private set;
        }

        /// <summary>
        /// WebSocket response data.
        /// </summary>
        [DataMember(Name = ("response"), IsRequired = (true))]
        public CefSharp.DevTools.Network.WebSocketFrame Response
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when WebSocket handshake response becomes available.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class WebSocketHandshakeResponseReceivedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Request identifier.
        /// </summary>
        [DataMember(Name = ("requestId"), IsRequired = (true))]
        public string RequestId
        {
            get;
            private set;
        }

        /// <summary>
        /// Timestamp.
        /// </summary>
        [DataMember(Name = ("timestamp"), IsRequired = (true))]
        public double Timestamp
        {
            get;
            private set;
        }

        /// <summary>
        /// WebSocket response data.
        /// </summary>
        [DataMember(Name = ("response"), IsRequired = (true))]
        public CefSharp.DevTools.Network.WebSocketResponse Response
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when WebSocket is about to initiate handshake.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class WebSocketWillSendHandshakeRequestEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Request identifier.
        /// </summary>
        [DataMember(Name = ("requestId"), IsRequired = (true))]
        public string RequestId
        {
            get;
            private set;
        }

        /// <summary>
        /// Timestamp.
        /// </summary>
        [DataMember(Name = ("timestamp"), IsRequired = (true))]
        public double Timestamp
        {
            get;
            private set;
        }

        /// <summary>
        /// UTC Timestamp.
        /// </summary>
        [DataMember(Name = ("wallTime"), IsRequired = (true))]
        public double WallTime
        {
            get;
            private set;
        }

        /// <summary>
        /// WebSocket request data.
        /// </summary>
        [DataMember(Name = ("request"), IsRequired = (true))]
        public CefSharp.DevTools.Network.WebSocketRequest Request
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired upon WebTransport creation.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class WebTransportCreatedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// WebTransport identifier.
        /// </summary>
        [DataMember(Name = ("transportId"), IsRequired = (true))]
        public string TransportId
        {
            get;
            private set;
        }

        /// <summary>
        /// WebTransport request URL.
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (true))]
        public string Url
        {
            get;
            private set;
        }

        /// <summary>
        /// Timestamp.
        /// </summary>
        [DataMember(Name = ("timestamp"), IsRequired = (true))]
        public double Timestamp
        {
            get;
            private set;
        }

        /// <summary>
        /// Request initiator.
        /// </summary>
        [DataMember(Name = ("initiator"), IsRequired = (false))]
        public CefSharp.DevTools.Network.Initiator Initiator
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when WebTransport handshake is finished.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class WebTransportConnectionEstablishedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// WebTransport identifier.
        /// </summary>
        [DataMember(Name = ("transportId"), IsRequired = (true))]
        public string TransportId
        {
            get;
            private set;
        }

        /// <summary>
        /// Timestamp.
        /// </summary>
        [DataMember(Name = ("timestamp"), IsRequired = (true))]
        public double Timestamp
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when WebTransport is disposed.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class WebTransportClosedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// WebTransport identifier.
        /// </summary>
        [DataMember(Name = ("transportId"), IsRequired = (true))]
        public string TransportId
        {
            get;
            private set;
        }

        /// <summary>
        /// Timestamp.
        /// </summary>
        [DataMember(Name = ("timestamp"), IsRequired = (true))]
        public double Timestamp
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when additional information about a requestWillBeSent event is available from the
    /// network stack. Not every requestWillBeSent event will have an additional
    /// requestWillBeSentExtraInfo fired for it, and there is no guarantee whether requestWillBeSent
    /// or requestWillBeSentExtraInfo will be fired first for the same request.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class RequestWillBeSentExtraInfoEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Request identifier. Used to match this information to an existing requestWillBeSent event.
        /// </summary>
        [DataMember(Name = ("requestId"), IsRequired = (true))]
        public string RequestId
        {
            get;
            private set;
        }

        /// <summary>
        /// A list of cookies potentially associated to the requested URL. This includes both cookies sent with
        /// the request and the ones not sent; the latter are distinguished by having blockedReasons field set.
        /// </summary>
        [DataMember(Name = ("associatedCookies"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Network.AssociatedCookie> AssociatedCookies
        {
            get;
            private set;
        }

        /// <summary>
        /// Raw request headers as they will be sent over the wire.
        /// </summary>
        [DataMember(Name = ("headers"), IsRequired = (true))]
        public CefSharp.DevTools.Network.Headers Headers
        {
            get;
            private set;
        }

        /// <summary>
        /// Connection timing information for the request.
        /// </summary>
        [DataMember(Name = ("connectTiming"), IsRequired = (true))]
        public CefSharp.DevTools.Network.ConnectTiming ConnectTiming
        {
            get;
            private set;
        }

        /// <summary>
        /// The client security state set for the request.
        /// </summary>
        [DataMember(Name = ("clientSecurityState"), IsRequired = (false))]
        public CefSharp.DevTools.Network.ClientSecurityState ClientSecurityState
        {
            get;
            private set;
        }

        /// <summary>
        /// Whether the site has partitioned cookies stored in a partition different than the current one.
        /// </summary>
        [DataMember(Name = ("siteHasCookieInOtherPartition"), IsRequired = (false))]
        public bool? SiteHasCookieInOtherPartition
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when additional information about a responseReceived event is available from the network
    /// stack. Not every responseReceived event will have an additional responseReceivedExtraInfo for
    /// it, and responseReceivedExtraInfo may be fired before or after responseReceived.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class ResponseReceivedExtraInfoEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Request identifier. Used to match this information to another responseReceived event.
        /// </summary>
        [DataMember(Name = ("requestId"), IsRequired = (true))]
        public string RequestId
        {
            get;
            private set;
        }

        /// <summary>
        /// A list of cookies which were not stored from the response along with the corresponding
        /// reasons for blocking. The cookies here may not be valid due to syntax errors, which
        /// are represented by the invalid cookie line string instead of a proper cookie.
        /// </summary>
        [DataMember(Name = ("blockedCookies"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Network.BlockedSetCookieWithReason> BlockedCookies
        {
            get;
            private set;
        }

        /// <summary>
        /// Raw response headers as they were received over the wire.
        /// </summary>
        [DataMember(Name = ("headers"), IsRequired = (true))]
        public CefSharp.DevTools.Network.Headers Headers
        {
            get;
            private set;
        }

        /// <summary>
        /// The IP address space of the resource. The address space can only be determined once the transport
        /// established the connection, so we can&apos;t send it in `requestWillBeSentExtraInfo`.
        /// </summary>
        public CefSharp.DevTools.Network.IPAddressSpace ResourceIPAddressSpace
        {
            get
            {
                return (CefSharp.DevTools.Network.IPAddressSpace)(StringToEnum(typeof(CefSharp.DevTools.Network.IPAddressSpace), resourceIPAddressSpace));
            }

            set
            {
                this.resourceIPAddressSpace = (EnumToString(value));
            }
        }

        /// <summary>
        /// The IP address space of the resource. The address space can only be determined once the transport
        /// established the connection, so we can&apos;t send it in `requestWillBeSentExtraInfo`.
        /// </summary>
        [DataMember(Name = ("resourceIPAddressSpace"), IsRequired = (true))]
        internal string resourceIPAddressSpace
        {
            get;
            private set;
        }

        /// <summary>
        /// The status code of the response. This is useful in cases the request failed and no responseReceived
        /// event is triggered, which is the case for, e.g., CORS errors. This is also the correct status code
        /// for cached requests, where the status in responseReceived is a 200 and this will be 304.
        /// </summary>
        [DataMember(Name = ("statusCode"), IsRequired = (true))]
        public int StatusCode
        {
            get;
            private set;
        }

        /// <summary>
        /// Raw response header text as it was received over the wire. The raw text may not always be
        /// available, such as in the case of HTTP/2 or QUIC.
        /// </summary>
        [DataMember(Name = ("headersText"), IsRequired = (false))]
        public string HeadersText
        {
            get;
            private set;
        }

        /// <summary>
        /// The cookie partition key that will be used to store partitioned cookies set in this response.
        /// Only sent when partitioned cookies are enabled.
        /// </summary>
        [DataMember(Name = ("cookiePartitionKey"), IsRequired = (false))]
        public string CookiePartitionKey
        {
            get;
            private set;
        }

        /// <summary>
        /// True if partitioned cookies are enabled, but the partition key is not serializable to string.
        /// </summary>
        [DataMember(Name = ("cookiePartitionKeyOpaque"), IsRequired = (false))]
        public bool? CookiePartitionKeyOpaque
        {
            get;
            private set;
        }

        /// <summary>
        /// A list of cookies which should have been blocked by 3PCD but are exempted and stored from
        /// the response with the corresponding reason.
        /// </summary>
        [DataMember(Name = ("exemptedCookies"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Network.ExemptedSetCookieWithReason> ExemptedCookies
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Detailed success or error status of the operation.
    /// &apos;AlreadyExists&apos; also signifies a successful operation, as the result
    /// of the operation already exists und thus, the operation was abort
    /// preemptively (e.g. a cache hit).
    /// </summary>
    public enum TrustTokenOperationDoneStatus
    {
        /// <summary>
        /// Ok
        /// </summary>
        [EnumMember(Value = ("Ok"))]
        Ok,
        /// <summary>
        /// InvalidArgument
        /// </summary>
        [EnumMember(Value = ("InvalidArgument"))]
        InvalidArgument,
        /// <summary>
        /// MissingIssuerKeys
        /// </summary>
        [EnumMember(Value = ("MissingIssuerKeys"))]
        MissingIssuerKeys,
        /// <summary>
        /// FailedPrecondition
        /// </summary>
        [EnumMember(Value = ("FailedPrecondition"))]
        FailedPrecondition,
        /// <summary>
        /// ResourceExhausted
        /// </summary>
        [EnumMember(Value = ("ResourceExhausted"))]
        ResourceExhausted,
        /// <summary>
        /// AlreadyExists
        /// </summary>
        [EnumMember(Value = ("AlreadyExists"))]
        AlreadyExists,
        /// <summary>
        /// Unavailable
        /// </summary>
        [EnumMember(Value = ("Unavailable"))]
        Unavailable,
        /// <summary>
        /// Unauthorized
        /// </summary>
        [EnumMember(Value = ("Unauthorized"))]
        Unauthorized,
        /// <summary>
        /// BadResponse
        /// </summary>
        [EnumMember(Value = ("BadResponse"))]
        BadResponse,
        /// <summary>
        /// InternalError
        /// </summary>
        [EnumMember(Value = ("InternalError"))]
        InternalError,
        /// <summary>
        /// UnknownError
        /// </summary>
        [EnumMember(Value = ("UnknownError"))]
        UnknownError,
        /// <summary>
        /// FulfilledLocally
        /// </summary>
        [EnumMember(Value = ("FulfilledLocally"))]
        FulfilledLocally
    }

    /// <summary>
    /// Fired exactly once for each Trust Token operation. Depending on
    /// the type of the operation and whether the operation succeeded or
    /// failed, the event is fired before the corresponding request was sent
    /// or after the response was received.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class TrustTokenOperationDoneEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Detailed success or error status of the operation.
        /// &apos;AlreadyExists&apos; also signifies a successful operation, as the result
        /// of the operation already exists und thus, the operation was abort
        /// preemptively (e.g. a cache hit).
        /// </summary>
        public CefSharp.DevTools.Network.TrustTokenOperationDoneStatus Status
        {
            get
            {
                return (CefSharp.DevTools.Network.TrustTokenOperationDoneStatus)(StringToEnum(typeof(CefSharp.DevTools.Network.TrustTokenOperationDoneStatus), status));
            }

            set
            {
                this.status = (EnumToString(value));
            }
        }

        /// <summary>
        /// Detailed success or error status of the operation.
        /// &apos;AlreadyExists&apos; also signifies a successful operation, as the result
        /// of the operation already exists und thus, the operation was abort
        /// preemptively (e.g. a cache hit).
        /// </summary>
        [DataMember(Name = ("status"), IsRequired = (true))]
        internal string status
        {
            get;
            private set;
        }

        /// <summary>
        /// Type
        /// </summary>
        public CefSharp.DevTools.Network.TrustTokenOperationType Type
        {
            get
            {
                return (CefSharp.DevTools.Network.TrustTokenOperationType)(StringToEnum(typeof(CefSharp.DevTools.Network.TrustTokenOperationType), type));
            }

            set
            {
                this.type = (EnumToString(value));
            }
        }

        /// <summary>
        /// Type
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (true))]
        internal string type
        {
            get;
            private set;
        }

        /// <summary>
        /// RequestId
        /// </summary>
        [DataMember(Name = ("requestId"), IsRequired = (true))]
        public string RequestId
        {
            get;
            private set;
        }

        /// <summary>
        /// Top level origin. The context in which the operation was attempted.
        /// </summary>
        [DataMember(Name = ("topLevelOrigin"), IsRequired = (false))]
        public string TopLevelOrigin
        {
            get;
            private set;
        }

        /// <summary>
        /// Origin of the issuer in case of a &quot;Issuance&quot; or &quot;Redemption&quot; operation.
        /// </summary>
        [DataMember(Name = ("issuerOrigin"), IsRequired = (false))]
        public string IssuerOrigin
        {
            get;
            private set;
        }

        /// <summary>
        /// The number of obtained Trust Tokens on a successful &quot;Issuance&quot; operation.
        /// </summary>
        [DataMember(Name = ("issuedTokenCount"), IsRequired = (false))]
        public int? IssuedTokenCount
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired once when parsing the .wbn file has succeeded.
    /// The event contains the information about the web bundle contents.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class SubresourceWebBundleMetadataReceivedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Request identifier. Used to match this information to another event.
        /// </summary>
        [DataMember(Name = ("requestId"), IsRequired = (true))]
        public string RequestId
        {
            get;
            private set;
        }

        /// <summary>
        /// A list of URLs of resources in the subresource Web Bundle.
        /// </summary>
        [DataMember(Name = ("urls"), IsRequired = (true))]
        public string[] Urls
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired once when parsing the .wbn file has failed.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class SubresourceWebBundleMetadataErrorEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Request identifier. Used to match this information to another event.
        /// </summary>
        [DataMember(Name = ("requestId"), IsRequired = (true))]
        public string RequestId
        {
            get;
            private set;
        }

        /// <summary>
        /// Error message
        /// </summary>
        [DataMember(Name = ("errorMessage"), IsRequired = (true))]
        public string ErrorMessage
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when handling requests for resources within a .wbn file.
    /// Note: this will only be fired for resources that are requested by the webpage.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class SubresourceWebBundleInnerResponseParsedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Request identifier of the subresource request
        /// </summary>
        [DataMember(Name = ("innerRequestId"), IsRequired = (true))]
        public string InnerRequestId
        {
            get;
            private set;
        }

        /// <summary>
        /// URL of the subresource resource.
        /// </summary>
        [DataMember(Name = ("innerRequestURL"), IsRequired = (true))]
        public string InnerRequestURL
        {
            get;
            private set;
        }

        /// <summary>
        /// Bundle request identifier. Used to match this information to another event.
        /// This made be absent in case when the instrumentation was enabled only
        /// after webbundle was parsed.
        /// </summary>
        [DataMember(Name = ("bundleRequestId"), IsRequired = (false))]
        public string BundleRequestId
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when request for resources within a .wbn file failed.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class SubresourceWebBundleInnerResponseErrorEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Request identifier of the subresource request
        /// </summary>
        [DataMember(Name = ("innerRequestId"), IsRequired = (true))]
        public string InnerRequestId
        {
            get;
            private set;
        }

        /// <summary>
        /// URL of the subresource resource.
        /// </summary>
        [DataMember(Name = ("innerRequestURL"), IsRequired = (true))]
        public string InnerRequestURL
        {
            get;
            private set;
        }

        /// <summary>
        /// Error message
        /// </summary>
        [DataMember(Name = ("errorMessage"), IsRequired = (true))]
        public string ErrorMessage
        {
            get;
            private set;
        }

        /// <summary>
        /// Bundle request identifier. Used to match this information to another event.
        /// This made be absent in case when the instrumentation was enabled only
        /// after webbundle was parsed.
        /// </summary>
        [DataMember(Name = ("bundleRequestId"), IsRequired = (false))]
        public string BundleRequestId
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Is sent whenever a new report is added.
    /// And after &apos;enableReportingApi&apos; for all existing reports.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class ReportingApiReportAddedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Report
        /// </summary>
        [DataMember(Name = ("report"), IsRequired = (true))]
        public CefSharp.DevTools.Network.ReportingApiReport Report
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// reportingApiReportUpdated
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class ReportingApiReportUpdatedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Report
        /// </summary>
        [DataMember(Name = ("report"), IsRequired = (true))]
        public CefSharp.DevTools.Network.ReportingApiReport Report
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// reportingApiEndpointsChangedForOrigin
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class ReportingApiEndpointsChangedForOriginEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Origin of the document(s) which configured the endpoints.
        /// </summary>
        [DataMember(Name = ("origin"), IsRequired = (true))]
        public string Origin
        {
            get;
            private set;
        }

        /// <summary>
        /// Endpoints
        /// </summary>
        [DataMember(Name = ("endpoints"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Network.ReportingApiEndpoint> Endpoints
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.Overlay
{
    /// <summary>
    /// Configuration data for drawing the source order of an elements children.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class SourceOrderConfig : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// the color to outline the given element in.
        /// </summary>
        [DataMember(Name = ("parentOutlineColor"), IsRequired = (true))]
        public CefSharp.DevTools.DOM.RGBA ParentOutlineColor
        {
            get;
            set;
        }

        /// <summary>
        /// the color to outline the child elements in.
        /// </summary>
        [DataMember(Name = ("childOutlineColor"), IsRequired = (true))]
        public CefSharp.DevTools.DOM.RGBA ChildOutlineColor
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Configuration data for the highlighting of Grid elements.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class GridHighlightConfig : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Whether the extension lines from grid cells to the rulers should be shown (default: false).
        /// </summary>
        [DataMember(Name = ("showGridExtensionLines"), IsRequired = (false))]
        public bool? ShowGridExtensionLines
        {
            get;
            set;
        }

        /// <summary>
        /// Show Positive line number labels (default: false).
        /// </summary>
        [DataMember(Name = ("showPositiveLineNumbers"), IsRequired = (false))]
        public bool? ShowPositiveLineNumbers
        {
            get;
            set;
        }

        /// <summary>
        /// Show Negative line number labels (default: false).
        /// </summary>
        [DataMember(Name = ("showNegativeLineNumbers"), IsRequired = (false))]
        public bool? ShowNegativeLineNumbers
        {
            get;
            set;
        }

        /// <summary>
        /// Show area name labels (default: false).
        /// </summary>
        [DataMember(Name = ("showAreaNames"), IsRequired = (false))]
        public bool? ShowAreaNames
        {
            get;
            set;
        }

        /// <summary>
        /// Show line name labels (default: false).
        /// </summary>
        [DataMember(Name = ("showLineNames"), IsRequired = (false))]
        public bool? ShowLineNames
        {
            get;
            set;
        }

        /// <summary>
        /// Show track size labels (default: false).
        /// </summary>
        [DataMember(Name = ("showTrackSizes"), IsRequired = (false))]
        public bool? ShowTrackSizes
        {
            get;
            set;
        }

        /// <summary>
        /// The grid container border highlight color (default: transparent).
        /// </summary>
        [DataMember(Name = ("gridBorderColor"), IsRequired = (false))]
        public CefSharp.DevTools.DOM.RGBA GridBorderColor
        {
            get;
            set;
        }

        /// <summary>
        /// The cell border color (default: transparent). Deprecated, please use rowLineColor and columnLineColor instead.
        /// </summary>
        [DataMember(Name = ("cellBorderColor"), IsRequired = (false))]
        public CefSharp.DevTools.DOM.RGBA CellBorderColor
        {
            get;
            set;
        }

        /// <summary>
        /// The row line color (default: transparent).
        /// </summary>
        [DataMember(Name = ("rowLineColor"), IsRequired = (false))]
        public CefSharp.DevTools.DOM.RGBA RowLineColor
        {
            get;
            set;
        }

        /// <summary>
        /// The column line color (default: transparent).
        /// </summary>
        [DataMember(Name = ("columnLineColor"), IsRequired = (false))]
        public CefSharp.DevTools.DOM.RGBA ColumnLineColor
        {
            get;
            set;
        }

        /// <summary>
        /// Whether the grid border is dashed (default: false).
        /// </summary>
        [DataMember(Name = ("gridBorderDash"), IsRequired = (false))]
        public bool? GridBorderDash
        {
            get;
            set;
        }

        /// <summary>
        /// Whether the cell border is dashed (default: false). Deprecated, please us rowLineDash and columnLineDash instead.
        /// </summary>
        [DataMember(Name = ("cellBorderDash"), IsRequired = (false))]
        public bool? CellBorderDash
        {
            get;
            set;
        }

        /// <summary>
        /// Whether row lines are dashed (default: false).
        /// </summary>
        [DataMember(Name = ("rowLineDash"), IsRequired = (false))]
        public bool? RowLineDash
        {
            get;
            set;
        }

        /// <summary>
        /// Whether column lines are dashed (default: false).
        /// </summary>
        [DataMember(Name = ("columnLineDash"), IsRequired = (false))]
        public bool? ColumnLineDash
        {
            get;
            set;
        }

        /// <summary>
        /// The row gap highlight fill color (default: transparent).
        /// </summary>
        [DataMember(Name = ("rowGapColor"), IsRequired = (false))]
        public CefSharp.DevTools.DOM.RGBA RowGapColor
        {
            get;
            set;
        }

        /// <summary>
        /// The row gap hatching fill color (default: transparent).
        /// </summary>
        [DataMember(Name = ("rowHatchColor"), IsRequired = (false))]
        public CefSharp.DevTools.DOM.RGBA RowHatchColor
        {
            get;
            set;
        }

        /// <summary>
        /// The column gap highlight fill color (default: transparent).
        /// </summary>
        [DataMember(Name = ("columnGapColor"), IsRequired = (false))]
        public CefSharp.DevTools.DOM.RGBA ColumnGapColor
        {
            get;
            set;
        }

        /// <summary>
        /// The column gap hatching fill color (default: transparent).
        /// </summary>
        [DataMember(Name = ("columnHatchColor"), IsRequired = (false))]
        public CefSharp.DevTools.DOM.RGBA ColumnHatchColor
        {
            get;
            set;
        }

        /// <summary>
        /// The named grid areas border color (Default: transparent).
        /// </summary>
        [DataMember(Name = ("areaBorderColor"), IsRequired = (false))]
        public CefSharp.DevTools.DOM.RGBA AreaBorderColor
        {
            get;
            set;
        }

        /// <summary>
        /// The grid container background color (Default: transparent).
        /// </summary>
        [DataMember(Name = ("gridBackgroundColor"), IsRequired = (false))]
        public CefSharp.DevTools.DOM.RGBA GridBackgroundColor
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Configuration data for the highlighting of Flex container elements.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class FlexContainerHighlightConfig : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The style of the container border
        /// </summary>
        [DataMember(Name = ("containerBorder"), IsRequired = (false))]
        public CefSharp.DevTools.Overlay.LineStyle ContainerBorder
        {
            get;
            set;
        }

        /// <summary>
        /// The style of the separator between lines
        /// </summary>
        [DataMember(Name = ("lineSeparator"), IsRequired = (false))]
        public CefSharp.DevTools.Overlay.LineStyle LineSeparator
        {
            get;
            set;
        }

        /// <summary>
        /// The style of the separator between items
        /// </summary>
        [DataMember(Name = ("itemSeparator"), IsRequired = (false))]
        public CefSharp.DevTools.Overlay.LineStyle ItemSeparator
        {
            get;
            set;
        }

        /// <summary>
        /// Style of content-distribution space on the main axis (justify-content).
        /// </summary>
        [DataMember(Name = ("mainDistributedSpace"), IsRequired = (false))]
        public CefSharp.DevTools.Overlay.BoxStyle MainDistributedSpace
        {
            get;
            set;
        }

        /// <summary>
        /// Style of content-distribution space on the cross axis (align-content).
        /// </summary>
        [DataMember(Name = ("crossDistributedSpace"), IsRequired = (false))]
        public CefSharp.DevTools.Overlay.BoxStyle CrossDistributedSpace
        {
            get;
            set;
        }

        /// <summary>
        /// Style of empty space caused by row gaps (gap/row-gap).
        /// </summary>
        [DataMember(Name = ("rowGapSpace"), IsRequired = (false))]
        public CefSharp.DevTools.Overlay.BoxStyle RowGapSpace
        {
            get;
            set;
        }

        /// <summary>
        /// Style of empty space caused by columns gaps (gap/column-gap).
        /// </summary>
        [DataMember(Name = ("columnGapSpace"), IsRequired = (false))]
        public CefSharp.DevTools.Overlay.BoxStyle ColumnGapSpace
        {
            get;
            set;
        }

        /// <summary>
        /// Style of the self-alignment line (align-items).
        /// </summary>
        [DataMember(Name = ("crossAlignment"), IsRequired = (false))]
        public CefSharp.DevTools.Overlay.LineStyle CrossAlignment
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Configuration data for the highlighting of Flex item elements.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class FlexItemHighlightConfig : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Style of the box representing the item&apos;s base size
        /// </summary>
        [DataMember(Name = ("baseSizeBox"), IsRequired = (false))]
        public CefSharp.DevTools.Overlay.BoxStyle BaseSizeBox
        {
            get;
            set;
        }

        /// <summary>
        /// Style of the border around the box representing the item&apos;s base size
        /// </summary>
        [DataMember(Name = ("baseSizeBorder"), IsRequired = (false))]
        public CefSharp.DevTools.Overlay.LineStyle BaseSizeBorder
        {
            get;
            set;
        }

        /// <summary>
        /// Style of the arrow representing if the item grew or shrank
        /// </summary>
        [DataMember(Name = ("flexibilityArrow"), IsRequired = (false))]
        public CefSharp.DevTools.Overlay.LineStyle FlexibilityArrow
        {
            get;
            set;
        }
    }

    /// <summary>
    /// The line pattern (default: solid)
    /// </summary>
    public enum LineStylePattern
    {
        /// <summary>
        /// dashed
        /// </summary>
        [EnumMember(Value = ("dashed"))]
        Dashed,
        /// <summary>
        /// dotted
        /// </summary>
        [EnumMember(Value = ("dotted"))]
        Dotted
    }

    /// <summary>
    /// Style information for drawing a line.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class LineStyle : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The color of the line (default: transparent)
        /// </summary>
        [DataMember(Name = ("color"), IsRequired = (false))]
        public CefSharp.DevTools.DOM.RGBA Color
        {
            get;
            set;
        }

        /// <summary>
        /// The line pattern (default: solid)
        /// </summary>
        public CefSharp.DevTools.Overlay.LineStylePattern? Pattern
        {
            get
            {
                return (CefSharp.DevTools.Overlay.LineStylePattern? )(StringToEnum(typeof(CefSharp.DevTools.Overlay.LineStylePattern? ), pattern));
            }

            set
            {
                this.pattern = (EnumToString(value));
            }
        }

        /// <summary>
        /// The line pattern (default: solid)
        /// </summary>
        [DataMember(Name = ("pattern"), IsRequired = (false))]
        internal string pattern
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Style information for drawing a box.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class BoxStyle : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The background color for the box (default: transparent)
        /// </summary>
        [DataMember(Name = ("fillColor"), IsRequired = (false))]
        public CefSharp.DevTools.DOM.RGBA FillColor
        {
            get;
            set;
        }

        /// <summary>
        /// The hatching color for the box (default: transparent)
        /// </summary>
        [DataMember(Name = ("hatchColor"), IsRequired = (false))]
        public CefSharp.DevTools.DOM.RGBA HatchColor
        {
            get;
            set;
        }
    }

    /// <summary>
    /// ContrastAlgorithm
    /// </summary>
    public enum ContrastAlgorithm
    {
        /// <summary>
        /// aa
        /// </summary>
        [EnumMember(Value = ("aa"))]
        Aa,
        /// <summary>
        /// aaa
        /// </summary>
        [EnumMember(Value = ("aaa"))]
        Aaa,
        /// <summary>
        /// apca
        /// </summary>
        [EnumMember(Value = ("apca"))]
        Apca
    }

    /// <summary>
    /// Configuration data for the highlighting of page elements.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class HighlightConfig : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Whether the node info tooltip should be shown (default: false).
        /// </summary>
        [DataMember(Name = ("showInfo"), IsRequired = (false))]
        public bool? ShowInfo
        {
            get;
            set;
        }

        /// <summary>
        /// Whether the node styles in the tooltip (default: false).
        /// </summary>
        [DataMember(Name = ("showStyles"), IsRequired = (false))]
        public bool? ShowStyles
        {
            get;
            set;
        }

        /// <summary>
        /// Whether the rulers should be shown (default: false).
        /// </summary>
        [DataMember(Name = ("showRulers"), IsRequired = (false))]
        public bool? ShowRulers
        {
            get;
            set;
        }

        /// <summary>
        /// Whether the a11y info should be shown (default: true).
        /// </summary>
        [DataMember(Name = ("showAccessibilityInfo"), IsRequired = (false))]
        public bool? ShowAccessibilityInfo
        {
            get;
            set;
        }

        /// <summary>
        /// Whether the extension lines from node to the rulers should be shown (default: false).
        /// </summary>
        [DataMember(Name = ("showExtensionLines"), IsRequired = (false))]
        public bool? ShowExtensionLines
        {
            get;
            set;
        }

        /// <summary>
        /// The content box highlight fill color (default: transparent).
        /// </summary>
        [DataMember(Name = ("contentColor"), IsRequired = (false))]
        public CefSharp.DevTools.DOM.RGBA ContentColor
        {
            get;
            set;
        }

        /// <summary>
        /// The padding highlight fill color (default: transparent).
        /// </summary>
        [DataMember(Name = ("paddingColor"), IsRequired = (false))]
        public CefSharp.DevTools.DOM.RGBA PaddingColor
        {
            get;
            set;
        }

        /// <summary>
        /// The border highlight fill color (default: transparent).
        /// </summary>
        [DataMember(Name = ("borderColor"), IsRequired = (false))]
        public CefSharp.DevTools.DOM.RGBA BorderColor
        {
            get;
            set;
        }

        /// <summary>
        /// The margin highlight fill color (default: transparent).
        /// </summary>
        [DataMember(Name = ("marginColor"), IsRequired = (false))]
        public CefSharp.DevTools.DOM.RGBA MarginColor
        {
            get;
            set;
        }

        /// <summary>
        /// The event target element highlight fill color (default: transparent).
        /// </summary>
        [DataMember(Name = ("eventTargetColor"), IsRequired = (false))]
        public CefSharp.DevTools.DOM.RGBA EventTargetColor
        {
            get;
            set;
        }

        /// <summary>
        /// The shape outside fill color (default: transparent).
        /// </summary>
        [DataMember(Name = ("shapeColor"), IsRequired = (false))]
        public CefSharp.DevTools.DOM.RGBA ShapeColor
        {
            get;
            set;
        }

        /// <summary>
        /// The shape margin fill color (default: transparent).
        /// </summary>
        [DataMember(Name = ("shapeMarginColor"), IsRequired = (false))]
        public CefSharp.DevTools.DOM.RGBA ShapeMarginColor
        {
            get;
            set;
        }

        /// <summary>
        /// The grid layout color (default: transparent).
        /// </summary>
        [DataMember(Name = ("cssGridColor"), IsRequired = (false))]
        public CefSharp.DevTools.DOM.RGBA CssGridColor
        {
            get;
            set;
        }

        /// <summary>
        /// The color format used to format color styles (default: hex).
        /// </summary>
        public CefSharp.DevTools.Overlay.ColorFormat? ColorFormat
        {
            get
            {
                return (CefSharp.DevTools.Overlay.ColorFormat? )(StringToEnum(typeof(CefSharp.DevTools.Overlay.ColorFormat? ), colorFormat));
            }

            set
            {
                this.colorFormat = (EnumToString(value));
            }
        }

        /// <summary>
        /// The color format used to format color styles (default: hex).
        /// </summary>
        [DataMember(Name = ("colorFormat"), IsRequired = (false))]
        internal string colorFormat
        {
            get;
            set;
        }

        /// <summary>
        /// The grid layout highlight configuration (default: all transparent).
        /// </summary>
        [DataMember(Name = ("gridHighlightConfig"), IsRequired = (false))]
        public CefSharp.DevTools.Overlay.GridHighlightConfig GridHighlightConfig
        {
            get;
            set;
        }

        /// <summary>
        /// The flex container highlight configuration (default: all transparent).
        /// </summary>
        [DataMember(Name = ("flexContainerHighlightConfig"), IsRequired = (false))]
        public CefSharp.DevTools.Overlay.FlexContainerHighlightConfig FlexContainerHighlightConfig
        {
            get;
            set;
        }

        /// <summary>
        /// The flex item highlight configuration (default: all transparent).
        /// </summary>
        [DataMember(Name = ("flexItemHighlightConfig"), IsRequired = (false))]
        public CefSharp.DevTools.Overlay.FlexItemHighlightConfig FlexItemHighlightConfig
        {
            get;
            set;
        }

        /// <summary>
        /// The contrast algorithm to use for the contrast ratio (default: aa).
        /// </summary>
        public CefSharp.DevTools.Overlay.ContrastAlgorithm? ContrastAlgorithm
        {
            get
            {
                return (CefSharp.DevTools.Overlay.ContrastAlgorithm? )(StringToEnum(typeof(CefSharp.DevTools.Overlay.ContrastAlgorithm? ), contrastAlgorithm));
            }

            set
            {
                this.contrastAlgorithm = (EnumToString(value));
            }
        }

        /// <summary>
        /// The contrast algorithm to use for the contrast ratio (default: aa).
        /// </summary>
        [DataMember(Name = ("contrastAlgorithm"), IsRequired = (false))]
        internal string contrastAlgorithm
        {
            get;
            set;
        }

        /// <summary>
        /// The container query container highlight configuration (default: all transparent).
        /// </summary>
        [DataMember(Name = ("containerQueryContainerHighlightConfig"), IsRequired = (false))]
        public CefSharp.DevTools.Overlay.ContainerQueryContainerHighlightConfig ContainerQueryContainerHighlightConfig
        {
            get;
            set;
        }
    }

    /// <summary>
    /// ColorFormat
    /// </summary>
    public enum ColorFormat
    {
        /// <summary>
        /// rgb
        /// </summary>
        [EnumMember(Value = ("rgb"))]
        Rgb,
        /// <summary>
        /// hsl
        /// </summary>
        [EnumMember(Value = ("hsl"))]
        Hsl,
        /// <summary>
        /// hwb
        /// </summary>
        [EnumMember(Value = ("hwb"))]
        Hwb,
        /// <summary>
        /// hex
        /// </summary>
        [EnumMember(Value = ("hex"))]
        Hex
    }

    /// <summary>
    /// Configurations for Persistent Grid Highlight
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class GridNodeHighlightConfig : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// A descriptor for the highlight appearance.
        /// </summary>
        [DataMember(Name = ("gridHighlightConfig"), IsRequired = (true))]
        public CefSharp.DevTools.Overlay.GridHighlightConfig GridHighlightConfig
        {
            get;
            set;
        }

        /// <summary>
        /// Identifier of the node to highlight.
        /// </summary>
        [DataMember(Name = ("nodeId"), IsRequired = (true))]
        public int NodeId
        {
            get;
            set;
        }
    }

    /// <summary>
    /// FlexNodeHighlightConfig
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class FlexNodeHighlightConfig : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// A descriptor for the highlight appearance of flex containers.
        /// </summary>
        [DataMember(Name = ("flexContainerHighlightConfig"), IsRequired = (true))]
        public CefSharp.DevTools.Overlay.FlexContainerHighlightConfig FlexContainerHighlightConfig
        {
            get;
            set;
        }

        /// <summary>
        /// Identifier of the node to highlight.
        /// </summary>
        [DataMember(Name = ("nodeId"), IsRequired = (true))]
        public int NodeId
        {
            get;
            set;
        }
    }

    /// <summary>
    /// ScrollSnapContainerHighlightConfig
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ScrollSnapContainerHighlightConfig : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The style of the snapport border (default: transparent)
        /// </summary>
        [DataMember(Name = ("snapportBorder"), IsRequired = (false))]
        public CefSharp.DevTools.Overlay.LineStyle SnapportBorder
        {
            get;
            set;
        }

        /// <summary>
        /// The style of the snap area border (default: transparent)
        /// </summary>
        [DataMember(Name = ("snapAreaBorder"), IsRequired = (false))]
        public CefSharp.DevTools.Overlay.LineStyle SnapAreaBorder
        {
            get;
            set;
        }

        /// <summary>
        /// The margin highlight fill color (default: transparent).
        /// </summary>
        [DataMember(Name = ("scrollMarginColor"), IsRequired = (false))]
        public CefSharp.DevTools.DOM.RGBA ScrollMarginColor
        {
            get;
            set;
        }

        /// <summary>
        /// The padding highlight fill color (default: transparent).
        /// </summary>
        [DataMember(Name = ("scrollPaddingColor"), IsRequired = (false))]
        public CefSharp.DevTools.DOM.RGBA ScrollPaddingColor
        {
            get;
            set;
        }
    }

    /// <summary>
    /// ScrollSnapHighlightConfig
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ScrollSnapHighlightConfig : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// A descriptor for the highlight appearance of scroll snap containers.
        /// </summary>
        [DataMember(Name = ("scrollSnapContainerHighlightConfig"), IsRequired = (true))]
        public CefSharp.DevTools.Overlay.ScrollSnapContainerHighlightConfig ScrollSnapContainerHighlightConfig
        {
            get;
            set;
        }

        /// <summary>
        /// Identifier of the node to highlight.
        /// </summary>
        [DataMember(Name = ("nodeId"), IsRequired = (true))]
        public int NodeId
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Configuration for dual screen hinge
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class HingeConfig : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// A rectangle represent hinge
        /// </summary>
        [DataMember(Name = ("rect"), IsRequired = (true))]
        public CefSharp.DevTools.DOM.Rect Rect
        {
            get;
            set;
        }

        /// <summary>
        /// The content box highlight fill color (default: a dark color).
        /// </summary>
        [DataMember(Name = ("contentColor"), IsRequired = (false))]
        public CefSharp.DevTools.DOM.RGBA ContentColor
        {
            get;
            set;
        }

        /// <summary>
        /// The content box highlight outline color (default: transparent).
        /// </summary>
        [DataMember(Name = ("outlineColor"), IsRequired = (false))]
        public CefSharp.DevTools.DOM.RGBA OutlineColor
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Configuration for Window Controls Overlay
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class WindowControlsOverlayConfig : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Whether the title bar CSS should be shown when emulating the Window Controls Overlay.
        /// </summary>
        [DataMember(Name = ("showCSS"), IsRequired = (true))]
        public bool ShowCSS
        {
            get;
            set;
        }

        /// <summary>
        /// Selected platforms to show the overlay.
        /// </summary>
        [DataMember(Name = ("selectedPlatform"), IsRequired = (true))]
        public string SelectedPlatform
        {
            get;
            set;
        }

        /// <summary>
        /// The theme color defined in app manifest.
        /// </summary>
        [DataMember(Name = ("themeColor"), IsRequired = (true))]
        public string ThemeColor
        {
            get;
            set;
        }
    }

    /// <summary>
    /// ContainerQueryHighlightConfig
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ContainerQueryHighlightConfig : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// A descriptor for the highlight appearance of container query containers.
        /// </summary>
        [DataMember(Name = ("containerQueryContainerHighlightConfig"), IsRequired = (true))]
        public CefSharp.DevTools.Overlay.ContainerQueryContainerHighlightConfig ContainerQueryContainerHighlightConfig
        {
            get;
            set;
        }

        /// <summary>
        /// Identifier of the container node to highlight.
        /// </summary>
        [DataMember(Name = ("nodeId"), IsRequired = (true))]
        public int NodeId
        {
            get;
            set;
        }
    }

    /// <summary>
    /// ContainerQueryContainerHighlightConfig
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ContainerQueryContainerHighlightConfig : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The style of the container border.
        /// </summary>
        [DataMember(Name = ("containerBorder"), IsRequired = (false))]
        public CefSharp.DevTools.Overlay.LineStyle ContainerBorder
        {
            get;
            set;
        }

        /// <summary>
        /// The style of the descendants&apos; borders.
        /// </summary>
        [DataMember(Name = ("descendantBorder"), IsRequired = (false))]
        public CefSharp.DevTools.Overlay.LineStyle DescendantBorder
        {
            get;
            set;
        }
    }

    /// <summary>
    /// IsolatedElementHighlightConfig
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class IsolatedElementHighlightConfig : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// A descriptor for the highlight appearance of an element in isolation mode.
        /// </summary>
        [DataMember(Name = ("isolationModeHighlightConfig"), IsRequired = (true))]
        public CefSharp.DevTools.Overlay.IsolationModeHighlightConfig IsolationModeHighlightConfig
        {
            get;
            set;
        }

        /// <summary>
        /// Identifier of the isolated element to highlight.
        /// </summary>
        [DataMember(Name = ("nodeId"), IsRequired = (true))]
        public int NodeId
        {
            get;
            set;
        }
    }

    /// <summary>
    /// IsolationModeHighlightConfig
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class IsolationModeHighlightConfig : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The fill color of the resizers (default: transparent).
        /// </summary>
        [DataMember(Name = ("resizerColor"), IsRequired = (false))]
        public CefSharp.DevTools.DOM.RGBA ResizerColor
        {
            get;
            set;
        }

        /// <summary>
        /// The fill color for resizer handles (default: transparent).
        /// </summary>
        [DataMember(Name = ("resizerHandleColor"), IsRequired = (false))]
        public CefSharp.DevTools.DOM.RGBA ResizerHandleColor
        {
            get;
            set;
        }

        /// <summary>
        /// The fill color for the mask covering non-isolated elements (default: transparent).
        /// </summary>
        [DataMember(Name = ("maskColor"), IsRequired = (false))]
        public CefSharp.DevTools.DOM.RGBA MaskColor
        {
            get;
            set;
        }
    }

    /// <summary>
    /// InspectMode
    /// </summary>
    public enum InspectMode
    {
        /// <summary>
        /// searchForNode
        /// </summary>
        [EnumMember(Value = ("searchForNode"))]
        SearchForNode,
        /// <summary>
        /// searchForUAShadowDOM
        /// </summary>
        [EnumMember(Value = ("searchForUAShadowDOM"))]
        SearchForUAShadowDOM,
        /// <summary>
        /// captureAreaScreenshot
        /// </summary>
        [EnumMember(Value = ("captureAreaScreenshot"))]
        CaptureAreaScreenshot,
        /// <summary>
        /// showDistances
        /// </summary>
        [EnumMember(Value = ("showDistances"))]
        ShowDistances,
        /// <summary>
        /// none
        /// </summary>
        [EnumMember(Value = ("none"))]
        None
    }

    /// <summary>
    /// Fired when the node should be inspected. This happens after call to `setInspectMode` or when
    /// user manually inspects an element.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class InspectNodeRequestedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Id of the node to inspect.
        /// </summary>
        [DataMember(Name = ("backendNodeId"), IsRequired = (true))]
        public int BackendNodeId
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when the node should be highlighted. This happens after call to `setInspectMode`.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class NodeHighlightRequestedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// NodeId
        /// </summary>
        [DataMember(Name = ("nodeId"), IsRequired = (true))]
        public int NodeId
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when user asks to capture screenshot of some area on the page.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class ScreenshotRequestedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Viewport to capture, in device independent pixels (dip).
        /// </summary>
        [DataMember(Name = ("viewport"), IsRequired = (true))]
        public CefSharp.DevTools.Page.Viewport Viewport
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.Page
{
    /// <summary>
    /// Indicates whether a frame has been identified as an ad.
    /// </summary>
    public enum AdFrameType
    {
        /// <summary>
        /// none
        /// </summary>
        [EnumMember(Value = ("none"))]
        None,
        /// <summary>
        /// child
        /// </summary>
        [EnumMember(Value = ("child"))]
        Child,
        /// <summary>
        /// root
        /// </summary>
        [EnumMember(Value = ("root"))]
        Root
    }

    /// <summary>
    /// AdFrameExplanation
    /// </summary>
    public enum AdFrameExplanation
    {
        /// <summary>
        /// ParentIsAd
        /// </summary>
        [EnumMember(Value = ("ParentIsAd"))]
        ParentIsAd,
        /// <summary>
        /// CreatedByAdScript
        /// </summary>
        [EnumMember(Value = ("CreatedByAdScript"))]
        CreatedByAdScript,
        /// <summary>
        /// MatchedBlockingRule
        /// </summary>
        [EnumMember(Value = ("MatchedBlockingRule"))]
        MatchedBlockingRule
    }

    /// <summary>
    /// Indicates whether a frame has been identified as an ad and why.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AdFrameStatus : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// AdFrameType
        /// </summary>
        public CefSharp.DevTools.Page.AdFrameType AdFrameType
        {
            get
            {
                return (CefSharp.DevTools.Page.AdFrameType)(StringToEnum(typeof(CefSharp.DevTools.Page.AdFrameType), adFrameType));
            }

            set
            {
                this.adFrameType = (EnumToString(value));
            }
        }

        /// <summary>
        /// AdFrameType
        /// </summary>
        [DataMember(Name = ("adFrameType"), IsRequired = (true))]
        internal string adFrameType
        {
            get;
            set;
        }

        /// <summary>
        /// Explanations
        /// </summary>
        public CefSharp.DevTools.Page.AdFrameExplanation[] Explanations
        {
            get
            {
                return (CefSharp.DevTools.Page.AdFrameExplanation[])(StringToEnum(typeof(CefSharp.DevTools.Page.AdFrameExplanation[]), explanations));
            }

            set
            {
                this.explanations = (EnumToString(value));
            }
        }

        /// <summary>
        /// Explanations
        /// </summary>
        [DataMember(Name = ("explanations"), IsRequired = (false))]
        internal string explanations
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Identifies the bottom-most script which caused the frame to be labelled
    /// as an ad.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AdScriptId : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Script Id of the bottom-most script which caused the frame to be labelled
        /// as an ad.
        /// </summary>
        [DataMember(Name = ("scriptId"), IsRequired = (true))]
        public string ScriptId
        {
            get;
            set;
        }

        /// <summary>
        /// Id of adScriptId&apos;s debugger.
        /// </summary>
        [DataMember(Name = ("debuggerId"), IsRequired = (true))]
        public string DebuggerId
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Indicates whether the frame is a secure context and why it is the case.
    /// </summary>
    public enum SecureContextType
    {
        /// <summary>
        /// Secure
        /// </summary>
        [EnumMember(Value = ("Secure"))]
        Secure,
        /// <summary>
        /// SecureLocalhost
        /// </summary>
        [EnumMember(Value = ("SecureLocalhost"))]
        SecureLocalhost,
        /// <summary>
        /// InsecureScheme
        /// </summary>
        [EnumMember(Value = ("InsecureScheme"))]
        InsecureScheme,
        /// <summary>
        /// InsecureAncestor
        /// </summary>
        [EnumMember(Value = ("InsecureAncestor"))]
        InsecureAncestor
    }

    /// <summary>
    /// Indicates whether the frame is cross-origin isolated and why it is the case.
    /// </summary>
    public enum CrossOriginIsolatedContextType
    {
        /// <summary>
        /// Isolated
        /// </summary>
        [EnumMember(Value = ("Isolated"))]
        Isolated,
        /// <summary>
        /// NotIsolated
        /// </summary>
        [EnumMember(Value = ("NotIsolated"))]
        NotIsolated,
        /// <summary>
        /// NotIsolatedFeatureDisabled
        /// </summary>
        [EnumMember(Value = ("NotIsolatedFeatureDisabled"))]
        NotIsolatedFeatureDisabled
    }

    /// <summary>
    /// GatedAPIFeatures
    /// </summary>
    public enum GatedAPIFeatures
    {
        /// <summary>
        /// SharedArrayBuffers
        /// </summary>
        [EnumMember(Value = ("SharedArrayBuffers"))]
        SharedArrayBuffers,
        /// <summary>
        /// SharedArrayBuffersTransferAllowed
        /// </summary>
        [EnumMember(Value = ("SharedArrayBuffersTransferAllowed"))]
        SharedArrayBuffersTransferAllowed,
        /// <summary>
        /// PerformanceMeasureMemory
        /// </summary>
        [EnumMember(Value = ("PerformanceMeasureMemory"))]
        PerformanceMeasureMemory,
        /// <summary>
        /// PerformanceProfile
        /// </summary>
        [EnumMember(Value = ("PerformanceProfile"))]
        PerformanceProfile
    }

    /// <summary>
    /// All Permissions Policy features. This enum should match the one defined
    /// in third_party/blink/renderer/core/permissions_policy/permissions_policy_features.json5.
    /// </summary>
    public enum PermissionsPolicyFeature
    {
        /// <summary>
        /// accelerometer
        /// </summary>
        [EnumMember(Value = ("accelerometer"))]
        Accelerometer,
        /// <summary>
        /// ambient-light-sensor
        /// </summary>
        [EnumMember(Value = ("ambient-light-sensor"))]
        AmbientLightSensor,
        /// <summary>
        /// attribution-reporting
        /// </summary>
        [EnumMember(Value = ("attribution-reporting"))]
        AttributionReporting,
        /// <summary>
        /// autoplay
        /// </summary>
        [EnumMember(Value = ("autoplay"))]
        Autoplay,
        /// <summary>
        /// bluetooth
        /// </summary>
        [EnumMember(Value = ("bluetooth"))]
        Bluetooth,
        /// <summary>
        /// browsing-topics
        /// </summary>
        [EnumMember(Value = ("browsing-topics"))]
        BrowsingTopics,
        /// <summary>
        /// camera
        /// </summary>
        [EnumMember(Value = ("camera"))]
        Camera,
        /// <summary>
        /// captured-surface-control
        /// </summary>
        [EnumMember(Value = ("captured-surface-control"))]
        CapturedSurfaceControl,
        /// <summary>
        /// ch-dpr
        /// </summary>
        [EnumMember(Value = ("ch-dpr"))]
        ChDpr,
        /// <summary>
        /// ch-device-memory
        /// </summary>
        [EnumMember(Value = ("ch-device-memory"))]
        ChDeviceMemory,
        /// <summary>
        /// ch-downlink
        /// </summary>
        [EnumMember(Value = ("ch-downlink"))]
        ChDownlink,
        /// <summary>
        /// ch-ect
        /// </summary>
        [EnumMember(Value = ("ch-ect"))]
        ChEct,
        /// <summary>
        /// ch-prefers-color-scheme
        /// </summary>
        [EnumMember(Value = ("ch-prefers-color-scheme"))]
        ChPrefersColorScheme,
        /// <summary>
        /// ch-prefers-reduced-motion
        /// </summary>
        [EnumMember(Value = ("ch-prefers-reduced-motion"))]
        ChPrefersReducedMotion,
        /// <summary>
        /// ch-prefers-reduced-transparency
        /// </summary>
        [EnumMember(Value = ("ch-prefers-reduced-transparency"))]
        ChPrefersReducedTransparency,
        /// <summary>
        /// ch-rtt
        /// </summary>
        [EnumMember(Value = ("ch-rtt"))]
        ChRtt,
        /// <summary>
        /// ch-save-data
        /// </summary>
        [EnumMember(Value = ("ch-save-data"))]
        ChSaveData,
        /// <summary>
        /// ch-ua
        /// </summary>
        [EnumMember(Value = ("ch-ua"))]
        ChUa,
        /// <summary>
        /// ch-ua-arch
        /// </summary>
        [EnumMember(Value = ("ch-ua-arch"))]
        ChUaArch,
        /// <summary>
        /// ch-ua-bitness
        /// </summary>
        [EnumMember(Value = ("ch-ua-bitness"))]
        ChUaBitness,
        /// <summary>
        /// ch-ua-platform
        /// </summary>
        [EnumMember(Value = ("ch-ua-platform"))]
        ChUaPlatform,
        /// <summary>
        /// ch-ua-model
        /// </summary>
        [EnumMember(Value = ("ch-ua-model"))]
        ChUaModel,
        /// <summary>
        /// ch-ua-mobile
        /// </summary>
        [EnumMember(Value = ("ch-ua-mobile"))]
        ChUaMobile,
        /// <summary>
        /// ch-ua-form-factor
        /// </summary>
        [EnumMember(Value = ("ch-ua-form-factor"))]
        ChUaFormFactor,
        /// <summary>
        /// ch-ua-full-version
        /// </summary>
        [EnumMember(Value = ("ch-ua-full-version"))]
        ChUaFullVersion,
        /// <summary>
        /// ch-ua-full-version-list
        /// </summary>
        [EnumMember(Value = ("ch-ua-full-version-list"))]
        ChUaFullVersionList,
        /// <summary>
        /// ch-ua-platform-version
        /// </summary>
        [EnumMember(Value = ("ch-ua-platform-version"))]
        ChUaPlatformVersion,
        /// <summary>
        /// ch-ua-wow64
        /// </summary>
        [EnumMember(Value = ("ch-ua-wow64"))]
        ChUaWow64,
        /// <summary>
        /// ch-viewport-height
        /// </summary>
        [EnumMember(Value = ("ch-viewport-height"))]
        ChViewportHeight,
        /// <summary>
        /// ch-viewport-width
        /// </summary>
        [EnumMember(Value = ("ch-viewport-width"))]
        ChViewportWidth,
        /// <summary>
        /// ch-width
        /// </summary>
        [EnumMember(Value = ("ch-width"))]
        ChWidth,
        /// <summary>
        /// clipboard-read
        /// </summary>
        [EnumMember(Value = ("clipboard-read"))]
        ClipboardRead,
        /// <summary>
        /// clipboard-write
        /// </summary>
        [EnumMember(Value = ("clipboard-write"))]
        ClipboardWrite,
        /// <summary>
        /// compute-pressure
        /// </summary>
        [EnumMember(Value = ("compute-pressure"))]
        ComputePressure,
        /// <summary>
        /// cross-origin-isolated
        /// </summary>
        [EnumMember(Value = ("cross-origin-isolated"))]
        CrossOriginIsolated,
        /// <summary>
        /// direct-sockets
        /// </summary>
        [EnumMember(Value = ("direct-sockets"))]
        DirectSockets,
        /// <summary>
        /// display-capture
        /// </summary>
        [EnumMember(Value = ("display-capture"))]
        DisplayCapture,
        /// <summary>
        /// document-domain
        /// </summary>
        [EnumMember(Value = ("document-domain"))]
        DocumentDomain,
        /// <summary>
        /// encrypted-media
        /// </summary>
        [EnumMember(Value = ("encrypted-media"))]
        EncryptedMedia,
        /// <summary>
        /// execution-while-out-of-viewport
        /// </summary>
        [EnumMember(Value = ("execution-while-out-of-viewport"))]
        ExecutionWhileOutOfViewport,
        /// <summary>
        /// execution-while-not-rendered
        /// </summary>
        [EnumMember(Value = ("execution-while-not-rendered"))]
        ExecutionWhileNotRendered,
        /// <summary>
        /// focus-without-user-activation
        /// </summary>
        [EnumMember(Value = ("focus-without-user-activation"))]
        FocusWithoutUserActivation,
        /// <summary>
        /// fullscreen
        /// </summary>
        [EnumMember(Value = ("fullscreen"))]
        Fullscreen,
        /// <summary>
        /// frobulate
        /// </summary>
        [EnumMember(Value = ("frobulate"))]
        Frobulate,
        /// <summary>
        /// gamepad
        /// </summary>
        [EnumMember(Value = ("gamepad"))]
        Gamepad,
        /// <summary>
        /// geolocation
        /// </summary>
        [EnumMember(Value = ("geolocation"))]
        Geolocation,
        /// <summary>
        /// gyroscope
        /// </summary>
        [EnumMember(Value = ("gyroscope"))]
        Gyroscope,
        /// <summary>
        /// hid
        /// </summary>
        [EnumMember(Value = ("hid"))]
        Hid,
        /// <summary>
        /// identity-credentials-get
        /// </summary>
        [EnumMember(Value = ("identity-credentials-get"))]
        IdentityCredentialsGet,
        /// <summary>
        /// idle-detection
        /// </summary>
        [EnumMember(Value = ("idle-detection"))]
        IdleDetection,
        /// <summary>
        /// interest-cohort
        /// </summary>
        [EnumMember(Value = ("interest-cohort"))]
        InterestCohort,
        /// <summary>
        /// join-ad-interest-group
        /// </summary>
        [EnumMember(Value = ("join-ad-interest-group"))]
        JoinAdInterestGroup,
        /// <summary>
        /// keyboard-map
        /// </summary>
        [EnumMember(Value = ("keyboard-map"))]
        KeyboardMap,
        /// <summary>
        /// local-fonts
        /// </summary>
        [EnumMember(Value = ("local-fonts"))]
        LocalFonts,
        /// <summary>
        /// magnetometer
        /// </summary>
        [EnumMember(Value = ("magnetometer"))]
        Magnetometer,
        /// <summary>
        /// microphone
        /// </summary>
        [EnumMember(Value = ("microphone"))]
        Microphone,
        /// <summary>
        /// midi
        /// </summary>
        [EnumMember(Value = ("midi"))]
        Midi,
        /// <summary>
        /// otp-credentials
        /// </summary>
        [EnumMember(Value = ("otp-credentials"))]
        OtpCredentials,
        /// <summary>
        /// payment
        /// </summary>
        [EnumMember(Value = ("payment"))]
        Payment,
        /// <summary>
        /// picture-in-picture
        /// </summary>
        [EnumMember(Value = ("picture-in-picture"))]
        PictureInPicture,
        /// <summary>
        /// private-aggregation
        /// </summary>
        [EnumMember(Value = ("private-aggregation"))]
        PrivateAggregation,
        /// <summary>
        /// private-state-token-issuance
        /// </summary>
        [EnumMember(Value = ("private-state-token-issuance"))]
        PrivateStateTokenIssuance,
        /// <summary>
        /// private-state-token-redemption
        /// </summary>
        [EnumMember(Value = ("private-state-token-redemption"))]
        PrivateStateTokenRedemption,
        /// <summary>
        /// publickey-credentials-create
        /// </summary>
        [EnumMember(Value = ("publickey-credentials-create"))]
        PublickeyCredentialsCreate,
        /// <summary>
        /// publickey-credentials-get
        /// </summary>
        [EnumMember(Value = ("publickey-credentials-get"))]
        PublickeyCredentialsGet,
        /// <summary>
        /// run-ad-auction
        /// </summary>
        [EnumMember(Value = ("run-ad-auction"))]
        RunAdAuction,
        /// <summary>
        /// screen-wake-lock
        /// </summary>
        [EnumMember(Value = ("screen-wake-lock"))]
        ScreenWakeLock,
        /// <summary>
        /// serial
        /// </summary>
        [EnumMember(Value = ("serial"))]
        Serial,
        /// <summary>
        /// shared-autofill
        /// </summary>
        [EnumMember(Value = ("shared-autofill"))]
        SharedAutofill,
        /// <summary>
        /// shared-storage
        /// </summary>
        [EnumMember(Value = ("shared-storage"))]
        SharedStorage,
        /// <summary>
        /// shared-storage-select-url
        /// </summary>
        [EnumMember(Value = ("shared-storage-select-url"))]
        SharedStorageSelectUrl,
        /// <summary>
        /// smart-card
        /// </summary>
        [EnumMember(Value = ("smart-card"))]
        SmartCard,
        /// <summary>
        /// speaker-selection
        /// </summary>
        [EnumMember(Value = ("speaker-selection"))]
        SpeakerSelection,
        /// <summary>
        /// storage-access
        /// </summary>
        [EnumMember(Value = ("storage-access"))]
        StorageAccess,
        /// <summary>
        /// sub-apps
        /// </summary>
        [EnumMember(Value = ("sub-apps"))]
        SubApps,
        /// <summary>
        /// sync-xhr
        /// </summary>
        [EnumMember(Value = ("sync-xhr"))]
        SyncXhr,
        /// <summary>
        /// unload
        /// </summary>
        [EnumMember(Value = ("unload"))]
        Unload,
        /// <summary>
        /// usb
        /// </summary>
        [EnumMember(Value = ("usb"))]
        Usb,
        /// <summary>
        /// usb-unrestricted
        /// </summary>
        [EnumMember(Value = ("usb-unrestricted"))]
        UsbUnrestricted,
        /// <summary>
        /// vertical-scroll
        /// </summary>
        [EnumMember(Value = ("vertical-scroll"))]
        VerticalScroll,
        /// <summary>
        /// web-printing
        /// </summary>
        [EnumMember(Value = ("web-printing"))]
        WebPrinting,
        /// <summary>
        /// web-share
        /// </summary>
        [EnumMember(Value = ("web-share"))]
        WebShare,
        /// <summary>
        /// window-management
        /// </summary>
        [EnumMember(Value = ("window-management"))]
        WindowManagement,
        /// <summary>
        /// window-placement
        /// </summary>
        [EnumMember(Value = ("window-placement"))]
        WindowPlacement,
        /// <summary>
        /// xr-spatial-tracking
        /// </summary>
        [EnumMember(Value = ("xr-spatial-tracking"))]
        XrSpatialTracking
    }

    /// <summary>
    /// Reason for a permissions policy feature to be disabled.
    /// </summary>
    public enum PermissionsPolicyBlockReason
    {
        /// <summary>
        /// Header
        /// </summary>
        [EnumMember(Value = ("Header"))]
        Header,
        /// <summary>
        /// IframeAttribute
        /// </summary>
        [EnumMember(Value = ("IframeAttribute"))]
        IframeAttribute,
        /// <summary>
        /// InFencedFrameTree
        /// </summary>
        [EnumMember(Value = ("InFencedFrameTree"))]
        InFencedFrameTree,
        /// <summary>
        /// InIsolatedApp
        /// </summary>
        [EnumMember(Value = ("InIsolatedApp"))]
        InIsolatedApp
    }

    /// <summary>
    /// PermissionsPolicyBlockLocator
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class PermissionsPolicyBlockLocator : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// FrameId
        /// </summary>
        [DataMember(Name = ("frameId"), IsRequired = (true))]
        public string FrameId
        {
            get;
            set;
        }

        /// <summary>
        /// BlockReason
        /// </summary>
        public CefSharp.DevTools.Page.PermissionsPolicyBlockReason BlockReason
        {
            get
            {
                return (CefSharp.DevTools.Page.PermissionsPolicyBlockReason)(StringToEnum(typeof(CefSharp.DevTools.Page.PermissionsPolicyBlockReason), blockReason));
            }

            set
            {
                this.blockReason = (EnumToString(value));
            }
        }

        /// <summary>
        /// BlockReason
        /// </summary>
        [DataMember(Name = ("blockReason"), IsRequired = (true))]
        internal string blockReason
        {
            get;
            set;
        }
    }

    /// <summary>
    /// PermissionsPolicyFeatureState
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class PermissionsPolicyFeatureState : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Feature
        /// </summary>
        public CefSharp.DevTools.Page.PermissionsPolicyFeature Feature
        {
            get
            {
                return (CefSharp.DevTools.Page.PermissionsPolicyFeature)(StringToEnum(typeof(CefSharp.DevTools.Page.PermissionsPolicyFeature), feature));
            }

            set
            {
                this.feature = (EnumToString(value));
            }
        }

        /// <summary>
        /// Feature
        /// </summary>
        [DataMember(Name = ("feature"), IsRequired = (true))]
        internal string feature
        {
            get;
            set;
        }

        /// <summary>
        /// Allowed
        /// </summary>
        [DataMember(Name = ("allowed"), IsRequired = (true))]
        public bool Allowed
        {
            get;
            set;
        }

        /// <summary>
        /// Locator
        /// </summary>
        [DataMember(Name = ("locator"), IsRequired = (false))]
        public CefSharp.DevTools.Page.PermissionsPolicyBlockLocator Locator
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Origin Trial(https://www.chromium.org/blink/origin-trials) support.
    /// Status for an Origin Trial token.
    /// </summary>
    public enum OriginTrialTokenStatus
    {
        /// <summary>
        /// Success
        /// </summary>
        [EnumMember(Value = ("Success"))]
        Success,
        /// <summary>
        /// NotSupported
        /// </summary>
        [EnumMember(Value = ("NotSupported"))]
        NotSupported,
        /// <summary>
        /// Insecure
        /// </summary>
        [EnumMember(Value = ("Insecure"))]
        Insecure,
        /// <summary>
        /// Expired
        /// </summary>
        [EnumMember(Value = ("Expired"))]
        Expired,
        /// <summary>
        /// WrongOrigin
        /// </summary>
        [EnumMember(Value = ("WrongOrigin"))]
        WrongOrigin,
        /// <summary>
        /// InvalidSignature
        /// </summary>
        [EnumMember(Value = ("InvalidSignature"))]
        InvalidSignature,
        /// <summary>
        /// Malformed
        /// </summary>
        [EnumMember(Value = ("Malformed"))]
        Malformed,
        /// <summary>
        /// WrongVersion
        /// </summary>
        [EnumMember(Value = ("WrongVersion"))]
        WrongVersion,
        /// <summary>
        /// FeatureDisabled
        /// </summary>
        [EnumMember(Value = ("FeatureDisabled"))]
        FeatureDisabled,
        /// <summary>
        /// TokenDisabled
        /// </summary>
        [EnumMember(Value = ("TokenDisabled"))]
        TokenDisabled,
        /// <summary>
        /// FeatureDisabledForUser
        /// </summary>
        [EnumMember(Value = ("FeatureDisabledForUser"))]
        FeatureDisabledForUser,
        /// <summary>
        /// UnknownTrial
        /// </summary>
        [EnumMember(Value = ("UnknownTrial"))]
        UnknownTrial
    }

    /// <summary>
    /// Status for an Origin Trial.
    /// </summary>
    public enum OriginTrialStatus
    {
        /// <summary>
        /// Enabled
        /// </summary>
        [EnumMember(Value = ("Enabled"))]
        Enabled,
        /// <summary>
        /// ValidTokenNotProvided
        /// </summary>
        [EnumMember(Value = ("ValidTokenNotProvided"))]
        ValidTokenNotProvided,
        /// <summary>
        /// OSNotSupported
        /// </summary>
        [EnumMember(Value = ("OSNotSupported"))]
        OSNotSupported,
        /// <summary>
        /// TrialNotAllowed
        /// </summary>
        [EnumMember(Value = ("TrialNotAllowed"))]
        TrialNotAllowed
    }

    /// <summary>
    /// OriginTrialUsageRestriction
    /// </summary>
    public enum OriginTrialUsageRestriction
    {
        /// <summary>
        /// None
        /// </summary>
        [EnumMember(Value = ("None"))]
        None,
        /// <summary>
        /// Subset
        /// </summary>
        [EnumMember(Value = ("Subset"))]
        Subset
    }

    /// <summary>
    /// OriginTrialToken
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class OriginTrialToken : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Origin
        /// </summary>
        [DataMember(Name = ("origin"), IsRequired = (true))]
        public string Origin
        {
            get;
            set;
        }

        /// <summary>
        /// MatchSubDomains
        /// </summary>
        [DataMember(Name = ("matchSubDomains"), IsRequired = (true))]
        public bool MatchSubDomains
        {
            get;
            set;
        }

        /// <summary>
        /// TrialName
        /// </summary>
        [DataMember(Name = ("trialName"), IsRequired = (true))]
        public string TrialName
        {
            get;
            set;
        }

        /// <summary>
        /// ExpiryTime
        /// </summary>
        [DataMember(Name = ("expiryTime"), IsRequired = (true))]
        public double ExpiryTime
        {
            get;
            set;
        }

        /// <summary>
        /// IsThirdParty
        /// </summary>
        [DataMember(Name = ("isThirdParty"), IsRequired = (true))]
        public bool IsThirdParty
        {
            get;
            set;
        }

        /// <summary>
        /// UsageRestriction
        /// </summary>
        public CefSharp.DevTools.Page.OriginTrialUsageRestriction UsageRestriction
        {
            get
            {
                return (CefSharp.DevTools.Page.OriginTrialUsageRestriction)(StringToEnum(typeof(CefSharp.DevTools.Page.OriginTrialUsageRestriction), usageRestriction));
            }

            set
            {
                this.usageRestriction = (EnumToString(value));
            }
        }

        /// <summary>
        /// UsageRestriction
        /// </summary>
        [DataMember(Name = ("usageRestriction"), IsRequired = (true))]
        internal string usageRestriction
        {
            get;
            set;
        }
    }

    /// <summary>
    /// OriginTrialTokenWithStatus
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class OriginTrialTokenWithStatus : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// RawTokenText
        /// </summary>
        [DataMember(Name = ("rawTokenText"), IsRequired = (true))]
        public string RawTokenText
        {
            get;
            set;
        }

        /// <summary>
        /// `parsedToken` is present only when the token is extractable and
        /// parsable.
        /// </summary>
        [DataMember(Name = ("parsedToken"), IsRequired = (false))]
        public CefSharp.DevTools.Page.OriginTrialToken ParsedToken
        {
            get;
            set;
        }

        /// <summary>
        /// Status
        /// </summary>
        public CefSharp.DevTools.Page.OriginTrialTokenStatus Status
        {
            get
            {
                return (CefSharp.DevTools.Page.OriginTrialTokenStatus)(StringToEnum(typeof(CefSharp.DevTools.Page.OriginTrialTokenStatus), status));
            }

            set
            {
                this.status = (EnumToString(value));
            }
        }

        /// <summary>
        /// Status
        /// </summary>
        [DataMember(Name = ("status"), IsRequired = (true))]
        internal string status
        {
            get;
            set;
        }
    }

    /// <summary>
    /// OriginTrial
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class OriginTrial : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// TrialName
        /// </summary>
        [DataMember(Name = ("trialName"), IsRequired = (true))]
        public string TrialName
        {
            get;
            set;
        }

        /// <summary>
        /// Status
        /// </summary>
        public CefSharp.DevTools.Page.OriginTrialStatus Status
        {
            get
            {
                return (CefSharp.DevTools.Page.OriginTrialStatus)(StringToEnum(typeof(CefSharp.DevTools.Page.OriginTrialStatus), status));
            }

            set
            {
                this.status = (EnumToString(value));
            }
        }

        /// <summary>
        /// Status
        /// </summary>
        [DataMember(Name = ("status"), IsRequired = (true))]
        internal string status
        {
            get;
            set;
        }

        /// <summary>
        /// TokensWithStatus
        /// </summary>
        [DataMember(Name = ("tokensWithStatus"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Page.OriginTrialTokenWithStatus> TokensWithStatus
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Information about the Frame on the page.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class Frame : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Frame unique identifier.
        /// </summary>
        [DataMember(Name = ("id"), IsRequired = (true))]
        public string Id
        {
            get;
            set;
        }

        /// <summary>
        /// Parent frame identifier.
        /// </summary>
        [DataMember(Name = ("parentId"), IsRequired = (false))]
        public string ParentId
        {
            get;
            set;
        }

        /// <summary>
        /// Identifier of the loader associated with this frame.
        /// </summary>
        [DataMember(Name = ("loaderId"), IsRequired = (true))]
        public string LoaderId
        {
            get;
            set;
        }

        /// <summary>
        /// Frame&apos;s name as specified in the tag.
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (false))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// Frame document&apos;s URL without fragment.
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (true))]
        public string Url
        {
            get;
            set;
        }

        /// <summary>
        /// Frame document&apos;s URL fragment including the &apos;#&apos;.
        /// </summary>
        [DataMember(Name = ("urlFragment"), IsRequired = (false))]
        public string UrlFragment
        {
            get;
            set;
        }

        /// <summary>
        /// Frame document&apos;s registered domain, taking the public suffixes list into account.
        /// Extracted from the Frame&apos;s url.
        /// Example URLs: http://www.google.com/file.html -&gt; &quot;google.com&quot;
        ///               http://a.b.co.uk/file.html      -&gt; &quot;b.co.uk&quot;
        /// </summary>
        [DataMember(Name = ("domainAndRegistry"), IsRequired = (true))]
        public string DomainAndRegistry
        {
            get;
            set;
        }

        /// <summary>
        /// Frame document&apos;s security origin.
        /// </summary>
        [DataMember(Name = ("securityOrigin"), IsRequired = (true))]
        public string SecurityOrigin
        {
            get;
            set;
        }

        /// <summary>
        /// Frame document&apos;s mimeType as determined by the browser.
        /// </summary>
        [DataMember(Name = ("mimeType"), IsRequired = (true))]
        public string MimeType
        {
            get;
            set;
        }

        /// <summary>
        /// If the frame failed to load, this contains the URL that could not be loaded. Note that unlike url above, this URL may contain a fragment.
        /// </summary>
        [DataMember(Name = ("unreachableUrl"), IsRequired = (false))]
        public string UnreachableUrl
        {
            get;
            set;
        }

        /// <summary>
        /// Indicates whether this frame was tagged as an ad and why.
        /// </summary>
        [DataMember(Name = ("adFrameStatus"), IsRequired = (false))]
        public CefSharp.DevTools.Page.AdFrameStatus AdFrameStatus
        {
            get;
            set;
        }

        /// <summary>
        /// Indicates whether the main document is a secure context and explains why that is the case.
        /// </summary>
        public CefSharp.DevTools.Page.SecureContextType SecureContextType
        {
            get
            {
                return (CefSharp.DevTools.Page.SecureContextType)(StringToEnum(typeof(CefSharp.DevTools.Page.SecureContextType), secureContextType));
            }

            set
            {
                this.secureContextType = (EnumToString(value));
            }
        }

        /// <summary>
        /// Indicates whether the main document is a secure context and explains why that is the case.
        /// </summary>
        [DataMember(Name = ("secureContextType"), IsRequired = (true))]
        internal string secureContextType
        {
            get;
            set;
        }

        /// <summary>
        /// Indicates whether this is a cross origin isolated context.
        /// </summary>
        public CefSharp.DevTools.Page.CrossOriginIsolatedContextType CrossOriginIsolatedContextType
        {
            get
            {
                return (CefSharp.DevTools.Page.CrossOriginIsolatedContextType)(StringToEnum(typeof(CefSharp.DevTools.Page.CrossOriginIsolatedContextType), crossOriginIsolatedContextType));
            }

            set
            {
                this.crossOriginIsolatedContextType = (EnumToString(value));
            }
        }

        /// <summary>
        /// Indicates whether this is a cross origin isolated context.
        /// </summary>
        [DataMember(Name = ("crossOriginIsolatedContextType"), IsRequired = (true))]
        internal string crossOriginIsolatedContextType
        {
            get;
            set;
        }

        /// <summary>
        /// Indicated which gated APIs / features are available.
        /// </summary>
        public CefSharp.DevTools.Page.GatedAPIFeatures[] GatedAPIFeatures
        {
            get
            {
                return (CefSharp.DevTools.Page.GatedAPIFeatures[])(StringToEnum(typeof(CefSharp.DevTools.Page.GatedAPIFeatures[]), gatedAPIFeatures));
            }

            set
            {
                this.gatedAPIFeatures = (EnumToString(value));
            }
        }

        /// <summary>
        /// Indicated which gated APIs / features are available.
        /// </summary>
        [DataMember(Name = ("gatedAPIFeatures"), IsRequired = (true))]
        internal string gatedAPIFeatures
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Information about the Resource on the page.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class FrameResource : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Resource URL.
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (true))]
        public string Url
        {
            get;
            set;
        }

        /// <summary>
        /// Type of this resource.
        /// </summary>
        public CefSharp.DevTools.Network.ResourceType Type
        {
            get
            {
                return (CefSharp.DevTools.Network.ResourceType)(StringToEnum(typeof(CefSharp.DevTools.Network.ResourceType), type));
            }

            set
            {
                this.type = (EnumToString(value));
            }
        }

        /// <summary>
        /// Type of this resource.
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (true))]
        internal string type
        {
            get;
            set;
        }

        /// <summary>
        /// Resource mimeType as determined by the browser.
        /// </summary>
        [DataMember(Name = ("mimeType"), IsRequired = (true))]
        public string MimeType
        {
            get;
            set;
        }

        /// <summary>
        /// last-modified timestamp as reported by server.
        /// </summary>
        [DataMember(Name = ("lastModified"), IsRequired = (false))]
        public double? LastModified
        {
            get;
            set;
        }

        /// <summary>
        /// Resource content size.
        /// </summary>
        [DataMember(Name = ("contentSize"), IsRequired = (false))]
        public double? ContentSize
        {
            get;
            set;
        }

        /// <summary>
        /// True if the resource failed to load.
        /// </summary>
        [DataMember(Name = ("failed"), IsRequired = (false))]
        public bool? Failed
        {
            get;
            set;
        }

        /// <summary>
        /// True if the resource was canceled during loading.
        /// </summary>
        [DataMember(Name = ("canceled"), IsRequired = (false))]
        public bool? Canceled
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Information about the Frame hierarchy along with their cached resources.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class FrameResourceTree : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Frame information for this tree item.
        /// </summary>
        [DataMember(Name = ("frame"), IsRequired = (true))]
        public CefSharp.DevTools.Page.Frame Frame
        {
            get;
            set;
        }

        /// <summary>
        /// Child frames.
        /// </summary>
        [DataMember(Name = ("childFrames"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Page.FrameResourceTree> ChildFrames
        {
            get;
            set;
        }

        /// <summary>
        /// Information about frame resources.
        /// </summary>
        [DataMember(Name = ("resources"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Page.FrameResource> Resources
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Information about the Frame hierarchy.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class FrameTree : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Frame information for this tree item.
        /// </summary>
        [DataMember(Name = ("frame"), IsRequired = (true))]
        public CefSharp.DevTools.Page.Frame Frame
        {
            get;
            set;
        }

        /// <summary>
        /// Child frames.
        /// </summary>
        [DataMember(Name = ("childFrames"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Page.FrameTree> ChildFrames
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Transition type.
    /// </summary>
    public enum TransitionType
    {
        /// <summary>
        /// link
        /// </summary>
        [EnumMember(Value = ("link"))]
        Link,
        /// <summary>
        /// typed
        /// </summary>
        [EnumMember(Value = ("typed"))]
        Typed,
        /// <summary>
        /// address_bar
        /// </summary>
        [EnumMember(Value = ("address_bar"))]
        AddressBar,
        /// <summary>
        /// auto_bookmark
        /// </summary>
        [EnumMember(Value = ("auto_bookmark"))]
        AutoBookmark,
        /// <summary>
        /// auto_subframe
        /// </summary>
        [EnumMember(Value = ("auto_subframe"))]
        AutoSubframe,
        /// <summary>
        /// manual_subframe
        /// </summary>
        [EnumMember(Value = ("manual_subframe"))]
        ManualSubframe,
        /// <summary>
        /// generated
        /// </summary>
        [EnumMember(Value = ("generated"))]
        Generated,
        /// <summary>
        /// auto_toplevel
        /// </summary>
        [EnumMember(Value = ("auto_toplevel"))]
        AutoToplevel,
        /// <summary>
        /// form_submit
        /// </summary>
        [EnumMember(Value = ("form_submit"))]
        FormSubmit,
        /// <summary>
        /// reload
        /// </summary>
        [EnumMember(Value = ("reload"))]
        Reload,
        /// <summary>
        /// keyword
        /// </summary>
        [EnumMember(Value = ("keyword"))]
        Keyword,
        /// <summary>
        /// keyword_generated
        /// </summary>
        [EnumMember(Value = ("keyword_generated"))]
        KeywordGenerated,
        /// <summary>
        /// other
        /// </summary>
        [EnumMember(Value = ("other"))]
        Other
    }

    /// <summary>
    /// Navigation history entry.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class NavigationEntry : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Unique id of the navigation history entry.
        /// </summary>
        [DataMember(Name = ("id"), IsRequired = (true))]
        public int Id
        {
            get;
            set;
        }

        /// <summary>
        /// URL of the navigation history entry.
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (true))]
        public string Url
        {
            get;
            set;
        }

        /// <summary>
        /// URL that the user typed in the url bar.
        /// </summary>
        [DataMember(Name = ("userTypedURL"), IsRequired = (true))]
        public string UserTypedURL
        {
            get;
            set;
        }

        /// <summary>
        /// Title of the navigation history entry.
        /// </summary>
        [DataMember(Name = ("title"), IsRequired = (true))]
        public string Title
        {
            get;
            set;
        }

        /// <summary>
        /// Transition type.
        /// </summary>
        public CefSharp.DevTools.Page.TransitionType TransitionType
        {
            get
            {
                return (CefSharp.DevTools.Page.TransitionType)(StringToEnum(typeof(CefSharp.DevTools.Page.TransitionType), transitionType));
            }

            set
            {
                this.transitionType = (EnumToString(value));
            }
        }

        /// <summary>
        /// Transition type.
        /// </summary>
        [DataMember(Name = ("transitionType"), IsRequired = (true))]
        internal string transitionType
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Screencast frame metadata.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ScreencastFrameMetadata : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Top offset in DIP.
        /// </summary>
        [DataMember(Name = ("offsetTop"), IsRequired = (true))]
        public double OffsetTop
        {
            get;
            set;
        }

        /// <summary>
        /// Page scale factor.
        /// </summary>
        [DataMember(Name = ("pageScaleFactor"), IsRequired = (true))]
        public double PageScaleFactor
        {
            get;
            set;
        }

        /// <summary>
        /// Device screen width in DIP.
        /// </summary>
        [DataMember(Name = ("deviceWidth"), IsRequired = (true))]
        public double DeviceWidth
        {
            get;
            set;
        }

        /// <summary>
        /// Device screen height in DIP.
        /// </summary>
        [DataMember(Name = ("deviceHeight"), IsRequired = (true))]
        public double DeviceHeight
        {
            get;
            set;
        }

        /// <summary>
        /// Position of horizontal scroll in CSS pixels.
        /// </summary>
        [DataMember(Name = ("scrollOffsetX"), IsRequired = (true))]
        public double ScrollOffsetX
        {
            get;
            set;
        }

        /// <summary>
        /// Position of vertical scroll in CSS pixels.
        /// </summary>
        [DataMember(Name = ("scrollOffsetY"), IsRequired = (true))]
        public double ScrollOffsetY
        {
            get;
            set;
        }

        /// <summary>
        /// Frame swap timestamp.
        /// </summary>
        [DataMember(Name = ("timestamp"), IsRequired = (false))]
        public double? Timestamp
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Javascript dialog type.
    /// </summary>
    public enum DialogType
    {
        /// <summary>
        /// alert
        /// </summary>
        [EnumMember(Value = ("alert"))]
        Alert,
        /// <summary>
        /// confirm
        /// </summary>
        [EnumMember(Value = ("confirm"))]
        Confirm,
        /// <summary>
        /// prompt
        /// </summary>
        [EnumMember(Value = ("prompt"))]
        Prompt,
        /// <summary>
        /// beforeunload
        /// </summary>
        [EnumMember(Value = ("beforeunload"))]
        Beforeunload
    }

    /// <summary>
    /// Error while paring app manifest.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AppManifestError : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Error message.
        /// </summary>
        [DataMember(Name = ("message"), IsRequired = (true))]
        public string Message
        {
            get;
            set;
        }

        /// <summary>
        /// If critical, this is a non-recoverable parse error.
        /// </summary>
        [DataMember(Name = ("critical"), IsRequired = (true))]
        public int Critical
        {
            get;
            set;
        }

        /// <summary>
        /// Error line.
        /// </summary>
        [DataMember(Name = ("line"), IsRequired = (true))]
        public int Line
        {
            get;
            set;
        }

        /// <summary>
        /// Error column.
        /// </summary>
        [DataMember(Name = ("column"), IsRequired = (true))]
        public int Column
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Parsed app manifest properties.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AppManifestParsedProperties : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Computed scope value
        /// </summary>
        [DataMember(Name = ("scope"), IsRequired = (true))]
        public string Scope
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Layout viewport position and dimensions.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class LayoutViewport : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Horizontal offset relative to the document (CSS pixels).
        /// </summary>
        [DataMember(Name = ("pageX"), IsRequired = (true))]
        public int PageX
        {
            get;
            set;
        }

        /// <summary>
        /// Vertical offset relative to the document (CSS pixels).
        /// </summary>
        [DataMember(Name = ("pageY"), IsRequired = (true))]
        public int PageY
        {
            get;
            set;
        }

        /// <summary>
        /// Width (CSS pixels), excludes scrollbar if present.
        /// </summary>
        [DataMember(Name = ("clientWidth"), IsRequired = (true))]
        public int ClientWidth
        {
            get;
            set;
        }

        /// <summary>
        /// Height (CSS pixels), excludes scrollbar if present.
        /// </summary>
        [DataMember(Name = ("clientHeight"), IsRequired = (true))]
        public int ClientHeight
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Visual viewport position, dimensions, and scale.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class VisualViewport : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Horizontal offset relative to the layout viewport (CSS pixels).
        /// </summary>
        [DataMember(Name = ("offsetX"), IsRequired = (true))]
        public double OffsetX
        {
            get;
            set;
        }

        /// <summary>
        /// Vertical offset relative to the layout viewport (CSS pixels).
        /// </summary>
        [DataMember(Name = ("offsetY"), IsRequired = (true))]
        public double OffsetY
        {
            get;
            set;
        }

        /// <summary>
        /// Horizontal offset relative to the document (CSS pixels).
        /// </summary>
        [DataMember(Name = ("pageX"), IsRequired = (true))]
        public double PageX
        {
            get;
            set;
        }

        /// <summary>
        /// Vertical offset relative to the document (CSS pixels).
        /// </summary>
        [DataMember(Name = ("pageY"), IsRequired = (true))]
        public double PageY
        {
            get;
            set;
        }

        /// <summary>
        /// Width (CSS pixels), excludes scrollbar if present.
        /// </summary>
        [DataMember(Name = ("clientWidth"), IsRequired = (true))]
        public double ClientWidth
        {
            get;
            set;
        }

        /// <summary>
        /// Height (CSS pixels), excludes scrollbar if present.
        /// </summary>
        [DataMember(Name = ("clientHeight"), IsRequired = (true))]
        public double ClientHeight
        {
            get;
            set;
        }

        /// <summary>
        /// Scale relative to the ideal viewport (size at width=device-width).
        /// </summary>
        [DataMember(Name = ("scale"), IsRequired = (true))]
        public double Scale
        {
            get;
            set;
        }

        /// <summary>
        /// Page zoom factor (CSS to device independent pixels ratio).
        /// </summary>
        [DataMember(Name = ("zoom"), IsRequired = (false))]
        public double? Zoom
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Viewport for capturing screenshot.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class Viewport : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// X offset in device independent pixels (dip).
        /// </summary>
        [DataMember(Name = ("x"), IsRequired = (true))]
        public double X
        {
            get;
            set;
        }

        /// <summary>
        /// Y offset in device independent pixels (dip).
        /// </summary>
        [DataMember(Name = ("y"), IsRequired = (true))]
        public double Y
        {
            get;
            set;
        }

        /// <summary>
        /// Rectangle width in device independent pixels (dip).
        /// </summary>
        [DataMember(Name = ("width"), IsRequired = (true))]
        public double Width
        {
            get;
            set;
        }

        /// <summary>
        /// Rectangle height in device independent pixels (dip).
        /// </summary>
        [DataMember(Name = ("height"), IsRequired = (true))]
        public double Height
        {
            get;
            set;
        }

        /// <summary>
        /// Page scale factor.
        /// </summary>
        [DataMember(Name = ("scale"), IsRequired = (true))]
        public double Scale
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Generic font families collection.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class FontFamilies : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The standard font-family.
        /// </summary>
        [DataMember(Name = ("standard"), IsRequired = (false))]
        public string Standard
        {
            get;
            set;
        }

        /// <summary>
        /// The fixed font-family.
        /// </summary>
        [DataMember(Name = ("fixed"), IsRequired = (false))]
        public string Fixed
        {
            get;
            set;
        }

        /// <summary>
        /// The serif font-family.
        /// </summary>
        [DataMember(Name = ("serif"), IsRequired = (false))]
        public string Serif
        {
            get;
            set;
        }

        /// <summary>
        /// The sansSerif font-family.
        /// </summary>
        [DataMember(Name = ("sansSerif"), IsRequired = (false))]
        public string SansSerif
        {
            get;
            set;
        }

        /// <summary>
        /// The cursive font-family.
        /// </summary>
        [DataMember(Name = ("cursive"), IsRequired = (false))]
        public string Cursive
        {
            get;
            set;
        }

        /// <summary>
        /// The fantasy font-family.
        /// </summary>
        [DataMember(Name = ("fantasy"), IsRequired = (false))]
        public string Fantasy
        {
            get;
            set;
        }

        /// <summary>
        /// The math font-family.
        /// </summary>
        [DataMember(Name = ("math"), IsRequired = (false))]
        public string Math
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Font families collection for a script.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ScriptFontFamilies : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Name of the script which these font families are defined for.
        /// </summary>
        [DataMember(Name = ("script"), IsRequired = (true))]
        public string Script
        {
            get;
            set;
        }

        /// <summary>
        /// Generic font families collection for the script.
        /// </summary>
        [DataMember(Name = ("fontFamilies"), IsRequired = (true))]
        public CefSharp.DevTools.Page.FontFamilies FontFamilies
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Default font sizes.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class FontSizes : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Default standard font size.
        /// </summary>
        [DataMember(Name = ("standard"), IsRequired = (false))]
        public int? Standard
        {
            get;
            set;
        }

        /// <summary>
        /// Default fixed font size.
        /// </summary>
        [DataMember(Name = ("fixed"), IsRequired = (false))]
        public int? Fixed
        {
            get;
            set;
        }
    }

    /// <summary>
    /// ClientNavigationReason
    /// </summary>
    public enum ClientNavigationReason
    {
        /// <summary>
        /// formSubmissionGet
        /// </summary>
        [EnumMember(Value = ("formSubmissionGet"))]
        FormSubmissionGet,
        /// <summary>
        /// formSubmissionPost
        /// </summary>
        [EnumMember(Value = ("formSubmissionPost"))]
        FormSubmissionPost,
        /// <summary>
        /// httpHeaderRefresh
        /// </summary>
        [EnumMember(Value = ("httpHeaderRefresh"))]
        HttpHeaderRefresh,
        /// <summary>
        /// scriptInitiated
        /// </summary>
        [EnumMember(Value = ("scriptInitiated"))]
        ScriptInitiated,
        /// <summary>
        /// metaTagRefresh
        /// </summary>
        [EnumMember(Value = ("metaTagRefresh"))]
        MetaTagRefresh,
        /// <summary>
        /// pageBlockInterstitial
        /// </summary>
        [EnumMember(Value = ("pageBlockInterstitial"))]
        PageBlockInterstitial,
        /// <summary>
        /// reload
        /// </summary>
        [EnumMember(Value = ("reload"))]
        Reload,
        /// <summary>
        /// anchorClick
        /// </summary>
        [EnumMember(Value = ("anchorClick"))]
        AnchorClick
    }

    /// <summary>
    /// ClientNavigationDisposition
    /// </summary>
    public enum ClientNavigationDisposition
    {
        /// <summary>
        /// currentTab
        /// </summary>
        [EnumMember(Value = ("currentTab"))]
        CurrentTab,
        /// <summary>
        /// newTab
        /// </summary>
        [EnumMember(Value = ("newTab"))]
        NewTab,
        /// <summary>
        /// newWindow
        /// </summary>
        [EnumMember(Value = ("newWindow"))]
        NewWindow,
        /// <summary>
        /// download
        /// </summary>
        [EnumMember(Value = ("download"))]
        Download
    }

    /// <summary>
    /// InstallabilityErrorArgument
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class InstallabilityErrorArgument : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Argument name (e.g. name:&apos;minimum-icon-size-in-pixels&apos;).
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// Argument value (e.g. value:&apos;64&apos;).
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (true))]
        public string Value
        {
            get;
            set;
        }
    }

    /// <summary>
    /// The installability error
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class InstallabilityError : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The error id (e.g. &apos;manifest-missing-suitable-icon&apos;).
        /// </summary>
        [DataMember(Name = ("errorId"), IsRequired = (true))]
        public string ErrorId
        {
            get;
            set;
        }

        /// <summary>
        /// The list of error arguments (e.g. {name:&apos;minimum-icon-size-in-pixels&apos;, value:&apos;64&apos;}).
        /// </summary>
        [DataMember(Name = ("errorArguments"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Page.InstallabilityErrorArgument> ErrorArguments
        {
            get;
            set;
        }
    }

    /// <summary>
    /// The referring-policy used for the navigation.
    /// </summary>
    public enum ReferrerPolicy
    {
        /// <summary>
        /// noReferrer
        /// </summary>
        [EnumMember(Value = ("noReferrer"))]
        NoReferrer,
        /// <summary>
        /// noReferrerWhenDowngrade
        /// </summary>
        [EnumMember(Value = ("noReferrerWhenDowngrade"))]
        NoReferrerWhenDowngrade,
        /// <summary>
        /// origin
        /// </summary>
        [EnumMember(Value = ("origin"))]
        Origin,
        /// <summary>
        /// originWhenCrossOrigin
        /// </summary>
        [EnumMember(Value = ("originWhenCrossOrigin"))]
        OriginWhenCrossOrigin,
        /// <summary>
        /// sameOrigin
        /// </summary>
        [EnumMember(Value = ("sameOrigin"))]
        SameOrigin,
        /// <summary>
        /// strictOrigin
        /// </summary>
        [EnumMember(Value = ("strictOrigin"))]
        StrictOrigin,
        /// <summary>
        /// strictOriginWhenCrossOrigin
        /// </summary>
        [EnumMember(Value = ("strictOriginWhenCrossOrigin"))]
        StrictOriginWhenCrossOrigin,
        /// <summary>
        /// unsafeUrl
        /// </summary>
        [EnumMember(Value = ("unsafeUrl"))]
        UnsafeUrl
    }

    /// <summary>
    /// Per-script compilation cache parameters for `Page.produceCompilationCache`
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CompilationCacheParams : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The URL of the script to produce a compilation cache entry for.
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (true))]
        public string Url
        {
            get;
            set;
        }

        /// <summary>
        /// A hint to the backend whether eager compilation is recommended.
        /// (the actual compilation mode used is upon backend discretion).
        /// </summary>
        [DataMember(Name = ("eager"), IsRequired = (false))]
        public bool? Eager
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Enum of possible auto-response for permission / prompt dialogs.
    /// </summary>
    public enum AutoResponseMode
    {
        /// <summary>
        /// none
        /// </summary>
        [EnumMember(Value = ("none"))]
        None,
        /// <summary>
        /// autoAccept
        /// </summary>
        [EnumMember(Value = ("autoAccept"))]
        AutoAccept,
        /// <summary>
        /// autoReject
        /// </summary>
        [EnumMember(Value = ("autoReject"))]
        AutoReject,
        /// <summary>
        /// autoOptOut
        /// </summary>
        [EnumMember(Value = ("autoOptOut"))]
        AutoOptOut
    }

    /// <summary>
    /// The type of a frameNavigated event.
    /// </summary>
    public enum NavigationType
    {
        /// <summary>
        /// Navigation
        /// </summary>
        [EnumMember(Value = ("Navigation"))]
        Navigation,
        /// <summary>
        /// BackForwardCacheRestore
        /// </summary>
        [EnumMember(Value = ("BackForwardCacheRestore"))]
        BackForwardCacheRestore
    }

    /// <summary>
    /// List of not restored reasons for back-forward cache.
    /// </summary>
    public enum BackForwardCacheNotRestoredReason
    {
        /// <summary>
        /// NotPrimaryMainFrame
        /// </summary>
        [EnumMember(Value = ("NotPrimaryMainFrame"))]
        NotPrimaryMainFrame,
        /// <summary>
        /// BackForwardCacheDisabled
        /// </summary>
        [EnumMember(Value = ("BackForwardCacheDisabled"))]
        BackForwardCacheDisabled,
        /// <summary>
        /// RelatedActiveContentsExist
        /// </summary>
        [EnumMember(Value = ("RelatedActiveContentsExist"))]
        RelatedActiveContentsExist,
        /// <summary>
        /// HTTPStatusNotOK
        /// </summary>
        [EnumMember(Value = ("HTTPStatusNotOK"))]
        HTTPStatusNotOK,
        /// <summary>
        /// SchemeNotHTTPOrHTTPS
        /// </summary>
        [EnumMember(Value = ("SchemeNotHTTPOrHTTPS"))]
        SchemeNotHTTPOrHTTPS,
        /// <summary>
        /// Loading
        /// </summary>
        [EnumMember(Value = ("Loading"))]
        Loading,
        /// <summary>
        /// WasGrantedMediaAccess
        /// </summary>
        [EnumMember(Value = ("WasGrantedMediaAccess"))]
        WasGrantedMediaAccess,
        /// <summary>
        /// DisableForRenderFrameHostCalled
        /// </summary>
        [EnumMember(Value = ("DisableForRenderFrameHostCalled"))]
        DisableForRenderFrameHostCalled,
        /// <summary>
        /// DomainNotAllowed
        /// </summary>
        [EnumMember(Value = ("DomainNotAllowed"))]
        DomainNotAllowed,
        /// <summary>
        /// HTTPMethodNotGET
        /// </summary>
        [EnumMember(Value = ("HTTPMethodNotGET"))]
        HTTPMethodNotGET,
        /// <summary>
        /// SubframeIsNavigating
        /// </summary>
        [EnumMember(Value = ("SubframeIsNavigating"))]
        SubframeIsNavigating,
        /// <summary>
        /// Timeout
        /// </summary>
        [EnumMember(Value = ("Timeout"))]
        Timeout,
        /// <summary>
        /// CacheLimit
        /// </summary>
        [EnumMember(Value = ("CacheLimit"))]
        CacheLimit,
        /// <summary>
        /// JavaScriptExecution
        /// </summary>
        [EnumMember(Value = ("JavaScriptExecution"))]
        JavaScriptExecution,
        /// <summary>
        /// RendererProcessKilled
        /// </summary>
        [EnumMember(Value = ("RendererProcessKilled"))]
        RendererProcessKilled,
        /// <summary>
        /// RendererProcessCrashed
        /// </summary>
        [EnumMember(Value = ("RendererProcessCrashed"))]
        RendererProcessCrashed,
        /// <summary>
        /// SchedulerTrackedFeatureUsed
        /// </summary>
        [EnumMember(Value = ("SchedulerTrackedFeatureUsed"))]
        SchedulerTrackedFeatureUsed,
        /// <summary>
        /// ConflictingBrowsingInstance
        /// </summary>
        [EnumMember(Value = ("ConflictingBrowsingInstance"))]
        ConflictingBrowsingInstance,
        /// <summary>
        /// CacheFlushed
        /// </summary>
        [EnumMember(Value = ("CacheFlushed"))]
        CacheFlushed,
        /// <summary>
        /// ServiceWorkerVersionActivation
        /// </summary>
        [EnumMember(Value = ("ServiceWorkerVersionActivation"))]
        ServiceWorkerVersionActivation,
        /// <summary>
        /// SessionRestored
        /// </summary>
        [EnumMember(Value = ("SessionRestored"))]
        SessionRestored,
        /// <summary>
        /// ServiceWorkerPostMessage
        /// </summary>
        [EnumMember(Value = ("ServiceWorkerPostMessage"))]
        ServiceWorkerPostMessage,
        /// <summary>
        /// EnteredBackForwardCacheBeforeServiceWorkerHostAdded
        /// </summary>
        [EnumMember(Value = ("EnteredBackForwardCacheBeforeServiceWorkerHostAdded"))]
        EnteredBackForwardCacheBeforeServiceWorkerHostAdded,
        /// <summary>
        /// RenderFrameHostReused_SameSite
        /// </summary>
        [EnumMember(Value = ("RenderFrameHostReused_SameSite"))]
        RenderFrameHostReusedSameSite,
        /// <summary>
        /// RenderFrameHostReused_CrossSite
        /// </summary>
        [EnumMember(Value = ("RenderFrameHostReused_CrossSite"))]
        RenderFrameHostReusedCrossSite,
        /// <summary>
        /// ServiceWorkerClaim
        /// </summary>
        [EnumMember(Value = ("ServiceWorkerClaim"))]
        ServiceWorkerClaim,
        /// <summary>
        /// IgnoreEventAndEvict
        /// </summary>
        [EnumMember(Value = ("IgnoreEventAndEvict"))]
        IgnoreEventAndEvict,
        /// <summary>
        /// HaveInnerContents
        /// </summary>
        [EnumMember(Value = ("HaveInnerContents"))]
        HaveInnerContents,
        /// <summary>
        /// TimeoutPuttingInCache
        /// </summary>
        [EnumMember(Value = ("TimeoutPuttingInCache"))]
        TimeoutPuttingInCache,
        /// <summary>
        /// BackForwardCacheDisabledByLowMemory
        /// </summary>
        [EnumMember(Value = ("BackForwardCacheDisabledByLowMemory"))]
        BackForwardCacheDisabledByLowMemory,
        /// <summary>
        /// BackForwardCacheDisabledByCommandLine
        /// </summary>
        [EnumMember(Value = ("BackForwardCacheDisabledByCommandLine"))]
        BackForwardCacheDisabledByCommandLine,
        /// <summary>
        /// NetworkRequestDatapipeDrainedAsBytesConsumer
        /// </summary>
        [EnumMember(Value = ("NetworkRequestDatapipeDrainedAsBytesConsumer"))]
        NetworkRequestDatapipeDrainedAsBytesConsumer,
        /// <summary>
        /// NetworkRequestRedirected
        /// </summary>
        [EnumMember(Value = ("NetworkRequestRedirected"))]
        NetworkRequestRedirected,
        /// <summary>
        /// NetworkRequestTimeout
        /// </summary>
        [EnumMember(Value = ("NetworkRequestTimeout"))]
        NetworkRequestTimeout,
        /// <summary>
        /// NetworkExceedsBufferLimit
        /// </summary>
        [EnumMember(Value = ("NetworkExceedsBufferLimit"))]
        NetworkExceedsBufferLimit,
        /// <summary>
        /// NavigationCancelledWhileRestoring
        /// </summary>
        [EnumMember(Value = ("NavigationCancelledWhileRestoring"))]
        NavigationCancelledWhileRestoring,
        /// <summary>
        /// NotMostRecentNavigationEntry
        /// </summary>
        [EnumMember(Value = ("NotMostRecentNavigationEntry"))]
        NotMostRecentNavigationEntry,
        /// <summary>
        /// BackForwardCacheDisabledForPrerender
        /// </summary>
        [EnumMember(Value = ("BackForwardCacheDisabledForPrerender"))]
        BackForwardCacheDisabledForPrerender,
        /// <summary>
        /// UserAgentOverrideDiffers
        /// </summary>
        [EnumMember(Value = ("UserAgentOverrideDiffers"))]
        UserAgentOverrideDiffers,
        /// <summary>
        /// ForegroundCacheLimit
        /// </summary>
        [EnumMember(Value = ("ForegroundCacheLimit"))]
        ForegroundCacheLimit,
        /// <summary>
        /// BrowsingInstanceNotSwapped
        /// </summary>
        [EnumMember(Value = ("BrowsingInstanceNotSwapped"))]
        BrowsingInstanceNotSwapped,
        /// <summary>
        /// BackForwardCacheDisabledForDelegate
        /// </summary>
        [EnumMember(Value = ("BackForwardCacheDisabledForDelegate"))]
        BackForwardCacheDisabledForDelegate,
        /// <summary>
        /// UnloadHandlerExistsInMainFrame
        /// </summary>
        [EnumMember(Value = ("UnloadHandlerExistsInMainFrame"))]
        UnloadHandlerExistsInMainFrame,
        /// <summary>
        /// UnloadHandlerExistsInSubFrame
        /// </summary>
        [EnumMember(Value = ("UnloadHandlerExistsInSubFrame"))]
        UnloadHandlerExistsInSubFrame,
        /// <summary>
        /// ServiceWorkerUnregistration
        /// </summary>
        [EnumMember(Value = ("ServiceWorkerUnregistration"))]
        ServiceWorkerUnregistration,
        /// <summary>
        /// CacheControlNoStore
        /// </summary>
        [EnumMember(Value = ("CacheControlNoStore"))]
        CacheControlNoStore,
        /// <summary>
        /// CacheControlNoStoreCookieModified
        /// </summary>
        [EnumMember(Value = ("CacheControlNoStoreCookieModified"))]
        CacheControlNoStoreCookieModified,
        /// <summary>
        /// CacheControlNoStoreHTTPOnlyCookieModified
        /// </summary>
        [EnumMember(Value = ("CacheControlNoStoreHTTPOnlyCookieModified"))]
        CacheControlNoStoreHTTPOnlyCookieModified,
        /// <summary>
        /// NoResponseHead
        /// </summary>
        [EnumMember(Value = ("NoResponseHead"))]
        NoResponseHead,
        /// <summary>
        /// Unknown
        /// </summary>
        [EnumMember(Value = ("Unknown"))]
        Unknown,
        /// <summary>
        /// ActivationNavigationsDisallowedForBug1234857
        /// </summary>
        [EnumMember(Value = ("ActivationNavigationsDisallowedForBug1234857"))]
        ActivationNavigationsDisallowedForBug1234857,
        /// <summary>
        /// ErrorDocument
        /// </summary>
        [EnumMember(Value = ("ErrorDocument"))]
        ErrorDocument,
        /// <summary>
        /// FencedFramesEmbedder
        /// </summary>
        [EnumMember(Value = ("FencedFramesEmbedder"))]
        FencedFramesEmbedder,
        /// <summary>
        /// CookieDisabled
        /// </summary>
        [EnumMember(Value = ("CookieDisabled"))]
        CookieDisabled,
        /// <summary>
        /// HTTPAuthRequired
        /// </summary>
        [EnumMember(Value = ("HTTPAuthRequired"))]
        HTTPAuthRequired,
        /// <summary>
        /// CookieFlushed
        /// </summary>
        [EnumMember(Value = ("CookieFlushed"))]
        CookieFlushed,
        /// <summary>
        /// WebSocket
        /// </summary>
        [EnumMember(Value = ("WebSocket"))]
        WebSocket,
        /// <summary>
        /// WebTransport
        /// </summary>
        [EnumMember(Value = ("WebTransport"))]
        WebTransport,
        /// <summary>
        /// WebRTC
        /// </summary>
        [EnumMember(Value = ("WebRTC"))]
        WebRTC,
        /// <summary>
        /// MainResourceHasCacheControlNoStore
        /// </summary>
        [EnumMember(Value = ("MainResourceHasCacheControlNoStore"))]
        MainResourceHasCacheControlNoStore,
        /// <summary>
        /// MainResourceHasCacheControlNoCache
        /// </summary>
        [EnumMember(Value = ("MainResourceHasCacheControlNoCache"))]
        MainResourceHasCacheControlNoCache,
        /// <summary>
        /// SubresourceHasCacheControlNoStore
        /// </summary>
        [EnumMember(Value = ("SubresourceHasCacheControlNoStore"))]
        SubresourceHasCacheControlNoStore,
        /// <summary>
        /// SubresourceHasCacheControlNoCache
        /// </summary>
        [EnumMember(Value = ("SubresourceHasCacheControlNoCache"))]
        SubresourceHasCacheControlNoCache,
        /// <summary>
        /// ContainsPlugins
        /// </summary>
        [EnumMember(Value = ("ContainsPlugins"))]
        ContainsPlugins,
        /// <summary>
        /// DocumentLoaded
        /// </summary>
        [EnumMember(Value = ("DocumentLoaded"))]
        DocumentLoaded,
        /// <summary>
        /// OutstandingNetworkRequestOthers
        /// </summary>
        [EnumMember(Value = ("OutstandingNetworkRequestOthers"))]
        OutstandingNetworkRequestOthers,
        /// <summary>
        /// RequestedMIDIPermission
        /// </summary>
        [EnumMember(Value = ("RequestedMIDIPermission"))]
        RequestedMIDIPermission,
        /// <summary>
        /// RequestedAudioCapturePermission
        /// </summary>
        [EnumMember(Value = ("RequestedAudioCapturePermission"))]
        RequestedAudioCapturePermission,
        /// <summary>
        /// RequestedVideoCapturePermission
        /// </summary>
        [EnumMember(Value = ("RequestedVideoCapturePermission"))]
        RequestedVideoCapturePermission,
        /// <summary>
        /// RequestedBackForwardCacheBlockedSensors
        /// </summary>
        [EnumMember(Value = ("RequestedBackForwardCacheBlockedSensors"))]
        RequestedBackForwardCacheBlockedSensors,
        /// <summary>
        /// RequestedBackgroundWorkPermission
        /// </summary>
        [EnumMember(Value = ("RequestedBackgroundWorkPermission"))]
        RequestedBackgroundWorkPermission,
        /// <summary>
        /// BroadcastChannel
        /// </summary>
        [EnumMember(Value = ("BroadcastChannel"))]
        BroadcastChannel,
        /// <summary>
        /// WebXR
        /// </summary>
        [EnumMember(Value = ("WebXR"))]
        WebXR,
        /// <summary>
        /// SharedWorker
        /// </summary>
        [EnumMember(Value = ("SharedWorker"))]
        SharedWorker,
        /// <summary>
        /// WebLocks
        /// </summary>
        [EnumMember(Value = ("WebLocks"))]
        WebLocks,
        /// <summary>
        /// WebHID
        /// </summary>
        [EnumMember(Value = ("WebHID"))]
        WebHID,
        /// <summary>
        /// WebShare
        /// </summary>
        [EnumMember(Value = ("WebShare"))]
        WebShare,
        /// <summary>
        /// RequestedStorageAccessGrant
        /// </summary>
        [EnumMember(Value = ("RequestedStorageAccessGrant"))]
        RequestedStorageAccessGrant,
        /// <summary>
        /// WebNfc
        /// </summary>
        [EnumMember(Value = ("WebNfc"))]
        WebNfc,
        /// <summary>
        /// OutstandingNetworkRequestFetch
        /// </summary>
        [EnumMember(Value = ("OutstandingNetworkRequestFetch"))]
        OutstandingNetworkRequestFetch,
        /// <summary>
        /// OutstandingNetworkRequestXHR
        /// </summary>
        [EnumMember(Value = ("OutstandingNetworkRequestXHR"))]
        OutstandingNetworkRequestXHR,
        /// <summary>
        /// AppBanner
        /// </summary>
        [EnumMember(Value = ("AppBanner"))]
        AppBanner,
        /// <summary>
        /// Printing
        /// </summary>
        [EnumMember(Value = ("Printing"))]
        Printing,
        /// <summary>
        /// WebDatabase
        /// </summary>
        [EnumMember(Value = ("WebDatabase"))]
        WebDatabase,
        /// <summary>
        /// PictureInPicture
        /// </summary>
        [EnumMember(Value = ("PictureInPicture"))]
        PictureInPicture,
        /// <summary>
        /// Portal
        /// </summary>
        [EnumMember(Value = ("Portal"))]
        Portal,
        /// <summary>
        /// SpeechRecognizer
        /// </summary>
        [EnumMember(Value = ("SpeechRecognizer"))]
        SpeechRecognizer,
        /// <summary>
        /// IdleManager
        /// </summary>
        [EnumMember(Value = ("IdleManager"))]
        IdleManager,
        /// <summary>
        /// PaymentManager
        /// </summary>
        [EnumMember(Value = ("PaymentManager"))]
        PaymentManager,
        /// <summary>
        /// SpeechSynthesis
        /// </summary>
        [EnumMember(Value = ("SpeechSynthesis"))]
        SpeechSynthesis,
        /// <summary>
        /// KeyboardLock
        /// </summary>
        [EnumMember(Value = ("KeyboardLock"))]
        KeyboardLock,
        /// <summary>
        /// WebOTPService
        /// </summary>
        [EnumMember(Value = ("WebOTPService"))]
        WebOTPService,
        /// <summary>
        /// OutstandingNetworkRequestDirectSocket
        /// </summary>
        [EnumMember(Value = ("OutstandingNetworkRequestDirectSocket"))]
        OutstandingNetworkRequestDirectSocket,
        /// <summary>
        /// InjectedJavascript
        /// </summary>
        [EnumMember(Value = ("InjectedJavascript"))]
        InjectedJavascript,
        /// <summary>
        /// InjectedStyleSheet
        /// </summary>
        [EnumMember(Value = ("InjectedStyleSheet"))]
        InjectedStyleSheet,
        /// <summary>
        /// KeepaliveRequest
        /// </summary>
        [EnumMember(Value = ("KeepaliveRequest"))]
        KeepaliveRequest,
        /// <summary>
        /// IndexedDBEvent
        /// </summary>
        [EnumMember(Value = ("IndexedDBEvent"))]
        IndexedDBEvent,
        /// <summary>
        /// Dummy
        /// </summary>
        [EnumMember(Value = ("Dummy"))]
        Dummy,
        /// <summary>
        /// JsNetworkRequestReceivedCacheControlNoStoreResource
        /// </summary>
        [EnumMember(Value = ("JsNetworkRequestReceivedCacheControlNoStoreResource"))]
        JsNetworkRequestReceivedCacheControlNoStoreResource,
        /// <summary>
        /// WebRTCSticky
        /// </summary>
        [EnumMember(Value = ("WebRTCSticky"))]
        WebRTCSticky,
        /// <summary>
        /// WebTransportSticky
        /// </summary>
        [EnumMember(Value = ("WebTransportSticky"))]
        WebTransportSticky,
        /// <summary>
        /// WebSocketSticky
        /// </summary>
        [EnumMember(Value = ("WebSocketSticky"))]
        WebSocketSticky,
        /// <summary>
        /// SmartCard
        /// </summary>
        [EnumMember(Value = ("SmartCard"))]
        SmartCard,
        /// <summary>
        /// LiveMediaStreamTrack
        /// </summary>
        [EnumMember(Value = ("LiveMediaStreamTrack"))]
        LiveMediaStreamTrack,
        /// <summary>
        /// UnloadHandler
        /// </summary>
        [EnumMember(Value = ("UnloadHandler"))]
        UnloadHandler,
        /// <summary>
        /// ParserAborted
        /// </summary>
        [EnumMember(Value = ("ParserAborted"))]
        ParserAborted,
        /// <summary>
        /// ContentSecurityHandler
        /// </summary>
        [EnumMember(Value = ("ContentSecurityHandler"))]
        ContentSecurityHandler,
        /// <summary>
        /// ContentWebAuthenticationAPI
        /// </summary>
        [EnumMember(Value = ("ContentWebAuthenticationAPI"))]
        ContentWebAuthenticationAPI,
        /// <summary>
        /// ContentFileChooser
        /// </summary>
        [EnumMember(Value = ("ContentFileChooser"))]
        ContentFileChooser,
        /// <summary>
        /// ContentSerial
        /// </summary>
        [EnumMember(Value = ("ContentSerial"))]
        ContentSerial,
        /// <summary>
        /// ContentFileSystemAccess
        /// </summary>
        [EnumMember(Value = ("ContentFileSystemAccess"))]
        ContentFileSystemAccess,
        /// <summary>
        /// ContentMediaDevicesDispatcherHost
        /// </summary>
        [EnumMember(Value = ("ContentMediaDevicesDispatcherHost"))]
        ContentMediaDevicesDispatcherHost,
        /// <summary>
        /// ContentWebBluetooth
        /// </summary>
        [EnumMember(Value = ("ContentWebBluetooth"))]
        ContentWebBluetooth,
        /// <summary>
        /// ContentWebUSB
        /// </summary>
        [EnumMember(Value = ("ContentWebUSB"))]
        ContentWebUSB,
        /// <summary>
        /// ContentMediaSessionService
        /// </summary>
        [EnumMember(Value = ("ContentMediaSessionService"))]
        ContentMediaSessionService,
        /// <summary>
        /// ContentScreenReader
        /// </summary>
        [EnumMember(Value = ("ContentScreenReader"))]
        ContentScreenReader,
        /// <summary>
        /// EmbedderPopupBlockerTabHelper
        /// </summary>
        [EnumMember(Value = ("EmbedderPopupBlockerTabHelper"))]
        EmbedderPopupBlockerTabHelper,
        /// <summary>
        /// EmbedderSafeBrowsingTriggeredPopupBlocker
        /// </summary>
        [EnumMember(Value = ("EmbedderSafeBrowsingTriggeredPopupBlocker"))]
        EmbedderSafeBrowsingTriggeredPopupBlocker,
        /// <summary>
        /// EmbedderSafeBrowsingThreatDetails
        /// </summary>
        [EnumMember(Value = ("EmbedderSafeBrowsingThreatDetails"))]
        EmbedderSafeBrowsingThreatDetails,
        /// <summary>
        /// EmbedderAppBannerManager
        /// </summary>
        [EnumMember(Value = ("EmbedderAppBannerManager"))]
        EmbedderAppBannerManager,
        /// <summary>
        /// EmbedderDomDistillerViewerSource
        /// </summary>
        [EnumMember(Value = ("EmbedderDomDistillerViewerSource"))]
        EmbedderDomDistillerViewerSource,
        /// <summary>
        /// EmbedderDomDistillerSelfDeletingRequestDelegate
        /// </summary>
        [EnumMember(Value = ("EmbedderDomDistillerSelfDeletingRequestDelegate"))]
        EmbedderDomDistillerSelfDeletingRequestDelegate,
        /// <summary>
        /// EmbedderOomInterventionTabHelper
        /// </summary>
        [EnumMember(Value = ("EmbedderOomInterventionTabHelper"))]
        EmbedderOomInterventionTabHelper,
        /// <summary>
        /// EmbedderOfflinePage
        /// </summary>
        [EnumMember(Value = ("EmbedderOfflinePage"))]
        EmbedderOfflinePage,
        /// <summary>
        /// EmbedderChromePasswordManagerClientBindCredentialManager
        /// </summary>
        [EnumMember(Value = ("EmbedderChromePasswordManagerClientBindCredentialManager"))]
        EmbedderChromePasswordManagerClientBindCredentialManager,
        /// <summary>
        /// EmbedderPermissionRequestManager
        /// </summary>
        [EnumMember(Value = ("EmbedderPermissionRequestManager"))]
        EmbedderPermissionRequestManager,
        /// <summary>
        /// EmbedderModalDialog
        /// </summary>
        [EnumMember(Value = ("EmbedderModalDialog"))]
        EmbedderModalDialog,
        /// <summary>
        /// EmbedderExtensions
        /// </summary>
        [EnumMember(Value = ("EmbedderExtensions"))]
        EmbedderExtensions,
        /// <summary>
        /// EmbedderExtensionMessaging
        /// </summary>
        [EnumMember(Value = ("EmbedderExtensionMessaging"))]
        EmbedderExtensionMessaging,
        /// <summary>
        /// EmbedderExtensionMessagingForOpenPort
        /// </summary>
        [EnumMember(Value = ("EmbedderExtensionMessagingForOpenPort"))]
        EmbedderExtensionMessagingForOpenPort,
        /// <summary>
        /// EmbedderExtensionSentMessageToCachedFrame
        /// </summary>
        [EnumMember(Value = ("EmbedderExtensionSentMessageToCachedFrame"))]
        EmbedderExtensionSentMessageToCachedFrame
    }

    /// <summary>
    /// Types of not restored reasons for back-forward cache.
    /// </summary>
    public enum BackForwardCacheNotRestoredReasonType
    {
        /// <summary>
        /// SupportPending
        /// </summary>
        [EnumMember(Value = ("SupportPending"))]
        SupportPending,
        /// <summary>
        /// PageSupportNeeded
        /// </summary>
        [EnumMember(Value = ("PageSupportNeeded"))]
        PageSupportNeeded,
        /// <summary>
        /// Circumstantial
        /// </summary>
        [EnumMember(Value = ("Circumstantial"))]
        Circumstantial
    }

    /// <summary>
    /// BackForwardCacheBlockingDetails
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class BackForwardCacheBlockingDetails : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Url of the file where blockage happened. Optional because of tests.
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (false))]
        public string Url
        {
            get;
            set;
        }

        /// <summary>
        /// Function name where blockage happened. Optional because of anonymous functions and tests.
        /// </summary>
        [DataMember(Name = ("function"), IsRequired = (false))]
        public string Function
        {
            get;
            set;
        }

        /// <summary>
        /// Line number in the script (0-based).
        /// </summary>
        [DataMember(Name = ("lineNumber"), IsRequired = (true))]
        public int LineNumber
        {
            get;
            set;
        }

        /// <summary>
        /// Column number in the script (0-based).
        /// </summary>
        [DataMember(Name = ("columnNumber"), IsRequired = (true))]
        public int ColumnNumber
        {
            get;
            set;
        }
    }

    /// <summary>
    /// BackForwardCacheNotRestoredExplanation
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class BackForwardCacheNotRestoredExplanation : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Type of the reason
        /// </summary>
        public CefSharp.DevTools.Page.BackForwardCacheNotRestoredReasonType Type
        {
            get
            {
                return (CefSharp.DevTools.Page.BackForwardCacheNotRestoredReasonType)(StringToEnum(typeof(CefSharp.DevTools.Page.BackForwardCacheNotRestoredReasonType), type));
            }

            set
            {
                this.type = (EnumToString(value));
            }
        }

        /// <summary>
        /// Type of the reason
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (true))]
        internal string type
        {
            get;
            set;
        }

        /// <summary>
        /// Not restored reason
        /// </summary>
        public CefSharp.DevTools.Page.BackForwardCacheNotRestoredReason Reason
        {
            get
            {
                return (CefSharp.DevTools.Page.BackForwardCacheNotRestoredReason)(StringToEnum(typeof(CefSharp.DevTools.Page.BackForwardCacheNotRestoredReason), reason));
            }

            set
            {
                this.reason = (EnumToString(value));
            }
        }

        /// <summary>
        /// Not restored reason
        /// </summary>
        [DataMember(Name = ("reason"), IsRequired = (true))]
        internal string reason
        {
            get;
            set;
        }

        /// <summary>
        /// Context associated with the reason. The meaning of this context is
        /// dependent on the reason:
        /// - EmbedderExtensionSentMessageToCachedFrame: the extension ID.
        /// </summary>
        [DataMember(Name = ("context"), IsRequired = (false))]
        public string Context
        {
            get;
            set;
        }

        /// <summary>
        /// Details
        /// </summary>
        [DataMember(Name = ("details"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Page.BackForwardCacheBlockingDetails> Details
        {
            get;
            set;
        }
    }

    /// <summary>
    /// BackForwardCacheNotRestoredExplanationTree
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class BackForwardCacheNotRestoredExplanationTree : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// URL of each frame
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (true))]
        public string Url
        {
            get;
            set;
        }

        /// <summary>
        /// Not restored reasons of each frame
        /// </summary>
        [DataMember(Name = ("explanations"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Page.BackForwardCacheNotRestoredExplanation> Explanations
        {
            get;
            set;
        }

        /// <summary>
        /// Array of children frame
        /// </summary>
        [DataMember(Name = ("children"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Page.BackForwardCacheNotRestoredExplanationTree> Children
        {
            get;
            set;
        }
    }

    /// <summary>
    /// domContentEventFired
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class DomContentEventFiredEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Timestamp
        /// </summary>
        [DataMember(Name = ("timestamp"), IsRequired = (true))]
        public double Timestamp
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Input mode.
    /// </summary>
    public enum FileChooserOpenedMode
    {
        /// <summary>
        /// selectSingle
        /// </summary>
        [EnumMember(Value = ("selectSingle"))]
        SelectSingle,
        /// <summary>
        /// selectMultiple
        /// </summary>
        [EnumMember(Value = ("selectMultiple"))]
        SelectMultiple
    }

    /// <summary>
    /// Emitted only when `page.interceptFileChooser` is enabled.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class FileChooserOpenedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Id of the frame containing input node.
        /// </summary>
        [DataMember(Name = ("frameId"), IsRequired = (true))]
        public string FrameId
        {
            get;
            private set;
        }

        /// <summary>
        /// Input mode.
        /// </summary>
        public CefSharp.DevTools.Page.FileChooserOpenedMode Mode
        {
            get
            {
                return (CefSharp.DevTools.Page.FileChooserOpenedMode)(StringToEnum(typeof(CefSharp.DevTools.Page.FileChooserOpenedMode), mode));
            }

            set
            {
                this.mode = (EnumToString(value));
            }
        }

        /// <summary>
        /// Input mode.
        /// </summary>
        [DataMember(Name = ("mode"), IsRequired = (true))]
        internal string mode
        {
            get;
            private set;
        }

        /// <summary>
        /// Input node id. Only present for file choosers opened via an `&lt;input type=&quot;file&quot; &gt;` element.
        /// </summary>
        [DataMember(Name = ("backendNodeId"), IsRequired = (false))]
        public int? BackendNodeId
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when frame has been attached to its parent.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class FrameAttachedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Id of the frame that has been attached.
        /// </summary>
        [DataMember(Name = ("frameId"), IsRequired = (true))]
        public string FrameId
        {
            get;
            private set;
        }

        /// <summary>
        /// Parent frame identifier.
        /// </summary>
        [DataMember(Name = ("parentFrameId"), IsRequired = (true))]
        public string ParentFrameId
        {
            get;
            private set;
        }

        /// <summary>
        /// JavaScript stack trace of when frame was attached, only set if frame initiated from script.
        /// </summary>
        [DataMember(Name = ("stack"), IsRequired = (false))]
        public CefSharp.DevTools.Runtime.StackTrace Stack
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when frame no longer has a scheduled navigation.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class FrameClearedScheduledNavigationEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Id of the frame that has cleared its scheduled navigation.
        /// </summary>
        [DataMember(Name = ("frameId"), IsRequired = (true))]
        public string FrameId
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// FrameDetachedReason
    /// </summary>
    public enum FrameDetachedReason
    {
        /// <summary>
        /// remove
        /// </summary>
        [EnumMember(Value = ("remove"))]
        Remove,
        /// <summary>
        /// swap
        /// </summary>
        [EnumMember(Value = ("swap"))]
        Swap
    }

    /// <summary>
    /// Fired when frame has been detached from its parent.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class FrameDetachedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Id of the frame that has been detached.
        /// </summary>
        [DataMember(Name = ("frameId"), IsRequired = (true))]
        public string FrameId
        {
            get;
            private set;
        }

        /// <summary>
        /// Reason
        /// </summary>
        public CefSharp.DevTools.Page.FrameDetachedReason Reason
        {
            get
            {
                return (CefSharp.DevTools.Page.FrameDetachedReason)(StringToEnum(typeof(CefSharp.DevTools.Page.FrameDetachedReason), reason));
            }

            set
            {
                this.reason = (EnumToString(value));
            }
        }

        /// <summary>
        /// Reason
        /// </summary>
        [DataMember(Name = ("reason"), IsRequired = (true))]
        internal string reason
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired once navigation of the frame has completed. Frame is now associated with the new loader.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class FrameNavigatedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Frame object.
        /// </summary>
        [DataMember(Name = ("frame"), IsRequired = (true))]
        public CefSharp.DevTools.Page.Frame Frame
        {
            get;
            private set;
        }

        /// <summary>
        /// Type
        /// </summary>
        public CefSharp.DevTools.Page.NavigationType Type
        {
            get
            {
                return (CefSharp.DevTools.Page.NavigationType)(StringToEnum(typeof(CefSharp.DevTools.Page.NavigationType), type));
            }

            set
            {
                this.type = (EnumToString(value));
            }
        }

        /// <summary>
        /// Type
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (true))]
        internal string type
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when opening document to write to.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class DocumentOpenedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Frame object.
        /// </summary>
        [DataMember(Name = ("frame"), IsRequired = (true))]
        public CefSharp.DevTools.Page.Frame Frame
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when a renderer-initiated navigation is requested.
    /// Navigation may still be cancelled after the event is issued.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class FrameRequestedNavigationEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Id of the frame that is being navigated.
        /// </summary>
        [DataMember(Name = ("frameId"), IsRequired = (true))]
        public string FrameId
        {
            get;
            private set;
        }

        /// <summary>
        /// The reason for the navigation.
        /// </summary>
        public CefSharp.DevTools.Page.ClientNavigationReason Reason
        {
            get
            {
                return (CefSharp.DevTools.Page.ClientNavigationReason)(StringToEnum(typeof(CefSharp.DevTools.Page.ClientNavigationReason), reason));
            }

            set
            {
                this.reason = (EnumToString(value));
            }
        }

        /// <summary>
        /// The reason for the navigation.
        /// </summary>
        [DataMember(Name = ("reason"), IsRequired = (true))]
        internal string reason
        {
            get;
            private set;
        }

        /// <summary>
        /// The destination URL for the requested navigation.
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (true))]
        public string Url
        {
            get;
            private set;
        }

        /// <summary>
        /// The disposition for the navigation.
        /// </summary>
        public CefSharp.DevTools.Page.ClientNavigationDisposition Disposition
        {
            get
            {
                return (CefSharp.DevTools.Page.ClientNavigationDisposition)(StringToEnum(typeof(CefSharp.DevTools.Page.ClientNavigationDisposition), disposition));
            }

            set
            {
                this.disposition = (EnumToString(value));
            }
        }

        /// <summary>
        /// The disposition for the navigation.
        /// </summary>
        [DataMember(Name = ("disposition"), IsRequired = (true))]
        internal string disposition
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when frame schedules a potential navigation.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class FrameScheduledNavigationEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Id of the frame that has scheduled a navigation.
        /// </summary>
        [DataMember(Name = ("frameId"), IsRequired = (true))]
        public string FrameId
        {
            get;
            private set;
        }

        /// <summary>
        /// Delay (in seconds) until the navigation is scheduled to begin. The navigation is not
        /// guaranteed to start.
        /// </summary>
        [DataMember(Name = ("delay"), IsRequired = (true))]
        public double Delay
        {
            get;
            private set;
        }

        /// <summary>
        /// The reason for the navigation.
        /// </summary>
        public CefSharp.DevTools.Page.ClientNavigationReason Reason
        {
            get
            {
                return (CefSharp.DevTools.Page.ClientNavigationReason)(StringToEnum(typeof(CefSharp.DevTools.Page.ClientNavigationReason), reason));
            }

            set
            {
                this.reason = (EnumToString(value));
            }
        }

        /// <summary>
        /// The reason for the navigation.
        /// </summary>
        [DataMember(Name = ("reason"), IsRequired = (true))]
        internal string reason
        {
            get;
            private set;
        }

        /// <summary>
        /// The destination URL for the scheduled navigation.
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (true))]
        public string Url
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when frame has started loading.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class FrameStartedLoadingEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Id of the frame that has started loading.
        /// </summary>
        [DataMember(Name = ("frameId"), IsRequired = (true))]
        public string FrameId
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when frame has stopped loading.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class FrameStoppedLoadingEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Id of the frame that has stopped loading.
        /// </summary>
        [DataMember(Name = ("frameId"), IsRequired = (true))]
        public string FrameId
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when page is about to start a download.
    /// Deprecated. Use Browser.downloadWillBegin instead.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class DownloadWillBeginEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Id of the frame that caused download to begin.
        /// </summary>
        [DataMember(Name = ("frameId"), IsRequired = (true))]
        public string FrameId
        {
            get;
            private set;
        }

        /// <summary>
        /// Global unique identifier of the download.
        /// </summary>
        [DataMember(Name = ("guid"), IsRequired = (true))]
        public string Guid
        {
            get;
            private set;
        }

        /// <summary>
        /// URL of the resource being downloaded.
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (true))]
        public string Url
        {
            get;
            private set;
        }

        /// <summary>
        /// Suggested file name of the resource (the actual name of the file saved on disk may differ).
        /// </summary>
        [DataMember(Name = ("suggestedFilename"), IsRequired = (true))]
        public string SuggestedFilename
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Download status.
    /// </summary>
    public enum DownloadProgressState
    {
        /// <summary>
        /// inProgress
        /// </summary>
        [EnumMember(Value = ("inProgress"))]
        InProgress,
        /// <summary>
        /// completed
        /// </summary>
        [EnumMember(Value = ("completed"))]
        Completed,
        /// <summary>
        /// canceled
        /// </summary>
        [EnumMember(Value = ("canceled"))]
        Canceled
    }

    /// <summary>
    /// Fired when download makes progress. Last call has |done| == true.
    /// Deprecated. Use Browser.downloadProgress instead.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class DownloadProgressEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Global unique identifier of the download.
        /// </summary>
        [DataMember(Name = ("guid"), IsRequired = (true))]
        public string Guid
        {
            get;
            private set;
        }

        /// <summary>
        /// Total expected bytes to download.
        /// </summary>
        [DataMember(Name = ("totalBytes"), IsRequired = (true))]
        public double TotalBytes
        {
            get;
            private set;
        }

        /// <summary>
        /// Total bytes received.
        /// </summary>
        [DataMember(Name = ("receivedBytes"), IsRequired = (true))]
        public double ReceivedBytes
        {
            get;
            private set;
        }

        /// <summary>
        /// Download status.
        /// </summary>
        public CefSharp.DevTools.Page.DownloadProgressState State
        {
            get
            {
                return (CefSharp.DevTools.Page.DownloadProgressState)(StringToEnum(typeof(CefSharp.DevTools.Page.DownloadProgressState), state));
            }

            set
            {
                this.state = (EnumToString(value));
            }
        }

        /// <summary>
        /// Download status.
        /// </summary>
        [DataMember(Name = ("state"), IsRequired = (true))]
        internal string state
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) has been
    /// closed.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class JavascriptDialogClosedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Whether dialog was confirmed.
        /// </summary>
        [DataMember(Name = ("result"), IsRequired = (true))]
        public bool Result
        {
            get;
            private set;
        }

        /// <summary>
        /// User input in case of prompt.
        /// </summary>
        [DataMember(Name = ("userInput"), IsRequired = (true))]
        public string UserInput
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) is about to
    /// open.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class JavascriptDialogOpeningEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Frame url.
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (true))]
        public string Url
        {
            get;
            private set;
        }

        /// <summary>
        /// Message that will be displayed by the dialog.
        /// </summary>
        [DataMember(Name = ("message"), IsRequired = (true))]
        public string Message
        {
            get;
            private set;
        }

        /// <summary>
        /// Dialog type.
        /// </summary>
        public CefSharp.DevTools.Page.DialogType Type
        {
            get
            {
                return (CefSharp.DevTools.Page.DialogType)(StringToEnum(typeof(CefSharp.DevTools.Page.DialogType), type));
            }

            set
            {
                this.type = (EnumToString(value));
            }
        }

        /// <summary>
        /// Dialog type.
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (true))]
        internal string type
        {
            get;
            private set;
        }

        /// <summary>
        /// True if browser is capable showing or acting on the given dialog. When browser has no
        /// dialog handler for given target, calling alert while Page domain is engaged will stall
        /// the page execution. Execution can be resumed via calling Page.handleJavaScriptDialog.
        /// </summary>
        [DataMember(Name = ("hasBrowserHandler"), IsRequired = (true))]
        public bool HasBrowserHandler
        {
            get;
            private set;
        }

        /// <summary>
        /// Default dialog prompt.
        /// </summary>
        [DataMember(Name = ("defaultPrompt"), IsRequired = (false))]
        public string DefaultPrompt
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired for top level page lifecycle events such as navigation, load, paint, etc.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class LifecycleEventEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Id of the frame.
        /// </summary>
        [DataMember(Name = ("frameId"), IsRequired = (true))]
        public string FrameId
        {
            get;
            private set;
        }

        /// <summary>
        /// Loader identifier. Empty string if the request is fetched from worker.
        /// </summary>
        [DataMember(Name = ("loaderId"), IsRequired = (true))]
        public string LoaderId
        {
            get;
            private set;
        }

        /// <summary>
        /// Name
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            private set;
        }

        /// <summary>
        /// Timestamp
        /// </summary>
        [DataMember(Name = ("timestamp"), IsRequired = (true))]
        public double Timestamp
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired for failed bfcache history navigations if BackForwardCache feature is enabled. Do
    /// not assume any ordering with the Page.frameNavigated event. This event is fired only for
    /// main-frame history navigation where the document changes (non-same-document navigations),
    /// when bfcache navigation fails.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class BackForwardCacheNotUsedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// The loader id for the associated navigation.
        /// </summary>
        [DataMember(Name = ("loaderId"), IsRequired = (true))]
        public string LoaderId
        {
            get;
            private set;
        }

        /// <summary>
        /// The frame id of the associated frame.
        /// </summary>
        [DataMember(Name = ("frameId"), IsRequired = (true))]
        public string FrameId
        {
            get;
            private set;
        }

        /// <summary>
        /// Array of reasons why the page could not be cached. This must not be empty.
        /// </summary>
        [DataMember(Name = ("notRestoredExplanations"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Page.BackForwardCacheNotRestoredExplanation> NotRestoredExplanations
        {
            get;
            private set;
        }

        /// <summary>
        /// Tree structure of reasons why the page could not be cached for each frame.
        /// </summary>
        [DataMember(Name = ("notRestoredExplanationsTree"), IsRequired = (false))]
        public CefSharp.DevTools.Page.BackForwardCacheNotRestoredExplanationTree NotRestoredExplanationsTree
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// loadEventFired
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class LoadEventFiredEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Timestamp
        /// </summary>
        [DataMember(Name = ("timestamp"), IsRequired = (true))]
        public double Timestamp
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when same-document navigation happens, e.g. due to history API usage or anchor navigation.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class NavigatedWithinDocumentEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Id of the frame.
        /// </summary>
        [DataMember(Name = ("frameId"), IsRequired = (true))]
        public string FrameId
        {
            get;
            private set;
        }

        /// <summary>
        /// Frame&apos;s new url.
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (true))]
        public string Url
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Compressed image data requested by the `startScreencast`.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class ScreencastFrameEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Base64-encoded compressed image.
        /// </summary>
        [DataMember(Name = ("data"), IsRequired = (true))]
        public byte[] Data
        {
            get;
            private set;
        }

        /// <summary>
        /// Screencast frame metadata.
        /// </summary>
        [DataMember(Name = ("metadata"), IsRequired = (true))]
        public CefSharp.DevTools.Page.ScreencastFrameMetadata Metadata
        {
            get;
            private set;
        }

        /// <summary>
        /// Frame number.
        /// </summary>
        [DataMember(Name = ("sessionId"), IsRequired = (true))]
        public int SessionId
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when the page with currently enabled screencast was shown or hidden `.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class ScreencastVisibilityChangedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// True if the page is visible.
        /// </summary>
        [DataMember(Name = ("visible"), IsRequired = (true))]
        public bool Visible
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when a new window is going to be opened, via window.open(), link click, form submission,
    /// etc.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class WindowOpenEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// The URL for the new window.
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (true))]
        public string Url
        {
            get;
            private set;
        }

        /// <summary>
        /// Window name.
        /// </summary>
        [DataMember(Name = ("windowName"), IsRequired = (true))]
        public string WindowName
        {
            get;
            private set;
        }

        /// <summary>
        /// An array of enabled window features.
        /// </summary>
        [DataMember(Name = ("windowFeatures"), IsRequired = (true))]
        public string[] WindowFeatures
        {
            get;
            private set;
        }

        /// <summary>
        /// Whether or not it was triggered by user gesture.
        /// </summary>
        [DataMember(Name = ("userGesture"), IsRequired = (true))]
        public bool UserGesture
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Issued for every compilation cache generated. Is only available
    /// if Page.setGenerateCompilationCache is enabled.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class CompilationCacheProducedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Url
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (true))]
        public string Url
        {
            get;
            private set;
        }

        /// <summary>
        /// Base64-encoded data
        /// </summary>
        [DataMember(Name = ("data"), IsRequired = (true))]
        public byte[] Data
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.Performance
{
    /// <summary>
    /// Run-time execution metric.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class Metric : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Metric name.
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// Metric value.
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (true))]
        public double Value
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Current values of the metrics.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class MetricsEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Current values of the metrics.
        /// </summary>
        [DataMember(Name = ("metrics"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Performance.Metric> Metrics
        {
            get;
            private set;
        }

        /// <summary>
        /// Timestamp title.
        /// </summary>
        [DataMember(Name = ("title"), IsRequired = (true))]
        public string Title
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.PerformanceTimeline
{
    /// <summary>
    /// See https://github.com/WICG/LargestContentfulPaint and largest_contentful_paint.idl
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class LargestContentfulPaint : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// RenderTime
        /// </summary>
        [DataMember(Name = ("renderTime"), IsRequired = (true))]
        public double RenderTime
        {
            get;
            set;
        }

        /// <summary>
        /// LoadTime
        /// </summary>
        [DataMember(Name = ("loadTime"), IsRequired = (true))]
        public double LoadTime
        {
            get;
            set;
        }

        /// <summary>
        /// The number of pixels being painted.
        /// </summary>
        [DataMember(Name = ("size"), IsRequired = (true))]
        public double Size
        {
            get;
            set;
        }

        /// <summary>
        /// The id attribute of the element, if available.
        /// </summary>
        [DataMember(Name = ("elementId"), IsRequired = (false))]
        public string ElementId
        {
            get;
            set;
        }

        /// <summary>
        /// The URL of the image (may be trimmed).
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (false))]
        public string Url
        {
            get;
            set;
        }

        /// <summary>
        /// NodeId
        /// </summary>
        [DataMember(Name = ("nodeId"), IsRequired = (false))]
        public int? NodeId
        {
            get;
            set;
        }
    }

    /// <summary>
    /// LayoutShiftAttribution
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class LayoutShiftAttribution : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// PreviousRect
        /// </summary>
        [DataMember(Name = ("previousRect"), IsRequired = (true))]
        public CefSharp.DevTools.DOM.Rect PreviousRect
        {
            get;
            set;
        }

        /// <summary>
        /// CurrentRect
        /// </summary>
        [DataMember(Name = ("currentRect"), IsRequired = (true))]
        public CefSharp.DevTools.DOM.Rect CurrentRect
        {
            get;
            set;
        }

        /// <summary>
        /// NodeId
        /// </summary>
        [DataMember(Name = ("nodeId"), IsRequired = (false))]
        public int? NodeId
        {
            get;
            set;
        }
    }

    /// <summary>
    /// See https://wicg.github.io/layout-instability/#sec-layout-shift and layout_shift.idl
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class LayoutShift : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Score increment produced by this event.
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (true))]
        public double Value
        {
            get;
            set;
        }

        /// <summary>
        /// HadRecentInput
        /// </summary>
        [DataMember(Name = ("hadRecentInput"), IsRequired = (true))]
        public bool HadRecentInput
        {
            get;
            set;
        }

        /// <summary>
        /// LastInputTime
        /// </summary>
        [DataMember(Name = ("lastInputTime"), IsRequired = (true))]
        public double LastInputTime
        {
            get;
            set;
        }

        /// <summary>
        /// Sources
        /// </summary>
        [DataMember(Name = ("sources"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.PerformanceTimeline.LayoutShiftAttribution> Sources
        {
            get;
            set;
        }
    }

    /// <summary>
    /// TimelineEvent
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class TimelineEvent : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Identifies the frame that this event is related to. Empty for non-frame targets.
        /// </summary>
        [DataMember(Name = ("frameId"), IsRequired = (true))]
        public string FrameId
        {
            get;
            set;
        }

        /// <summary>
        /// The event type, as specified in https://w3c.github.io/performance-timeline/#dom-performanceentry-entrytype
        /// This determines which of the optional &quot;details&quot; fields is present.
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (true))]
        public string Type
        {
            get;
            set;
        }

        /// <summary>
        /// Name may be empty depending on the type.
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// Time in seconds since Epoch, monotonically increasing within document lifetime.
        /// </summary>
        [DataMember(Name = ("time"), IsRequired = (true))]
        public double Time
        {
            get;
            set;
        }

        /// <summary>
        /// Event duration, if applicable.
        /// </summary>
        [DataMember(Name = ("duration"), IsRequired = (false))]
        public double? Duration
        {
            get;
            set;
        }

        /// <summary>
        /// LcpDetails
        /// </summary>
        [DataMember(Name = ("lcpDetails"), IsRequired = (false))]
        public CefSharp.DevTools.PerformanceTimeline.LargestContentfulPaint LcpDetails
        {
            get;
            set;
        }

        /// <summary>
        /// LayoutShiftDetails
        /// </summary>
        [DataMember(Name = ("layoutShiftDetails"), IsRequired = (false))]
        public CefSharp.DevTools.PerformanceTimeline.LayoutShift LayoutShiftDetails
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Sent when a performance timeline event is added. See reportPerformanceTimeline method.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class TimelineEventAddedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Event
        /// </summary>
        [DataMember(Name = ("event"), IsRequired = (true))]
        public CefSharp.DevTools.PerformanceTimeline.TimelineEvent Event
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.Security
{
    /// <summary>
    /// A description of mixed content (HTTP resources on HTTPS pages), as defined by
    /// https://www.w3.org/TR/mixed-content/#categories
    /// </summary>
    public enum MixedContentType
    {
        /// <summary>
        /// blockable
        /// </summary>
        [EnumMember(Value = ("blockable"))]
        Blockable,
        /// <summary>
        /// optionally-blockable
        /// </summary>
        [EnumMember(Value = ("optionally-blockable"))]
        OptionallyBlockable,
        /// <summary>
        /// none
        /// </summary>
        [EnumMember(Value = ("none"))]
        None
    }

    /// <summary>
    /// The security level of a page or resource.
    /// </summary>
    public enum SecurityState
    {
        /// <summary>
        /// unknown
        /// </summary>
        [EnumMember(Value = ("unknown"))]
        Unknown,
        /// <summary>
        /// neutral
        /// </summary>
        [EnumMember(Value = ("neutral"))]
        Neutral,
        /// <summary>
        /// insecure
        /// </summary>
        [EnumMember(Value = ("insecure"))]
        Insecure,
        /// <summary>
        /// secure
        /// </summary>
        [EnumMember(Value = ("secure"))]
        Secure,
        /// <summary>
        /// info
        /// </summary>
        [EnumMember(Value = ("info"))]
        Info,
        /// <summary>
        /// insecure-broken
        /// </summary>
        [EnumMember(Value = ("insecure-broken"))]
        InsecureBroken
    }

    /// <summary>
    /// Details about the security state of the page certificate.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CertificateSecurityState : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Protocol name (e.g. &quot;TLS 1.2&quot; or &quot;QUIC&quot;).
        /// </summary>
        [DataMember(Name = ("protocol"), IsRequired = (true))]
        public string Protocol
        {
            get;
            set;
        }

        /// <summary>
        /// Key Exchange used by the connection, or the empty string if not applicable.
        /// </summary>
        [DataMember(Name = ("keyExchange"), IsRequired = (true))]
        public string KeyExchange
        {
            get;
            set;
        }

        /// <summary>
        /// (EC)DH group used by the connection, if applicable.
        /// </summary>
        [DataMember(Name = ("keyExchangeGroup"), IsRequired = (false))]
        public string KeyExchangeGroup
        {
            get;
            set;
        }

        /// <summary>
        /// Cipher name.
        /// </summary>
        [DataMember(Name = ("cipher"), IsRequired = (true))]
        public string Cipher
        {
            get;
            set;
        }

        /// <summary>
        /// TLS MAC. Note that AEAD ciphers do not have separate MACs.
        /// </summary>
        [DataMember(Name = ("mac"), IsRequired = (false))]
        public string Mac
        {
            get;
            set;
        }

        /// <summary>
        /// Page certificate.
        /// </summary>
        [DataMember(Name = ("certificate"), IsRequired = (true))]
        public string[] Certificate
        {
            get;
            set;
        }

        /// <summary>
        /// Certificate subject name.
        /// </summary>
        [DataMember(Name = ("subjectName"), IsRequired = (true))]
        public string SubjectName
        {
            get;
            set;
        }

        /// <summary>
        /// Name of the issuing CA.
        /// </summary>
        [DataMember(Name = ("issuer"), IsRequired = (true))]
        public string Issuer
        {
            get;
            set;
        }

        /// <summary>
        /// Certificate valid from date.
        /// </summary>
        [DataMember(Name = ("validFrom"), IsRequired = (true))]
        public double ValidFrom
        {
            get;
            set;
        }

        /// <summary>
        /// Certificate valid to (expiration) date
        /// </summary>
        [DataMember(Name = ("validTo"), IsRequired = (true))]
        public double ValidTo
        {
            get;
            set;
        }

        /// <summary>
        /// The highest priority network error code, if the certificate has an error.
        /// </summary>
        [DataMember(Name = ("certificateNetworkError"), IsRequired = (false))]
        public string CertificateNetworkError
        {
            get;
            set;
        }

        /// <summary>
        /// True if the certificate uses a weak signature algorithm.
        /// </summary>
        [DataMember(Name = ("certificateHasWeakSignature"), IsRequired = (true))]
        public bool CertificateHasWeakSignature
        {
            get;
            set;
        }

        /// <summary>
        /// True if the certificate has a SHA1 signature in the chain.
        /// </summary>
        [DataMember(Name = ("certificateHasSha1Signature"), IsRequired = (true))]
        public bool CertificateHasSha1Signature
        {
            get;
            set;
        }

        /// <summary>
        /// True if modern SSL
        /// </summary>
        [DataMember(Name = ("modernSSL"), IsRequired = (true))]
        public bool ModernSSL
        {
            get;
            set;
        }

        /// <summary>
        /// True if the connection is using an obsolete SSL protocol.
        /// </summary>
        [DataMember(Name = ("obsoleteSslProtocol"), IsRequired = (true))]
        public bool ObsoleteSslProtocol
        {
            get;
            set;
        }

        /// <summary>
        /// True if the connection is using an obsolete SSL key exchange.
        /// </summary>
        [DataMember(Name = ("obsoleteSslKeyExchange"), IsRequired = (true))]
        public bool ObsoleteSslKeyExchange
        {
            get;
            set;
        }

        /// <summary>
        /// True if the connection is using an obsolete SSL cipher.
        /// </summary>
        [DataMember(Name = ("obsoleteSslCipher"), IsRequired = (true))]
        public bool ObsoleteSslCipher
        {
            get;
            set;
        }

        /// <summary>
        /// True if the connection is using an obsolete SSL signature.
        /// </summary>
        [DataMember(Name = ("obsoleteSslSignature"), IsRequired = (true))]
        public bool ObsoleteSslSignature
        {
            get;
            set;
        }
    }

    /// <summary>
    /// SafetyTipStatus
    /// </summary>
    public enum SafetyTipStatus
    {
        /// <summary>
        /// badReputation
        /// </summary>
        [EnumMember(Value = ("badReputation"))]
        BadReputation,
        /// <summary>
        /// lookalike
        /// </summary>
        [EnumMember(Value = ("lookalike"))]
        Lookalike
    }

    /// <summary>
    /// SafetyTipInfo
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class SafetyTipInfo : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Describes whether the page triggers any safety tips or reputation warnings. Default is unknown.
        /// </summary>
        public CefSharp.DevTools.Security.SafetyTipStatus SafetyTipStatus
        {
            get
            {
                return (CefSharp.DevTools.Security.SafetyTipStatus)(StringToEnum(typeof(CefSharp.DevTools.Security.SafetyTipStatus), safetyTipStatus));
            }

            set
            {
                this.safetyTipStatus = (EnumToString(value));
            }
        }

        /// <summary>
        /// Describes whether the page triggers any safety tips or reputation warnings. Default is unknown.
        /// </summary>
        [DataMember(Name = ("safetyTipStatus"), IsRequired = (true))]
        internal string safetyTipStatus
        {
            get;
            set;
        }

        /// <summary>
        /// The URL the safety tip suggested (&quot;Did you mean?&quot;). Only filled in for lookalike matches.
        /// </summary>
        [DataMember(Name = ("safeUrl"), IsRequired = (false))]
        public string SafeUrl
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Security state information about the page.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class VisibleSecurityState : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The security level of the page.
        /// </summary>
        public CefSharp.DevTools.Security.SecurityState SecurityState
        {
            get
            {
                return (CefSharp.DevTools.Security.SecurityState)(StringToEnum(typeof(CefSharp.DevTools.Security.SecurityState), securityState));
            }

            set
            {
                this.securityState = (EnumToString(value));
            }
        }

        /// <summary>
        /// The security level of the page.
        /// </summary>
        [DataMember(Name = ("securityState"), IsRequired = (true))]
        internal string securityState
        {
            get;
            set;
        }

        /// <summary>
        /// Security state details about the page certificate.
        /// </summary>
        [DataMember(Name = ("certificateSecurityState"), IsRequired = (false))]
        public CefSharp.DevTools.Security.CertificateSecurityState CertificateSecurityState
        {
            get;
            set;
        }

        /// <summary>
        /// The type of Safety Tip triggered on the page. Note that this field will be set even if the Safety Tip UI was not actually shown.
        /// </summary>
        [DataMember(Name = ("safetyTipInfo"), IsRequired = (false))]
        public CefSharp.DevTools.Security.SafetyTipInfo SafetyTipInfo
        {
            get;
            set;
        }

        /// <summary>
        /// Array of security state issues ids.
        /// </summary>
        [DataMember(Name = ("securityStateIssueIds"), IsRequired = (true))]
        public string[] SecurityStateIssueIds
        {
            get;
            set;
        }
    }

    /// <summary>
    /// An explanation of an factor contributing to the security state.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class SecurityStateExplanation : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Security state representing the severity of the factor being explained.
        /// </summary>
        public CefSharp.DevTools.Security.SecurityState SecurityState
        {
            get
            {
                return (CefSharp.DevTools.Security.SecurityState)(StringToEnum(typeof(CefSharp.DevTools.Security.SecurityState), securityState));
            }

            set
            {
                this.securityState = (EnumToString(value));
            }
        }

        /// <summary>
        /// Security state representing the severity of the factor being explained.
        /// </summary>
        [DataMember(Name = ("securityState"), IsRequired = (true))]
        internal string securityState
        {
            get;
            set;
        }

        /// <summary>
        /// Title describing the type of factor.
        /// </summary>
        [DataMember(Name = ("title"), IsRequired = (true))]
        public string Title
        {
            get;
            set;
        }

        /// <summary>
        /// Short phrase describing the type of factor.
        /// </summary>
        [DataMember(Name = ("summary"), IsRequired = (true))]
        public string Summary
        {
            get;
            set;
        }

        /// <summary>
        /// Full text explanation of the factor.
        /// </summary>
        [DataMember(Name = ("description"), IsRequired = (true))]
        public string Description
        {
            get;
            set;
        }

        /// <summary>
        /// The type of mixed content described by the explanation.
        /// </summary>
        public CefSharp.DevTools.Security.MixedContentType MixedContentType
        {
            get
            {
                return (CefSharp.DevTools.Security.MixedContentType)(StringToEnum(typeof(CefSharp.DevTools.Security.MixedContentType), mixedContentType));
            }

            set
            {
                this.mixedContentType = (EnumToString(value));
            }
        }

        /// <summary>
        /// The type of mixed content described by the explanation.
        /// </summary>
        [DataMember(Name = ("mixedContentType"), IsRequired = (true))]
        internal string mixedContentType
        {
            get;
            set;
        }

        /// <summary>
        /// Page certificate.
        /// </summary>
        [DataMember(Name = ("certificate"), IsRequired = (true))]
        public string[] Certificate
        {
            get;
            set;
        }

        /// <summary>
        /// Recommendations to fix any issues.
        /// </summary>
        [DataMember(Name = ("recommendations"), IsRequired = (false))]
        public string[] Recommendations
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Information about insecure content on the page.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class InsecureContentStatus : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Always false.
        /// </summary>
        [DataMember(Name = ("ranMixedContent"), IsRequired = (true))]
        public bool RanMixedContent
        {
            get;
            set;
        }

        /// <summary>
        /// Always false.
        /// </summary>
        [DataMember(Name = ("displayedMixedContent"), IsRequired = (true))]
        public bool DisplayedMixedContent
        {
            get;
            set;
        }

        /// <summary>
        /// Always false.
        /// </summary>
        [DataMember(Name = ("containedMixedForm"), IsRequired = (true))]
        public bool ContainedMixedForm
        {
            get;
            set;
        }

        /// <summary>
        /// Always false.
        /// </summary>
        [DataMember(Name = ("ranContentWithCertErrors"), IsRequired = (true))]
        public bool RanContentWithCertErrors
        {
            get;
            set;
        }

        /// <summary>
        /// Always false.
        /// </summary>
        [DataMember(Name = ("displayedContentWithCertErrors"), IsRequired = (true))]
        public bool DisplayedContentWithCertErrors
        {
            get;
            set;
        }

        /// <summary>
        /// Always set to unknown.
        /// </summary>
        public CefSharp.DevTools.Security.SecurityState RanInsecureContentStyle
        {
            get
            {
                return (CefSharp.DevTools.Security.SecurityState)(StringToEnum(typeof(CefSharp.DevTools.Security.SecurityState), ranInsecureContentStyle));
            }

            set
            {
                this.ranInsecureContentStyle = (EnumToString(value));
            }
        }

        /// <summary>
        /// Always set to unknown.
        /// </summary>
        [DataMember(Name = ("ranInsecureContentStyle"), IsRequired = (true))]
        internal string ranInsecureContentStyle
        {
            get;
            set;
        }

        /// <summary>
        /// Always set to unknown.
        /// </summary>
        public CefSharp.DevTools.Security.SecurityState DisplayedInsecureContentStyle
        {
            get
            {
                return (CefSharp.DevTools.Security.SecurityState)(StringToEnum(typeof(CefSharp.DevTools.Security.SecurityState), displayedInsecureContentStyle));
            }

            set
            {
                this.displayedInsecureContentStyle = (EnumToString(value));
            }
        }

        /// <summary>
        /// Always set to unknown.
        /// </summary>
        [DataMember(Name = ("displayedInsecureContentStyle"), IsRequired = (true))]
        internal string displayedInsecureContentStyle
        {
            get;
            set;
        }
    }

    /// <summary>
    /// The action to take when a certificate error occurs. continue will continue processing the
    /// request and cancel will cancel the request.
    /// </summary>
    public enum CertificateErrorAction
    {
        /// <summary>
        /// continue
        /// </summary>
        [EnumMember(Value = ("continue"))]
        Continue,
        /// <summary>
        /// cancel
        /// </summary>
        [EnumMember(Value = ("cancel"))]
        Cancel
    }

    /// <summary>
    /// There is a certificate error. If overriding certificate errors is enabled, then it should be
    /// handled with the `handleCertificateError` command. Note: this event does not fire if the
    /// certificate error has been allowed internally. Only one client per target should override
    /// certificate errors at the same time.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class CertificateErrorEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// The ID of the event.
        /// </summary>
        [DataMember(Name = ("eventId"), IsRequired = (true))]
        public int EventId
        {
            get;
            private set;
        }

        /// <summary>
        /// The type of the error.
        /// </summary>
        [DataMember(Name = ("errorType"), IsRequired = (true))]
        public string ErrorType
        {
            get;
            private set;
        }

        /// <summary>
        /// The url that was requested.
        /// </summary>
        [DataMember(Name = ("requestURL"), IsRequired = (true))]
        public string RequestURL
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// The security state of the page changed.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class VisibleSecurityStateChangedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Security state information about the page.
        /// </summary>
        [DataMember(Name = ("visibleSecurityState"), IsRequired = (true))]
        public CefSharp.DevTools.Security.VisibleSecurityState VisibleSecurityState
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// The security state of the page changed. No longer being sent.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class SecurityStateChangedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Security state.
        /// </summary>
        public CefSharp.DevTools.Security.SecurityState SecurityState
        {
            get
            {
                return (CefSharp.DevTools.Security.SecurityState)(StringToEnum(typeof(CefSharp.DevTools.Security.SecurityState), securityState));
            }

            set
            {
                this.securityState = (EnumToString(value));
            }
        }

        /// <summary>
        /// Security state.
        /// </summary>
        [DataMember(Name = ("securityState"), IsRequired = (true))]
        internal string securityState
        {
            get;
            private set;
        }

        /// <summary>
        /// True if the page was loaded over cryptographic transport such as HTTPS.
        /// </summary>
        [DataMember(Name = ("schemeIsCryptographic"), IsRequired = (true))]
        public bool SchemeIsCryptographic
        {
            get;
            private set;
        }

        /// <summary>
        /// Previously a list of explanations for the security state. Now always
        /// empty.
        /// </summary>
        [DataMember(Name = ("explanations"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Security.SecurityStateExplanation> Explanations
        {
            get;
            private set;
        }

        /// <summary>
        /// Information about insecure content on the page.
        /// </summary>
        [DataMember(Name = ("insecureContentStatus"), IsRequired = (true))]
        public CefSharp.DevTools.Security.InsecureContentStatus InsecureContentStatus
        {
            get;
            private set;
        }

        /// <summary>
        /// Overrides user-visible description of the state. Always omitted.
        /// </summary>
        [DataMember(Name = ("summary"), IsRequired = (false))]
        public string Summary
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.ServiceWorker
{
    /// <summary>
    /// ServiceWorker registration.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ServiceWorkerRegistration : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// RegistrationId
        /// </summary>
        [DataMember(Name = ("registrationId"), IsRequired = (true))]
        public string RegistrationId
        {
            get;
            set;
        }

        /// <summary>
        /// ScopeURL
        /// </summary>
        [DataMember(Name = ("scopeURL"), IsRequired = (true))]
        public string ScopeURL
        {
            get;
            set;
        }

        /// <summary>
        /// IsDeleted
        /// </summary>
        [DataMember(Name = ("isDeleted"), IsRequired = (true))]
        public bool IsDeleted
        {
            get;
            set;
        }
    }

    /// <summary>
    /// ServiceWorkerVersionRunningStatus
    /// </summary>
    public enum ServiceWorkerVersionRunningStatus
    {
        /// <summary>
        /// stopped
        /// </summary>
        [EnumMember(Value = ("stopped"))]
        Stopped,
        /// <summary>
        /// starting
        /// </summary>
        [EnumMember(Value = ("starting"))]
        Starting,
        /// <summary>
        /// running
        /// </summary>
        [EnumMember(Value = ("running"))]
        Running,
        /// <summary>
        /// stopping
        /// </summary>
        [EnumMember(Value = ("stopping"))]
        Stopping
    }

    /// <summary>
    /// ServiceWorkerVersionStatus
    /// </summary>
    public enum ServiceWorkerVersionStatus
    {
        /// <summary>
        /// new
        /// </summary>
        [EnumMember(Value = ("new"))]
        New,
        /// <summary>
        /// installing
        /// </summary>
        [EnumMember(Value = ("installing"))]
        Installing,
        /// <summary>
        /// installed
        /// </summary>
        [EnumMember(Value = ("installed"))]
        Installed,
        /// <summary>
        /// activating
        /// </summary>
        [EnumMember(Value = ("activating"))]
        Activating,
        /// <summary>
        /// activated
        /// </summary>
        [EnumMember(Value = ("activated"))]
        Activated,
        /// <summary>
        /// redundant
        /// </summary>
        [EnumMember(Value = ("redundant"))]
        Redundant
    }

    /// <summary>
    /// ServiceWorker version.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ServiceWorkerVersion : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// VersionId
        /// </summary>
        [DataMember(Name = ("versionId"), IsRequired = (true))]
        public string VersionId
        {
            get;
            set;
        }

        /// <summary>
        /// RegistrationId
        /// </summary>
        [DataMember(Name = ("registrationId"), IsRequired = (true))]
        public string RegistrationId
        {
            get;
            set;
        }

        /// <summary>
        /// ScriptURL
        /// </summary>
        [DataMember(Name = ("scriptURL"), IsRequired = (true))]
        public string ScriptURL
        {
            get;
            set;
        }

        /// <summary>
        /// RunningStatus
        /// </summary>
        public CefSharp.DevTools.ServiceWorker.ServiceWorkerVersionRunningStatus RunningStatus
        {
            get
            {
                return (CefSharp.DevTools.ServiceWorker.ServiceWorkerVersionRunningStatus)(StringToEnum(typeof(CefSharp.DevTools.ServiceWorker.ServiceWorkerVersionRunningStatus), runningStatus));
            }

            set
            {
                this.runningStatus = (EnumToString(value));
            }
        }

        /// <summary>
        /// RunningStatus
        /// </summary>
        [DataMember(Name = ("runningStatus"), IsRequired = (true))]
        internal string runningStatus
        {
            get;
            set;
        }

        /// <summary>
        /// Status
        /// </summary>
        public CefSharp.DevTools.ServiceWorker.ServiceWorkerVersionStatus Status
        {
            get
            {
                return (CefSharp.DevTools.ServiceWorker.ServiceWorkerVersionStatus)(StringToEnum(typeof(CefSharp.DevTools.ServiceWorker.ServiceWorkerVersionStatus), status));
            }

            set
            {
                this.status = (EnumToString(value));
            }
        }

        /// <summary>
        /// Status
        /// </summary>
        [DataMember(Name = ("status"), IsRequired = (true))]
        internal string status
        {
            get;
            set;
        }

        /// <summary>
        /// The Last-Modified header value of the main script.
        /// </summary>
        [DataMember(Name = ("scriptLastModified"), IsRequired = (false))]
        public double? ScriptLastModified
        {
            get;
            set;
        }

        /// <summary>
        /// The time at which the response headers of the main script were received from the server.
        /// For cached script it is the last time the cache entry was validated.
        /// </summary>
        [DataMember(Name = ("scriptResponseTime"), IsRequired = (false))]
        public double? ScriptResponseTime
        {
            get;
            set;
        }

        /// <summary>
        /// ControlledClients
        /// </summary>
        [DataMember(Name = ("controlledClients"), IsRequired = (false))]
        public string[] ControlledClients
        {
            get;
            set;
        }

        /// <summary>
        /// TargetId
        /// </summary>
        [DataMember(Name = ("targetId"), IsRequired = (false))]
        public string TargetId
        {
            get;
            set;
        }

        /// <summary>
        /// RouterRules
        /// </summary>
        [DataMember(Name = ("routerRules"), IsRequired = (false))]
        public string RouterRules
        {
            get;
            set;
        }
    }

    /// <summary>
    /// ServiceWorker error message.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ServiceWorkerErrorMessage : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// ErrorMessage
        /// </summary>
        [DataMember(Name = ("errorMessage"), IsRequired = (true))]
        public string ErrorMessage
        {
            get;
            set;
        }

        /// <summary>
        /// RegistrationId
        /// </summary>
        [DataMember(Name = ("registrationId"), IsRequired = (true))]
        public string RegistrationId
        {
            get;
            set;
        }

        /// <summary>
        /// VersionId
        /// </summary>
        [DataMember(Name = ("versionId"), IsRequired = (true))]
        public string VersionId
        {
            get;
            set;
        }

        /// <summary>
        /// SourceURL
        /// </summary>
        [DataMember(Name = ("sourceURL"), IsRequired = (true))]
        public string SourceURL
        {
            get;
            set;
        }

        /// <summary>
        /// LineNumber
        /// </summary>
        [DataMember(Name = ("lineNumber"), IsRequired = (true))]
        public int LineNumber
        {
            get;
            set;
        }

        /// <summary>
        /// ColumnNumber
        /// </summary>
        [DataMember(Name = ("columnNumber"), IsRequired = (true))]
        public int ColumnNumber
        {
            get;
            set;
        }
    }

    /// <summary>
    /// workerErrorReported
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class WorkerErrorReportedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// ErrorMessage
        /// </summary>
        [DataMember(Name = ("errorMessage"), IsRequired = (true))]
        public CefSharp.DevTools.ServiceWorker.ServiceWorkerErrorMessage ErrorMessage
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// workerRegistrationUpdated
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class WorkerRegistrationUpdatedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Registrations
        /// </summary>
        [DataMember(Name = ("registrations"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.ServiceWorker.ServiceWorkerRegistration> Registrations
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// workerVersionUpdated
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class WorkerVersionUpdatedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Versions
        /// </summary>
        [DataMember(Name = ("versions"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.ServiceWorker.ServiceWorkerVersion> Versions
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.Storage
{
    /// <summary>
    /// Enum of possible storage types.
    /// </summary>
    public enum StorageType
    {
        /// <summary>
        /// appcache
        /// </summary>
        [EnumMember(Value = ("appcache"))]
        Appcache,
        /// <summary>
        /// cookies
        /// </summary>
        [EnumMember(Value = ("cookies"))]
        Cookies,
        /// <summary>
        /// file_systems
        /// </summary>
        [EnumMember(Value = ("file_systems"))]
        FileSystems,
        /// <summary>
        /// indexeddb
        /// </summary>
        [EnumMember(Value = ("indexeddb"))]
        Indexeddb,
        /// <summary>
        /// local_storage
        /// </summary>
        [EnumMember(Value = ("local_storage"))]
        LocalStorage,
        /// <summary>
        /// shader_cache
        /// </summary>
        [EnumMember(Value = ("shader_cache"))]
        ShaderCache,
        /// <summary>
        /// websql
        /// </summary>
        [EnumMember(Value = ("websql"))]
        Websql,
        /// <summary>
        /// service_workers
        /// </summary>
        [EnumMember(Value = ("service_workers"))]
        ServiceWorkers,
        /// <summary>
        /// cache_storage
        /// </summary>
        [EnumMember(Value = ("cache_storage"))]
        CacheStorage,
        /// <summary>
        /// interest_groups
        /// </summary>
        [EnumMember(Value = ("interest_groups"))]
        InterestGroups,
        /// <summary>
        /// shared_storage
        /// </summary>
        [EnumMember(Value = ("shared_storage"))]
        SharedStorage,
        /// <summary>
        /// storage_buckets
        /// </summary>
        [EnumMember(Value = ("storage_buckets"))]
        StorageBuckets,
        /// <summary>
        /// all
        /// </summary>
        [EnumMember(Value = ("all"))]
        All,
        /// <summary>
        /// other
        /// </summary>
        [EnumMember(Value = ("other"))]
        Other
    }

    /// <summary>
    /// Usage for a storage type.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class UsageForType : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Name of storage type.
        /// </summary>
        public CefSharp.DevTools.Storage.StorageType StorageType
        {
            get
            {
                return (CefSharp.DevTools.Storage.StorageType)(StringToEnum(typeof(CefSharp.DevTools.Storage.StorageType), storageType));
            }

            set
            {
                this.storageType = (EnumToString(value));
            }
        }

        /// <summary>
        /// Name of storage type.
        /// </summary>
        [DataMember(Name = ("storageType"), IsRequired = (true))]
        internal string storageType
        {
            get;
            set;
        }

        /// <summary>
        /// Storage usage (bytes).
        /// </summary>
        [DataMember(Name = ("usage"), IsRequired = (true))]
        public double Usage
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Pair of issuer origin and number of available (signed, but not used) Trust
    /// Tokens from that issuer.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class TrustTokens : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// IssuerOrigin
        /// </summary>
        [DataMember(Name = ("issuerOrigin"), IsRequired = (true))]
        public string IssuerOrigin
        {
            get;
            set;
        }

        /// <summary>
        /// Count
        /// </summary>
        [DataMember(Name = ("count"), IsRequired = (true))]
        public double Count
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Enum of interest group access types.
    /// </summary>
    public enum InterestGroupAccessType
    {
        /// <summary>
        /// join
        /// </summary>
        [EnumMember(Value = ("join"))]
        Join,
        /// <summary>
        /// leave
        /// </summary>
        [EnumMember(Value = ("leave"))]
        Leave,
        /// <summary>
        /// update
        /// </summary>
        [EnumMember(Value = ("update"))]
        Update,
        /// <summary>
        /// loaded
        /// </summary>
        [EnumMember(Value = ("loaded"))]
        Loaded,
        /// <summary>
        /// bid
        /// </summary>
        [EnumMember(Value = ("bid"))]
        Bid,
        /// <summary>
        /// win
        /// </summary>
        [EnumMember(Value = ("win"))]
        Win,
        /// <summary>
        /// additionalBid
        /// </summary>
        [EnumMember(Value = ("additionalBid"))]
        AdditionalBid,
        /// <summary>
        /// additionalBidWin
        /// </summary>
        [EnumMember(Value = ("additionalBidWin"))]
        AdditionalBidWin,
        /// <summary>
        /// topLevelBid
        /// </summary>
        [EnumMember(Value = ("topLevelBid"))]
        TopLevelBid,
        /// <summary>
        /// topLevelAdditionalBid
        /// </summary>
        [EnumMember(Value = ("topLevelAdditionalBid"))]
        TopLevelAdditionalBid,
        /// <summary>
        /// clear
        /// </summary>
        [EnumMember(Value = ("clear"))]
        Clear
    }

    /// <summary>
    /// Enum of auction events.
    /// </summary>
    public enum InterestGroupAuctionEventType
    {
        /// <summary>
        /// started
        /// </summary>
        [EnumMember(Value = ("started"))]
        Started,
        /// <summary>
        /// configResolved
        /// </summary>
        [EnumMember(Value = ("configResolved"))]
        ConfigResolved
    }

    /// <summary>
    /// Enum of network fetches auctions can do.
    /// </summary>
    public enum InterestGroupAuctionFetchType
    {
        /// <summary>
        /// bidderJs
        /// </summary>
        [EnumMember(Value = ("bidderJs"))]
        BidderJs,
        /// <summary>
        /// bidderWasm
        /// </summary>
        [EnumMember(Value = ("bidderWasm"))]
        BidderWasm,
        /// <summary>
        /// sellerJs
        /// </summary>
        [EnumMember(Value = ("sellerJs"))]
        SellerJs,
        /// <summary>
        /// bidderTrustedSignals
        /// </summary>
        [EnumMember(Value = ("bidderTrustedSignals"))]
        BidderTrustedSignals,
        /// <summary>
        /// sellerTrustedSignals
        /// </summary>
        [EnumMember(Value = ("sellerTrustedSignals"))]
        SellerTrustedSignals
    }

    /// <summary>
    /// Ad advertising element inside an interest group.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class InterestGroupAd : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// RenderURL
        /// </summary>
        [DataMember(Name = ("renderURL"), IsRequired = (true))]
        public string RenderURL
        {
            get;
            set;
        }

        /// <summary>
        /// Metadata
        /// </summary>
        [DataMember(Name = ("metadata"), IsRequired = (false))]
        public string Metadata
        {
            get;
            set;
        }
    }

    /// <summary>
    /// The full details of an interest group.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class InterestGroupDetails : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// OwnerOrigin
        /// </summary>
        [DataMember(Name = ("ownerOrigin"), IsRequired = (true))]
        public string OwnerOrigin
        {
            get;
            set;
        }

        /// <summary>
        /// Name
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// ExpirationTime
        /// </summary>
        [DataMember(Name = ("expirationTime"), IsRequired = (true))]
        public double ExpirationTime
        {
            get;
            set;
        }

        /// <summary>
        /// JoiningOrigin
        /// </summary>
        [DataMember(Name = ("joiningOrigin"), IsRequired = (true))]
        public string JoiningOrigin
        {
            get;
            set;
        }

        /// <summary>
        /// BiddingLogicURL
        /// </summary>
        [DataMember(Name = ("biddingLogicURL"), IsRequired = (false))]
        public string BiddingLogicURL
        {
            get;
            set;
        }

        /// <summary>
        /// BiddingWasmHelperURL
        /// </summary>
        [DataMember(Name = ("biddingWasmHelperURL"), IsRequired = (false))]
        public string BiddingWasmHelperURL
        {
            get;
            set;
        }

        /// <summary>
        /// UpdateURL
        /// </summary>
        [DataMember(Name = ("updateURL"), IsRequired = (false))]
        public string UpdateURL
        {
            get;
            set;
        }

        /// <summary>
        /// TrustedBiddingSignalsURL
        /// </summary>
        [DataMember(Name = ("trustedBiddingSignalsURL"), IsRequired = (false))]
        public string TrustedBiddingSignalsURL
        {
            get;
            set;
        }

        /// <summary>
        /// TrustedBiddingSignalsKeys
        /// </summary>
        [DataMember(Name = ("trustedBiddingSignalsKeys"), IsRequired = (true))]
        public string[] TrustedBiddingSignalsKeys
        {
            get;
            set;
        }

        /// <summary>
        /// UserBiddingSignals
        /// </summary>
        [DataMember(Name = ("userBiddingSignals"), IsRequired = (false))]
        public string UserBiddingSignals
        {
            get;
            set;
        }

        /// <summary>
        /// Ads
        /// </summary>
        [DataMember(Name = ("ads"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Storage.InterestGroupAd> Ads
        {
            get;
            set;
        }

        /// <summary>
        /// AdComponents
        /// </summary>
        [DataMember(Name = ("adComponents"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Storage.InterestGroupAd> AdComponents
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Enum of shared storage access types.
    /// </summary>
    public enum SharedStorageAccessType
    {
        /// <summary>
        /// documentAddModule
        /// </summary>
        [EnumMember(Value = ("documentAddModule"))]
        DocumentAddModule,
        /// <summary>
        /// documentSelectURL
        /// </summary>
        [EnumMember(Value = ("documentSelectURL"))]
        DocumentSelectURL,
        /// <summary>
        /// documentRun
        /// </summary>
        [EnumMember(Value = ("documentRun"))]
        DocumentRun,
        /// <summary>
        /// documentSet
        /// </summary>
        [EnumMember(Value = ("documentSet"))]
        DocumentSet,
        /// <summary>
        /// documentAppend
        /// </summary>
        [EnumMember(Value = ("documentAppend"))]
        DocumentAppend,
        /// <summary>
        /// documentDelete
        /// </summary>
        [EnumMember(Value = ("documentDelete"))]
        DocumentDelete,
        /// <summary>
        /// documentClear
        /// </summary>
        [EnumMember(Value = ("documentClear"))]
        DocumentClear,
        /// <summary>
        /// workletSet
        /// </summary>
        [EnumMember(Value = ("workletSet"))]
        WorkletSet,
        /// <summary>
        /// workletAppend
        /// </summary>
        [EnumMember(Value = ("workletAppend"))]
        WorkletAppend,
        /// <summary>
        /// workletDelete
        /// </summary>
        [EnumMember(Value = ("workletDelete"))]
        WorkletDelete,
        /// <summary>
        /// workletClear
        /// </summary>
        [EnumMember(Value = ("workletClear"))]
        WorkletClear,
        /// <summary>
        /// workletGet
        /// </summary>
        [EnumMember(Value = ("workletGet"))]
        WorkletGet,
        /// <summary>
        /// workletKeys
        /// </summary>
        [EnumMember(Value = ("workletKeys"))]
        WorkletKeys,
        /// <summary>
        /// workletEntries
        /// </summary>
        [EnumMember(Value = ("workletEntries"))]
        WorkletEntries,
        /// <summary>
        /// workletLength
        /// </summary>
        [EnumMember(Value = ("workletLength"))]
        WorkletLength,
        /// <summary>
        /// workletRemainingBudget
        /// </summary>
        [EnumMember(Value = ("workletRemainingBudget"))]
        WorkletRemainingBudget
    }

    /// <summary>
    /// Struct for a single key-value pair in an origin&apos;s shared storage.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class SharedStorageEntry : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Key
        /// </summary>
        [DataMember(Name = ("key"), IsRequired = (true))]
        public string Key
        {
            get;
            set;
        }

        /// <summary>
        /// Value
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (true))]
        public string Value
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Details for an origin&apos;s shared storage.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class SharedStorageMetadata : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Time when the origin&apos;s shared storage was last created.
        /// </summary>
        [DataMember(Name = ("creationTime"), IsRequired = (true))]
        public double CreationTime
        {
            get;
            set;
        }

        /// <summary>
        /// Number of key-value pairs stored in origin&apos;s shared storage.
        /// </summary>
        [DataMember(Name = ("length"), IsRequired = (true))]
        public int Length
        {
            get;
            set;
        }

        /// <summary>
        /// Current amount of bits of entropy remaining in the navigation budget.
        /// </summary>
        [DataMember(Name = ("remainingBudget"), IsRequired = (true))]
        public double RemainingBudget
        {
            get;
            set;
        }

        /// <summary>
        /// Total number of bytes stored as key-value pairs in origin&apos;s shared
        /// storage.
        /// </summary>
        [DataMember(Name = ("bytesUsed"), IsRequired = (true))]
        public int BytesUsed
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Pair of reporting metadata details for a candidate URL for `selectURL()`.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class SharedStorageReportingMetadata : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// EventType
        /// </summary>
        [DataMember(Name = ("eventType"), IsRequired = (true))]
        public string EventType
        {
            get;
            set;
        }

        /// <summary>
        /// ReportingUrl
        /// </summary>
        [DataMember(Name = ("reportingUrl"), IsRequired = (true))]
        public string ReportingUrl
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Bundles a candidate URL with its reporting metadata.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class SharedStorageUrlWithMetadata : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Spec of candidate URL.
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (true))]
        public string Url
        {
            get;
            set;
        }

        /// <summary>
        /// Any associated reporting metadata.
        /// </summary>
        [DataMember(Name = ("reportingMetadata"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Storage.SharedStorageReportingMetadata> ReportingMetadata
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Bundles the parameters for shared storage access events whose
    /// presence/absence can vary according to SharedStorageAccessType.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class SharedStorageAccessParams : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Spec of the module script URL.
        /// Present only for SharedStorageAccessType.documentAddModule.
        /// </summary>
        [DataMember(Name = ("scriptSourceUrl"), IsRequired = (false))]
        public string ScriptSourceUrl
        {
            get;
            set;
        }

        /// <summary>
        /// Name of the registered operation to be run.
        /// Present only for SharedStorageAccessType.documentRun and
        /// SharedStorageAccessType.documentSelectURL.
        /// </summary>
        [DataMember(Name = ("operationName"), IsRequired = (false))]
        public string OperationName
        {
            get;
            set;
        }

        /// <summary>
        /// The operation&apos;s serialized data in bytes (converted to a string).
        /// Present only for SharedStorageAccessType.documentRun and
        /// SharedStorageAccessType.documentSelectURL.
        /// </summary>
        [DataMember(Name = ("serializedData"), IsRequired = (false))]
        public string SerializedData
        {
            get;
            set;
        }

        /// <summary>
        /// Array of candidate URLs&apos; specs, along with any associated metadata.
        /// Present only for SharedStorageAccessType.documentSelectURL.
        /// </summary>
        [DataMember(Name = ("urlsWithMetadata"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Storage.SharedStorageUrlWithMetadata> UrlsWithMetadata
        {
            get;
            set;
        }

        /// <summary>
        /// Key for a specific entry in an origin&apos;s shared storage.
        /// Present only for SharedStorageAccessType.documentSet,
        /// SharedStorageAccessType.documentAppend,
        /// SharedStorageAccessType.documentDelete,
        /// SharedStorageAccessType.workletSet,
        /// SharedStorageAccessType.workletAppend,
        /// SharedStorageAccessType.workletDelete, and
        /// SharedStorageAccessType.workletGet.
        /// </summary>
        [DataMember(Name = ("key"), IsRequired = (false))]
        public string Key
        {
            get;
            set;
        }

        /// <summary>
        /// Value for a specific entry in an origin&apos;s shared storage.
        /// Present only for SharedStorageAccessType.documentSet,
        /// SharedStorageAccessType.documentAppend,
        /// SharedStorageAccessType.workletSet, and
        /// SharedStorageAccessType.workletAppend.
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (false))]
        public string Value
        {
            get;
            set;
        }

        /// <summary>
        /// Whether or not to set an entry for a key if that key is already present.
        /// Present only for SharedStorageAccessType.documentSet and
        /// SharedStorageAccessType.workletSet.
        /// </summary>
        [DataMember(Name = ("ignoreIfPresent"), IsRequired = (false))]
        public bool? IgnoreIfPresent
        {
            get;
            set;
        }
    }

    /// <summary>
    /// StorageBucketsDurability
    /// </summary>
    public enum StorageBucketsDurability
    {
        /// <summary>
        /// relaxed
        /// </summary>
        [EnumMember(Value = ("relaxed"))]
        Relaxed,
        /// <summary>
        /// strict
        /// </summary>
        [EnumMember(Value = ("strict"))]
        Strict
    }

    /// <summary>
    /// StorageBucket
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class StorageBucket : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// StorageKey
        /// </summary>
        [DataMember(Name = ("storageKey"), IsRequired = (true))]
        public string StorageKey
        {
            get;
            set;
        }

        /// <summary>
        /// If not specified, it is the default bucket of the storageKey.
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (false))]
        public string Name
        {
            get;
            set;
        }
    }

    /// <summary>
    /// StorageBucketInfo
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class StorageBucketInfo : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Bucket
        /// </summary>
        [DataMember(Name = ("bucket"), IsRequired = (true))]
        public CefSharp.DevTools.Storage.StorageBucket Bucket
        {
            get;
            set;
        }

        /// <summary>
        /// Id
        /// </summary>
        [DataMember(Name = ("id"), IsRequired = (true))]
        public string Id
        {
            get;
            set;
        }

        /// <summary>
        /// Expiration
        /// </summary>
        [DataMember(Name = ("expiration"), IsRequired = (true))]
        public double Expiration
        {
            get;
            set;
        }

        /// <summary>
        /// Storage quota (bytes).
        /// </summary>
        [DataMember(Name = ("quota"), IsRequired = (true))]
        public double Quota
        {
            get;
            set;
        }

        /// <summary>
        /// Persistent
        /// </summary>
        [DataMember(Name = ("persistent"), IsRequired = (true))]
        public bool Persistent
        {
            get;
            set;
        }

        /// <summary>
        /// Durability
        /// </summary>
        public CefSharp.DevTools.Storage.StorageBucketsDurability Durability
        {
            get
            {
                return (CefSharp.DevTools.Storage.StorageBucketsDurability)(StringToEnum(typeof(CefSharp.DevTools.Storage.StorageBucketsDurability), durability));
            }

            set
            {
                this.durability = (EnumToString(value));
            }
        }

        /// <summary>
        /// Durability
        /// </summary>
        [DataMember(Name = ("durability"), IsRequired = (true))]
        internal string durability
        {
            get;
            set;
        }
    }

    /// <summary>
    /// AttributionReportingSourceType
    /// </summary>
    public enum AttributionReportingSourceType
    {
        /// <summary>
        /// navigation
        /// </summary>
        [EnumMember(Value = ("navigation"))]
        Navigation,
        /// <summary>
        /// event
        /// </summary>
        [EnumMember(Value = ("event"))]
        Event
    }

    /// <summary>
    /// AttributionReportingFilterDataEntry
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AttributionReportingFilterDataEntry : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Key
        /// </summary>
        [DataMember(Name = ("key"), IsRequired = (true))]
        public string Key
        {
            get;
            set;
        }

        /// <summary>
        /// Values
        /// </summary>
        [DataMember(Name = ("values"), IsRequired = (true))]
        public string[] Values
        {
            get;
            set;
        }
    }

    /// <summary>
    /// AttributionReportingFilterConfig
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AttributionReportingFilterConfig : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// FilterValues
        /// </summary>
        [DataMember(Name = ("filterValues"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Storage.AttributionReportingFilterDataEntry> FilterValues
        {
            get;
            set;
        }

        /// <summary>
        /// duration in seconds
        /// </summary>
        [DataMember(Name = ("lookbackWindow"), IsRequired = (false))]
        public int? LookbackWindow
        {
            get;
            set;
        }
    }

    /// <summary>
    /// AttributionReportingFilterPair
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AttributionReportingFilterPair : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Filters
        /// </summary>
        [DataMember(Name = ("filters"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Storage.AttributionReportingFilterConfig> Filters
        {
            get;
            set;
        }

        /// <summary>
        /// NotFilters
        /// </summary>
        [DataMember(Name = ("notFilters"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Storage.AttributionReportingFilterConfig> NotFilters
        {
            get;
            set;
        }
    }

    /// <summary>
    /// AttributionReportingAggregationKeysEntry
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AttributionReportingAggregationKeysEntry : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Key
        /// </summary>
        [DataMember(Name = ("key"), IsRequired = (true))]
        public string Key
        {
            get;
            set;
        }

        /// <summary>
        /// Value
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (true))]
        public string Value
        {
            get;
            set;
        }
    }

    /// <summary>
    /// AttributionReportingEventReportWindows
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AttributionReportingEventReportWindows : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// duration in seconds
        /// </summary>
        [DataMember(Name = ("start"), IsRequired = (true))]
        public int Start
        {
            get;
            set;
        }

        /// <summary>
        /// duration in seconds
        /// </summary>
        [DataMember(Name = ("ends"), IsRequired = (true))]
        public int[] Ends
        {
            get;
            set;
        }
    }

    /// <summary>
    /// AttributionReportingTriggerSpec
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AttributionReportingTriggerSpec : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// number instead of integer because not all uint32 can be represented by
        /// int
        /// </summary>
        [DataMember(Name = ("triggerData"), IsRequired = (true))]
        public double[] TriggerData
        {
            get;
            set;
        }

        /// <summary>
        /// EventReportWindows
        /// </summary>
        [DataMember(Name = ("eventReportWindows"), IsRequired = (true))]
        public CefSharp.DevTools.Storage.AttributionReportingEventReportWindows EventReportWindows
        {
            get;
            set;
        }
    }

    /// <summary>
    /// AttributionReportingTriggerDataMatching
    /// </summary>
    public enum AttributionReportingTriggerDataMatching
    {
        /// <summary>
        /// exact
        /// </summary>
        [EnumMember(Value = ("exact"))]
        Exact,
        /// <summary>
        /// modulus
        /// </summary>
        [EnumMember(Value = ("modulus"))]
        Modulus
    }

    /// <summary>
    /// AttributionReportingSourceRegistration
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AttributionReportingSourceRegistration : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Time
        /// </summary>
        [DataMember(Name = ("time"), IsRequired = (true))]
        public double Time
        {
            get;
            set;
        }

        /// <summary>
        /// duration in seconds
        /// </summary>
        [DataMember(Name = ("expiry"), IsRequired = (true))]
        public int Expiry
        {
            get;
            set;
        }

        /// <summary>
        /// TriggerSpecs
        /// </summary>
        [DataMember(Name = ("triggerSpecs"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Storage.AttributionReportingTriggerSpec> TriggerSpecs
        {
            get;
            set;
        }

        /// <summary>
        /// duration in seconds
        /// </summary>
        [DataMember(Name = ("aggregatableReportWindow"), IsRequired = (true))]
        public int AggregatableReportWindow
        {
            get;
            set;
        }

        /// <summary>
        /// Type
        /// </summary>
        public CefSharp.DevTools.Storage.AttributionReportingSourceType Type
        {
            get
            {
                return (CefSharp.DevTools.Storage.AttributionReportingSourceType)(StringToEnum(typeof(CefSharp.DevTools.Storage.AttributionReportingSourceType), type));
            }

            set
            {
                this.type = (EnumToString(value));
            }
        }

        /// <summary>
        /// Type
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (true))]
        internal string type
        {
            get;
            set;
        }

        /// <summary>
        /// SourceOrigin
        /// </summary>
        [DataMember(Name = ("sourceOrigin"), IsRequired = (true))]
        public string SourceOrigin
        {
            get;
            set;
        }

        /// <summary>
        /// ReportingOrigin
        /// </summary>
        [DataMember(Name = ("reportingOrigin"), IsRequired = (true))]
        public string ReportingOrigin
        {
            get;
            set;
        }

        /// <summary>
        /// DestinationSites
        /// </summary>
        [DataMember(Name = ("destinationSites"), IsRequired = (true))]
        public string[] DestinationSites
        {
            get;
            set;
        }

        /// <summary>
        /// EventId
        /// </summary>
        [DataMember(Name = ("eventId"), IsRequired = (true))]
        public string EventId
        {
            get;
            set;
        }

        /// <summary>
        /// Priority
        /// </summary>
        [DataMember(Name = ("priority"), IsRequired = (true))]
        public string Priority
        {
            get;
            set;
        }

        /// <summary>
        /// FilterData
        /// </summary>
        [DataMember(Name = ("filterData"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Storage.AttributionReportingFilterDataEntry> FilterData
        {
            get;
            set;
        }

        /// <summary>
        /// AggregationKeys
        /// </summary>
        [DataMember(Name = ("aggregationKeys"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Storage.AttributionReportingAggregationKeysEntry> AggregationKeys
        {
            get;
            set;
        }

        /// <summary>
        /// DebugKey
        /// </summary>
        [DataMember(Name = ("debugKey"), IsRequired = (false))]
        public string DebugKey
        {
            get;
            set;
        }

        /// <summary>
        /// TriggerDataMatching
        /// </summary>
        public CefSharp.DevTools.Storage.AttributionReportingTriggerDataMatching TriggerDataMatching
        {
            get
            {
                return (CefSharp.DevTools.Storage.AttributionReportingTriggerDataMatching)(StringToEnum(typeof(CefSharp.DevTools.Storage.AttributionReportingTriggerDataMatching), triggerDataMatching));
            }

            set
            {
                this.triggerDataMatching = (EnumToString(value));
            }
        }

        /// <summary>
        /// TriggerDataMatching
        /// </summary>
        [DataMember(Name = ("triggerDataMatching"), IsRequired = (true))]
        internal string triggerDataMatching
        {
            get;
            set;
        }
    }

    /// <summary>
    /// AttributionReportingSourceRegistrationResult
    /// </summary>
    public enum AttributionReportingSourceRegistrationResult
    {
        /// <summary>
        /// success
        /// </summary>
        [EnumMember(Value = ("success"))]
        Success,
        /// <summary>
        /// internalError
        /// </summary>
        [EnumMember(Value = ("internalError"))]
        InternalError,
        /// <summary>
        /// insufficientSourceCapacity
        /// </summary>
        [EnumMember(Value = ("insufficientSourceCapacity"))]
        InsufficientSourceCapacity,
        /// <summary>
        /// insufficientUniqueDestinationCapacity
        /// </summary>
        [EnumMember(Value = ("insufficientUniqueDestinationCapacity"))]
        InsufficientUniqueDestinationCapacity,
        /// <summary>
        /// excessiveReportingOrigins
        /// </summary>
        [EnumMember(Value = ("excessiveReportingOrigins"))]
        ExcessiveReportingOrigins,
        /// <summary>
        /// prohibitedByBrowserPolicy
        /// </summary>
        [EnumMember(Value = ("prohibitedByBrowserPolicy"))]
        ProhibitedByBrowserPolicy,
        /// <summary>
        /// successNoised
        /// </summary>
        [EnumMember(Value = ("successNoised"))]
        SuccessNoised,
        /// <summary>
        /// destinationReportingLimitReached
        /// </summary>
        [EnumMember(Value = ("destinationReportingLimitReached"))]
        DestinationReportingLimitReached,
        /// <summary>
        /// destinationGlobalLimitReached
        /// </summary>
        [EnumMember(Value = ("destinationGlobalLimitReached"))]
        DestinationGlobalLimitReached,
        /// <summary>
        /// destinationBothLimitsReached
        /// </summary>
        [EnumMember(Value = ("destinationBothLimitsReached"))]
        DestinationBothLimitsReached,
        /// <summary>
        /// reportingOriginsPerSiteLimitReached
        /// </summary>
        [EnumMember(Value = ("reportingOriginsPerSiteLimitReached"))]
        ReportingOriginsPerSiteLimitReached,
        /// <summary>
        /// exceedsMaxChannelCapacity
        /// </summary>
        [EnumMember(Value = ("exceedsMaxChannelCapacity"))]
        ExceedsMaxChannelCapacity
    }

    /// <summary>
    /// AttributionReportingSourceRegistrationTimeConfig
    /// </summary>
    public enum AttributionReportingSourceRegistrationTimeConfig
    {
        /// <summary>
        /// include
        /// </summary>
        [EnumMember(Value = ("include"))]
        Include,
        /// <summary>
        /// exclude
        /// </summary>
        [EnumMember(Value = ("exclude"))]
        Exclude
    }

    /// <summary>
    /// AttributionReportingAggregatableValueDictEntry
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AttributionReportingAggregatableValueDictEntry : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Key
        /// </summary>
        [DataMember(Name = ("key"), IsRequired = (true))]
        public string Key
        {
            get;
            set;
        }

        /// <summary>
        /// number instead of integer because not all uint32 can be represented by
        /// int
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (true))]
        public double Value
        {
            get;
            set;
        }
    }

    /// <summary>
    /// AttributionReportingAggregatableValueEntry
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AttributionReportingAggregatableValueEntry : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Values
        /// </summary>
        [DataMember(Name = ("values"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Storage.AttributionReportingAggregatableValueDictEntry> Values
        {
            get;
            set;
        }

        /// <summary>
        /// Filters
        /// </summary>
        [DataMember(Name = ("filters"), IsRequired = (true))]
        public CefSharp.DevTools.Storage.AttributionReportingFilterPair Filters
        {
            get;
            set;
        }
    }

    /// <summary>
    /// AttributionReportingEventTriggerData
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AttributionReportingEventTriggerData : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Data
        /// </summary>
        [DataMember(Name = ("data"), IsRequired = (true))]
        public string Data
        {
            get;
            set;
        }

        /// <summary>
        /// Priority
        /// </summary>
        [DataMember(Name = ("priority"), IsRequired = (true))]
        public string Priority
        {
            get;
            set;
        }

        /// <summary>
        /// DedupKey
        /// </summary>
        [DataMember(Name = ("dedupKey"), IsRequired = (false))]
        public string DedupKey
        {
            get;
            set;
        }

        /// <summary>
        /// Filters
        /// </summary>
        [DataMember(Name = ("filters"), IsRequired = (true))]
        public CefSharp.DevTools.Storage.AttributionReportingFilterPair Filters
        {
            get;
            set;
        }
    }

    /// <summary>
    /// AttributionReportingAggregatableTriggerData
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AttributionReportingAggregatableTriggerData : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// KeyPiece
        /// </summary>
        [DataMember(Name = ("keyPiece"), IsRequired = (true))]
        public string KeyPiece
        {
            get;
            set;
        }

        /// <summary>
        /// SourceKeys
        /// </summary>
        [DataMember(Name = ("sourceKeys"), IsRequired = (true))]
        public string[] SourceKeys
        {
            get;
            set;
        }

        /// <summary>
        /// Filters
        /// </summary>
        [DataMember(Name = ("filters"), IsRequired = (true))]
        public CefSharp.DevTools.Storage.AttributionReportingFilterPair Filters
        {
            get;
            set;
        }
    }

    /// <summary>
    /// AttributionReportingAggregatableDedupKey
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AttributionReportingAggregatableDedupKey : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// DedupKey
        /// </summary>
        [DataMember(Name = ("dedupKey"), IsRequired = (false))]
        public string DedupKey
        {
            get;
            set;
        }

        /// <summary>
        /// Filters
        /// </summary>
        [DataMember(Name = ("filters"), IsRequired = (true))]
        public CefSharp.DevTools.Storage.AttributionReportingFilterPair Filters
        {
            get;
            set;
        }
    }

    /// <summary>
    /// AttributionReportingTriggerRegistration
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AttributionReportingTriggerRegistration : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Filters
        /// </summary>
        [DataMember(Name = ("filters"), IsRequired = (true))]
        public CefSharp.DevTools.Storage.AttributionReportingFilterPair Filters
        {
            get;
            set;
        }

        /// <summary>
        /// DebugKey
        /// </summary>
        [DataMember(Name = ("debugKey"), IsRequired = (false))]
        public string DebugKey
        {
            get;
            set;
        }

        /// <summary>
        /// AggregatableDedupKeys
        /// </summary>
        [DataMember(Name = ("aggregatableDedupKeys"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Storage.AttributionReportingAggregatableDedupKey> AggregatableDedupKeys
        {
            get;
            set;
        }

        /// <summary>
        /// EventTriggerData
        /// </summary>
        [DataMember(Name = ("eventTriggerData"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Storage.AttributionReportingEventTriggerData> EventTriggerData
        {
            get;
            set;
        }

        /// <summary>
        /// AggregatableTriggerData
        /// </summary>
        [DataMember(Name = ("aggregatableTriggerData"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Storage.AttributionReportingAggregatableTriggerData> AggregatableTriggerData
        {
            get;
            set;
        }

        /// <summary>
        /// AggregatableValues
        /// </summary>
        [DataMember(Name = ("aggregatableValues"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Storage.AttributionReportingAggregatableValueEntry> AggregatableValues
        {
            get;
            set;
        }

        /// <summary>
        /// DebugReporting
        /// </summary>
        [DataMember(Name = ("debugReporting"), IsRequired = (true))]
        public bool DebugReporting
        {
            get;
            set;
        }

        /// <summary>
        /// AggregationCoordinatorOrigin
        /// </summary>
        [DataMember(Name = ("aggregationCoordinatorOrigin"), IsRequired = (false))]
        public string AggregationCoordinatorOrigin
        {
            get;
            set;
        }

        /// <summary>
        /// SourceRegistrationTimeConfig
        /// </summary>
        public CefSharp.DevTools.Storage.AttributionReportingSourceRegistrationTimeConfig SourceRegistrationTimeConfig
        {
            get
            {
                return (CefSharp.DevTools.Storage.AttributionReportingSourceRegistrationTimeConfig)(StringToEnum(typeof(CefSharp.DevTools.Storage.AttributionReportingSourceRegistrationTimeConfig), sourceRegistrationTimeConfig));
            }

            set
            {
                this.sourceRegistrationTimeConfig = (EnumToString(value));
            }
        }

        /// <summary>
        /// SourceRegistrationTimeConfig
        /// </summary>
        [DataMember(Name = ("sourceRegistrationTimeConfig"), IsRequired = (true))]
        internal string sourceRegistrationTimeConfig
        {
            get;
            set;
        }

        /// <summary>
        /// TriggerContextId
        /// </summary>
        [DataMember(Name = ("triggerContextId"), IsRequired = (false))]
        public string TriggerContextId
        {
            get;
            set;
        }
    }

    /// <summary>
    /// AttributionReportingEventLevelResult
    /// </summary>
    public enum AttributionReportingEventLevelResult
    {
        /// <summary>
        /// success
        /// </summary>
        [EnumMember(Value = ("success"))]
        Success,
        /// <summary>
        /// successDroppedLowerPriority
        /// </summary>
        [EnumMember(Value = ("successDroppedLowerPriority"))]
        SuccessDroppedLowerPriority,
        /// <summary>
        /// internalError
        /// </summary>
        [EnumMember(Value = ("internalError"))]
        InternalError,
        /// <summary>
        /// noCapacityForAttributionDestination
        /// </summary>
        [EnumMember(Value = ("noCapacityForAttributionDestination"))]
        NoCapacityForAttributionDestination,
        /// <summary>
        /// noMatchingSources
        /// </summary>
        [EnumMember(Value = ("noMatchingSources"))]
        NoMatchingSources,
        /// <summary>
        /// deduplicated
        /// </summary>
        [EnumMember(Value = ("deduplicated"))]
        Deduplicated,
        /// <summary>
        /// excessiveAttributions
        /// </summary>
        [EnumMember(Value = ("excessiveAttributions"))]
        ExcessiveAttributions,
        /// <summary>
        /// priorityTooLow
        /// </summary>
        [EnumMember(Value = ("priorityTooLow"))]
        PriorityTooLow,
        /// <summary>
        /// neverAttributedSource
        /// </summary>
        [EnumMember(Value = ("neverAttributedSource"))]
        NeverAttributedSource,
        /// <summary>
        /// excessiveReportingOrigins
        /// </summary>
        [EnumMember(Value = ("excessiveReportingOrigins"))]
        ExcessiveReportingOrigins,
        /// <summary>
        /// noMatchingSourceFilterData
        /// </summary>
        [EnumMember(Value = ("noMatchingSourceFilterData"))]
        NoMatchingSourceFilterData,
        /// <summary>
        /// prohibitedByBrowserPolicy
        /// </summary>
        [EnumMember(Value = ("prohibitedByBrowserPolicy"))]
        ProhibitedByBrowserPolicy,
        /// <summary>
        /// noMatchingConfigurations
        /// </summary>
        [EnumMember(Value = ("noMatchingConfigurations"))]
        NoMatchingConfigurations,
        /// <summary>
        /// excessiveReports
        /// </summary>
        [EnumMember(Value = ("excessiveReports"))]
        ExcessiveReports,
        /// <summary>
        /// falselyAttributedSource
        /// </summary>
        [EnumMember(Value = ("falselyAttributedSource"))]
        FalselyAttributedSource,
        /// <summary>
        /// reportWindowPassed
        /// </summary>
        [EnumMember(Value = ("reportWindowPassed"))]
        ReportWindowPassed,
        /// <summary>
        /// notRegistered
        /// </summary>
        [EnumMember(Value = ("notRegistered"))]
        NotRegistered,
        /// <summary>
        /// reportWindowNotStarted
        /// </summary>
        [EnumMember(Value = ("reportWindowNotStarted"))]
        ReportWindowNotStarted,
        /// <summary>
        /// noMatchingTriggerData
        /// </summary>
        [EnumMember(Value = ("noMatchingTriggerData"))]
        NoMatchingTriggerData
    }

    /// <summary>
    /// AttributionReportingAggregatableResult
    /// </summary>
    public enum AttributionReportingAggregatableResult
    {
        /// <summary>
        /// success
        /// </summary>
        [EnumMember(Value = ("success"))]
        Success,
        /// <summary>
        /// internalError
        /// </summary>
        [EnumMember(Value = ("internalError"))]
        InternalError,
        /// <summary>
        /// noCapacityForAttributionDestination
        /// </summary>
        [EnumMember(Value = ("noCapacityForAttributionDestination"))]
        NoCapacityForAttributionDestination,
        /// <summary>
        /// noMatchingSources
        /// </summary>
        [EnumMember(Value = ("noMatchingSources"))]
        NoMatchingSources,
        /// <summary>
        /// excessiveAttributions
        /// </summary>
        [EnumMember(Value = ("excessiveAttributions"))]
        ExcessiveAttributions,
        /// <summary>
        /// excessiveReportingOrigins
        /// </summary>
        [EnumMember(Value = ("excessiveReportingOrigins"))]
        ExcessiveReportingOrigins,
        /// <summary>
        /// noHistograms
        /// </summary>
        [EnumMember(Value = ("noHistograms"))]
        NoHistograms,
        /// <summary>
        /// insufficientBudget
        /// </summary>
        [EnumMember(Value = ("insufficientBudget"))]
        InsufficientBudget,
        /// <summary>
        /// noMatchingSourceFilterData
        /// </summary>
        [EnumMember(Value = ("noMatchingSourceFilterData"))]
        NoMatchingSourceFilterData,
        /// <summary>
        /// notRegistered
        /// </summary>
        [EnumMember(Value = ("notRegistered"))]
        NotRegistered,
        /// <summary>
        /// prohibitedByBrowserPolicy
        /// </summary>
        [EnumMember(Value = ("prohibitedByBrowserPolicy"))]
        ProhibitedByBrowserPolicy,
        /// <summary>
        /// deduplicated
        /// </summary>
        [EnumMember(Value = ("deduplicated"))]
        Deduplicated,
        /// <summary>
        /// reportWindowPassed
        /// </summary>
        [EnumMember(Value = ("reportWindowPassed"))]
        ReportWindowPassed,
        /// <summary>
        /// excessiveReports
        /// </summary>
        [EnumMember(Value = ("excessiveReports"))]
        ExcessiveReports
    }

    /// <summary>
    /// A cache&apos;s contents have been modified.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class CacheStorageContentUpdatedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Origin to update.
        /// </summary>
        [DataMember(Name = ("origin"), IsRequired = (true))]
        public string Origin
        {
            get;
            private set;
        }

        /// <summary>
        /// Storage key to update.
        /// </summary>
        [DataMember(Name = ("storageKey"), IsRequired = (true))]
        public string StorageKey
        {
            get;
            private set;
        }

        /// <summary>
        /// Storage bucket to update.
        /// </summary>
        [DataMember(Name = ("bucketId"), IsRequired = (true))]
        public string BucketId
        {
            get;
            private set;
        }

        /// <summary>
        /// Name of cache in origin.
        /// </summary>
        [DataMember(Name = ("cacheName"), IsRequired = (true))]
        public string CacheName
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// A cache has been added/deleted.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class CacheStorageListUpdatedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Origin to update.
        /// </summary>
        [DataMember(Name = ("origin"), IsRequired = (true))]
        public string Origin
        {
            get;
            private set;
        }

        /// <summary>
        /// Storage key to update.
        /// </summary>
        [DataMember(Name = ("storageKey"), IsRequired = (true))]
        public string StorageKey
        {
            get;
            private set;
        }

        /// <summary>
        /// Storage bucket to update.
        /// </summary>
        [DataMember(Name = ("bucketId"), IsRequired = (true))]
        public string BucketId
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// The origin&apos;s IndexedDB object store has been modified.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class IndexedDBContentUpdatedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Origin to update.
        /// </summary>
        [DataMember(Name = ("origin"), IsRequired = (true))]
        public string Origin
        {
            get;
            private set;
        }

        /// <summary>
        /// Storage key to update.
        /// </summary>
        [DataMember(Name = ("storageKey"), IsRequired = (true))]
        public string StorageKey
        {
            get;
            private set;
        }

        /// <summary>
        /// Storage bucket to update.
        /// </summary>
        [DataMember(Name = ("bucketId"), IsRequired = (true))]
        public string BucketId
        {
            get;
            private set;
        }

        /// <summary>
        /// Database to update.
        /// </summary>
        [DataMember(Name = ("databaseName"), IsRequired = (true))]
        public string DatabaseName
        {
            get;
            private set;
        }

        /// <summary>
        /// ObjectStore to update.
        /// </summary>
        [DataMember(Name = ("objectStoreName"), IsRequired = (true))]
        public string ObjectStoreName
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// The origin&apos;s IndexedDB database list has been modified.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class IndexedDBListUpdatedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Origin to update.
        /// </summary>
        [DataMember(Name = ("origin"), IsRequired = (true))]
        public string Origin
        {
            get;
            private set;
        }

        /// <summary>
        /// Storage key to update.
        /// </summary>
        [DataMember(Name = ("storageKey"), IsRequired = (true))]
        public string StorageKey
        {
            get;
            private set;
        }

        /// <summary>
        /// Storage bucket to update.
        /// </summary>
        [DataMember(Name = ("bucketId"), IsRequired = (true))]
        public string BucketId
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// One of the interest groups was accessed. Note that these events are global
    /// to all targets sharing an interest group store.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class InterestGroupAccessedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// AccessTime
        /// </summary>
        [DataMember(Name = ("accessTime"), IsRequired = (true))]
        public double AccessTime
        {
            get;
            private set;
        }

        /// <summary>
        /// Type
        /// </summary>
        public CefSharp.DevTools.Storage.InterestGroupAccessType Type
        {
            get
            {
                return (CefSharp.DevTools.Storage.InterestGroupAccessType)(StringToEnum(typeof(CefSharp.DevTools.Storage.InterestGroupAccessType), type));
            }

            set
            {
                this.type = (EnumToString(value));
            }
        }

        /// <summary>
        /// Type
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (true))]
        internal string type
        {
            get;
            private set;
        }

        /// <summary>
        /// OwnerOrigin
        /// </summary>
        [DataMember(Name = ("ownerOrigin"), IsRequired = (true))]
        public string OwnerOrigin
        {
            get;
            private set;
        }

        /// <summary>
        /// Name
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            private set;
        }

        /// <summary>
        /// For topLevelBid/topLevelAdditionalBid, and when appropriate,
        /// win and additionalBidWin
        /// </summary>
        [DataMember(Name = ("componentSellerOrigin"), IsRequired = (false))]
        public string ComponentSellerOrigin
        {
            get;
            private set;
        }

        /// <summary>
        /// For bid or somethingBid event, if done locally and not on a server.
        /// </summary>
        [DataMember(Name = ("bid"), IsRequired = (false))]
        public double? Bid
        {
            get;
            private set;
        }

        /// <summary>
        /// BidCurrency
        /// </summary>
        [DataMember(Name = ("bidCurrency"), IsRequired = (false))]
        public string BidCurrency
        {
            get;
            private set;
        }

        /// <summary>
        /// For non-global events --- links to interestGroupAuctionEvent
        /// </summary>
        [DataMember(Name = ("uniqueAuctionId"), IsRequired = (false))]
        public string UniqueAuctionId
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// An auction involving interest groups is taking place. These events are
    /// target-specific.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class InterestGroupAuctionEventOccurredEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// EventTime
        /// </summary>
        [DataMember(Name = ("eventTime"), IsRequired = (true))]
        public double EventTime
        {
            get;
            private set;
        }

        /// <summary>
        /// Type
        /// </summary>
        public CefSharp.DevTools.Storage.InterestGroupAuctionEventType Type
        {
            get
            {
                return (CefSharp.DevTools.Storage.InterestGroupAuctionEventType)(StringToEnum(typeof(CefSharp.DevTools.Storage.InterestGroupAuctionEventType), type));
            }

            set
            {
                this.type = (EnumToString(value));
            }
        }

        /// <summary>
        /// Type
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (true))]
        internal string type
        {
            get;
            private set;
        }

        /// <summary>
        /// UniqueAuctionId
        /// </summary>
        [DataMember(Name = ("uniqueAuctionId"), IsRequired = (true))]
        public string UniqueAuctionId
        {
            get;
            private set;
        }

        /// <summary>
        /// Set for child auctions.
        /// </summary>
        [DataMember(Name = ("parentAuctionId"), IsRequired = (false))]
        public string ParentAuctionId
        {
            get;
            private set;
        }

        /// <summary>
        /// Set for started and configResolved
        /// </summary>
        [DataMember(Name = ("auctionConfig"), IsRequired = (false))]
        public object AuctionConfig
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Specifies which auctions a particular network fetch may be related to, and
    /// in what role. Note that it is not ordered with respect to
    /// Network.requestWillBeSent (but will happen before loadingFinished
    /// loadingFailed).
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class InterestGroupAuctionNetworkRequestCreatedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Type
        /// </summary>
        public CefSharp.DevTools.Storage.InterestGroupAuctionFetchType Type
        {
            get
            {
                return (CefSharp.DevTools.Storage.InterestGroupAuctionFetchType)(StringToEnum(typeof(CefSharp.DevTools.Storage.InterestGroupAuctionFetchType), type));
            }

            set
            {
                this.type = (EnumToString(value));
            }
        }

        /// <summary>
        /// Type
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (true))]
        internal string type
        {
            get;
            private set;
        }

        /// <summary>
        /// RequestId
        /// </summary>
        [DataMember(Name = ("requestId"), IsRequired = (true))]
        public string RequestId
        {
            get;
            private set;
        }

        /// <summary>
        /// This is the set of the auctions using the worklet that issued this
        /// request.  In the case of trusted signals, it&apos;s possible that only some of
        /// them actually care about the keys being queried.
        /// </summary>
        [DataMember(Name = ("auctions"), IsRequired = (true))]
        public string[] Auctions
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Shared storage was accessed by the associated page.
    /// The following parameters are included in all events.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class SharedStorageAccessedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Time of the access.
        /// </summary>
        [DataMember(Name = ("accessTime"), IsRequired = (true))]
        public double AccessTime
        {
            get;
            private set;
        }

        /// <summary>
        /// Enum value indicating the Shared Storage API method invoked.
        /// </summary>
        public CefSharp.DevTools.Storage.SharedStorageAccessType Type
        {
            get
            {
                return (CefSharp.DevTools.Storage.SharedStorageAccessType)(StringToEnum(typeof(CefSharp.DevTools.Storage.SharedStorageAccessType), type));
            }

            set
            {
                this.type = (EnumToString(value));
            }
        }

        /// <summary>
        /// Enum value indicating the Shared Storage API method invoked.
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (true))]
        internal string type
        {
            get;
            private set;
        }

        /// <summary>
        /// DevTools Frame Token for the primary frame tree&apos;s root.
        /// </summary>
        [DataMember(Name = ("mainFrameId"), IsRequired = (true))]
        public string MainFrameId
        {
            get;
            private set;
        }

        /// <summary>
        /// Serialized origin for the context that invoked the Shared Storage API.
        /// </summary>
        [DataMember(Name = ("ownerOrigin"), IsRequired = (true))]
        public string OwnerOrigin
        {
            get;
            private set;
        }

        /// <summary>
        /// The sub-parameters wrapped by `params` are all optional and their
        /// presence/absence depends on `type`.
        /// </summary>
        [DataMember(Name = ("params"), IsRequired = (true))]
        public CefSharp.DevTools.Storage.SharedStorageAccessParams Params
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// storageBucketCreatedOrUpdated
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class StorageBucketCreatedOrUpdatedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// BucketInfo
        /// </summary>
        [DataMember(Name = ("bucketInfo"), IsRequired = (true))]
        public CefSharp.DevTools.Storage.StorageBucketInfo BucketInfo
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// storageBucketDeleted
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class StorageBucketDeletedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// BucketId
        /// </summary>
        [DataMember(Name = ("bucketId"), IsRequired = (true))]
        public string BucketId
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// attributionReportingSourceRegistered
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class AttributionReportingSourceRegisteredEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Registration
        /// </summary>
        [DataMember(Name = ("registration"), IsRequired = (true))]
        public CefSharp.DevTools.Storage.AttributionReportingSourceRegistration Registration
        {
            get;
            private set;
        }

        /// <summary>
        /// Result
        /// </summary>
        public CefSharp.DevTools.Storage.AttributionReportingSourceRegistrationResult Result
        {
            get
            {
                return (CefSharp.DevTools.Storage.AttributionReportingSourceRegistrationResult)(StringToEnum(typeof(CefSharp.DevTools.Storage.AttributionReportingSourceRegistrationResult), result));
            }

            set
            {
                this.result = (EnumToString(value));
            }
        }

        /// <summary>
        /// Result
        /// </summary>
        [DataMember(Name = ("result"), IsRequired = (true))]
        internal string result
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// attributionReportingTriggerRegistered
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class AttributionReportingTriggerRegisteredEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Registration
        /// </summary>
        [DataMember(Name = ("registration"), IsRequired = (true))]
        public CefSharp.DevTools.Storage.AttributionReportingTriggerRegistration Registration
        {
            get;
            private set;
        }

        /// <summary>
        /// EventLevel
        /// </summary>
        public CefSharp.DevTools.Storage.AttributionReportingEventLevelResult EventLevel
        {
            get
            {
                return (CefSharp.DevTools.Storage.AttributionReportingEventLevelResult)(StringToEnum(typeof(CefSharp.DevTools.Storage.AttributionReportingEventLevelResult), eventLevel));
            }

            set
            {
                this.eventLevel = (EnumToString(value));
            }
        }

        /// <summary>
        /// EventLevel
        /// </summary>
        [DataMember(Name = ("eventLevel"), IsRequired = (true))]
        internal string eventLevel
        {
            get;
            private set;
        }

        /// <summary>
        /// Aggregatable
        /// </summary>
        public CefSharp.DevTools.Storage.AttributionReportingAggregatableResult Aggregatable
        {
            get
            {
                return (CefSharp.DevTools.Storage.AttributionReportingAggregatableResult)(StringToEnum(typeof(CefSharp.DevTools.Storage.AttributionReportingAggregatableResult), aggregatable));
            }

            set
            {
                this.aggregatable = (EnumToString(value));
            }
        }

        /// <summary>
        /// Aggregatable
        /// </summary>
        [DataMember(Name = ("aggregatable"), IsRequired = (true))]
        internal string aggregatable
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.SystemInfo
{
    /// <summary>
    /// Describes a single graphics processor (GPU).
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class GPUDevice : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// PCI ID of the GPU vendor, if available; 0 otherwise.
        /// </summary>
        [DataMember(Name = ("vendorId"), IsRequired = (true))]
        public double VendorId
        {
            get;
            set;
        }

        /// <summary>
        /// PCI ID of the GPU device, if available; 0 otherwise.
        /// </summary>
        [DataMember(Name = ("deviceId"), IsRequired = (true))]
        public double DeviceId
        {
            get;
            set;
        }

        /// <summary>
        /// Sub sys ID of the GPU, only available on Windows.
        /// </summary>
        [DataMember(Name = ("subSysId"), IsRequired = (false))]
        public double? SubSysId
        {
            get;
            set;
        }

        /// <summary>
        /// Revision of the GPU, only available on Windows.
        /// </summary>
        [DataMember(Name = ("revision"), IsRequired = (false))]
        public double? Revision
        {
            get;
            set;
        }

        /// <summary>
        /// String description of the GPU vendor, if the PCI ID is not available.
        /// </summary>
        [DataMember(Name = ("vendorString"), IsRequired = (true))]
        public string VendorString
        {
            get;
            set;
        }

        /// <summary>
        /// String description of the GPU device, if the PCI ID is not available.
        /// </summary>
        [DataMember(Name = ("deviceString"), IsRequired = (true))]
        public string DeviceString
        {
            get;
            set;
        }

        /// <summary>
        /// String description of the GPU driver vendor.
        /// </summary>
        [DataMember(Name = ("driverVendor"), IsRequired = (true))]
        public string DriverVendor
        {
            get;
            set;
        }

        /// <summary>
        /// String description of the GPU driver version.
        /// </summary>
        [DataMember(Name = ("driverVersion"), IsRequired = (true))]
        public string DriverVersion
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Describes the width and height dimensions of an entity.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class Size : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Width in pixels.
        /// </summary>
        [DataMember(Name = ("width"), IsRequired = (true))]
        public int Width
        {
            get;
            set;
        }

        /// <summary>
        /// Height in pixels.
        /// </summary>
        [DataMember(Name = ("height"), IsRequired = (true))]
        public int Height
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Describes a supported video decoding profile with its associated minimum and
    /// maximum resolutions.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class VideoDecodeAcceleratorCapability : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Video codec profile that is supported, e.g. VP9 Profile 2.
        /// </summary>
        [DataMember(Name = ("profile"), IsRequired = (true))]
        public string Profile
        {
            get;
            set;
        }

        /// <summary>
        /// Maximum video dimensions in pixels supported for this |profile|.
        /// </summary>
        [DataMember(Name = ("maxResolution"), IsRequired = (true))]
        public CefSharp.DevTools.SystemInfo.Size MaxResolution
        {
            get;
            set;
        }

        /// <summary>
        /// Minimum video dimensions in pixels supported for this |profile|.
        /// </summary>
        [DataMember(Name = ("minResolution"), IsRequired = (true))]
        public CefSharp.DevTools.SystemInfo.Size MinResolution
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Describes a supported video encoding profile with its associated maximum
    /// resolution and maximum framerate.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class VideoEncodeAcceleratorCapability : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Video codec profile that is supported, e.g H264 Main.
        /// </summary>
        [DataMember(Name = ("profile"), IsRequired = (true))]
        public string Profile
        {
            get;
            set;
        }

        /// <summary>
        /// Maximum video dimensions in pixels supported for this |profile|.
        /// </summary>
        [DataMember(Name = ("maxResolution"), IsRequired = (true))]
        public CefSharp.DevTools.SystemInfo.Size MaxResolution
        {
            get;
            set;
        }

        /// <summary>
        /// Maximum encoding framerate in frames per second supported for this
        /// |profile|, as fraction&apos;s numerator and denominator, e.g. 24/1 fps,
        /// 24000/1001 fps, etc.
        /// </summary>
        [DataMember(Name = ("maxFramerateNumerator"), IsRequired = (true))]
        public int MaxFramerateNumerator
        {
            get;
            set;
        }

        /// <summary>
        /// MaxFramerateDenominator
        /// </summary>
        [DataMember(Name = ("maxFramerateDenominator"), IsRequired = (true))]
        public int MaxFramerateDenominator
        {
            get;
            set;
        }
    }

    /// <summary>
    /// YUV subsampling type of the pixels of a given image.
    /// </summary>
    public enum SubsamplingFormat
    {
        /// <summary>
        /// yuv420
        /// </summary>
        [EnumMember(Value = ("yuv420"))]
        Yuv420,
        /// <summary>
        /// yuv422
        /// </summary>
        [EnumMember(Value = ("yuv422"))]
        Yuv422,
        /// <summary>
        /// yuv444
        /// </summary>
        [EnumMember(Value = ("yuv444"))]
        Yuv444
    }

    /// <summary>
    /// Image format of a given image.
    /// </summary>
    public enum ImageType
    {
        /// <summary>
        /// jpeg
        /// </summary>
        [EnumMember(Value = ("jpeg"))]
        Jpeg,
        /// <summary>
        /// webp
        /// </summary>
        [EnumMember(Value = ("webp"))]
        Webp,
        /// <summary>
        /// unknown
        /// </summary>
        [EnumMember(Value = ("unknown"))]
        Unknown
    }

    /// <summary>
    /// Describes a supported image decoding profile with its associated minimum and
    /// maximum resolutions and subsampling.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ImageDecodeAcceleratorCapability : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Image coded, e.g. Jpeg.
        /// </summary>
        public CefSharp.DevTools.SystemInfo.ImageType ImageType
        {
            get
            {
                return (CefSharp.DevTools.SystemInfo.ImageType)(StringToEnum(typeof(CefSharp.DevTools.SystemInfo.ImageType), imageType));
            }

            set
            {
                this.imageType = (EnumToString(value));
            }
        }

        /// <summary>
        /// Image coded, e.g. Jpeg.
        /// </summary>
        [DataMember(Name = ("imageType"), IsRequired = (true))]
        internal string imageType
        {
            get;
            set;
        }

        /// <summary>
        /// Maximum supported dimensions of the image in pixels.
        /// </summary>
        [DataMember(Name = ("maxDimensions"), IsRequired = (true))]
        public CefSharp.DevTools.SystemInfo.Size MaxDimensions
        {
            get;
            set;
        }

        /// <summary>
        /// Minimum supported dimensions of the image in pixels.
        /// </summary>
        [DataMember(Name = ("minDimensions"), IsRequired = (true))]
        public CefSharp.DevTools.SystemInfo.Size MinDimensions
        {
            get;
            set;
        }

        /// <summary>
        /// Optional array of supported subsampling formats, e.g. 4:2:0, if known.
        /// </summary>
        public CefSharp.DevTools.SystemInfo.SubsamplingFormat[] Subsamplings
        {
            get
            {
                return (CefSharp.DevTools.SystemInfo.SubsamplingFormat[])(StringToEnum(typeof(CefSharp.DevTools.SystemInfo.SubsamplingFormat[]), subsamplings));
            }

            set
            {
                this.subsamplings = (EnumToString(value));
            }
        }

        /// <summary>
        /// Optional array of supported subsampling formats, e.g. 4:2:0, if known.
        /// </summary>
        [DataMember(Name = ("subsamplings"), IsRequired = (true))]
        internal string subsamplings
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Provides information about the GPU(s) on the system.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class GPUInfo : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The graphics devices on the system. Element 0 is the primary GPU.
        /// </summary>
        [DataMember(Name = ("devices"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.SystemInfo.GPUDevice> Devices
        {
            get;
            set;
        }

        /// <summary>
        /// An optional dictionary of additional GPU related attributes.
        /// </summary>
        [DataMember(Name = ("auxAttributes"), IsRequired = (false))]
        public object AuxAttributes
        {
            get;
            set;
        }

        /// <summary>
        /// An optional dictionary of graphics features and their status.
        /// </summary>
        [DataMember(Name = ("featureStatus"), IsRequired = (false))]
        public object FeatureStatus
        {
            get;
            set;
        }

        /// <summary>
        /// An optional array of GPU driver bug workarounds.
        /// </summary>
        [DataMember(Name = ("driverBugWorkarounds"), IsRequired = (true))]
        public string[] DriverBugWorkarounds
        {
            get;
            set;
        }

        /// <summary>
        /// Supported accelerated video decoding capabilities.
        /// </summary>
        [DataMember(Name = ("videoDecoding"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.SystemInfo.VideoDecodeAcceleratorCapability> VideoDecoding
        {
            get;
            set;
        }

        /// <summary>
        /// Supported accelerated video encoding capabilities.
        /// </summary>
        [DataMember(Name = ("videoEncoding"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.SystemInfo.VideoEncodeAcceleratorCapability> VideoEncoding
        {
            get;
            set;
        }

        /// <summary>
        /// Supported accelerated image decoding capabilities.
        /// </summary>
        [DataMember(Name = ("imageDecoding"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.SystemInfo.ImageDecodeAcceleratorCapability> ImageDecoding
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Represents process info.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ProcessInfo : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Specifies process type.
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (true))]
        public string Type
        {
            get;
            set;
        }

        /// <summary>
        /// Specifies process id.
        /// </summary>
        [DataMember(Name = ("id"), IsRequired = (true))]
        public int Id
        {
            get;
            set;
        }

        /// <summary>
        /// Specifies cumulative CPU usage in seconds across all threads of the
        /// process since the process start.
        /// </summary>
        [DataMember(Name = ("cpuTime"), IsRequired = (true))]
        public double CpuTime
        {
            get;
            set;
        }
    }
}

namespace CefSharp.DevTools.Target
{
    /// <summary>
    /// TargetInfo
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class TargetInfo : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// TargetId
        /// </summary>
        [DataMember(Name = ("targetId"), IsRequired = (true))]
        public string TargetId
        {
            get;
            set;
        }

        /// <summary>
        /// Type
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (true))]
        public string Type
        {
            get;
            set;
        }

        /// <summary>
        /// List of types: https://source.chromium.org/chromium/chromium/src/+/main:content/browser/devtools/devtools_agent_host_impl.cc?ss=chromium&amp;q=f:devtools%20-f:out%20%22::kTypeTab%5B%5D%22
        /// </summary>
        [DataMember(Name = ("title"), IsRequired = (true))]
        public string Title
        {
            get;
            set;
        }

        /// <summary>
        /// Url
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (true))]
        public string Url
        {
            get;
            set;
        }

        /// <summary>
        /// Whether the target has an attached client.
        /// </summary>
        [DataMember(Name = ("attached"), IsRequired = (true))]
        public bool Attached
        {
            get;
            set;
        }

        /// <summary>
        /// Opener target Id
        /// </summary>
        [DataMember(Name = ("openerId"), IsRequired = (false))]
        public string OpenerId
        {
            get;
            set;
        }

        /// <summary>
        /// Whether the target has access to the originating window.
        /// </summary>
        [DataMember(Name = ("canAccessOpener"), IsRequired = (true))]
        public bool CanAccessOpener
        {
            get;
            set;
        }

        /// <summary>
        /// Frame id of originating window (is only set if target has an opener).
        /// </summary>
        [DataMember(Name = ("openerFrameId"), IsRequired = (false))]
        public string OpenerFrameId
        {
            get;
            set;
        }

        /// <summary>
        /// BrowserContextId
        /// </summary>
        [DataMember(Name = ("browserContextId"), IsRequired = (false))]
        public string BrowserContextId
        {
            get;
            set;
        }

        /// <summary>
        /// Provides additional details for specific target types. For example, for
        /// the type of &quot;page&quot;, this may be set to &quot;portal&quot; or &quot;prerender&quot;.
        /// </summary>
        [DataMember(Name = ("subtype"), IsRequired = (false))]
        public string Subtype
        {
            get;
            set;
        }
    }

    /// <summary>
    /// A filter used by target query/discovery/auto-attach operations.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class FilterEntry : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// If set, causes exclusion of matching targets from the list.
        /// </summary>
        [DataMember(Name = ("exclude"), IsRequired = (false))]
        public bool? Exclude
        {
            get;
            set;
        }

        /// <summary>
        /// If not present, matches any type.
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (false))]
        public string Type
        {
            get;
            set;
        }
    }

    /// <summary>
    /// RemoteLocation
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class RemoteLocation : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Host
        /// </summary>
        [DataMember(Name = ("host"), IsRequired = (true))]
        public string Host
        {
            get;
            set;
        }

        /// <summary>
        /// Port
        /// </summary>
        [DataMember(Name = ("port"), IsRequired = (true))]
        public int Port
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Issued when attached to target because of auto-attach or `attachToTarget` command.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class AttachedToTargetEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Identifier assigned to the session used to send/receive messages.
        /// </summary>
        [DataMember(Name = ("sessionId"), IsRequired = (true))]
        public string SessionId
        {
            get;
            private set;
        }

        /// <summary>
        /// TargetInfo
        /// </summary>
        [DataMember(Name = ("targetInfo"), IsRequired = (true))]
        public CefSharp.DevTools.Target.TargetInfo TargetInfo
        {
            get;
            private set;
        }

        /// <summary>
        /// WaitingForDebugger
        /// </summary>
        [DataMember(Name = ("waitingForDebugger"), IsRequired = (true))]
        public bool WaitingForDebugger
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Issued when detached from target for any reason (including `detachFromTarget` command). Can be
    /// issued multiple times per target if multiple sessions have been attached to it.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class DetachedFromTargetEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Detached session identifier.
        /// </summary>
        [DataMember(Name = ("sessionId"), IsRequired = (true))]
        public string SessionId
        {
            get;
            private set;
        }

        /// <summary>
        /// Deprecated.
        /// </summary>
        [DataMember(Name = ("targetId"), IsRequired = (false))]
        public string TargetId
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Notifies about a new protocol message received from the session (as reported in
    /// `attachedToTarget` event).
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class ReceivedMessageFromTargetEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Identifier of a session which sends a message.
        /// </summary>
        [DataMember(Name = ("sessionId"), IsRequired = (true))]
        public string SessionId
        {
            get;
            private set;
        }

        /// <summary>
        /// Message
        /// </summary>
        [DataMember(Name = ("message"), IsRequired = (true))]
        public string Message
        {
            get;
            private set;
        }

        /// <summary>
        /// Deprecated.
        /// </summary>
        [DataMember(Name = ("targetId"), IsRequired = (false))]
        public string TargetId
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Issued when a possible inspection target is created.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class TargetCreatedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// TargetInfo
        /// </summary>
        [DataMember(Name = ("targetInfo"), IsRequired = (true))]
        public CefSharp.DevTools.Target.TargetInfo TargetInfo
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Issued when a target is destroyed.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class TargetDestroyedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// TargetId
        /// </summary>
        [DataMember(Name = ("targetId"), IsRequired = (true))]
        public string TargetId
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Issued when a target has crashed.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class TargetCrashedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// TargetId
        /// </summary>
        [DataMember(Name = ("targetId"), IsRequired = (true))]
        public string TargetId
        {
            get;
            private set;
        }

        /// <summary>
        /// Termination status type.
        /// </summary>
        [DataMember(Name = ("status"), IsRequired = (true))]
        public string Status
        {
            get;
            private set;
        }

        /// <summary>
        /// Termination error code.
        /// </summary>
        [DataMember(Name = ("errorCode"), IsRequired = (true))]
        public int ErrorCode
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Issued when some information about a target has changed. This only happens between
    /// `targetCreated` and `targetDestroyed`.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class TargetInfoChangedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// TargetInfo
        /// </summary>
        [DataMember(Name = ("targetInfo"), IsRequired = (true))]
        public CefSharp.DevTools.Target.TargetInfo TargetInfo
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.Tethering
{
    /// <summary>
    /// Informs that port was successfully bound and got a specified connection id.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class AcceptedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Port number that was successfully bound.
        /// </summary>
        [DataMember(Name = ("port"), IsRequired = (true))]
        public int Port
        {
            get;
            private set;
        }

        /// <summary>
        /// Connection id to be used.
        /// </summary>
        [DataMember(Name = ("connectionId"), IsRequired = (true))]
        public string ConnectionId
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.Tracing
{
    /// <summary>
    /// Controls how the trace buffer stores data.
    /// </summary>
    public enum TraceConfigRecordMode
    {
        /// <summary>
        /// recordUntilFull
        /// </summary>
        [EnumMember(Value = ("recordUntilFull"))]
        RecordUntilFull,
        /// <summary>
        /// recordContinuously
        /// </summary>
        [EnumMember(Value = ("recordContinuously"))]
        RecordContinuously,
        /// <summary>
        /// recordAsMuchAsPossible
        /// </summary>
        [EnumMember(Value = ("recordAsMuchAsPossible"))]
        RecordAsMuchAsPossible,
        /// <summary>
        /// echoToConsole
        /// </summary>
        [EnumMember(Value = ("echoToConsole"))]
        EchoToConsole
    }

    /// <summary>
    /// TraceConfig
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class TraceConfig : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Controls how the trace buffer stores data.
        /// </summary>
        public CefSharp.DevTools.Tracing.TraceConfigRecordMode? RecordMode
        {
            get
            {
                return (CefSharp.DevTools.Tracing.TraceConfigRecordMode? )(StringToEnum(typeof(CefSharp.DevTools.Tracing.TraceConfigRecordMode? ), recordMode));
            }

            set
            {
                this.recordMode = (EnumToString(value));
            }
        }

        /// <summary>
        /// Controls how the trace buffer stores data.
        /// </summary>
        [DataMember(Name = ("recordMode"), IsRequired = (false))]
        internal string recordMode
        {
            get;
            set;
        }

        /// <summary>
        /// Size of the trace buffer in kilobytes. If not specified or zero is passed, a default value
        /// of 200 MB would be used.
        /// </summary>
        [DataMember(Name = ("traceBufferSizeInKb"), IsRequired = (false))]
        public double? TraceBufferSizeInKb
        {
            get;
            set;
        }

        /// <summary>
        /// Turns on JavaScript stack sampling.
        /// </summary>
        [DataMember(Name = ("enableSampling"), IsRequired = (false))]
        public bool? EnableSampling
        {
            get;
            set;
        }

        /// <summary>
        /// Turns on system tracing.
        /// </summary>
        [DataMember(Name = ("enableSystrace"), IsRequired = (false))]
        public bool? EnableSystrace
        {
            get;
            set;
        }

        /// <summary>
        /// Turns on argument filter.
        /// </summary>
        [DataMember(Name = ("enableArgumentFilter"), IsRequired = (false))]
        public bool? EnableArgumentFilter
        {
            get;
            set;
        }

        /// <summary>
        /// Included category filters.
        /// </summary>
        [DataMember(Name = ("includedCategories"), IsRequired = (false))]
        public string[] IncludedCategories
        {
            get;
            set;
        }

        /// <summary>
        /// Excluded category filters.
        /// </summary>
        [DataMember(Name = ("excludedCategories"), IsRequired = (false))]
        public string[] ExcludedCategories
        {
            get;
            set;
        }

        /// <summary>
        /// Configuration to synthesize the delays in tracing.
        /// </summary>
        [DataMember(Name = ("syntheticDelays"), IsRequired = (false))]
        public string[] SyntheticDelays
        {
            get;
            set;
        }

        /// <summary>
        /// Configuration for memory dump triggers. Used only when &quot;memory-infra&quot; category is enabled.
        /// </summary>
        [DataMember(Name = ("memoryDumpConfig"), IsRequired = (false))]
        public CefSharp.DevTools.Tracing.MemoryDumpConfig MemoryDumpConfig
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Data format of a trace. Can be either the legacy JSON format or the
    /// protocol buffer format. Note that the JSON format will be deprecated soon.
    /// </summary>
    public enum StreamFormat
    {
        /// <summary>
        /// json
        /// </summary>
        [EnumMember(Value = ("json"))]
        Json,
        /// <summary>
        /// proto
        /// </summary>
        [EnumMember(Value = ("proto"))]
        Proto
    }

    /// <summary>
    /// Compression type to use for traces returned via streams.
    /// </summary>
    public enum StreamCompression
    {
        /// <summary>
        /// none
        /// </summary>
        [EnumMember(Value = ("none"))]
        None,
        /// <summary>
        /// gzip
        /// </summary>
        [EnumMember(Value = ("gzip"))]
        Gzip
    }

    /// <summary>
    /// Details exposed when memory request explicitly declared.
    /// Keep consistent with memory_dump_request_args.h and
    /// memory_instrumentation.mojom
    /// </summary>
    public enum MemoryDumpLevelOfDetail
    {
        /// <summary>
        /// background
        /// </summary>
        [EnumMember(Value = ("background"))]
        Background,
        /// <summary>
        /// light
        /// </summary>
        [EnumMember(Value = ("light"))]
        Light,
        /// <summary>
        /// detailed
        /// </summary>
        [EnumMember(Value = ("detailed"))]
        Detailed
    }

    /// <summary>
    /// Backend type to use for tracing. `chrome` uses the Chrome-integrated
    /// tracing service and is supported on all platforms. `system` is only
    /// supported on Chrome OS and uses the Perfetto system tracing service.
    /// `auto` chooses `system` when the perfettoConfig provided to Tracing.start
    /// specifies at least one non-Chrome data source; otherwise uses `chrome`.
    /// </summary>
    public enum TracingBackend
    {
        /// <summary>
        /// auto
        /// </summary>
        [EnumMember(Value = ("auto"))]
        Auto,
        /// <summary>
        /// chrome
        /// </summary>
        [EnumMember(Value = ("chrome"))]
        Chrome,
        /// <summary>
        /// system
        /// </summary>
        [EnumMember(Value = ("system"))]
        System
    }

    /// <summary>
    /// bufferUsage
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class BufferUsageEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// A number in range [0..1] that indicates the used size of event buffer as a fraction of its
        /// total size.
        /// </summary>
        [DataMember(Name = ("percentFull"), IsRequired = (false))]
        public double? PercentFull
        {
            get;
            private set;
        }

        /// <summary>
        /// An approximate number of events in the trace log.
        /// </summary>
        [DataMember(Name = ("eventCount"), IsRequired = (false))]
        public double? EventCount
        {
            get;
            private set;
        }

        /// <summary>
        /// A number in range [0..1] that indicates the used size of event buffer as a fraction of its
        /// total size.
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (false))]
        public double? Value
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Contains a bucket of collected trace events. When tracing is stopped collected events will be
    /// sent as a sequence of dataCollected events followed by tracingComplete event.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class DataCollectedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Value
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (true))]
        public System.Collections.Generic.IList<object> Value
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Signals that tracing is stopped and there is no trace buffers pending flush, all data were
    /// delivered via dataCollected events.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class TracingCompleteEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Indicates whether some trace data is known to have been lost, e.g. because the trace ring
        /// buffer wrapped around.
        /// </summary>
        [DataMember(Name = ("dataLossOccurred"), IsRequired = (true))]
        public bool DataLossOccurred
        {
            get;
            private set;
        }

        /// <summary>
        /// A handle of the stream that holds resulting trace data.
        /// </summary>
        [DataMember(Name = ("stream"), IsRequired = (false))]
        public string Stream
        {
            get;
            private set;
        }

        /// <summary>
        /// Trace data format of returned stream.
        /// </summary>
        public CefSharp.DevTools.Tracing.StreamFormat? TraceFormat
        {
            get
            {
                return (CefSharp.DevTools.Tracing.StreamFormat? )(StringToEnum(typeof(CefSharp.DevTools.Tracing.StreamFormat? ), traceFormat));
            }

            set
            {
                this.traceFormat = (EnumToString(value));
            }
        }

        /// <summary>
        /// Trace data format of returned stream.
        /// </summary>
        [DataMember(Name = ("traceFormat"), IsRequired = (false))]
        internal string traceFormat
        {
            get;
            private set;
        }

        /// <summary>
        /// Compression format of returned stream.
        /// </summary>
        public CefSharp.DevTools.Tracing.StreamCompression? StreamCompression
        {
            get
            {
                return (CefSharp.DevTools.Tracing.StreamCompression? )(StringToEnum(typeof(CefSharp.DevTools.Tracing.StreamCompression? ), streamCompression));
            }

            set
            {
                this.streamCompression = (EnumToString(value));
            }
        }

        /// <summary>
        /// Compression format of returned stream.
        /// </summary>
        [DataMember(Name = ("streamCompression"), IsRequired = (false))]
        internal string streamCompression
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.Fetch
{
    /// <summary>
    /// Stages of the request to handle. Request will intercept before the request is
    /// sent. Response will intercept after the response is received (but before response
    /// body is received).
    /// </summary>
    public enum RequestStage
    {
        /// <summary>
        /// Request
        /// </summary>
        [EnumMember(Value = ("Request"))]
        Request,
        /// <summary>
        /// Response
        /// </summary>
        [EnumMember(Value = ("Response"))]
        Response
    }

    /// <summary>
    /// RequestPattern
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class RequestPattern : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Wildcards (`&apos;*&apos;` -&gt; zero or more, `&apos;?&apos;` -&gt; exactly one) are allowed. Escape character is
        /// backslash. Omitting is equivalent to `&quot;*&quot;`.
        /// </summary>
        [DataMember(Name = ("urlPattern"), IsRequired = (false))]
        public string UrlPattern
        {
            get;
            set;
        }

        /// <summary>
        /// If set, only requests for matching resource types will be intercepted.
        /// </summary>
        public CefSharp.DevTools.Network.ResourceType? ResourceType
        {
            get
            {
                return (CefSharp.DevTools.Network.ResourceType? )(StringToEnum(typeof(CefSharp.DevTools.Network.ResourceType? ), resourceType));
            }

            set
            {
                this.resourceType = (EnumToString(value));
            }
        }

        /// <summary>
        /// If set, only requests for matching resource types will be intercepted.
        /// </summary>
        [DataMember(Name = ("resourceType"), IsRequired = (false))]
        internal string resourceType
        {
            get;
            set;
        }

        /// <summary>
        /// Stage at which to begin intercepting requests. Default is Request.
        /// </summary>
        public CefSharp.DevTools.Fetch.RequestStage? RequestStage
        {
            get
            {
                return (CefSharp.DevTools.Fetch.RequestStage? )(StringToEnum(typeof(CefSharp.DevTools.Fetch.RequestStage? ), requestStage));
            }

            set
            {
                this.requestStage = (EnumToString(value));
            }
        }

        /// <summary>
        /// Stage at which to begin intercepting requests. Default is Request.
        /// </summary>
        [DataMember(Name = ("requestStage"), IsRequired = (false))]
        internal string requestStage
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Response HTTP header entry
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class HeaderEntry : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Name
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// Value
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (true))]
        public string Value
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Source of the authentication challenge.
    /// </summary>
    public enum AuthChallengeSource
    {
        /// <summary>
        /// Server
        /// </summary>
        [EnumMember(Value = ("Server"))]
        Server,
        /// <summary>
        /// Proxy
        /// </summary>
        [EnumMember(Value = ("Proxy"))]
        Proxy
    }

    /// <summary>
    /// Authorization challenge for HTTP status code 401 or 407.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AuthChallenge : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Source of the authentication challenge.
        /// </summary>
        public CefSharp.DevTools.Fetch.AuthChallengeSource? Source
        {
            get
            {
                return (CefSharp.DevTools.Fetch.AuthChallengeSource? )(StringToEnum(typeof(CefSharp.DevTools.Fetch.AuthChallengeSource? ), source));
            }

            set
            {
                this.source = (EnumToString(value));
            }
        }

        /// <summary>
        /// Source of the authentication challenge.
        /// </summary>
        [DataMember(Name = ("source"), IsRequired = (false))]
        internal string source
        {
            get;
            set;
        }

        /// <summary>
        /// Origin of the challenger.
        /// </summary>
        [DataMember(Name = ("origin"), IsRequired = (true))]
        public string Origin
        {
            get;
            set;
        }

        /// <summary>
        /// The authentication scheme used, such as basic or digest
        /// </summary>
        [DataMember(Name = ("scheme"), IsRequired = (true))]
        public string Scheme
        {
            get;
            set;
        }

        /// <summary>
        /// The realm of the challenge. May be empty.
        /// </summary>
        [DataMember(Name = ("realm"), IsRequired = (true))]
        public string Realm
        {
            get;
            set;
        }
    }

    /// <summary>
    /// The decision on what to do in response to the authorization challenge.  Default means
    /// deferring to the default behavior of the net stack, which will likely either the Cancel
    /// authentication or display a popup dialog box.
    /// </summary>
    public enum AuthChallengeResponseResponse
    {
        /// <summary>
        /// Default
        /// </summary>
        [EnumMember(Value = ("Default"))]
        Default,
        /// <summary>
        /// CancelAuth
        /// </summary>
        [EnumMember(Value = ("CancelAuth"))]
        CancelAuth,
        /// <summary>
        /// ProvideCredentials
        /// </summary>
        [EnumMember(Value = ("ProvideCredentials"))]
        ProvideCredentials
    }

    /// <summary>
    /// Response to an AuthChallenge.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AuthChallengeResponse : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The decision on what to do in response to the authorization challenge.  Default means
        /// deferring to the default behavior of the net stack, which will likely either the Cancel
        /// authentication or display a popup dialog box.
        /// </summary>
        public CefSharp.DevTools.Fetch.AuthChallengeResponseResponse Response
        {
            get
            {
                return (CefSharp.DevTools.Fetch.AuthChallengeResponseResponse)(StringToEnum(typeof(CefSharp.DevTools.Fetch.AuthChallengeResponseResponse), response));
            }

            set
            {
                this.response = (EnumToString(value));
            }
        }

        /// <summary>
        /// The decision on what to do in response to the authorization challenge.  Default means
        /// deferring to the default behavior of the net stack, which will likely either the Cancel
        /// authentication or display a popup dialog box.
        /// </summary>
        [DataMember(Name = ("response"), IsRequired = (true))]
        internal string response
        {
            get;
            set;
        }

        /// <summary>
        /// The username to provide, possibly empty. Should only be set if response is
        /// ProvideCredentials.
        /// </summary>
        [DataMember(Name = ("username"), IsRequired = (false))]
        public string Username
        {
            get;
            set;
        }

        /// <summary>
        /// The password to provide, possibly empty. Should only be set if response is
        /// ProvideCredentials.
        /// </summary>
        [DataMember(Name = ("password"), IsRequired = (false))]
        public string Password
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Issued when the domain is enabled and the request URL matches the
    /// specified filter. The request is paused until the client responds
    /// with one of continueRequest, failRequest or fulfillRequest.
    /// The stage of the request can be determined by presence of responseErrorReason
    /// and responseStatusCode -- the request is at the response stage if either
    /// of these fields is present and in the request stage otherwise.
    /// Redirect responses and subsequent requests are reported similarly to regular
    /// responses and requests. Redirect responses may be distinguished by the value
    /// of `responseStatusCode` (which is one of 301, 302, 303, 307, 308) along with
    /// presence of the `location` header. Requests resulting from a redirect will
    /// have `redirectedRequestId` field set.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class RequestPausedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Each request the page makes will have a unique id.
        /// </summary>
        [DataMember(Name = ("requestId"), IsRequired = (true))]
        public string RequestId
        {
            get;
            private set;
        }

        /// <summary>
        /// The details of the request.
        /// </summary>
        [DataMember(Name = ("request"), IsRequired = (true))]
        public CefSharp.DevTools.Network.Request Request
        {
            get;
            private set;
        }

        /// <summary>
        /// The id of the frame that initiated the request.
        /// </summary>
        [DataMember(Name = ("frameId"), IsRequired = (true))]
        public string FrameId
        {
            get;
            private set;
        }

        /// <summary>
        /// How the requested resource will be used.
        /// </summary>
        public CefSharp.DevTools.Network.ResourceType ResourceType
        {
            get
            {
                return (CefSharp.DevTools.Network.ResourceType)(StringToEnum(typeof(CefSharp.DevTools.Network.ResourceType), resourceType));
            }

            set
            {
                this.resourceType = (EnumToString(value));
            }
        }

        /// <summary>
        /// How the requested resource will be used.
        /// </summary>
        [DataMember(Name = ("resourceType"), IsRequired = (true))]
        internal string resourceType
        {
            get;
            private set;
        }

        /// <summary>
        /// Response error if intercepted at response stage.
        /// </summary>
        public CefSharp.DevTools.Network.ErrorReason? ResponseErrorReason
        {
            get
            {
                return (CefSharp.DevTools.Network.ErrorReason? )(StringToEnum(typeof(CefSharp.DevTools.Network.ErrorReason? ), responseErrorReason));
            }

            set
            {
                this.responseErrorReason = (EnumToString(value));
            }
        }

        /// <summary>
        /// Response error if intercepted at response stage.
        /// </summary>
        [DataMember(Name = ("responseErrorReason"), IsRequired = (false))]
        internal string responseErrorReason
        {
            get;
            private set;
        }

        /// <summary>
        /// Response code if intercepted at response stage.
        /// </summary>
        [DataMember(Name = ("responseStatusCode"), IsRequired = (false))]
        public int? ResponseStatusCode
        {
            get;
            private set;
        }

        /// <summary>
        /// Response status text if intercepted at response stage.
        /// </summary>
        [DataMember(Name = ("responseStatusText"), IsRequired = (false))]
        public string ResponseStatusText
        {
            get;
            private set;
        }

        /// <summary>
        /// Response headers if intercepted at the response stage.
        /// </summary>
        [DataMember(Name = ("responseHeaders"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Fetch.HeaderEntry> ResponseHeaders
        {
            get;
            private set;
        }

        /// <summary>
        /// If the intercepted request had a corresponding Network.requestWillBeSent event fired for it,
        /// then this networkId will be the same as the requestId present in the requestWillBeSent event.
        /// </summary>
        [DataMember(Name = ("networkId"), IsRequired = (false))]
        public string NetworkId
        {
            get;
            private set;
        }

        /// <summary>
        /// If the request is due to a redirect response from the server, the id of the request that
        /// has caused the redirect.
        /// </summary>
        [DataMember(Name = ("redirectedRequestId"), IsRequired = (false))]
        public string RedirectedRequestId
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Issued when the domain is enabled with handleAuthRequests set to true.
    /// The request is paused until client responds with continueWithAuth.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class AuthRequiredEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Each request the page makes will have a unique id.
        /// </summary>
        [DataMember(Name = ("requestId"), IsRequired = (true))]
        public string RequestId
        {
            get;
            private set;
        }

        /// <summary>
        /// The details of the request.
        /// </summary>
        [DataMember(Name = ("request"), IsRequired = (true))]
        public CefSharp.DevTools.Network.Request Request
        {
            get;
            private set;
        }

        /// <summary>
        /// The id of the frame that initiated the request.
        /// </summary>
        [DataMember(Name = ("frameId"), IsRequired = (true))]
        public string FrameId
        {
            get;
            private set;
        }

        /// <summary>
        /// How the requested resource will be used.
        /// </summary>
        public CefSharp.DevTools.Network.ResourceType ResourceType
        {
            get
            {
                return (CefSharp.DevTools.Network.ResourceType)(StringToEnum(typeof(CefSharp.DevTools.Network.ResourceType), resourceType));
            }

            set
            {
                this.resourceType = (EnumToString(value));
            }
        }

        /// <summary>
        /// How the requested resource will be used.
        /// </summary>
        [DataMember(Name = ("resourceType"), IsRequired = (true))]
        internal string resourceType
        {
            get;
            private set;
        }

        /// <summary>
        /// Details of the Authorization Challenge encountered.
        /// If this is set, client should respond with continueRequest that
        /// contains AuthChallengeResponse.
        /// </summary>
        [DataMember(Name = ("authChallenge"), IsRequired = (true))]
        public CefSharp.DevTools.Fetch.AuthChallenge AuthChallenge
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.WebAudio
{
    /// <summary>
    /// Enum of BaseAudioContext types
    /// </summary>
    public enum ContextType
    {
        /// <summary>
        /// realtime
        /// </summary>
        [EnumMember(Value = ("realtime"))]
        Realtime,
        /// <summary>
        /// offline
        /// </summary>
        [EnumMember(Value = ("offline"))]
        Offline
    }

    /// <summary>
    /// Enum of AudioContextState from the spec
    /// </summary>
    public enum ContextState
    {
        /// <summary>
        /// suspended
        /// </summary>
        [EnumMember(Value = ("suspended"))]
        Suspended,
        /// <summary>
        /// running
        /// </summary>
        [EnumMember(Value = ("running"))]
        Running,
        /// <summary>
        /// closed
        /// </summary>
        [EnumMember(Value = ("closed"))]
        Closed
    }

    /// <summary>
    /// Enum of AudioNode::ChannelCountMode from the spec
    /// </summary>
    public enum ChannelCountMode
    {
        /// <summary>
        /// clamped-max
        /// </summary>
        [EnumMember(Value = ("clamped-max"))]
        ClampedMax,
        /// <summary>
        /// explicit
        /// </summary>
        [EnumMember(Value = ("explicit"))]
        Explicit,
        /// <summary>
        /// max
        /// </summary>
        [EnumMember(Value = ("max"))]
        Max
    }

    /// <summary>
    /// Enum of AudioNode::ChannelInterpretation from the spec
    /// </summary>
    public enum ChannelInterpretation
    {
        /// <summary>
        /// discrete
        /// </summary>
        [EnumMember(Value = ("discrete"))]
        Discrete,
        /// <summary>
        /// speakers
        /// </summary>
        [EnumMember(Value = ("speakers"))]
        Speakers
    }

    /// <summary>
    /// Enum of AudioParam::AutomationRate from the spec
    /// </summary>
    public enum AutomationRate
    {
        /// <summary>
        /// a-rate
        /// </summary>
        [EnumMember(Value = ("a-rate"))]
        ARate,
        /// <summary>
        /// k-rate
        /// </summary>
        [EnumMember(Value = ("k-rate"))]
        KRate
    }

    /// <summary>
    /// Fields in AudioContext that change in real-time.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ContextRealtimeData : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The current context time in second in BaseAudioContext.
        /// </summary>
        [DataMember(Name = ("currentTime"), IsRequired = (true))]
        public double CurrentTime
        {
            get;
            set;
        }

        /// <summary>
        /// The time spent on rendering graph divided by render quantum duration,
        /// and multiplied by 100. 100 means the audio renderer reached the full
        /// capacity and glitch may occur.
        /// </summary>
        [DataMember(Name = ("renderCapacity"), IsRequired = (true))]
        public double RenderCapacity
        {
            get;
            set;
        }

        /// <summary>
        /// A running mean of callback interval.
        /// </summary>
        [DataMember(Name = ("callbackIntervalMean"), IsRequired = (true))]
        public double CallbackIntervalMean
        {
            get;
            set;
        }

        /// <summary>
        /// A running variance of callback interval.
        /// </summary>
        [DataMember(Name = ("callbackIntervalVariance"), IsRequired = (true))]
        public double CallbackIntervalVariance
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Protocol object for BaseAudioContext
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class BaseAudioContext : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// ContextId
        /// </summary>
        [DataMember(Name = ("contextId"), IsRequired = (true))]
        public string ContextId
        {
            get;
            set;
        }

        /// <summary>
        /// ContextType
        /// </summary>
        public CefSharp.DevTools.WebAudio.ContextType ContextType
        {
            get
            {
                return (CefSharp.DevTools.WebAudio.ContextType)(StringToEnum(typeof(CefSharp.DevTools.WebAudio.ContextType), contextType));
            }

            set
            {
                this.contextType = (EnumToString(value));
            }
        }

        /// <summary>
        /// ContextType
        /// </summary>
        [DataMember(Name = ("contextType"), IsRequired = (true))]
        internal string contextType
        {
            get;
            set;
        }

        /// <summary>
        /// ContextState
        /// </summary>
        public CefSharp.DevTools.WebAudio.ContextState ContextState
        {
            get
            {
                return (CefSharp.DevTools.WebAudio.ContextState)(StringToEnum(typeof(CefSharp.DevTools.WebAudio.ContextState), contextState));
            }

            set
            {
                this.contextState = (EnumToString(value));
            }
        }

        /// <summary>
        /// ContextState
        /// </summary>
        [DataMember(Name = ("contextState"), IsRequired = (true))]
        internal string contextState
        {
            get;
            set;
        }

        /// <summary>
        /// RealtimeData
        /// </summary>
        [DataMember(Name = ("realtimeData"), IsRequired = (false))]
        public CefSharp.DevTools.WebAudio.ContextRealtimeData RealtimeData
        {
            get;
            set;
        }

        /// <summary>
        /// Platform-dependent callback buffer size.
        /// </summary>
        [DataMember(Name = ("callbackBufferSize"), IsRequired = (true))]
        public double CallbackBufferSize
        {
            get;
            set;
        }

        /// <summary>
        /// Number of output channels supported by audio hardware in use.
        /// </summary>
        [DataMember(Name = ("maxOutputChannelCount"), IsRequired = (true))]
        public double MaxOutputChannelCount
        {
            get;
            set;
        }

        /// <summary>
        /// Context sample rate.
        /// </summary>
        [DataMember(Name = ("sampleRate"), IsRequired = (true))]
        public double SampleRate
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Protocol object for AudioListener
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AudioListener : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// ListenerId
        /// </summary>
        [DataMember(Name = ("listenerId"), IsRequired = (true))]
        public string ListenerId
        {
            get;
            set;
        }

        /// <summary>
        /// ContextId
        /// </summary>
        [DataMember(Name = ("contextId"), IsRequired = (true))]
        public string ContextId
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Protocol object for AudioNode
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AudioNode : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// NodeId
        /// </summary>
        [DataMember(Name = ("nodeId"), IsRequired = (true))]
        public string NodeId
        {
            get;
            set;
        }

        /// <summary>
        /// ContextId
        /// </summary>
        [DataMember(Name = ("contextId"), IsRequired = (true))]
        public string ContextId
        {
            get;
            set;
        }

        /// <summary>
        /// NodeType
        /// </summary>
        [DataMember(Name = ("nodeType"), IsRequired = (true))]
        public string NodeType
        {
            get;
            set;
        }

        /// <summary>
        /// NumberOfInputs
        /// </summary>
        [DataMember(Name = ("numberOfInputs"), IsRequired = (true))]
        public double NumberOfInputs
        {
            get;
            set;
        }

        /// <summary>
        /// NumberOfOutputs
        /// </summary>
        [DataMember(Name = ("numberOfOutputs"), IsRequired = (true))]
        public double NumberOfOutputs
        {
            get;
            set;
        }

        /// <summary>
        /// ChannelCount
        /// </summary>
        [DataMember(Name = ("channelCount"), IsRequired = (true))]
        public double ChannelCount
        {
            get;
            set;
        }

        /// <summary>
        /// ChannelCountMode
        /// </summary>
        public CefSharp.DevTools.WebAudio.ChannelCountMode ChannelCountMode
        {
            get
            {
                return (CefSharp.DevTools.WebAudio.ChannelCountMode)(StringToEnum(typeof(CefSharp.DevTools.WebAudio.ChannelCountMode), channelCountMode));
            }

            set
            {
                this.channelCountMode = (EnumToString(value));
            }
        }

        /// <summary>
        /// ChannelCountMode
        /// </summary>
        [DataMember(Name = ("channelCountMode"), IsRequired = (true))]
        internal string channelCountMode
        {
            get;
            set;
        }

        /// <summary>
        /// ChannelInterpretation
        /// </summary>
        public CefSharp.DevTools.WebAudio.ChannelInterpretation ChannelInterpretation
        {
            get
            {
                return (CefSharp.DevTools.WebAudio.ChannelInterpretation)(StringToEnum(typeof(CefSharp.DevTools.WebAudio.ChannelInterpretation), channelInterpretation));
            }

            set
            {
                this.channelInterpretation = (EnumToString(value));
            }
        }

        /// <summary>
        /// ChannelInterpretation
        /// </summary>
        [DataMember(Name = ("channelInterpretation"), IsRequired = (true))]
        internal string channelInterpretation
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Protocol object for AudioParam
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class AudioParam : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// ParamId
        /// </summary>
        [DataMember(Name = ("paramId"), IsRequired = (true))]
        public string ParamId
        {
            get;
            set;
        }

        /// <summary>
        /// NodeId
        /// </summary>
        [DataMember(Name = ("nodeId"), IsRequired = (true))]
        public string NodeId
        {
            get;
            set;
        }

        /// <summary>
        /// ContextId
        /// </summary>
        [DataMember(Name = ("contextId"), IsRequired = (true))]
        public string ContextId
        {
            get;
            set;
        }

        /// <summary>
        /// ParamType
        /// </summary>
        [DataMember(Name = ("paramType"), IsRequired = (true))]
        public string ParamType
        {
            get;
            set;
        }

        /// <summary>
        /// Rate
        /// </summary>
        public CefSharp.DevTools.WebAudio.AutomationRate Rate
        {
            get
            {
                return (CefSharp.DevTools.WebAudio.AutomationRate)(StringToEnum(typeof(CefSharp.DevTools.WebAudio.AutomationRate), rate));
            }

            set
            {
                this.rate = (EnumToString(value));
            }
        }

        /// <summary>
        /// Rate
        /// </summary>
        [DataMember(Name = ("rate"), IsRequired = (true))]
        internal string rate
        {
            get;
            set;
        }

        /// <summary>
        /// DefaultValue
        /// </summary>
        [DataMember(Name = ("defaultValue"), IsRequired = (true))]
        public double DefaultValue
        {
            get;
            set;
        }

        /// <summary>
        /// MinValue
        /// </summary>
        [DataMember(Name = ("minValue"), IsRequired = (true))]
        public double MinValue
        {
            get;
            set;
        }

        /// <summary>
        /// MaxValue
        /// </summary>
        [DataMember(Name = ("maxValue"), IsRequired = (true))]
        public double MaxValue
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Notifies that a new BaseAudioContext has been created.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class ContextCreatedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Context
        /// </summary>
        [DataMember(Name = ("context"), IsRequired = (true))]
        public CefSharp.DevTools.WebAudio.BaseAudioContext Context
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Notifies that an existing BaseAudioContext will be destroyed.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class ContextWillBeDestroyedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// ContextId
        /// </summary>
        [DataMember(Name = ("contextId"), IsRequired = (true))]
        public string ContextId
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Notifies that existing BaseAudioContext has changed some properties (id stays the same)..
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class ContextChangedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Context
        /// </summary>
        [DataMember(Name = ("context"), IsRequired = (true))]
        public CefSharp.DevTools.WebAudio.BaseAudioContext Context
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Notifies that the construction of an AudioListener has finished.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class AudioListenerCreatedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Listener
        /// </summary>
        [DataMember(Name = ("listener"), IsRequired = (true))]
        public CefSharp.DevTools.WebAudio.AudioListener Listener
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Notifies that a new AudioListener has been created.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class AudioListenerWillBeDestroyedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// ContextId
        /// </summary>
        [DataMember(Name = ("contextId"), IsRequired = (true))]
        public string ContextId
        {
            get;
            private set;
        }

        /// <summary>
        /// ListenerId
        /// </summary>
        [DataMember(Name = ("listenerId"), IsRequired = (true))]
        public string ListenerId
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Notifies that a new AudioNode has been created.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class AudioNodeCreatedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Node
        /// </summary>
        [DataMember(Name = ("node"), IsRequired = (true))]
        public CefSharp.DevTools.WebAudio.AudioNode Node
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Notifies that an existing AudioNode has been destroyed.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class AudioNodeWillBeDestroyedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// ContextId
        /// </summary>
        [DataMember(Name = ("contextId"), IsRequired = (true))]
        public string ContextId
        {
            get;
            private set;
        }

        /// <summary>
        /// NodeId
        /// </summary>
        [DataMember(Name = ("nodeId"), IsRequired = (true))]
        public string NodeId
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Notifies that a new AudioParam has been created.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class AudioParamCreatedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Param
        /// </summary>
        [DataMember(Name = ("param"), IsRequired = (true))]
        public CefSharp.DevTools.WebAudio.AudioParam Param
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Notifies that an existing AudioParam has been destroyed.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class AudioParamWillBeDestroyedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// ContextId
        /// </summary>
        [DataMember(Name = ("contextId"), IsRequired = (true))]
        public string ContextId
        {
            get;
            private set;
        }

        /// <summary>
        /// NodeId
        /// </summary>
        [DataMember(Name = ("nodeId"), IsRequired = (true))]
        public string NodeId
        {
            get;
            private set;
        }

        /// <summary>
        /// ParamId
        /// </summary>
        [DataMember(Name = ("paramId"), IsRequired = (true))]
        public string ParamId
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Notifies that two AudioNodes are connected.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class NodesConnectedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// ContextId
        /// </summary>
        [DataMember(Name = ("contextId"), IsRequired = (true))]
        public string ContextId
        {
            get;
            private set;
        }

        /// <summary>
        /// SourceId
        /// </summary>
        [DataMember(Name = ("sourceId"), IsRequired = (true))]
        public string SourceId
        {
            get;
            private set;
        }

        /// <summary>
        /// DestinationId
        /// </summary>
        [DataMember(Name = ("destinationId"), IsRequired = (true))]
        public string DestinationId
        {
            get;
            private set;
        }

        /// <summary>
        /// SourceOutputIndex
        /// </summary>
        [DataMember(Name = ("sourceOutputIndex"), IsRequired = (false))]
        public double? SourceOutputIndex
        {
            get;
            private set;
        }

        /// <summary>
        /// DestinationInputIndex
        /// </summary>
        [DataMember(Name = ("destinationInputIndex"), IsRequired = (false))]
        public double? DestinationInputIndex
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Notifies that AudioNodes are disconnected. The destination can be null, and it means all the outgoing connections from the source are disconnected.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class NodesDisconnectedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// ContextId
        /// </summary>
        [DataMember(Name = ("contextId"), IsRequired = (true))]
        public string ContextId
        {
            get;
            private set;
        }

        /// <summary>
        /// SourceId
        /// </summary>
        [DataMember(Name = ("sourceId"), IsRequired = (true))]
        public string SourceId
        {
            get;
            private set;
        }

        /// <summary>
        /// DestinationId
        /// </summary>
        [DataMember(Name = ("destinationId"), IsRequired = (true))]
        public string DestinationId
        {
            get;
            private set;
        }

        /// <summary>
        /// SourceOutputIndex
        /// </summary>
        [DataMember(Name = ("sourceOutputIndex"), IsRequired = (false))]
        public double? SourceOutputIndex
        {
            get;
            private set;
        }

        /// <summary>
        /// DestinationInputIndex
        /// </summary>
        [DataMember(Name = ("destinationInputIndex"), IsRequired = (false))]
        public double? DestinationInputIndex
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Notifies that an AudioNode is connected to an AudioParam.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class NodeParamConnectedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// ContextId
        /// </summary>
        [DataMember(Name = ("contextId"), IsRequired = (true))]
        public string ContextId
        {
            get;
            private set;
        }

        /// <summary>
        /// SourceId
        /// </summary>
        [DataMember(Name = ("sourceId"), IsRequired = (true))]
        public string SourceId
        {
            get;
            private set;
        }

        /// <summary>
        /// DestinationId
        /// </summary>
        [DataMember(Name = ("destinationId"), IsRequired = (true))]
        public string DestinationId
        {
            get;
            private set;
        }

        /// <summary>
        /// SourceOutputIndex
        /// </summary>
        [DataMember(Name = ("sourceOutputIndex"), IsRequired = (false))]
        public double? SourceOutputIndex
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Notifies that an AudioNode is disconnected to an AudioParam.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class NodeParamDisconnectedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// ContextId
        /// </summary>
        [DataMember(Name = ("contextId"), IsRequired = (true))]
        public string ContextId
        {
            get;
            private set;
        }

        /// <summary>
        /// SourceId
        /// </summary>
        [DataMember(Name = ("sourceId"), IsRequired = (true))]
        public string SourceId
        {
            get;
            private set;
        }

        /// <summary>
        /// DestinationId
        /// </summary>
        [DataMember(Name = ("destinationId"), IsRequired = (true))]
        public string DestinationId
        {
            get;
            private set;
        }

        /// <summary>
        /// SourceOutputIndex
        /// </summary>
        [DataMember(Name = ("sourceOutputIndex"), IsRequired = (false))]
        public double? SourceOutputIndex
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.WebAuthn
{
    /// <summary>
    /// AuthenticatorProtocol
    /// </summary>
    public enum AuthenticatorProtocol
    {
        /// <summary>
        /// u2f
        /// </summary>
        [EnumMember(Value = ("u2f"))]
        U2f,
        /// <summary>
        /// ctap2
        /// </summary>
        [EnumMember(Value = ("ctap2"))]
        Ctap2
    }

    /// <summary>
    /// Ctap2Version
    /// </summary>
    public enum Ctap2Version
    {
        /// <summary>
        /// ctap2_0
        /// </summary>
        [EnumMember(Value = ("ctap2_0"))]
        Ctap20,
        /// <summary>
        /// ctap2_1
        /// </summary>
        [EnumMember(Value = ("ctap2_1"))]
        Ctap21
    }

    /// <summary>
    /// AuthenticatorTransport
    /// </summary>
    public enum AuthenticatorTransport
    {
        /// <summary>
        /// usb
        /// </summary>
        [EnumMember(Value = ("usb"))]
        Usb,
        /// <summary>
        /// nfc
        /// </summary>
        [EnumMember(Value = ("nfc"))]
        Nfc,
        /// <summary>
        /// ble
        /// </summary>
        [EnumMember(Value = ("ble"))]
        Ble,
        /// <summary>
        /// cable
        /// </summary>
        [EnumMember(Value = ("cable"))]
        Cable,
        /// <summary>
        /// internal
        /// </summary>
        [EnumMember(Value = ("internal"))]
        Internal
    }

    /// <summary>
    /// VirtualAuthenticatorOptions
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class VirtualAuthenticatorOptions : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Protocol
        /// </summary>
        public CefSharp.DevTools.WebAuthn.AuthenticatorProtocol Protocol
        {
            get
            {
                return (CefSharp.DevTools.WebAuthn.AuthenticatorProtocol)(StringToEnum(typeof(CefSharp.DevTools.WebAuthn.AuthenticatorProtocol), protocol));
            }

            set
            {
                this.protocol = (EnumToString(value));
            }
        }

        /// <summary>
        /// Protocol
        /// </summary>
        [DataMember(Name = ("protocol"), IsRequired = (true))]
        internal string protocol
        {
            get;
            set;
        }

        /// <summary>
        /// Defaults to ctap2_0. Ignored if |protocol| == u2f.
        /// </summary>
        public CefSharp.DevTools.WebAuthn.Ctap2Version? Ctap2Version
        {
            get
            {
                return (CefSharp.DevTools.WebAuthn.Ctap2Version? )(StringToEnum(typeof(CefSharp.DevTools.WebAuthn.Ctap2Version? ), ctap2Version));
            }

            set
            {
                this.ctap2Version = (EnumToString(value));
            }
        }

        /// <summary>
        /// Defaults to ctap2_0. Ignored if |protocol| == u2f.
        /// </summary>
        [DataMember(Name = ("ctap2Version"), IsRequired = (false))]
        internal string ctap2Version
        {
            get;
            set;
        }

        /// <summary>
        /// Transport
        /// </summary>
        public CefSharp.DevTools.WebAuthn.AuthenticatorTransport Transport
        {
            get
            {
                return (CefSharp.DevTools.WebAuthn.AuthenticatorTransport)(StringToEnum(typeof(CefSharp.DevTools.WebAuthn.AuthenticatorTransport), transport));
            }

            set
            {
                this.transport = (EnumToString(value));
            }
        }

        /// <summary>
        /// Transport
        /// </summary>
        [DataMember(Name = ("transport"), IsRequired = (true))]
        internal string transport
        {
            get;
            set;
        }

        /// <summary>
        /// Defaults to false.
        /// </summary>
        [DataMember(Name = ("hasResidentKey"), IsRequired = (false))]
        public bool? HasResidentKey
        {
            get;
            set;
        }

        /// <summary>
        /// Defaults to false.
        /// </summary>
        [DataMember(Name = ("hasUserVerification"), IsRequired = (false))]
        public bool? HasUserVerification
        {
            get;
            set;
        }

        /// <summary>
        /// If set to true, the authenticator will support the largeBlob extension.
        /// https://w3c.github.io/webauthn#largeBlob
        /// Defaults to false.
        /// </summary>
        [DataMember(Name = ("hasLargeBlob"), IsRequired = (false))]
        public bool? HasLargeBlob
        {
            get;
            set;
        }

        /// <summary>
        /// If set to true, the authenticator will support the credBlob extension.
        /// https://fidoalliance.org/specs/fido-v2.1-rd-20201208/fido-client-to-authenticator-protocol-v2.1-rd-20201208.html#sctn-credBlob-extension
        /// Defaults to false.
        /// </summary>
        [DataMember(Name = ("hasCredBlob"), IsRequired = (false))]
        public bool? HasCredBlob
        {
            get;
            set;
        }

        /// <summary>
        /// If set to true, the authenticator will support the minPinLength extension.
        /// https://fidoalliance.org/specs/fido-v2.1-ps-20210615/fido-client-to-authenticator-protocol-v2.1-ps-20210615.html#sctn-minpinlength-extension
        /// Defaults to false.
        /// </summary>
        [DataMember(Name = ("hasMinPinLength"), IsRequired = (false))]
        public bool? HasMinPinLength
        {
            get;
            set;
        }

        /// <summary>
        /// If set to true, the authenticator will support the prf extension.
        /// https://w3c.github.io/webauthn/#prf-extension
        /// Defaults to false.
        /// </summary>
        [DataMember(Name = ("hasPrf"), IsRequired = (false))]
        public bool? HasPrf
        {
            get;
            set;
        }

        /// <summary>
        /// If set to true, tests of user presence will succeed immediately.
        /// Otherwise, they will not be resolved. Defaults to true.
        /// </summary>
        [DataMember(Name = ("automaticPresenceSimulation"), IsRequired = (false))]
        public bool? AutomaticPresenceSimulation
        {
            get;
            set;
        }

        /// <summary>
        /// Sets whether User Verification succeeds or fails for an authenticator.
        /// Defaults to false.
        /// </summary>
        [DataMember(Name = ("isUserVerified"), IsRequired = (false))]
        public bool? IsUserVerified
        {
            get;
            set;
        }

        /// <summary>
        /// Credentials created by this authenticator will have the backup
        /// eligibility (BE) flag set to this value. Defaults to false.
        /// https://w3c.github.io/webauthn/#sctn-credential-backup
        /// </summary>
        [DataMember(Name = ("defaultBackupEligibility"), IsRequired = (false))]
        public bool? DefaultBackupEligibility
        {
            get;
            set;
        }

        /// <summary>
        /// Credentials created by this authenticator will have the backup state
        /// (BS) flag set to this value. Defaults to false.
        /// https://w3c.github.io/webauthn/#sctn-credential-backup
        /// </summary>
        [DataMember(Name = ("defaultBackupState"), IsRequired = (false))]
        public bool? DefaultBackupState
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Credential
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class Credential : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// CredentialId
        /// </summary>
        [DataMember(Name = ("credentialId"), IsRequired = (true))]
        public byte[] CredentialId
        {
            get;
            set;
        }

        /// <summary>
        /// IsResidentCredential
        /// </summary>
        [DataMember(Name = ("isResidentCredential"), IsRequired = (true))]
        public bool IsResidentCredential
        {
            get;
            set;
        }

        /// <summary>
        /// Relying Party ID the credential is scoped to. Must be set when adding a
        /// credential.
        /// </summary>
        [DataMember(Name = ("rpId"), IsRequired = (false))]
        public string RpId
        {
            get;
            set;
        }

        /// <summary>
        /// The ECDSA P-256 private key in PKCS#8 format.
        /// </summary>
        [DataMember(Name = ("privateKey"), IsRequired = (true))]
        public byte[] PrivateKey
        {
            get;
            set;
        }

        /// <summary>
        /// An opaque byte sequence with a maximum size of 64 bytes mapping the
        /// credential to a specific user.
        /// </summary>
        [DataMember(Name = ("userHandle"), IsRequired = (false))]
        public byte[] UserHandle
        {
            get;
            set;
        }

        /// <summary>
        /// Signature counter. This is incremented by one for each successful
        /// assertion.
        /// See https://w3c.github.io/webauthn/#signature-counter
        /// </summary>
        [DataMember(Name = ("signCount"), IsRequired = (true))]
        public int SignCount
        {
            get;
            set;
        }

        /// <summary>
        /// The large blob associated with the credential.
        /// See https://w3c.github.io/webauthn/#sctn-large-blob-extension
        /// </summary>
        [DataMember(Name = ("largeBlob"), IsRequired = (false))]
        public byte[] LargeBlob
        {
            get;
            set;
        }

        /// <summary>
        /// Assertions returned by this credential will have the backup eligibility
        /// (BE) flag set to this value. Defaults to the authenticator&apos;s
        /// defaultBackupEligibility value.
        /// </summary>
        [DataMember(Name = ("backupEligibility"), IsRequired = (false))]
        public bool? BackupEligibility
        {
            get;
            set;
        }

        /// <summary>
        /// Assertions returned by this credential will have the backup state (BS)
        /// flag set to this value. Defaults to the authenticator&apos;s
        /// defaultBackupState value.
        /// </summary>
        [DataMember(Name = ("backupState"), IsRequired = (false))]
        public bool? BackupState
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Triggered when a credential is added to an authenticator.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class CredentialAddedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// AuthenticatorId
        /// </summary>
        [DataMember(Name = ("authenticatorId"), IsRequired = (true))]
        public string AuthenticatorId
        {
            get;
            private set;
        }

        /// <summary>
        /// Credential
        /// </summary>
        [DataMember(Name = ("credential"), IsRequired = (true))]
        public CefSharp.DevTools.WebAuthn.Credential Credential
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Triggered when a credential is used in a webauthn assertion.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class CredentialAssertedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// AuthenticatorId
        /// </summary>
        [DataMember(Name = ("authenticatorId"), IsRequired = (true))]
        public string AuthenticatorId
        {
            get;
            private set;
        }

        /// <summary>
        /// Credential
        /// </summary>
        [DataMember(Name = ("credential"), IsRequired = (true))]
        public CefSharp.DevTools.WebAuthn.Credential Credential
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.Media
{
    /// <summary>
    /// Keep in sync with MediaLogMessageLevel
    /// We are currently keeping the message level &apos;error&apos; separate from the
    /// PlayerError type because right now they represent different things,
    /// this one being a DVLOG(ERROR) style log message that gets printed
    /// based on what log level is selected in the UI, and the other is a
    /// representation of a media::PipelineStatus object. Soon however we&apos;re
    /// going to be moving away from using PipelineStatus for errors and
    /// introducing a new error type which should hopefully let us integrate
    /// the error log level into the PlayerError type.
    /// </summary>
    public enum PlayerMessageLevel
    {
        /// <summary>
        /// error
        /// </summary>
        [EnumMember(Value = ("error"))]
        Error,
        /// <summary>
        /// warning
        /// </summary>
        [EnumMember(Value = ("warning"))]
        Warning,
        /// <summary>
        /// info
        /// </summary>
        [EnumMember(Value = ("info"))]
        Info,
        /// <summary>
        /// debug
        /// </summary>
        [EnumMember(Value = ("debug"))]
        Debug
    }

    /// <summary>
    /// Have one type per entry in MediaLogRecord::Type
    /// Corresponds to kMessage
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class PlayerMessage : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Keep in sync with MediaLogMessageLevel
        /// We are currently keeping the message level &apos;error&apos; separate from the
        /// PlayerError type because right now they represent different things,
        /// this one being a DVLOG(ERROR) style log message that gets printed
        /// based on what log level is selected in the UI, and the other is a
        /// representation of a media::PipelineStatus object. Soon however we&apos;re
        /// going to be moving away from using PipelineStatus for errors and
        /// introducing a new error type which should hopefully let us integrate
        /// the error log level into the PlayerError type.
        /// </summary>
        public CefSharp.DevTools.Media.PlayerMessageLevel Level
        {
            get
            {
                return (CefSharp.DevTools.Media.PlayerMessageLevel)(StringToEnum(typeof(CefSharp.DevTools.Media.PlayerMessageLevel), level));
            }

            set
            {
                this.level = (EnumToString(value));
            }
        }

        /// <summary>
        /// Keep in sync with MediaLogMessageLevel
        /// We are currently keeping the message level &apos;error&apos; separate from the
        /// PlayerError type because right now they represent different things,
        /// this one being a DVLOG(ERROR) style log message that gets printed
        /// based on what log level is selected in the UI, and the other is a
        /// representation of a media::PipelineStatus object. Soon however we&apos;re
        /// going to be moving away from using PipelineStatus for errors and
        /// introducing a new error type which should hopefully let us integrate
        /// the error log level into the PlayerError type.
        /// </summary>
        [DataMember(Name = ("level"), IsRequired = (true))]
        internal string level
        {
            get;
            set;
        }

        /// <summary>
        /// Message
        /// </summary>
        [DataMember(Name = ("message"), IsRequired = (true))]
        public string Message
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Corresponds to kMediaPropertyChange
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class PlayerProperty : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Name
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// Value
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (true))]
        public string Value
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Corresponds to kMediaEventTriggered
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class PlayerEvent : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Timestamp
        /// </summary>
        [DataMember(Name = ("timestamp"), IsRequired = (true))]
        public double Timestamp
        {
            get;
            set;
        }

        /// <summary>
        /// Value
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (true))]
        public string Value
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Represents logged source line numbers reported in an error.
    /// NOTE: file and line are from chromium c++ implementation code, not js.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class PlayerErrorSourceLocation : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// File
        /// </summary>
        [DataMember(Name = ("file"), IsRequired = (true))]
        public string File
        {
            get;
            set;
        }

        /// <summary>
        /// Line
        /// </summary>
        [DataMember(Name = ("line"), IsRequired = (true))]
        public int Line
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Corresponds to kMediaError
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class PlayerError : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// ErrorType
        /// </summary>
        [DataMember(Name = ("errorType"), IsRequired = (true))]
        public string ErrorType
        {
            get;
            set;
        }

        /// <summary>
        /// Code is the numeric enum entry for a specific set of error codes, such
        /// as PipelineStatusCodes in media/base/pipeline_status.h
        /// </summary>
        [DataMember(Name = ("code"), IsRequired = (true))]
        public int Code
        {
            get;
            set;
        }

        /// <summary>
        /// A trace of where this error was caused / where it passed through.
        /// </summary>
        [DataMember(Name = ("stack"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Media.PlayerErrorSourceLocation> Stack
        {
            get;
            set;
        }

        /// <summary>
        /// Errors potentially have a root cause error, ie, a DecoderError might be
        /// caused by an WindowsError
        /// </summary>
        [DataMember(Name = ("cause"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Media.PlayerError> Cause
        {
            get;
            set;
        }

        /// <summary>
        /// Extra data attached to an error, such as an HRESULT, Video Codec, etc.
        /// </summary>
        [DataMember(Name = ("data"), IsRequired = (true))]
        public object Data
        {
            get;
            set;
        }
    }

    /// <summary>
    /// This can be called multiple times, and can be used to set / override /
    /// remove player properties. A null propValue indicates removal.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class PlayerPropertiesChangedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// PlayerId
        /// </summary>
        [DataMember(Name = ("playerId"), IsRequired = (true))]
        public string PlayerId
        {
            get;
            private set;
        }

        /// <summary>
        /// Properties
        /// </summary>
        [DataMember(Name = ("properties"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Media.PlayerProperty> Properties
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Send events as a list, allowing them to be batched on the browser for less
    /// congestion. If batched, events must ALWAYS be in chronological order.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class PlayerEventsAddedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// PlayerId
        /// </summary>
        [DataMember(Name = ("playerId"), IsRequired = (true))]
        public string PlayerId
        {
            get;
            private set;
        }

        /// <summary>
        /// Events
        /// </summary>
        [DataMember(Name = ("events"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Media.PlayerEvent> Events
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Send a list of any messages that need to be delivered.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class PlayerMessagesLoggedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// PlayerId
        /// </summary>
        [DataMember(Name = ("playerId"), IsRequired = (true))]
        public string PlayerId
        {
            get;
            private set;
        }

        /// <summary>
        /// Messages
        /// </summary>
        [DataMember(Name = ("messages"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Media.PlayerMessage> Messages
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Send a list of any errors that need to be delivered.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class PlayerErrorsRaisedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// PlayerId
        /// </summary>
        [DataMember(Name = ("playerId"), IsRequired = (true))]
        public string PlayerId
        {
            get;
            private set;
        }

        /// <summary>
        /// Errors
        /// </summary>
        [DataMember(Name = ("errors"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Media.PlayerError> Errors
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Called whenever a player is created, or when a new agent joins and receives
    /// a list of active players. If an agent is restored, it will receive the full
    /// list of player ids and all events again.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class PlayersCreatedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Players
        /// </summary>
        [DataMember(Name = ("players"), IsRequired = (true))]
        public string[] Players
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.DeviceAccess
{
    /// <summary>
    /// Device information displayed in a user prompt to select a device.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class PromptDevice : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Id
        /// </summary>
        [DataMember(Name = ("id"), IsRequired = (true))]
        public string Id
        {
            get;
            set;
        }

        /// <summary>
        /// Display name as it appears in a device request user prompt.
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }
    }

    /// <summary>
    /// A device request opened a user prompt to select a device. Respond with the
    /// selectPrompt or cancelPrompt command.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class DeviceRequestPromptedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Id
        /// </summary>
        [DataMember(Name = ("id"), IsRequired = (true))]
        public string Id
        {
            get;
            private set;
        }

        /// <summary>
        /// Devices
        /// </summary>
        [DataMember(Name = ("devices"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.DeviceAccess.PromptDevice> Devices
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.Preload
{
    /// <summary>
    /// Corresponds to SpeculationRuleSet
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class RuleSet : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Id
        /// </summary>
        [DataMember(Name = ("id"), IsRequired = (true))]
        public string Id
        {
            get;
            set;
        }

        /// <summary>
        /// Identifies a document which the rule set is associated with.
        /// </summary>
        [DataMember(Name = ("loaderId"), IsRequired = (true))]
        public string LoaderId
        {
            get;
            set;
        }

        /// <summary>
        /// Source text of JSON representing the rule set. If it comes from
        /// `&lt;script&gt;` tag, it is the textContent of the node. Note that it is
        /// a JSON for valid case.
        /// 
        /// See also:
        /// - https://wicg.github.io/nav-speculation/speculation-rules.html
        /// - https://github.com/WICG/nav-speculation/blob/main/triggers.md
        /// </summary>
        [DataMember(Name = ("sourceText"), IsRequired = (true))]
        public string SourceText
        {
            get;
            set;
        }

        /// <summary>
        /// A speculation rule set is either added through an inline
        /// `&lt;script&gt;` tag or through an external resource via the
        /// &apos;Speculation-Rules&apos; HTTP header. For the first case, we include
        /// the BackendNodeId of the relevant `&lt;script&gt;` tag. For the second
        /// case, we include the external URL where the rule set was loaded
        /// from, and also RequestId if Network domain is enabled.
        /// 
        /// See also:
        /// - https://wicg.github.io/nav-speculation/speculation-rules.html#speculation-rules-script
        /// - https://wicg.github.io/nav-speculation/speculation-rules.html#speculation-rules-header
        /// </summary>
        [DataMember(Name = ("backendNodeId"), IsRequired = (false))]
        public int? BackendNodeId
        {
            get;
            set;
        }

        /// <summary>
        /// Url
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (false))]
        public string Url
        {
            get;
            set;
        }

        /// <summary>
        /// RequestId
        /// </summary>
        [DataMember(Name = ("requestId"), IsRequired = (false))]
        public string RequestId
        {
            get;
            set;
        }

        /// <summary>
        /// Error information
        /// `errorMessage` is null if `errorType` is null.
        /// </summary>
        public CefSharp.DevTools.Preload.RuleSetErrorType? ErrorType
        {
            get
            {
                return (CefSharp.DevTools.Preload.RuleSetErrorType? )(StringToEnum(typeof(CefSharp.DevTools.Preload.RuleSetErrorType? ), errorType));
            }

            set
            {
                this.errorType = (EnumToString(value));
            }
        }

        /// <summary>
        /// Error information
        /// `errorMessage` is null if `errorType` is null.
        /// </summary>
        [DataMember(Name = ("errorType"), IsRequired = (false))]
        internal string errorType
        {
            get;
            set;
        }

        /// <summary>
        /// TODO(https://crbug.com/1425354): Replace this property with structured error.
        /// </summary>
        [DataMember(Name = ("errorMessage"), IsRequired = (false))]
        public string ErrorMessage
        {
            get;
            set;
        }
    }

    /// <summary>
    /// RuleSetErrorType
    /// </summary>
    public enum RuleSetErrorType
    {
        /// <summary>
        /// SourceIsNotJsonObject
        /// </summary>
        [EnumMember(Value = ("SourceIsNotJsonObject"))]
        SourceIsNotJsonObject,
        /// <summary>
        /// InvalidRulesSkipped
        /// </summary>
        [EnumMember(Value = ("InvalidRulesSkipped"))]
        InvalidRulesSkipped
    }

    /// <summary>
    /// The type of preloading attempted. It corresponds to
    /// mojom::SpeculationAction (although PrefetchWithSubresources is omitted as it
    /// isn&apos;t being used by clients).
    /// </summary>
    public enum SpeculationAction
    {
        /// <summary>
        /// Prefetch
        /// </summary>
        [EnumMember(Value = ("Prefetch"))]
        Prefetch,
        /// <summary>
        /// Prerender
        /// </summary>
        [EnumMember(Value = ("Prerender"))]
        Prerender
    }

    /// <summary>
    /// Corresponds to mojom::SpeculationTargetHint.
    /// See https://github.com/WICG/nav-speculation/blob/main/triggers.md#window-name-targeting-hints
    /// </summary>
    public enum SpeculationTargetHint
    {
        /// <summary>
        /// Blank
        /// </summary>
        [EnumMember(Value = ("Blank"))]
        Blank,
        /// <summary>
        /// Self
        /// </summary>
        [EnumMember(Value = ("Self"))]
        Self
    }

    /// <summary>
    /// A key that identifies a preloading attempt.
    /// 
    /// The url used is the url specified by the trigger (i.e. the initial URL), and
    /// not the final url that is navigated to. For example, prerendering allows
    /// same-origin main frame navigations during the attempt, but the attempt is
    /// still keyed with the initial URL.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class PreloadingAttemptKey : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// LoaderId
        /// </summary>
        [DataMember(Name = ("loaderId"), IsRequired = (true))]
        public string LoaderId
        {
            get;
            set;
        }

        /// <summary>
        /// Action
        /// </summary>
        public CefSharp.DevTools.Preload.SpeculationAction Action
        {
            get
            {
                return (CefSharp.DevTools.Preload.SpeculationAction)(StringToEnum(typeof(CefSharp.DevTools.Preload.SpeculationAction), action));
            }

            set
            {
                this.action = (EnumToString(value));
            }
        }

        /// <summary>
        /// Action
        /// </summary>
        [DataMember(Name = ("action"), IsRequired = (true))]
        internal string action
        {
            get;
            set;
        }

        /// <summary>
        /// Url
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (true))]
        public string Url
        {
            get;
            set;
        }

        /// <summary>
        /// TargetHint
        /// </summary>
        public CefSharp.DevTools.Preload.SpeculationTargetHint? TargetHint
        {
            get
            {
                return (CefSharp.DevTools.Preload.SpeculationTargetHint? )(StringToEnum(typeof(CefSharp.DevTools.Preload.SpeculationTargetHint? ), targetHint));
            }

            set
            {
                this.targetHint = (EnumToString(value));
            }
        }

        /// <summary>
        /// TargetHint
        /// </summary>
        [DataMember(Name = ("targetHint"), IsRequired = (false))]
        internal string targetHint
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Lists sources for a preloading attempt, specifically the ids of rule sets
    /// that had a speculation rule that triggered the attempt, and the
    /// BackendNodeIds of &lt;a href&gt; or &lt;area href&gt; elements that triggered the
    /// attempt (in the case of attempts triggered by a document rule). It is
    /// possible for multiple rule sets and links to trigger a single attempt.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class PreloadingAttemptSource : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Key
        /// </summary>
        [DataMember(Name = ("key"), IsRequired = (true))]
        public CefSharp.DevTools.Preload.PreloadingAttemptKey Key
        {
            get;
            set;
        }

        /// <summary>
        /// RuleSetIds
        /// </summary>
        [DataMember(Name = ("ruleSetIds"), IsRequired = (true))]
        public string[] RuleSetIds
        {
            get;
            set;
        }

        /// <summary>
        /// NodeIds
        /// </summary>
        [DataMember(Name = ("nodeIds"), IsRequired = (true))]
        public int[] NodeIds
        {
            get;
            set;
        }
    }

    /// <summary>
    /// List of FinalStatus reasons for Prerender2.
    /// </summary>
    public enum PrerenderFinalStatus
    {
        /// <summary>
        /// Activated
        /// </summary>
        [EnumMember(Value = ("Activated"))]
        Activated,
        /// <summary>
        /// Destroyed
        /// </summary>
        [EnumMember(Value = ("Destroyed"))]
        Destroyed,
        /// <summary>
        /// LowEndDevice
        /// </summary>
        [EnumMember(Value = ("LowEndDevice"))]
        LowEndDevice,
        /// <summary>
        /// InvalidSchemeRedirect
        /// </summary>
        [EnumMember(Value = ("InvalidSchemeRedirect"))]
        InvalidSchemeRedirect,
        /// <summary>
        /// InvalidSchemeNavigation
        /// </summary>
        [EnumMember(Value = ("InvalidSchemeNavigation"))]
        InvalidSchemeNavigation,
        /// <summary>
        /// NavigationRequestBlockedByCsp
        /// </summary>
        [EnumMember(Value = ("NavigationRequestBlockedByCsp"))]
        NavigationRequestBlockedByCsp,
        /// <summary>
        /// MainFrameNavigation
        /// </summary>
        [EnumMember(Value = ("MainFrameNavigation"))]
        MainFrameNavigation,
        /// <summary>
        /// MojoBinderPolicy
        /// </summary>
        [EnumMember(Value = ("MojoBinderPolicy"))]
        MojoBinderPolicy,
        /// <summary>
        /// RendererProcessCrashed
        /// </summary>
        [EnumMember(Value = ("RendererProcessCrashed"))]
        RendererProcessCrashed,
        /// <summary>
        /// RendererProcessKilled
        /// </summary>
        [EnumMember(Value = ("RendererProcessKilled"))]
        RendererProcessKilled,
        /// <summary>
        /// Download
        /// </summary>
        [EnumMember(Value = ("Download"))]
        Download,
        /// <summary>
        /// TriggerDestroyed
        /// </summary>
        [EnumMember(Value = ("TriggerDestroyed"))]
        TriggerDestroyed,
        /// <summary>
        /// NavigationNotCommitted
        /// </summary>
        [EnumMember(Value = ("NavigationNotCommitted"))]
        NavigationNotCommitted,
        /// <summary>
        /// NavigationBadHttpStatus
        /// </summary>
        [EnumMember(Value = ("NavigationBadHttpStatus"))]
        NavigationBadHttpStatus,
        /// <summary>
        /// ClientCertRequested
        /// </summary>
        [EnumMember(Value = ("ClientCertRequested"))]
        ClientCertRequested,
        /// <summary>
        /// NavigationRequestNetworkError
        /// </summary>
        [EnumMember(Value = ("NavigationRequestNetworkError"))]
        NavigationRequestNetworkError,
        /// <summary>
        /// CancelAllHostsForTesting
        /// </summary>
        [EnumMember(Value = ("CancelAllHostsForTesting"))]
        CancelAllHostsForTesting,
        /// <summary>
        /// DidFailLoad
        /// </summary>
        [EnumMember(Value = ("DidFailLoad"))]
        DidFailLoad,
        /// <summary>
        /// Stop
        /// </summary>
        [EnumMember(Value = ("Stop"))]
        Stop,
        /// <summary>
        /// SslCertificateError
        /// </summary>
        [EnumMember(Value = ("SslCertificateError"))]
        SslCertificateError,
        /// <summary>
        /// LoginAuthRequested
        /// </summary>
        [EnumMember(Value = ("LoginAuthRequested"))]
        LoginAuthRequested,
        /// <summary>
        /// UaChangeRequiresReload
        /// </summary>
        [EnumMember(Value = ("UaChangeRequiresReload"))]
        UaChangeRequiresReload,
        /// <summary>
        /// BlockedByClient
        /// </summary>
        [EnumMember(Value = ("BlockedByClient"))]
        BlockedByClient,
        /// <summary>
        /// AudioOutputDeviceRequested
        /// </summary>
        [EnumMember(Value = ("AudioOutputDeviceRequested"))]
        AudioOutputDeviceRequested,
        /// <summary>
        /// MixedContent
        /// </summary>
        [EnumMember(Value = ("MixedContent"))]
        MixedContent,
        /// <summary>
        /// TriggerBackgrounded
        /// </summary>
        [EnumMember(Value = ("TriggerBackgrounded"))]
        TriggerBackgrounded,
        /// <summary>
        /// MemoryLimitExceeded
        /// </summary>
        [EnumMember(Value = ("MemoryLimitExceeded"))]
        MemoryLimitExceeded,
        /// <summary>
        /// DataSaverEnabled
        /// </summary>
        [EnumMember(Value = ("DataSaverEnabled"))]
        DataSaverEnabled,
        /// <summary>
        /// TriggerUrlHasEffectiveUrl
        /// </summary>
        [EnumMember(Value = ("TriggerUrlHasEffectiveUrl"))]
        TriggerUrlHasEffectiveUrl,
        /// <summary>
        /// ActivatedBeforeStarted
        /// </summary>
        [EnumMember(Value = ("ActivatedBeforeStarted"))]
        ActivatedBeforeStarted,
        /// <summary>
        /// InactivePageRestriction
        /// </summary>
        [EnumMember(Value = ("InactivePageRestriction"))]
        InactivePageRestriction,
        /// <summary>
        /// StartFailed
        /// </summary>
        [EnumMember(Value = ("StartFailed"))]
        StartFailed,
        /// <summary>
        /// TimeoutBackgrounded
        /// </summary>
        [EnumMember(Value = ("TimeoutBackgrounded"))]
        TimeoutBackgrounded,
        /// <summary>
        /// CrossSiteRedirectInInitialNavigation
        /// </summary>
        [EnumMember(Value = ("CrossSiteRedirectInInitialNavigation"))]
        CrossSiteRedirectInInitialNavigation,
        /// <summary>
        /// CrossSiteNavigationInInitialNavigation
        /// </summary>
        [EnumMember(Value = ("CrossSiteNavigationInInitialNavigation"))]
        CrossSiteNavigationInInitialNavigation,
        /// <summary>
        /// SameSiteCrossOriginRedirectNotOptInInInitialNavigation
        /// </summary>
        [EnumMember(Value = ("SameSiteCrossOriginRedirectNotOptInInInitialNavigation"))]
        SameSiteCrossOriginRedirectNotOptInInInitialNavigation,
        /// <summary>
        /// SameSiteCrossOriginNavigationNotOptInInInitialNavigation
        /// </summary>
        [EnumMember(Value = ("SameSiteCrossOriginNavigationNotOptInInInitialNavigation"))]
        SameSiteCrossOriginNavigationNotOptInInInitialNavigation,
        /// <summary>
        /// ActivationNavigationParameterMismatch
        /// </summary>
        [EnumMember(Value = ("ActivationNavigationParameterMismatch"))]
        ActivationNavigationParameterMismatch,
        /// <summary>
        /// ActivatedInBackground
        /// </summary>
        [EnumMember(Value = ("ActivatedInBackground"))]
        ActivatedInBackground,
        /// <summary>
        /// EmbedderHostDisallowed
        /// </summary>
        [EnumMember(Value = ("EmbedderHostDisallowed"))]
        EmbedderHostDisallowed,
        /// <summary>
        /// ActivationNavigationDestroyedBeforeSuccess
        /// </summary>
        [EnumMember(Value = ("ActivationNavigationDestroyedBeforeSuccess"))]
        ActivationNavigationDestroyedBeforeSuccess,
        /// <summary>
        /// TabClosedByUserGesture
        /// </summary>
        [EnumMember(Value = ("TabClosedByUserGesture"))]
        TabClosedByUserGesture,
        /// <summary>
        /// TabClosedWithoutUserGesture
        /// </summary>
        [EnumMember(Value = ("TabClosedWithoutUserGesture"))]
        TabClosedWithoutUserGesture,
        /// <summary>
        /// PrimaryMainFrameRendererProcessCrashed
        /// </summary>
        [EnumMember(Value = ("PrimaryMainFrameRendererProcessCrashed"))]
        PrimaryMainFrameRendererProcessCrashed,
        /// <summary>
        /// PrimaryMainFrameRendererProcessKilled
        /// </summary>
        [EnumMember(Value = ("PrimaryMainFrameRendererProcessKilled"))]
        PrimaryMainFrameRendererProcessKilled,
        /// <summary>
        /// ActivationFramePolicyNotCompatible
        /// </summary>
        [EnumMember(Value = ("ActivationFramePolicyNotCompatible"))]
        ActivationFramePolicyNotCompatible,
        /// <summary>
        /// PreloadingDisabled
        /// </summary>
        [EnumMember(Value = ("PreloadingDisabled"))]
        PreloadingDisabled,
        /// <summary>
        /// BatterySaverEnabled
        /// </summary>
        [EnumMember(Value = ("BatterySaverEnabled"))]
        BatterySaverEnabled,
        /// <summary>
        /// ActivatedDuringMainFrameNavigation
        /// </summary>
        [EnumMember(Value = ("ActivatedDuringMainFrameNavigation"))]
        ActivatedDuringMainFrameNavigation,
        /// <summary>
        /// PreloadingUnsupportedByWebContents
        /// </summary>
        [EnumMember(Value = ("PreloadingUnsupportedByWebContents"))]
        PreloadingUnsupportedByWebContents,
        /// <summary>
        /// CrossSiteRedirectInMainFrameNavigation
        /// </summary>
        [EnumMember(Value = ("CrossSiteRedirectInMainFrameNavigation"))]
        CrossSiteRedirectInMainFrameNavigation,
        /// <summary>
        /// CrossSiteNavigationInMainFrameNavigation
        /// </summary>
        [EnumMember(Value = ("CrossSiteNavigationInMainFrameNavigation"))]
        CrossSiteNavigationInMainFrameNavigation,
        /// <summary>
        /// SameSiteCrossOriginRedirectNotOptInInMainFrameNavigation
        /// </summary>
        [EnumMember(Value = ("SameSiteCrossOriginRedirectNotOptInInMainFrameNavigation"))]
        SameSiteCrossOriginRedirectNotOptInInMainFrameNavigation,
        /// <summary>
        /// SameSiteCrossOriginNavigationNotOptInInMainFrameNavigation
        /// </summary>
        [EnumMember(Value = ("SameSiteCrossOriginNavigationNotOptInInMainFrameNavigation"))]
        SameSiteCrossOriginNavigationNotOptInInMainFrameNavigation,
        /// <summary>
        /// MemoryPressureOnTrigger
        /// </summary>
        [EnumMember(Value = ("MemoryPressureOnTrigger"))]
        MemoryPressureOnTrigger,
        /// <summary>
        /// MemoryPressureAfterTriggered
        /// </summary>
        [EnumMember(Value = ("MemoryPressureAfterTriggered"))]
        MemoryPressureAfterTriggered,
        /// <summary>
        /// PrerenderingDisabledByDevTools
        /// </summary>
        [EnumMember(Value = ("PrerenderingDisabledByDevTools"))]
        PrerenderingDisabledByDevTools,
        /// <summary>
        /// SpeculationRuleRemoved
        /// </summary>
        [EnumMember(Value = ("SpeculationRuleRemoved"))]
        SpeculationRuleRemoved,
        /// <summary>
        /// ActivatedWithAuxiliaryBrowsingContexts
        /// </summary>
        [EnumMember(Value = ("ActivatedWithAuxiliaryBrowsingContexts"))]
        ActivatedWithAuxiliaryBrowsingContexts,
        /// <summary>
        /// MaxNumOfRunningEagerPrerendersExceeded
        /// </summary>
        [EnumMember(Value = ("MaxNumOfRunningEagerPrerendersExceeded"))]
        MaxNumOfRunningEagerPrerendersExceeded,
        /// <summary>
        /// MaxNumOfRunningNonEagerPrerendersExceeded
        /// </summary>
        [EnumMember(Value = ("MaxNumOfRunningNonEagerPrerendersExceeded"))]
        MaxNumOfRunningNonEagerPrerendersExceeded,
        /// <summary>
        /// MaxNumOfRunningEmbedderPrerendersExceeded
        /// </summary>
        [EnumMember(Value = ("MaxNumOfRunningEmbedderPrerendersExceeded"))]
        MaxNumOfRunningEmbedderPrerendersExceeded,
        /// <summary>
        /// PrerenderingUrlHasEffectiveUrl
        /// </summary>
        [EnumMember(Value = ("PrerenderingUrlHasEffectiveUrl"))]
        PrerenderingUrlHasEffectiveUrl,
        /// <summary>
        /// RedirectedPrerenderingUrlHasEffectiveUrl
        /// </summary>
        [EnumMember(Value = ("RedirectedPrerenderingUrlHasEffectiveUrl"))]
        RedirectedPrerenderingUrlHasEffectiveUrl,
        /// <summary>
        /// ActivationUrlHasEffectiveUrl
        /// </summary>
        [EnumMember(Value = ("ActivationUrlHasEffectiveUrl"))]
        ActivationUrlHasEffectiveUrl
    }

    /// <summary>
    /// Preloading status values, see also PreloadingTriggeringOutcome. This
    /// status is shared by prefetchStatusUpdated and prerenderStatusUpdated.
    /// </summary>
    public enum PreloadingStatus
    {
        /// <summary>
        /// Pending
        /// </summary>
        [EnumMember(Value = ("Pending"))]
        Pending,
        /// <summary>
        /// Running
        /// </summary>
        [EnumMember(Value = ("Running"))]
        Running,
        /// <summary>
        /// Ready
        /// </summary>
        [EnumMember(Value = ("Ready"))]
        Ready,
        /// <summary>
        /// Success
        /// </summary>
        [EnumMember(Value = ("Success"))]
        Success,
        /// <summary>
        /// Failure
        /// </summary>
        [EnumMember(Value = ("Failure"))]
        Failure,
        /// <summary>
        /// NotSupported
        /// </summary>
        [EnumMember(Value = ("NotSupported"))]
        NotSupported
    }

    /// <summary>
    /// TODO(https://crbug.com/1384419): revisit the list of PrefetchStatus and
    /// filter out the ones that aren&apos;t necessary to the developers.
    /// </summary>
    public enum PrefetchStatus
    {
        /// <summary>
        /// PrefetchAllowed
        /// </summary>
        [EnumMember(Value = ("PrefetchAllowed"))]
        PrefetchAllowed,
        /// <summary>
        /// PrefetchFailedIneligibleRedirect
        /// </summary>
        [EnumMember(Value = ("PrefetchFailedIneligibleRedirect"))]
        PrefetchFailedIneligibleRedirect,
        /// <summary>
        /// PrefetchFailedInvalidRedirect
        /// </summary>
        [EnumMember(Value = ("PrefetchFailedInvalidRedirect"))]
        PrefetchFailedInvalidRedirect,
        /// <summary>
        /// PrefetchFailedMIMENotSupported
        /// </summary>
        [EnumMember(Value = ("PrefetchFailedMIMENotSupported"))]
        PrefetchFailedMIMENotSupported,
        /// <summary>
        /// PrefetchFailedNetError
        /// </summary>
        [EnumMember(Value = ("PrefetchFailedNetError"))]
        PrefetchFailedNetError,
        /// <summary>
        /// PrefetchFailedNon2XX
        /// </summary>
        [EnumMember(Value = ("PrefetchFailedNon2XX"))]
        PrefetchFailedNon2XX,
        /// <summary>
        /// PrefetchFailedPerPageLimitExceeded
        /// </summary>
        [EnumMember(Value = ("PrefetchFailedPerPageLimitExceeded"))]
        PrefetchFailedPerPageLimitExceeded,
        /// <summary>
        /// PrefetchEvictedAfterCandidateRemoved
        /// </summary>
        [EnumMember(Value = ("PrefetchEvictedAfterCandidateRemoved"))]
        PrefetchEvictedAfterCandidateRemoved,
        /// <summary>
        /// PrefetchEvictedForNewerPrefetch
        /// </summary>
        [EnumMember(Value = ("PrefetchEvictedForNewerPrefetch"))]
        PrefetchEvictedForNewerPrefetch,
        /// <summary>
        /// PrefetchHeldback
        /// </summary>
        [EnumMember(Value = ("PrefetchHeldback"))]
        PrefetchHeldback,
        /// <summary>
        /// PrefetchIneligibleRetryAfter
        /// </summary>
        [EnumMember(Value = ("PrefetchIneligibleRetryAfter"))]
        PrefetchIneligibleRetryAfter,
        /// <summary>
        /// PrefetchIsPrivacyDecoy
        /// </summary>
        [EnumMember(Value = ("PrefetchIsPrivacyDecoy"))]
        PrefetchIsPrivacyDecoy,
        /// <summary>
        /// PrefetchIsStale
        /// </summary>
        [EnumMember(Value = ("PrefetchIsStale"))]
        PrefetchIsStale,
        /// <summary>
        /// PrefetchNotEligibleBrowserContextOffTheRecord
        /// </summary>
        [EnumMember(Value = ("PrefetchNotEligibleBrowserContextOffTheRecord"))]
        PrefetchNotEligibleBrowserContextOffTheRecord,
        /// <summary>
        /// PrefetchNotEligibleDataSaverEnabled
        /// </summary>
        [EnumMember(Value = ("PrefetchNotEligibleDataSaverEnabled"))]
        PrefetchNotEligibleDataSaverEnabled,
        /// <summary>
        /// PrefetchNotEligibleExistingProxy
        /// </summary>
        [EnumMember(Value = ("PrefetchNotEligibleExistingProxy"))]
        PrefetchNotEligibleExistingProxy,
        /// <summary>
        /// PrefetchNotEligibleHostIsNonUnique
        /// </summary>
        [EnumMember(Value = ("PrefetchNotEligibleHostIsNonUnique"))]
        PrefetchNotEligibleHostIsNonUnique,
        /// <summary>
        /// PrefetchNotEligibleNonDefaultStoragePartition
        /// </summary>
        [EnumMember(Value = ("PrefetchNotEligibleNonDefaultStoragePartition"))]
        PrefetchNotEligibleNonDefaultStoragePartition,
        /// <summary>
        /// PrefetchNotEligibleSameSiteCrossOriginPrefetchRequiredProxy
        /// </summary>
        [EnumMember(Value = ("PrefetchNotEligibleSameSiteCrossOriginPrefetchRequiredProxy"))]
        PrefetchNotEligibleSameSiteCrossOriginPrefetchRequiredProxy,
        /// <summary>
        /// PrefetchNotEligibleSchemeIsNotHttps
        /// </summary>
        [EnumMember(Value = ("PrefetchNotEligibleSchemeIsNotHttps"))]
        PrefetchNotEligibleSchemeIsNotHttps,
        /// <summary>
        /// PrefetchNotEligibleUserHasCookies
        /// </summary>
        [EnumMember(Value = ("PrefetchNotEligibleUserHasCookies"))]
        PrefetchNotEligibleUserHasCookies,
        /// <summary>
        /// PrefetchNotEligibleUserHasServiceWorker
        /// </summary>
        [EnumMember(Value = ("PrefetchNotEligibleUserHasServiceWorker"))]
        PrefetchNotEligibleUserHasServiceWorker,
        /// <summary>
        /// PrefetchNotEligibleBatterySaverEnabled
        /// </summary>
        [EnumMember(Value = ("PrefetchNotEligibleBatterySaverEnabled"))]
        PrefetchNotEligibleBatterySaverEnabled,
        /// <summary>
        /// PrefetchNotEligiblePreloadingDisabled
        /// </summary>
        [EnumMember(Value = ("PrefetchNotEligiblePreloadingDisabled"))]
        PrefetchNotEligiblePreloadingDisabled,
        /// <summary>
        /// PrefetchNotFinishedInTime
        /// </summary>
        [EnumMember(Value = ("PrefetchNotFinishedInTime"))]
        PrefetchNotFinishedInTime,
        /// <summary>
        /// PrefetchNotStarted
        /// </summary>
        [EnumMember(Value = ("PrefetchNotStarted"))]
        PrefetchNotStarted,
        /// <summary>
        /// PrefetchNotUsedCookiesChanged
        /// </summary>
        [EnumMember(Value = ("PrefetchNotUsedCookiesChanged"))]
        PrefetchNotUsedCookiesChanged,
        /// <summary>
        /// PrefetchProxyNotAvailable
        /// </summary>
        [EnumMember(Value = ("PrefetchProxyNotAvailable"))]
        PrefetchProxyNotAvailable,
        /// <summary>
        /// PrefetchResponseUsed
        /// </summary>
        [EnumMember(Value = ("PrefetchResponseUsed"))]
        PrefetchResponseUsed,
        /// <summary>
        /// PrefetchSuccessfulButNotUsed
        /// </summary>
        [EnumMember(Value = ("PrefetchSuccessfulButNotUsed"))]
        PrefetchSuccessfulButNotUsed,
        /// <summary>
        /// PrefetchNotUsedProbeFailed
        /// </summary>
        [EnumMember(Value = ("PrefetchNotUsedProbeFailed"))]
        PrefetchNotUsedProbeFailed
    }

    /// <summary>
    /// Information of headers to be displayed when the header mismatch occurred.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class PrerenderMismatchedHeaders : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// HeaderName
        /// </summary>
        [DataMember(Name = ("headerName"), IsRequired = (true))]
        public string HeaderName
        {
            get;
            set;
        }

        /// <summary>
        /// InitialValue
        /// </summary>
        [DataMember(Name = ("initialValue"), IsRequired = (false))]
        public string InitialValue
        {
            get;
            set;
        }

        /// <summary>
        /// ActivationValue
        /// </summary>
        [DataMember(Name = ("activationValue"), IsRequired = (false))]
        public string ActivationValue
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Upsert. Currently, it is only emitted when a rule set added.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class RuleSetUpdatedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// RuleSet
        /// </summary>
        [DataMember(Name = ("ruleSet"), IsRequired = (true))]
        public CefSharp.DevTools.Preload.RuleSet RuleSet
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// ruleSetRemoved
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class RuleSetRemovedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Id
        /// </summary>
        [DataMember(Name = ("id"), IsRequired = (true))]
        public string Id
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when a preload enabled state is updated.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class PreloadEnabledStateUpdatedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// DisabledByPreference
        /// </summary>
        [DataMember(Name = ("disabledByPreference"), IsRequired = (true))]
        public bool DisabledByPreference
        {
            get;
            private set;
        }

        /// <summary>
        /// DisabledByDataSaver
        /// </summary>
        [DataMember(Name = ("disabledByDataSaver"), IsRequired = (true))]
        public bool DisabledByDataSaver
        {
            get;
            private set;
        }

        /// <summary>
        /// DisabledByBatterySaver
        /// </summary>
        [DataMember(Name = ("disabledByBatterySaver"), IsRequired = (true))]
        public bool DisabledByBatterySaver
        {
            get;
            private set;
        }

        /// <summary>
        /// DisabledByHoldbackPrefetchSpeculationRules
        /// </summary>
        [DataMember(Name = ("disabledByHoldbackPrefetchSpeculationRules"), IsRequired = (true))]
        public bool DisabledByHoldbackPrefetchSpeculationRules
        {
            get;
            private set;
        }

        /// <summary>
        /// DisabledByHoldbackPrerenderSpeculationRules
        /// </summary>
        [DataMember(Name = ("disabledByHoldbackPrerenderSpeculationRules"), IsRequired = (true))]
        public bool DisabledByHoldbackPrerenderSpeculationRules
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when a prefetch attempt is updated.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class PrefetchStatusUpdatedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Key
        /// </summary>
        [DataMember(Name = ("key"), IsRequired = (true))]
        public CefSharp.DevTools.Preload.PreloadingAttemptKey Key
        {
            get;
            private set;
        }

        /// <summary>
        /// The frame id of the frame initiating prefetch.
        /// </summary>
        [DataMember(Name = ("initiatingFrameId"), IsRequired = (true))]
        public string InitiatingFrameId
        {
            get;
            private set;
        }

        /// <summary>
        /// PrefetchUrl
        /// </summary>
        [DataMember(Name = ("prefetchUrl"), IsRequired = (true))]
        public string PrefetchUrl
        {
            get;
            private set;
        }

        /// <summary>
        /// Status
        /// </summary>
        public CefSharp.DevTools.Preload.PreloadingStatus Status
        {
            get
            {
                return (CefSharp.DevTools.Preload.PreloadingStatus)(StringToEnum(typeof(CefSharp.DevTools.Preload.PreloadingStatus), status));
            }

            set
            {
                this.status = (EnumToString(value));
            }
        }

        /// <summary>
        /// Status
        /// </summary>
        [DataMember(Name = ("status"), IsRequired = (true))]
        internal string status
        {
            get;
            private set;
        }

        /// <summary>
        /// PrefetchStatus
        /// </summary>
        public CefSharp.DevTools.Preload.PrefetchStatus PrefetchStatus
        {
            get
            {
                return (CefSharp.DevTools.Preload.PrefetchStatus)(StringToEnum(typeof(CefSharp.DevTools.Preload.PrefetchStatus), prefetchStatus));
            }

            set
            {
                this.prefetchStatus = (EnumToString(value));
            }
        }

        /// <summary>
        /// PrefetchStatus
        /// </summary>
        [DataMember(Name = ("prefetchStatus"), IsRequired = (true))]
        internal string prefetchStatus
        {
            get;
            private set;
        }

        /// <summary>
        /// RequestId
        /// </summary>
        [DataMember(Name = ("requestId"), IsRequired = (true))]
        public string RequestId
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when a prerender attempt is updated.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class PrerenderStatusUpdatedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Key
        /// </summary>
        [DataMember(Name = ("key"), IsRequired = (true))]
        public CefSharp.DevTools.Preload.PreloadingAttemptKey Key
        {
            get;
            private set;
        }

        /// <summary>
        /// Status
        /// </summary>
        public CefSharp.DevTools.Preload.PreloadingStatus Status
        {
            get
            {
                return (CefSharp.DevTools.Preload.PreloadingStatus)(StringToEnum(typeof(CefSharp.DevTools.Preload.PreloadingStatus), status));
            }

            set
            {
                this.status = (EnumToString(value));
            }
        }

        /// <summary>
        /// Status
        /// </summary>
        [DataMember(Name = ("status"), IsRequired = (true))]
        internal string status
        {
            get;
            private set;
        }

        /// <summary>
        /// PrerenderStatus
        /// </summary>
        public CefSharp.DevTools.Preload.PrerenderFinalStatus? PrerenderStatus
        {
            get
            {
                return (CefSharp.DevTools.Preload.PrerenderFinalStatus? )(StringToEnum(typeof(CefSharp.DevTools.Preload.PrerenderFinalStatus? ), prerenderStatus));
            }

            set
            {
                this.prerenderStatus = (EnumToString(value));
            }
        }

        /// <summary>
        /// PrerenderStatus
        /// </summary>
        [DataMember(Name = ("prerenderStatus"), IsRequired = (false))]
        internal string prerenderStatus
        {
            get;
            private set;
        }

        /// <summary>
        /// This is used to give users more information about the name of Mojo interface
        /// that is incompatible with prerender and has caused the cancellation of the attempt.
        /// </summary>
        [DataMember(Name = ("disallowedMojoInterface"), IsRequired = (false))]
        public string DisallowedMojoInterface
        {
            get;
            private set;
        }

        /// <summary>
        /// MismatchedHeaders
        /// </summary>
        [DataMember(Name = ("mismatchedHeaders"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Preload.PrerenderMismatchedHeaders> MismatchedHeaders
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Send a list of sources for all preloading attempts in a document.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class PreloadingAttemptSourcesUpdatedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// LoaderId
        /// </summary>
        [DataMember(Name = ("loaderId"), IsRequired = (true))]
        public string LoaderId
        {
            get;
            private set;
        }

        /// <summary>
        /// PreloadingAttemptSources
        /// </summary>
        [DataMember(Name = ("preloadingAttemptSources"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Preload.PreloadingAttemptSource> PreloadingAttemptSources
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.FedCm
{
    /// <summary>
    /// Whether this is a sign-up or sign-in action for this account, i.e.
    /// whether this account has ever been used to sign in to this RP before.
    /// </summary>
    public enum LoginState
    {
        /// <summary>
        /// SignIn
        /// </summary>
        [EnumMember(Value = ("SignIn"))]
        SignIn,
        /// <summary>
        /// SignUp
        /// </summary>
        [EnumMember(Value = ("SignUp"))]
        SignUp
    }

    /// <summary>
    /// The types of FedCM dialogs.
    /// </summary>
    public enum DialogType
    {
        /// <summary>
        /// AccountChooser
        /// </summary>
        [EnumMember(Value = ("AccountChooser"))]
        AccountChooser,
        /// <summary>
        /// AutoReauthn
        /// </summary>
        [EnumMember(Value = ("AutoReauthn"))]
        AutoReauthn,
        /// <summary>
        /// ConfirmIdpLogin
        /// </summary>
        [EnumMember(Value = ("ConfirmIdpLogin"))]
        ConfirmIdpLogin,
        /// <summary>
        /// Error
        /// </summary>
        [EnumMember(Value = ("Error"))]
        Error
    }

    /// <summary>
    /// The buttons on the FedCM dialog.
    /// </summary>
    public enum DialogButton
    {
        /// <summary>
        /// ConfirmIdpLoginContinue
        /// </summary>
        [EnumMember(Value = ("ConfirmIdpLoginContinue"))]
        ConfirmIdpLoginContinue,
        /// <summary>
        /// ErrorGotIt
        /// </summary>
        [EnumMember(Value = ("ErrorGotIt"))]
        ErrorGotIt,
        /// <summary>
        /// ErrorMoreDetails
        /// </summary>
        [EnumMember(Value = ("ErrorMoreDetails"))]
        ErrorMoreDetails
    }

    /// <summary>
    /// The URLs that each account has
    /// </summary>
    public enum AccountUrlType
    {
        /// <summary>
        /// TermsOfService
        /// </summary>
        [EnumMember(Value = ("TermsOfService"))]
        TermsOfService,
        /// <summary>
        /// PrivacyPolicy
        /// </summary>
        [EnumMember(Value = ("PrivacyPolicy"))]
        PrivacyPolicy
    }

    /// <summary>
    /// Corresponds to IdentityRequestAccount
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class Account : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// AccountId
        /// </summary>
        [DataMember(Name = ("accountId"), IsRequired = (true))]
        public string AccountId
        {
            get;
            set;
        }

        /// <summary>
        /// Email
        /// </summary>
        [DataMember(Name = ("email"), IsRequired = (true))]
        public string Email
        {
            get;
            set;
        }

        /// <summary>
        /// Name
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// GivenName
        /// </summary>
        [DataMember(Name = ("givenName"), IsRequired = (true))]
        public string GivenName
        {
            get;
            set;
        }

        /// <summary>
        /// PictureUrl
        /// </summary>
        [DataMember(Name = ("pictureUrl"), IsRequired = (true))]
        public string PictureUrl
        {
            get;
            set;
        }

        /// <summary>
        /// IdpConfigUrl
        /// </summary>
        [DataMember(Name = ("idpConfigUrl"), IsRequired = (true))]
        public string IdpConfigUrl
        {
            get;
            set;
        }

        /// <summary>
        /// IdpLoginUrl
        /// </summary>
        [DataMember(Name = ("idpLoginUrl"), IsRequired = (true))]
        public string IdpLoginUrl
        {
            get;
            set;
        }

        /// <summary>
        /// LoginState
        /// </summary>
        public CefSharp.DevTools.FedCm.LoginState LoginState
        {
            get
            {
                return (CefSharp.DevTools.FedCm.LoginState)(StringToEnum(typeof(CefSharp.DevTools.FedCm.LoginState), loginState));
            }

            set
            {
                this.loginState = (EnumToString(value));
            }
        }

        /// <summary>
        /// LoginState
        /// </summary>
        [DataMember(Name = ("loginState"), IsRequired = (true))]
        internal string loginState
        {
            get;
            set;
        }

        /// <summary>
        /// These two are only set if the loginState is signUp
        /// </summary>
        [DataMember(Name = ("termsOfServiceUrl"), IsRequired = (false))]
        public string TermsOfServiceUrl
        {
            get;
            set;
        }

        /// <summary>
        /// PrivacyPolicyUrl
        /// </summary>
        [DataMember(Name = ("privacyPolicyUrl"), IsRequired = (false))]
        public string PrivacyPolicyUrl
        {
            get;
            set;
        }
    }

    /// <summary>
    /// dialogShown
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class DialogShownEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// DialogId
        /// </summary>
        [DataMember(Name = ("dialogId"), IsRequired = (true))]
        public string DialogId
        {
            get;
            private set;
        }

        /// <summary>
        /// DialogType
        /// </summary>
        public CefSharp.DevTools.FedCm.DialogType DialogType
        {
            get
            {
                return (CefSharp.DevTools.FedCm.DialogType)(StringToEnum(typeof(CefSharp.DevTools.FedCm.DialogType), dialogType));
            }

            set
            {
                this.dialogType = (EnumToString(value));
            }
        }

        /// <summary>
        /// DialogType
        /// </summary>
        [DataMember(Name = ("dialogType"), IsRequired = (true))]
        internal string dialogType
        {
            get;
            private set;
        }

        /// <summary>
        /// Accounts
        /// </summary>
        [DataMember(Name = ("accounts"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.FedCm.Account> Accounts
        {
            get;
            private set;
        }

        /// <summary>
        /// These exist primarily so that the caller can verify the
        /// RP context was used appropriately.
        /// </summary>
        [DataMember(Name = ("title"), IsRequired = (true))]
        public string Title
        {
            get;
            private set;
        }

        /// <summary>
        /// Subtitle
        /// </summary>
        [DataMember(Name = ("subtitle"), IsRequired = (false))]
        public string Subtitle
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Triggered when a dialog is closed, either by user action, JS abort,
    /// or a command below.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class DialogClosedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// DialogId
        /// </summary>
        [DataMember(Name = ("dialogId"), IsRequired = (true))]
        public string DialogId
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.Debugger
{
    /// <summary>
    /// Location in the source code.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class Location : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Script identifier as reported in the `Debugger.scriptParsed`.
        /// </summary>
        [DataMember(Name = ("scriptId"), IsRequired = (true))]
        public string ScriptId
        {
            get;
            set;
        }

        /// <summary>
        /// Line number in the script (0-based).
        /// </summary>
        [DataMember(Name = ("lineNumber"), IsRequired = (true))]
        public int LineNumber
        {
            get;
            set;
        }

        /// <summary>
        /// Column number in the script (0-based).
        /// </summary>
        [DataMember(Name = ("columnNumber"), IsRequired = (false))]
        public int? ColumnNumber
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Location in the source code.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ScriptPosition : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// LineNumber
        /// </summary>
        [DataMember(Name = ("lineNumber"), IsRequired = (true))]
        public int LineNumber
        {
            get;
            set;
        }

        /// <summary>
        /// ColumnNumber
        /// </summary>
        [DataMember(Name = ("columnNumber"), IsRequired = (true))]
        public int ColumnNumber
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Location range within one script.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class LocationRange : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// ScriptId
        /// </summary>
        [DataMember(Name = ("scriptId"), IsRequired = (true))]
        public string ScriptId
        {
            get;
            set;
        }

        /// <summary>
        /// Start
        /// </summary>
        [DataMember(Name = ("start"), IsRequired = (true))]
        public CefSharp.DevTools.Debugger.ScriptPosition Start
        {
            get;
            set;
        }

        /// <summary>
        /// End
        /// </summary>
        [DataMember(Name = ("end"), IsRequired = (true))]
        public CefSharp.DevTools.Debugger.ScriptPosition End
        {
            get;
            set;
        }
    }

    /// <summary>
    /// JavaScript call frame. Array of call frames form the call stack.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CallFrame : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Call frame identifier. This identifier is only valid while the virtual machine is paused.
        /// </summary>
        [DataMember(Name = ("callFrameId"), IsRequired = (true))]
        public string CallFrameId
        {
            get;
            set;
        }

        /// <summary>
        /// Name of the JavaScript function called on this call frame.
        /// </summary>
        [DataMember(Name = ("functionName"), IsRequired = (true))]
        public string FunctionName
        {
            get;
            set;
        }

        /// <summary>
        /// Location in the source code.
        /// </summary>
        [DataMember(Name = ("functionLocation"), IsRequired = (false))]
        public CefSharp.DevTools.Debugger.Location FunctionLocation
        {
            get;
            set;
        }

        /// <summary>
        /// Location in the source code.
        /// </summary>
        [DataMember(Name = ("location"), IsRequired = (true))]
        public CefSharp.DevTools.Debugger.Location Location
        {
            get;
            set;
        }

        /// <summary>
        /// JavaScript script name or url.
        /// Deprecated in favor of using the `location.scriptId` to resolve the URL via a previously
        /// sent `Debugger.scriptParsed` event.
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (true))]
        public string Url
        {
            get;
            set;
        }

        /// <summary>
        /// Scope chain for this call frame.
        /// </summary>
        [DataMember(Name = ("scopeChain"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Debugger.Scope> ScopeChain
        {
            get;
            set;
        }

        /// <summary>
        /// `this` object for this call frame.
        /// </summary>
        [DataMember(Name = ("this"), IsRequired = (true))]
        public CefSharp.DevTools.Runtime.RemoteObject This
        {
            get;
            set;
        }

        /// <summary>
        /// The value being returned, if the function is at return point.
        /// </summary>
        [DataMember(Name = ("returnValue"), IsRequired = (false))]
        public CefSharp.DevTools.Runtime.RemoteObject ReturnValue
        {
            get;
            set;
        }

        /// <summary>
        /// Valid only while the VM is paused and indicates whether this frame
        /// can be restarted or not. Note that a `true` value here does not
        /// guarantee that Debugger#restartFrame with this CallFrameId will be
        /// successful, but it is very likely.
        /// </summary>
        [DataMember(Name = ("canBeRestarted"), IsRequired = (false))]
        public bool? CanBeRestarted
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Scope type.
    /// </summary>
    public enum ScopeType
    {
        /// <summary>
        /// global
        /// </summary>
        [EnumMember(Value = ("global"))]
        Global,
        /// <summary>
        /// local
        /// </summary>
        [EnumMember(Value = ("local"))]
        Local,
        /// <summary>
        /// with
        /// </summary>
        [EnumMember(Value = ("with"))]
        With,
        /// <summary>
        /// closure
        /// </summary>
        [EnumMember(Value = ("closure"))]
        Closure,
        /// <summary>
        /// catch
        /// </summary>
        [EnumMember(Value = ("catch"))]
        Catch,
        /// <summary>
        /// block
        /// </summary>
        [EnumMember(Value = ("block"))]
        Block,
        /// <summary>
        /// script
        /// </summary>
        [EnumMember(Value = ("script"))]
        Script,
        /// <summary>
        /// eval
        /// </summary>
        [EnumMember(Value = ("eval"))]
        Eval,
        /// <summary>
        /// module
        /// </summary>
        [EnumMember(Value = ("module"))]
        Module,
        /// <summary>
        /// wasm-expression-stack
        /// </summary>
        [EnumMember(Value = ("wasm-expression-stack"))]
        WasmExpressionStack
    }

    /// <summary>
    /// Scope description.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class Scope : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Scope type.
        /// </summary>
        public CefSharp.DevTools.Debugger.ScopeType Type
        {
            get
            {
                return (CefSharp.DevTools.Debugger.ScopeType)(StringToEnum(typeof(CefSharp.DevTools.Debugger.ScopeType), type));
            }

            set
            {
                this.type = (EnumToString(value));
            }
        }

        /// <summary>
        /// Scope type.
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (true))]
        internal string type
        {
            get;
            set;
        }

        /// <summary>
        /// Object representing the scope. For `global` and `with` scopes it represents the actual
        /// object; for the rest of the scopes, it is artificial transient object enumerating scope
        /// variables as its properties.
        /// </summary>
        [DataMember(Name = ("object"), IsRequired = (true))]
        public CefSharp.DevTools.Runtime.RemoteObject Object
        {
            get;
            set;
        }

        /// <summary>
        /// Name
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (false))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// Location in the source code where scope starts
        /// </summary>
        [DataMember(Name = ("startLocation"), IsRequired = (false))]
        public CefSharp.DevTools.Debugger.Location StartLocation
        {
            get;
            set;
        }

        /// <summary>
        /// Location in the source code where scope ends
        /// </summary>
        [DataMember(Name = ("endLocation"), IsRequired = (false))]
        public CefSharp.DevTools.Debugger.Location EndLocation
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Search match for resource.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class SearchMatch : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Line number in resource content.
        /// </summary>
        [DataMember(Name = ("lineNumber"), IsRequired = (true))]
        public double LineNumber
        {
            get;
            set;
        }

        /// <summary>
        /// Line with match content.
        /// </summary>
        [DataMember(Name = ("lineContent"), IsRequired = (true))]
        public string LineContent
        {
            get;
            set;
        }
    }

    /// <summary>
    /// BreakLocationType
    /// </summary>
    public enum BreakLocationType
    {
        /// <summary>
        /// debuggerStatement
        /// </summary>
        [EnumMember(Value = ("debuggerStatement"))]
        DebuggerStatement,
        /// <summary>
        /// call
        /// </summary>
        [EnumMember(Value = ("call"))]
        Call,
        /// <summary>
        /// return
        /// </summary>
        [EnumMember(Value = ("return"))]
        Return
    }

    /// <summary>
    /// BreakLocation
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class BreakLocation : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Script identifier as reported in the `Debugger.scriptParsed`.
        /// </summary>
        [DataMember(Name = ("scriptId"), IsRequired = (true))]
        public string ScriptId
        {
            get;
            set;
        }

        /// <summary>
        /// Line number in the script (0-based).
        /// </summary>
        [DataMember(Name = ("lineNumber"), IsRequired = (true))]
        public int LineNumber
        {
            get;
            set;
        }

        /// <summary>
        /// Column number in the script (0-based).
        /// </summary>
        [DataMember(Name = ("columnNumber"), IsRequired = (false))]
        public int? ColumnNumber
        {
            get;
            set;
        }

        /// <summary>
        /// Type
        /// </summary>
        public CefSharp.DevTools.Debugger.BreakLocationType? Type
        {
            get
            {
                return (CefSharp.DevTools.Debugger.BreakLocationType? )(StringToEnum(typeof(CefSharp.DevTools.Debugger.BreakLocationType? ), type));
            }

            set
            {
                this.type = (EnumToString(value));
            }
        }

        /// <summary>
        /// Type
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (false))]
        internal string type
        {
            get;
            set;
        }
    }

    /// <summary>
    /// WasmDisassemblyChunk
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class WasmDisassemblyChunk : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The next chunk of disassembled lines.
        /// </summary>
        [DataMember(Name = ("lines"), IsRequired = (true))]
        public string[] Lines
        {
            get;
            set;
        }

        /// <summary>
        /// The bytecode offsets describing the start of each line.
        /// </summary>
        [DataMember(Name = ("bytecodeOffsets"), IsRequired = (true))]
        public int[] BytecodeOffsets
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Enum of possible script languages.
    /// </summary>
    public enum ScriptLanguage
    {
        /// <summary>
        /// JavaScript
        /// </summary>
        [EnumMember(Value = ("JavaScript"))]
        JavaScript,
        /// <summary>
        /// WebAssembly
        /// </summary>
        [EnumMember(Value = ("WebAssembly"))]
        WebAssembly
    }

    /// <summary>
    /// Type of the debug symbols.
    /// </summary>
    public enum DebugSymbolsType
    {
        /// <summary>
        /// None
        /// </summary>
        [EnumMember(Value = ("None"))]
        None,
        /// <summary>
        /// SourceMap
        /// </summary>
        [EnumMember(Value = ("SourceMap"))]
        SourceMap,
        /// <summary>
        /// EmbeddedDWARF
        /// </summary>
        [EnumMember(Value = ("EmbeddedDWARF"))]
        EmbeddedDWARF,
        /// <summary>
        /// ExternalDWARF
        /// </summary>
        [EnumMember(Value = ("ExternalDWARF"))]
        ExternalDWARF
    }

    /// <summary>
    /// Debug symbols available for a wasm script.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class DebugSymbols : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Type of the debug symbols.
        /// </summary>
        public CefSharp.DevTools.Debugger.DebugSymbolsType Type
        {
            get
            {
                return (CefSharp.DevTools.Debugger.DebugSymbolsType)(StringToEnum(typeof(CefSharp.DevTools.Debugger.DebugSymbolsType), type));
            }

            set
            {
                this.type = (EnumToString(value));
            }
        }

        /// <summary>
        /// Type of the debug symbols.
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (true))]
        internal string type
        {
            get;
            set;
        }

        /// <summary>
        /// URL of the external symbol source.
        /// </summary>
        [DataMember(Name = ("externalURL"), IsRequired = (false))]
        public string ExternalURL
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Fired when breakpoint is resolved to an actual script and location.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class BreakpointResolvedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Breakpoint unique identifier.
        /// </summary>
        [DataMember(Name = ("breakpointId"), IsRequired = (true))]
        public string BreakpointId
        {
            get;
            private set;
        }

        /// <summary>
        /// Actual breakpoint location.
        /// </summary>
        [DataMember(Name = ("location"), IsRequired = (true))]
        public CefSharp.DevTools.Debugger.Location Location
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Pause reason.
    /// </summary>
    public enum PausedReason
    {
        /// <summary>
        /// ambiguous
        /// </summary>
        [EnumMember(Value = ("ambiguous"))]
        Ambiguous,
        /// <summary>
        /// assert
        /// </summary>
        [EnumMember(Value = ("assert"))]
        Assert,
        /// <summary>
        /// CSPViolation
        /// </summary>
        [EnumMember(Value = ("CSPViolation"))]
        CSPViolation,
        /// <summary>
        /// debugCommand
        /// </summary>
        [EnumMember(Value = ("debugCommand"))]
        DebugCommand,
        /// <summary>
        /// DOM
        /// </summary>
        [EnumMember(Value = ("DOM"))]
        DOM,
        /// <summary>
        /// EventListener
        /// </summary>
        [EnumMember(Value = ("EventListener"))]
        EventListener,
        /// <summary>
        /// exception
        /// </summary>
        [EnumMember(Value = ("exception"))]
        Exception,
        /// <summary>
        /// instrumentation
        /// </summary>
        [EnumMember(Value = ("instrumentation"))]
        Instrumentation,
        /// <summary>
        /// OOM
        /// </summary>
        [EnumMember(Value = ("OOM"))]
        OOM,
        /// <summary>
        /// other
        /// </summary>
        [EnumMember(Value = ("other"))]
        Other,
        /// <summary>
        /// promiseRejection
        /// </summary>
        [EnumMember(Value = ("promiseRejection"))]
        PromiseRejection,
        /// <summary>
        /// XHR
        /// </summary>
        [EnumMember(Value = ("XHR"))]
        XHR,
        /// <summary>
        /// step
        /// </summary>
        [EnumMember(Value = ("step"))]
        Step
    }

    /// <summary>
    /// Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class PausedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Call stack the virtual machine stopped on.
        /// </summary>
        [DataMember(Name = ("callFrames"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Debugger.CallFrame> CallFrames
        {
            get;
            private set;
        }

        /// <summary>
        /// Pause reason.
        /// </summary>
        public CefSharp.DevTools.Debugger.PausedReason Reason
        {
            get
            {
                return (CefSharp.DevTools.Debugger.PausedReason)(StringToEnum(typeof(CefSharp.DevTools.Debugger.PausedReason), reason));
            }

            set
            {
                this.reason = (EnumToString(value));
            }
        }

        /// <summary>
        /// Pause reason.
        /// </summary>
        [DataMember(Name = ("reason"), IsRequired = (true))]
        internal string reason
        {
            get;
            private set;
        }

        /// <summary>
        /// Object containing break-specific auxiliary properties.
        /// </summary>
        [DataMember(Name = ("data"), IsRequired = (false))]
        public object Data
        {
            get;
            private set;
        }

        /// <summary>
        /// Hit breakpoints IDs
        /// </summary>
        [DataMember(Name = ("hitBreakpoints"), IsRequired = (false))]
        public string[] HitBreakpoints
        {
            get;
            private set;
        }

        /// <summary>
        /// Async stack trace, if any.
        /// </summary>
        [DataMember(Name = ("asyncStackTrace"), IsRequired = (false))]
        public CefSharp.DevTools.Runtime.StackTrace AsyncStackTrace
        {
            get;
            private set;
        }

        /// <summary>
        /// Async stack trace, if any.
        /// </summary>
        [DataMember(Name = ("asyncStackTraceId"), IsRequired = (false))]
        public CefSharp.DevTools.Runtime.StackTraceId AsyncStackTraceId
        {
            get;
            private set;
        }

        /// <summary>
        /// Never present, will be removed.
        /// </summary>
        [DataMember(Name = ("asyncCallStackTraceId"), IsRequired = (false))]
        public CefSharp.DevTools.Runtime.StackTraceId AsyncCallStackTraceId
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when virtual machine fails to parse the script.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class ScriptFailedToParseEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Identifier of the script parsed.
        /// </summary>
        [DataMember(Name = ("scriptId"), IsRequired = (true))]
        public string ScriptId
        {
            get;
            private set;
        }

        /// <summary>
        /// URL or name of the script parsed (if any).
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (true))]
        public string Url
        {
            get;
            private set;
        }

        /// <summary>
        /// Line offset of the script within the resource with given URL (for script tags).
        /// </summary>
        [DataMember(Name = ("startLine"), IsRequired = (true))]
        public int StartLine
        {
            get;
            private set;
        }

        /// <summary>
        /// Column offset of the script within the resource with given URL.
        /// </summary>
        [DataMember(Name = ("startColumn"), IsRequired = (true))]
        public int StartColumn
        {
            get;
            private set;
        }

        /// <summary>
        /// Last line of the script.
        /// </summary>
        [DataMember(Name = ("endLine"), IsRequired = (true))]
        public int EndLine
        {
            get;
            private set;
        }

        /// <summary>
        /// Length of the last line of the script.
        /// </summary>
        [DataMember(Name = ("endColumn"), IsRequired = (true))]
        public int EndColumn
        {
            get;
            private set;
        }

        /// <summary>
        /// Specifies script creation context.
        /// </summary>
        [DataMember(Name = ("executionContextId"), IsRequired = (true))]
        public int ExecutionContextId
        {
            get;
            private set;
        }

        /// <summary>
        /// Content hash of the script, SHA-256.
        /// </summary>
        [DataMember(Name = ("hash"), IsRequired = (true))]
        public string Hash
        {
            get;
            private set;
        }

        /// <summary>
        /// Embedder-specific auxiliary data likely matching {isDefault: boolean, type: &apos;default&apos;|&apos;isolated&apos;|&apos;worker&apos;, frameId: string}
        /// </summary>
        [DataMember(Name = ("executionContextAuxData"), IsRequired = (false))]
        public object ExecutionContextAuxData
        {
            get;
            private set;
        }

        /// <summary>
        /// URL of source map associated with script (if any).
        /// </summary>
        [DataMember(Name = ("sourceMapURL"), IsRequired = (false))]
        public string SourceMapURL
        {
            get;
            private set;
        }

        /// <summary>
        /// True, if this script has sourceURL.
        /// </summary>
        [DataMember(Name = ("hasSourceURL"), IsRequired = (false))]
        public bool? HasSourceURL
        {
            get;
            private set;
        }

        /// <summary>
        /// True, if this script is ES6 module.
        /// </summary>
        [DataMember(Name = ("isModule"), IsRequired = (false))]
        public bool? IsModule
        {
            get;
            private set;
        }

        /// <summary>
        /// This script length.
        /// </summary>
        [DataMember(Name = ("length"), IsRequired = (false))]
        public int? Length
        {
            get;
            private set;
        }

        /// <summary>
        /// JavaScript top stack frame of where the script parsed event was triggered if available.
        /// </summary>
        [DataMember(Name = ("stackTrace"), IsRequired = (false))]
        public CefSharp.DevTools.Runtime.StackTrace StackTrace
        {
            get;
            private set;
        }

        /// <summary>
        /// If the scriptLanguage is WebAssembly, the code section offset in the module.
        /// </summary>
        [DataMember(Name = ("codeOffset"), IsRequired = (false))]
        public int? CodeOffset
        {
            get;
            private set;
        }

        /// <summary>
        /// The language of the script.
        /// </summary>
        public CefSharp.DevTools.Debugger.ScriptLanguage? ScriptLanguage
        {
            get
            {
                return (CefSharp.DevTools.Debugger.ScriptLanguage? )(StringToEnum(typeof(CefSharp.DevTools.Debugger.ScriptLanguage? ), scriptLanguage));
            }

            set
            {
                this.scriptLanguage = (EnumToString(value));
            }
        }

        /// <summary>
        /// The language of the script.
        /// </summary>
        [DataMember(Name = ("scriptLanguage"), IsRequired = (false))]
        internal string scriptLanguage
        {
            get;
            private set;
        }

        /// <summary>
        /// The name the embedder supplied for this script.
        /// </summary>
        [DataMember(Name = ("embedderName"), IsRequired = (false))]
        public string EmbedderName
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Fired when virtual machine parses script. This event is also fired for all known and uncollected
    /// scripts upon enabling debugger.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class ScriptParsedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Identifier of the script parsed.
        /// </summary>
        [DataMember(Name = ("scriptId"), IsRequired = (true))]
        public string ScriptId
        {
            get;
            private set;
        }

        /// <summary>
        /// URL or name of the script parsed (if any).
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (true))]
        public string Url
        {
            get;
            private set;
        }

        /// <summary>
        /// Line offset of the script within the resource with given URL (for script tags).
        /// </summary>
        [DataMember(Name = ("startLine"), IsRequired = (true))]
        public int StartLine
        {
            get;
            private set;
        }

        /// <summary>
        /// Column offset of the script within the resource with given URL.
        /// </summary>
        [DataMember(Name = ("startColumn"), IsRequired = (true))]
        public int StartColumn
        {
            get;
            private set;
        }

        /// <summary>
        /// Last line of the script.
        /// </summary>
        [DataMember(Name = ("endLine"), IsRequired = (true))]
        public int EndLine
        {
            get;
            private set;
        }

        /// <summary>
        /// Length of the last line of the script.
        /// </summary>
        [DataMember(Name = ("endColumn"), IsRequired = (true))]
        public int EndColumn
        {
            get;
            private set;
        }

        /// <summary>
        /// Specifies script creation context.
        /// </summary>
        [DataMember(Name = ("executionContextId"), IsRequired = (true))]
        public int ExecutionContextId
        {
            get;
            private set;
        }

        /// <summary>
        /// Content hash of the script, SHA-256.
        /// </summary>
        [DataMember(Name = ("hash"), IsRequired = (true))]
        public string Hash
        {
            get;
            private set;
        }

        /// <summary>
        /// Embedder-specific auxiliary data likely matching {isDefault: boolean, type: &apos;default&apos;|&apos;isolated&apos;|&apos;worker&apos;, frameId: string}
        /// </summary>
        [DataMember(Name = ("executionContextAuxData"), IsRequired = (false))]
        public object ExecutionContextAuxData
        {
            get;
            private set;
        }

        /// <summary>
        /// True, if this script is generated as a result of the live edit operation.
        /// </summary>
        [DataMember(Name = ("isLiveEdit"), IsRequired = (false))]
        public bool? IsLiveEdit
        {
            get;
            private set;
        }

        /// <summary>
        /// URL of source map associated with script (if any).
        /// </summary>
        [DataMember(Name = ("sourceMapURL"), IsRequired = (false))]
        public string SourceMapURL
        {
            get;
            private set;
        }

        /// <summary>
        /// True, if this script has sourceURL.
        /// </summary>
        [DataMember(Name = ("hasSourceURL"), IsRequired = (false))]
        public bool? HasSourceURL
        {
            get;
            private set;
        }

        /// <summary>
        /// True, if this script is ES6 module.
        /// </summary>
        [DataMember(Name = ("isModule"), IsRequired = (false))]
        public bool? IsModule
        {
            get;
            private set;
        }

        /// <summary>
        /// This script length.
        /// </summary>
        [DataMember(Name = ("length"), IsRequired = (false))]
        public int? Length
        {
            get;
            private set;
        }

        /// <summary>
        /// JavaScript top stack frame of where the script parsed event was triggered if available.
        /// </summary>
        [DataMember(Name = ("stackTrace"), IsRequired = (false))]
        public CefSharp.DevTools.Runtime.StackTrace StackTrace
        {
            get;
            private set;
        }

        /// <summary>
        /// If the scriptLanguage is WebAssembly, the code section offset in the module.
        /// </summary>
        [DataMember(Name = ("codeOffset"), IsRequired = (false))]
        public int? CodeOffset
        {
            get;
            private set;
        }

        /// <summary>
        /// The language of the script.
        /// </summary>
        public CefSharp.DevTools.Debugger.ScriptLanguage? ScriptLanguage
        {
            get
            {
                return (CefSharp.DevTools.Debugger.ScriptLanguage? )(StringToEnum(typeof(CefSharp.DevTools.Debugger.ScriptLanguage? ), scriptLanguage));
            }

            set
            {
                this.scriptLanguage = (EnumToString(value));
            }
        }

        /// <summary>
        /// The language of the script.
        /// </summary>
        [DataMember(Name = ("scriptLanguage"), IsRequired = (false))]
        internal string scriptLanguage
        {
            get;
            private set;
        }

        /// <summary>
        /// If the scriptLanguage is WebASsembly, the source of debug symbols for the module.
        /// </summary>
        [DataMember(Name = ("debugSymbols"), IsRequired = (false))]
        public CefSharp.DevTools.Debugger.DebugSymbols DebugSymbols
        {
            get;
            private set;
        }

        /// <summary>
        /// The name the embedder supplied for this script.
        /// </summary>
        [DataMember(Name = ("embedderName"), IsRequired = (false))]
        public string EmbedderName
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.HeapProfiler
{
    /// <summary>
    /// Sampling Heap Profile node. Holds callsite information, allocation statistics and child nodes.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class SamplingHeapProfileNode : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Function location.
        /// </summary>
        [DataMember(Name = ("callFrame"), IsRequired = (true))]
        public CefSharp.DevTools.Runtime.CallFrame CallFrame
        {
            get;
            set;
        }

        /// <summary>
        /// Allocations size in bytes for the node excluding children.
        /// </summary>
        [DataMember(Name = ("selfSize"), IsRequired = (true))]
        public double SelfSize
        {
            get;
            set;
        }

        /// <summary>
        /// Node id. Ids are unique across all profiles collected between startSampling and stopSampling.
        /// </summary>
        [DataMember(Name = ("id"), IsRequired = (true))]
        public int Id
        {
            get;
            set;
        }

        /// <summary>
        /// Child nodes.
        /// </summary>
        [DataMember(Name = ("children"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.HeapProfiler.SamplingHeapProfileNode> Children
        {
            get;
            set;
        }
    }

    /// <summary>
    /// A single sample from a sampling profile.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class SamplingHeapProfileSample : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Allocation size in bytes attributed to the sample.
        /// </summary>
        [DataMember(Name = ("size"), IsRequired = (true))]
        public double Size
        {
            get;
            set;
        }

        /// <summary>
        /// Id of the corresponding profile tree node.
        /// </summary>
        [DataMember(Name = ("nodeId"), IsRequired = (true))]
        public int NodeId
        {
            get;
            set;
        }

        /// <summary>
        /// Time-ordered sample ordinal number. It is unique across all profiles retrieved
        /// between startSampling and stopSampling.
        /// </summary>
        [DataMember(Name = ("ordinal"), IsRequired = (true))]
        public double Ordinal
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Sampling profile.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class SamplingHeapProfile : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Head
        /// </summary>
        [DataMember(Name = ("head"), IsRequired = (true))]
        public CefSharp.DevTools.HeapProfiler.SamplingHeapProfileNode Head
        {
            get;
            set;
        }

        /// <summary>
        /// Samples
        /// </summary>
        [DataMember(Name = ("samples"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.HeapProfiler.SamplingHeapProfileSample> Samples
        {
            get;
            set;
        }
    }

    /// <summary>
    /// addHeapSnapshotChunk
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class AddHeapSnapshotChunkEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Chunk
        /// </summary>
        [DataMember(Name = ("chunk"), IsRequired = (true))]
        public string Chunk
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// If heap objects tracking has been started then backend may send update for one or more fragments
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class HeapStatsUpdateEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// An array of triplets. Each triplet describes a fragment. The first integer is the fragment
        /// index, the second integer is a total count of objects for the fragment, the third integer is
        /// a total size of the objects for the fragment.
        /// </summary>
        [DataMember(Name = ("statsUpdate"), IsRequired = (true))]
        public int[] StatsUpdate
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// If heap objects tracking has been started then backend regularly sends a current value for last
    /// seen object id and corresponding timestamp. If the were changes in the heap since last event
    /// then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class LastSeenObjectIdEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// LastSeenObjectId
        /// </summary>
        [DataMember(Name = ("lastSeenObjectId"), IsRequired = (true))]
        public int LastSeenObjectId
        {
            get;
            private set;
        }

        /// <summary>
        /// Timestamp
        /// </summary>
        [DataMember(Name = ("timestamp"), IsRequired = (true))]
        public double Timestamp
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// reportHeapSnapshotProgress
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class ReportHeapSnapshotProgressEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Done
        /// </summary>
        [DataMember(Name = ("done"), IsRequired = (true))]
        public int Done
        {
            get;
            private set;
        }

        /// <summary>
        /// Total
        /// </summary>
        [DataMember(Name = ("total"), IsRequired = (true))]
        public int Total
        {
            get;
            private set;
        }

        /// <summary>
        /// Finished
        /// </summary>
        [DataMember(Name = ("finished"), IsRequired = (false))]
        public bool? Finished
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.Profiler
{
    /// <summary>
    /// Profile node. Holds callsite information, execution statistics and child nodes.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ProfileNode : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Unique id of the node.
        /// </summary>
        [DataMember(Name = ("id"), IsRequired = (true))]
        public int Id
        {
            get;
            set;
        }

        /// <summary>
        /// Function location.
        /// </summary>
        [DataMember(Name = ("callFrame"), IsRequired = (true))]
        public CefSharp.DevTools.Runtime.CallFrame CallFrame
        {
            get;
            set;
        }

        /// <summary>
        /// Number of samples where this node was on top of the call stack.
        /// </summary>
        [DataMember(Name = ("hitCount"), IsRequired = (false))]
        public int? HitCount
        {
            get;
            set;
        }

        /// <summary>
        /// Child node ids.
        /// </summary>
        [DataMember(Name = ("children"), IsRequired = (false))]
        public int[] Children
        {
            get;
            set;
        }

        /// <summary>
        /// The reason of being not optimized. The function may be deoptimized or marked as don&apos;t
        /// optimize.
        /// </summary>
        [DataMember(Name = ("deoptReason"), IsRequired = (false))]
        public string DeoptReason
        {
            get;
            set;
        }

        /// <summary>
        /// An array of source position ticks.
        /// </summary>
        [DataMember(Name = ("positionTicks"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Profiler.PositionTickInfo> PositionTicks
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Profile.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class Profile : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The list of profile nodes. First item is the root node.
        /// </summary>
        [DataMember(Name = ("nodes"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Profiler.ProfileNode> Nodes
        {
            get;
            set;
        }

        /// <summary>
        /// Profiling start timestamp in microseconds.
        /// </summary>
        [DataMember(Name = ("startTime"), IsRequired = (true))]
        public double StartTime
        {
            get;
            set;
        }

        /// <summary>
        /// Profiling end timestamp in microseconds.
        /// </summary>
        [DataMember(Name = ("endTime"), IsRequired = (true))]
        public double EndTime
        {
            get;
            set;
        }

        /// <summary>
        /// Ids of samples top nodes.
        /// </summary>
        [DataMember(Name = ("samples"), IsRequired = (false))]
        public int[] Samples
        {
            get;
            set;
        }

        /// <summary>
        /// Time intervals between adjacent samples in microseconds. The first delta is relative to the
        /// profile startTime.
        /// </summary>
        [DataMember(Name = ("timeDeltas"), IsRequired = (false))]
        public int[] TimeDeltas
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Specifies a number of samples attributed to a certain source position.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class PositionTickInfo : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Source line number (1-based).
        /// </summary>
        [DataMember(Name = ("line"), IsRequired = (true))]
        public int Line
        {
            get;
            set;
        }

        /// <summary>
        /// Number of samples attributed to the source line.
        /// </summary>
        [DataMember(Name = ("ticks"), IsRequired = (true))]
        public int Ticks
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Coverage data for a source range.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CoverageRange : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// JavaScript script source offset for the range start.
        /// </summary>
        [DataMember(Name = ("startOffset"), IsRequired = (true))]
        public int StartOffset
        {
            get;
            set;
        }

        /// <summary>
        /// JavaScript script source offset for the range end.
        /// </summary>
        [DataMember(Name = ("endOffset"), IsRequired = (true))]
        public int EndOffset
        {
            get;
            set;
        }

        /// <summary>
        /// Collected execution count of the source range.
        /// </summary>
        [DataMember(Name = ("count"), IsRequired = (true))]
        public int Count
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Coverage data for a JavaScript function.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class FunctionCoverage : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// JavaScript function name.
        /// </summary>
        [DataMember(Name = ("functionName"), IsRequired = (true))]
        public string FunctionName
        {
            get;
            set;
        }

        /// <summary>
        /// Source ranges inside the function with coverage data.
        /// </summary>
        [DataMember(Name = ("ranges"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Profiler.CoverageRange> Ranges
        {
            get;
            set;
        }

        /// <summary>
        /// Whether coverage data for this function has block granularity.
        /// </summary>
        [DataMember(Name = ("isBlockCoverage"), IsRequired = (true))]
        public bool IsBlockCoverage
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Coverage data for a JavaScript script.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ScriptCoverage : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// JavaScript script id.
        /// </summary>
        [DataMember(Name = ("scriptId"), IsRequired = (true))]
        public string ScriptId
        {
            get;
            set;
        }

        /// <summary>
        /// JavaScript script name or url.
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (true))]
        public string Url
        {
            get;
            set;
        }

        /// <summary>
        /// Functions contained in the script that has coverage data.
        /// </summary>
        [DataMember(Name = ("functions"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Profiler.FunctionCoverage> Functions
        {
            get;
            set;
        }
    }

    /// <summary>
    /// consoleProfileFinished
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class ConsoleProfileFinishedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Id
        /// </summary>
        [DataMember(Name = ("id"), IsRequired = (true))]
        public string Id
        {
            get;
            private set;
        }

        /// <summary>
        /// Location of console.profileEnd().
        /// </summary>
        [DataMember(Name = ("location"), IsRequired = (true))]
        public CefSharp.DevTools.Debugger.Location Location
        {
            get;
            private set;
        }

        /// <summary>
        /// Profile
        /// </summary>
        [DataMember(Name = ("profile"), IsRequired = (true))]
        public CefSharp.DevTools.Profiler.Profile Profile
        {
            get;
            private set;
        }

        /// <summary>
        /// Profile title passed as an argument to console.profile().
        /// </summary>
        [DataMember(Name = ("title"), IsRequired = (false))]
        public string Title
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Sent when new profile recording is started using console.profile() call.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class ConsoleProfileStartedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Id
        /// </summary>
        [DataMember(Name = ("id"), IsRequired = (true))]
        public string Id
        {
            get;
            private set;
        }

        /// <summary>
        /// Location of console.profile().
        /// </summary>
        [DataMember(Name = ("location"), IsRequired = (true))]
        public CefSharp.DevTools.Debugger.Location Location
        {
            get;
            private set;
        }

        /// <summary>
        /// Profile title passed as an argument to console.profile().
        /// </summary>
        [DataMember(Name = ("title"), IsRequired = (false))]
        public string Title
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Reports coverage delta since the last poll (either from an event like this, or from
    /// `takePreciseCoverage` for the current isolate. May only be sent if precise code
    /// coverage has been started. This event can be trigged by the embedder to, for example,
    /// trigger collection of coverage data immediately at a certain point in time.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class PreciseCoverageDeltaUpdateEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Monotonically increasing time (in seconds) when the coverage update was taken in the backend.
        /// </summary>
        [DataMember(Name = ("timestamp"), IsRequired = (true))]
        public double Timestamp
        {
            get;
            private set;
        }

        /// <summary>
        /// Identifier for distinguishing coverage events.
        /// </summary>
        [DataMember(Name = ("occasion"), IsRequired = (true))]
        public string Occasion
        {
            get;
            private set;
        }

        /// <summary>
        /// Coverage data for the current isolate.
        /// </summary>
        [DataMember(Name = ("result"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Profiler.ScriptCoverage> Result
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.Runtime
{
    /// <summary>
    /// SerializationOptionsSerialization
    /// </summary>
    public enum SerializationOptionsSerialization
    {
        /// <summary>
        /// deep
        /// </summary>
        [EnumMember(Value = ("deep"))]
        Deep,
        /// <summary>
        /// json
        /// </summary>
        [EnumMember(Value = ("json"))]
        Json,
        /// <summary>
        /// idOnly
        /// </summary>
        [EnumMember(Value = ("idOnly"))]
        IdOnly
    }

    /// <summary>
    /// Represents options for serialization. Overrides `generatePreview` and `returnByValue`.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class SerializationOptions : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Serialization
        /// </summary>
        public CefSharp.DevTools.Runtime.SerializationOptionsSerialization Serialization
        {
            get
            {
                return (CefSharp.DevTools.Runtime.SerializationOptionsSerialization)(StringToEnum(typeof(CefSharp.DevTools.Runtime.SerializationOptionsSerialization), serialization));
            }

            set
            {
                this.serialization = (EnumToString(value));
            }
        }

        /// <summary>
        /// Serialization
        /// </summary>
        [DataMember(Name = ("serialization"), IsRequired = (true))]
        internal string serialization
        {
            get;
            set;
        }

        /// <summary>
        /// Deep serialization depth. Default is full depth. Respected only in `deep` serialization mode.
        /// </summary>
        [DataMember(Name = ("maxDepth"), IsRequired = (false))]
        public int? MaxDepth
        {
            get;
            set;
        }

        /// <summary>
        /// Embedder-specific parameters. For example if connected to V8 in Chrome these control DOM
        /// serialization via `maxNodeDepth: integer` and `includeShadowTree: &quot;none&quot; | &quot;open&quot; | &quot;all&quot;`.
        /// Values can be only of type string or integer.
        /// </summary>
        [DataMember(Name = ("additionalParameters"), IsRequired = (false))]
        public object AdditionalParameters
        {
            get;
            set;
        }
    }

    /// <summary>
    /// DeepSerializedValueType
    /// </summary>
    public enum DeepSerializedValueType
    {
        /// <summary>
        /// undefined
        /// </summary>
        [EnumMember(Value = ("undefined"))]
        Undefined,
        /// <summary>
        /// null
        /// </summary>
        [EnumMember(Value = ("null"))]
        Null,
        /// <summary>
        /// string
        /// </summary>
        [EnumMember(Value = ("string"))]
        String,
        /// <summary>
        /// number
        /// </summary>
        [EnumMember(Value = ("number"))]
        Number,
        /// <summary>
        /// boolean
        /// </summary>
        [EnumMember(Value = ("boolean"))]
        Boolean,
        /// <summary>
        /// bigint
        /// </summary>
        [EnumMember(Value = ("bigint"))]
        Bigint,
        /// <summary>
        /// regexp
        /// </summary>
        [EnumMember(Value = ("regexp"))]
        Regexp,
        /// <summary>
        /// date
        /// </summary>
        [EnumMember(Value = ("date"))]
        Date,
        /// <summary>
        /// symbol
        /// </summary>
        [EnumMember(Value = ("symbol"))]
        Symbol,
        /// <summary>
        /// array
        /// </summary>
        [EnumMember(Value = ("array"))]
        Array,
        /// <summary>
        /// object
        /// </summary>
        [EnumMember(Value = ("object"))]
        Object,
        /// <summary>
        /// function
        /// </summary>
        [EnumMember(Value = ("function"))]
        Function,
        /// <summary>
        /// map
        /// </summary>
        [EnumMember(Value = ("map"))]
        Map,
        /// <summary>
        /// set
        /// </summary>
        [EnumMember(Value = ("set"))]
        Set,
        /// <summary>
        /// weakmap
        /// </summary>
        [EnumMember(Value = ("weakmap"))]
        Weakmap,
        /// <summary>
        /// weakset
        /// </summary>
        [EnumMember(Value = ("weakset"))]
        Weakset,
        /// <summary>
        /// error
        /// </summary>
        [EnumMember(Value = ("error"))]
        Error,
        /// <summary>
        /// proxy
        /// </summary>
        [EnumMember(Value = ("proxy"))]
        Proxy,
        /// <summary>
        /// promise
        /// </summary>
        [EnumMember(Value = ("promise"))]
        Promise,
        /// <summary>
        /// typedarray
        /// </summary>
        [EnumMember(Value = ("typedarray"))]
        Typedarray,
        /// <summary>
        /// arraybuffer
        /// </summary>
        [EnumMember(Value = ("arraybuffer"))]
        Arraybuffer,
        /// <summary>
        /// node
        /// </summary>
        [EnumMember(Value = ("node"))]
        Node,
        /// <summary>
        /// window
        /// </summary>
        [EnumMember(Value = ("window"))]
        Window,
        /// <summary>
        /// generator
        /// </summary>
        [EnumMember(Value = ("generator"))]
        Generator
    }

    /// <summary>
    /// Represents deep serialized value.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class DeepSerializedValue : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Type
        /// </summary>
        public CefSharp.DevTools.Runtime.DeepSerializedValueType Type
        {
            get
            {
                return (CefSharp.DevTools.Runtime.DeepSerializedValueType)(StringToEnum(typeof(CefSharp.DevTools.Runtime.DeepSerializedValueType), type));
            }

            set
            {
                this.type = (EnumToString(value));
            }
        }

        /// <summary>
        /// Type
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (true))]
        internal string type
        {
            get;
            set;
        }

        /// <summary>
        /// Value
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (false))]
        public object Value
        {
            get;
            set;
        }

        /// <summary>
        /// ObjectId
        /// </summary>
        [DataMember(Name = ("objectId"), IsRequired = (false))]
        public string ObjectId
        {
            get;
            set;
        }

        /// <summary>
        /// Set if value reference met more then once during serialization. In such
        /// case, value is provided only to one of the serialized values. Unique
        /// per value in the scope of one CDP call.
        /// </summary>
        [DataMember(Name = ("weakLocalObjectReference"), IsRequired = (false))]
        public int? WeakLocalObjectReference
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Object type.
    /// </summary>
    public enum RemoteObjectType
    {
        /// <summary>
        /// object
        /// </summary>
        [EnumMember(Value = ("object"))]
        Object,
        /// <summary>
        /// function
        /// </summary>
        [EnumMember(Value = ("function"))]
        Function,
        /// <summary>
        /// undefined
        /// </summary>
        [EnumMember(Value = ("undefined"))]
        Undefined,
        /// <summary>
        /// string
        /// </summary>
        [EnumMember(Value = ("string"))]
        String,
        /// <summary>
        /// number
        /// </summary>
        [EnumMember(Value = ("number"))]
        Number,
        /// <summary>
        /// boolean
        /// </summary>
        [EnumMember(Value = ("boolean"))]
        Boolean,
        /// <summary>
        /// symbol
        /// </summary>
        [EnumMember(Value = ("symbol"))]
        Symbol,
        /// <summary>
        /// bigint
        /// </summary>
        [EnumMember(Value = ("bigint"))]
        Bigint
    }

    /// <summary>
    /// Object subtype hint. Specified for `object` type values only.
    /// NOTE: If you change anything here, make sure to also update
    /// `subtype` in `ObjectPreview` and `PropertyPreview` below.
    /// </summary>
    public enum RemoteObjectSubtype
    {
        /// <summary>
        /// array
        /// </summary>
        [EnumMember(Value = ("array"))]
        Array,
        /// <summary>
        /// null
        /// </summary>
        [EnumMember(Value = ("null"))]
        Null,
        /// <summary>
        /// node
        /// </summary>
        [EnumMember(Value = ("node"))]
        Node,
        /// <summary>
        /// regexp
        /// </summary>
        [EnumMember(Value = ("regexp"))]
        Regexp,
        /// <summary>
        /// date
        /// </summary>
        [EnumMember(Value = ("date"))]
        Date,
        /// <summary>
        /// map
        /// </summary>
        [EnumMember(Value = ("map"))]
        Map,
        /// <summary>
        /// set
        /// </summary>
        [EnumMember(Value = ("set"))]
        Set,
        /// <summary>
        /// weakmap
        /// </summary>
        [EnumMember(Value = ("weakmap"))]
        Weakmap,
        /// <summary>
        /// weakset
        /// </summary>
        [EnumMember(Value = ("weakset"))]
        Weakset,
        /// <summary>
        /// iterator
        /// </summary>
        [EnumMember(Value = ("iterator"))]
        Iterator,
        /// <summary>
        /// generator
        /// </summary>
        [EnumMember(Value = ("generator"))]
        Generator,
        /// <summary>
        /// error
        /// </summary>
        [EnumMember(Value = ("error"))]
        Error,
        /// <summary>
        /// proxy
        /// </summary>
        [EnumMember(Value = ("proxy"))]
        Proxy,
        /// <summary>
        /// promise
        /// </summary>
        [EnumMember(Value = ("promise"))]
        Promise,
        /// <summary>
        /// typedarray
        /// </summary>
        [EnumMember(Value = ("typedarray"))]
        Typedarray,
        /// <summary>
        /// arraybuffer
        /// </summary>
        [EnumMember(Value = ("arraybuffer"))]
        Arraybuffer,
        /// <summary>
        /// dataview
        /// </summary>
        [EnumMember(Value = ("dataview"))]
        Dataview,
        /// <summary>
        /// webassemblymemory
        /// </summary>
        [EnumMember(Value = ("webassemblymemory"))]
        Webassemblymemory,
        /// <summary>
        /// wasmvalue
        /// </summary>
        [EnumMember(Value = ("wasmvalue"))]
        Wasmvalue
    }

    /// <summary>
    /// Mirror object referencing original JavaScript object.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class RemoteObject : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Object type.
        /// </summary>
        public CefSharp.DevTools.Runtime.RemoteObjectType Type
        {
            get
            {
                return (CefSharp.DevTools.Runtime.RemoteObjectType)(StringToEnum(typeof(CefSharp.DevTools.Runtime.RemoteObjectType), type));
            }

            set
            {
                this.type = (EnumToString(value));
            }
        }

        /// <summary>
        /// Object type.
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (true))]
        internal string type
        {
            get;
            set;
        }

        /// <summary>
        /// Object subtype hint. Specified for `object` type values only.
        /// NOTE: If you change anything here, make sure to also update
        /// `subtype` in `ObjectPreview` and `PropertyPreview` below.
        /// </summary>
        public CefSharp.DevTools.Runtime.RemoteObjectSubtype? Subtype
        {
            get
            {
                return (CefSharp.DevTools.Runtime.RemoteObjectSubtype? )(StringToEnum(typeof(CefSharp.DevTools.Runtime.RemoteObjectSubtype? ), subtype));
            }

            set
            {
                this.subtype = (EnumToString(value));
            }
        }

        /// <summary>
        /// Object subtype hint. Specified for `object` type values only.
        /// NOTE: If you change anything here, make sure to also update
        /// `subtype` in `ObjectPreview` and `PropertyPreview` below.
        /// </summary>
        [DataMember(Name = ("subtype"), IsRequired = (false))]
        internal string subtype
        {
            get;
            set;
        }

        /// <summary>
        /// Object class (constructor) name. Specified for `object` type values only.
        /// </summary>
        [DataMember(Name = ("className"), IsRequired = (false))]
        public string ClassName
        {
            get;
            set;
        }

        /// <summary>
        /// Remote object value in case of primitive values or JSON values (if it was requested).
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (false))]
        public object Value
        {
            get;
            set;
        }

        /// <summary>
        /// Primitive value which can not be JSON-stringified does not have `value`, but gets this
        /// property.
        /// </summary>
        [DataMember(Name = ("unserializableValue"), IsRequired = (false))]
        public string UnserializableValue
        {
            get;
            set;
        }

        /// <summary>
        /// String representation of the object.
        /// </summary>
        [DataMember(Name = ("description"), IsRequired = (false))]
        public string Description
        {
            get;
            set;
        }

        /// <summary>
        /// Deep serialized value.
        /// </summary>
        [DataMember(Name = ("deepSerializedValue"), IsRequired = (false))]
        public CefSharp.DevTools.Runtime.DeepSerializedValue DeepSerializedValue
        {
            get;
            set;
        }

        /// <summary>
        /// Unique object identifier (for non-primitive values).
        /// </summary>
        [DataMember(Name = ("objectId"), IsRequired = (false))]
        public string ObjectId
        {
            get;
            set;
        }

        /// <summary>
        /// Preview containing abbreviated property values. Specified for `object` type values only.
        /// </summary>
        [DataMember(Name = ("preview"), IsRequired = (false))]
        public CefSharp.DevTools.Runtime.ObjectPreview Preview
        {
            get;
            set;
        }

        /// <summary>
        /// CustomPreview
        /// </summary>
        [DataMember(Name = ("customPreview"), IsRequired = (false))]
        public CefSharp.DevTools.Runtime.CustomPreview CustomPreview
        {
            get;
            set;
        }
    }

    /// <summary>
    /// CustomPreview
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CustomPreview : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// The JSON-stringified result of formatter.header(object, config) call.
        /// It contains json ML array that represents RemoteObject.
        /// </summary>
        [DataMember(Name = ("header"), IsRequired = (true))]
        public string Header
        {
            get;
            set;
        }

        /// <summary>
        /// If formatter returns true as a result of formatter.hasBody call then bodyGetterId will
        /// contain RemoteObjectId for the function that returns result of formatter.body(object, config) call.
        /// The result value is json ML array.
        /// </summary>
        [DataMember(Name = ("bodyGetterId"), IsRequired = (false))]
        public string BodyGetterId
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Object type.
    /// </summary>
    public enum ObjectPreviewType
    {
        /// <summary>
        /// object
        /// </summary>
        [EnumMember(Value = ("object"))]
        Object,
        /// <summary>
        /// function
        /// </summary>
        [EnumMember(Value = ("function"))]
        Function,
        /// <summary>
        /// undefined
        /// </summary>
        [EnumMember(Value = ("undefined"))]
        Undefined,
        /// <summary>
        /// string
        /// </summary>
        [EnumMember(Value = ("string"))]
        String,
        /// <summary>
        /// number
        /// </summary>
        [EnumMember(Value = ("number"))]
        Number,
        /// <summary>
        /// boolean
        /// </summary>
        [EnumMember(Value = ("boolean"))]
        Boolean,
        /// <summary>
        /// symbol
        /// </summary>
        [EnumMember(Value = ("symbol"))]
        Symbol,
        /// <summary>
        /// bigint
        /// </summary>
        [EnumMember(Value = ("bigint"))]
        Bigint
    }

    /// <summary>
    /// Object subtype hint. Specified for `object` type values only.
    /// </summary>
    public enum ObjectPreviewSubtype
    {
        /// <summary>
        /// array
        /// </summary>
        [EnumMember(Value = ("array"))]
        Array,
        /// <summary>
        /// null
        /// </summary>
        [EnumMember(Value = ("null"))]
        Null,
        /// <summary>
        /// node
        /// </summary>
        [EnumMember(Value = ("node"))]
        Node,
        /// <summary>
        /// regexp
        /// </summary>
        [EnumMember(Value = ("regexp"))]
        Regexp,
        /// <summary>
        /// date
        /// </summary>
        [EnumMember(Value = ("date"))]
        Date,
        /// <summary>
        /// map
        /// </summary>
        [EnumMember(Value = ("map"))]
        Map,
        /// <summary>
        /// set
        /// </summary>
        [EnumMember(Value = ("set"))]
        Set,
        /// <summary>
        /// weakmap
        /// </summary>
        [EnumMember(Value = ("weakmap"))]
        Weakmap,
        /// <summary>
        /// weakset
        /// </summary>
        [EnumMember(Value = ("weakset"))]
        Weakset,
        /// <summary>
        /// iterator
        /// </summary>
        [EnumMember(Value = ("iterator"))]
        Iterator,
        /// <summary>
        /// generator
        /// </summary>
        [EnumMember(Value = ("generator"))]
        Generator,
        /// <summary>
        /// error
        /// </summary>
        [EnumMember(Value = ("error"))]
        Error,
        /// <summary>
        /// proxy
        /// </summary>
        [EnumMember(Value = ("proxy"))]
        Proxy,
        /// <summary>
        /// promise
        /// </summary>
        [EnumMember(Value = ("promise"))]
        Promise,
        /// <summary>
        /// typedarray
        /// </summary>
        [EnumMember(Value = ("typedarray"))]
        Typedarray,
        /// <summary>
        /// arraybuffer
        /// </summary>
        [EnumMember(Value = ("arraybuffer"))]
        Arraybuffer,
        /// <summary>
        /// dataview
        /// </summary>
        [EnumMember(Value = ("dataview"))]
        Dataview,
        /// <summary>
        /// webassemblymemory
        /// </summary>
        [EnumMember(Value = ("webassemblymemory"))]
        Webassemblymemory,
        /// <summary>
        /// wasmvalue
        /// </summary>
        [EnumMember(Value = ("wasmvalue"))]
        Wasmvalue
    }

    /// <summary>
    /// Object containing abbreviated remote object value.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ObjectPreview : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Object type.
        /// </summary>
        public CefSharp.DevTools.Runtime.ObjectPreviewType Type
        {
            get
            {
                return (CefSharp.DevTools.Runtime.ObjectPreviewType)(StringToEnum(typeof(CefSharp.DevTools.Runtime.ObjectPreviewType), type));
            }

            set
            {
                this.type = (EnumToString(value));
            }
        }

        /// <summary>
        /// Object type.
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (true))]
        internal string type
        {
            get;
            set;
        }

        /// <summary>
        /// Object subtype hint. Specified for `object` type values only.
        /// </summary>
        public CefSharp.DevTools.Runtime.ObjectPreviewSubtype? Subtype
        {
            get
            {
                return (CefSharp.DevTools.Runtime.ObjectPreviewSubtype? )(StringToEnum(typeof(CefSharp.DevTools.Runtime.ObjectPreviewSubtype? ), subtype));
            }

            set
            {
                this.subtype = (EnumToString(value));
            }
        }

        /// <summary>
        /// Object subtype hint. Specified for `object` type values only.
        /// </summary>
        [DataMember(Name = ("subtype"), IsRequired = (false))]
        internal string subtype
        {
            get;
            set;
        }

        /// <summary>
        /// String representation of the object.
        /// </summary>
        [DataMember(Name = ("description"), IsRequired = (false))]
        public string Description
        {
            get;
            set;
        }

        /// <summary>
        /// True iff some of the properties or entries of the original object did not fit.
        /// </summary>
        [DataMember(Name = ("overflow"), IsRequired = (true))]
        public bool Overflow
        {
            get;
            set;
        }

        /// <summary>
        /// List of the properties.
        /// </summary>
        [DataMember(Name = ("properties"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Runtime.PropertyPreview> Properties
        {
            get;
            set;
        }

        /// <summary>
        /// List of the entries. Specified for `map` and `set` subtype values only.
        /// </summary>
        [DataMember(Name = ("entries"), IsRequired = (false))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Runtime.EntryPreview> Entries
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Object type. Accessor means that the property itself is an accessor property.
    /// </summary>
    public enum PropertyPreviewType
    {
        /// <summary>
        /// object
        /// </summary>
        [EnumMember(Value = ("object"))]
        Object,
        /// <summary>
        /// function
        /// </summary>
        [EnumMember(Value = ("function"))]
        Function,
        /// <summary>
        /// undefined
        /// </summary>
        [EnumMember(Value = ("undefined"))]
        Undefined,
        /// <summary>
        /// string
        /// </summary>
        [EnumMember(Value = ("string"))]
        String,
        /// <summary>
        /// number
        /// </summary>
        [EnumMember(Value = ("number"))]
        Number,
        /// <summary>
        /// boolean
        /// </summary>
        [EnumMember(Value = ("boolean"))]
        Boolean,
        /// <summary>
        /// symbol
        /// </summary>
        [EnumMember(Value = ("symbol"))]
        Symbol,
        /// <summary>
        /// accessor
        /// </summary>
        [EnumMember(Value = ("accessor"))]
        Accessor,
        /// <summary>
        /// bigint
        /// </summary>
        [EnumMember(Value = ("bigint"))]
        Bigint
    }

    /// <summary>
    /// Object subtype hint. Specified for `object` type values only.
    /// </summary>
    public enum PropertyPreviewSubtype
    {
        /// <summary>
        /// array
        /// </summary>
        [EnumMember(Value = ("array"))]
        Array,
        /// <summary>
        /// null
        /// </summary>
        [EnumMember(Value = ("null"))]
        Null,
        /// <summary>
        /// node
        /// </summary>
        [EnumMember(Value = ("node"))]
        Node,
        /// <summary>
        /// regexp
        /// </summary>
        [EnumMember(Value = ("regexp"))]
        Regexp,
        /// <summary>
        /// date
        /// </summary>
        [EnumMember(Value = ("date"))]
        Date,
        /// <summary>
        /// map
        /// </summary>
        [EnumMember(Value = ("map"))]
        Map,
        /// <summary>
        /// set
        /// </summary>
        [EnumMember(Value = ("set"))]
        Set,
        /// <summary>
        /// weakmap
        /// </summary>
        [EnumMember(Value = ("weakmap"))]
        Weakmap,
        /// <summary>
        /// weakset
        /// </summary>
        [EnumMember(Value = ("weakset"))]
        Weakset,
        /// <summary>
        /// iterator
        /// </summary>
        [EnumMember(Value = ("iterator"))]
        Iterator,
        /// <summary>
        /// generator
        /// </summary>
        [EnumMember(Value = ("generator"))]
        Generator,
        /// <summary>
        /// error
        /// </summary>
        [EnumMember(Value = ("error"))]
        Error,
        /// <summary>
        /// proxy
        /// </summary>
        [EnumMember(Value = ("proxy"))]
        Proxy,
        /// <summary>
        /// promise
        /// </summary>
        [EnumMember(Value = ("promise"))]
        Promise,
        /// <summary>
        /// typedarray
        /// </summary>
        [EnumMember(Value = ("typedarray"))]
        Typedarray,
        /// <summary>
        /// arraybuffer
        /// </summary>
        [EnumMember(Value = ("arraybuffer"))]
        Arraybuffer,
        /// <summary>
        /// dataview
        /// </summary>
        [EnumMember(Value = ("dataview"))]
        Dataview,
        /// <summary>
        /// webassemblymemory
        /// </summary>
        [EnumMember(Value = ("webassemblymemory"))]
        Webassemblymemory,
        /// <summary>
        /// wasmvalue
        /// </summary>
        [EnumMember(Value = ("wasmvalue"))]
        Wasmvalue
    }

    /// <summary>
    /// PropertyPreview
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class PropertyPreview : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Property name.
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// Object type. Accessor means that the property itself is an accessor property.
        /// </summary>
        public CefSharp.DevTools.Runtime.PropertyPreviewType Type
        {
            get
            {
                return (CefSharp.DevTools.Runtime.PropertyPreviewType)(StringToEnum(typeof(CefSharp.DevTools.Runtime.PropertyPreviewType), type));
            }

            set
            {
                this.type = (EnumToString(value));
            }
        }

        /// <summary>
        /// Object type. Accessor means that the property itself is an accessor property.
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (true))]
        internal string type
        {
            get;
            set;
        }

        /// <summary>
        /// User-friendly property value string.
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (false))]
        public string Value
        {
            get;
            set;
        }

        /// <summary>
        /// Nested value preview.
        /// </summary>
        [DataMember(Name = ("valuePreview"), IsRequired = (false))]
        public CefSharp.DevTools.Runtime.ObjectPreview ValuePreview
        {
            get;
            set;
        }

        /// <summary>
        /// Object subtype hint. Specified for `object` type values only.
        /// </summary>
        public CefSharp.DevTools.Runtime.PropertyPreviewSubtype? Subtype
        {
            get
            {
                return (CefSharp.DevTools.Runtime.PropertyPreviewSubtype? )(StringToEnum(typeof(CefSharp.DevTools.Runtime.PropertyPreviewSubtype? ), subtype));
            }

            set
            {
                this.subtype = (EnumToString(value));
            }
        }

        /// <summary>
        /// Object subtype hint. Specified for `object` type values only.
        /// </summary>
        [DataMember(Name = ("subtype"), IsRequired = (false))]
        internal string subtype
        {
            get;
            set;
        }
    }

    /// <summary>
    /// EntryPreview
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class EntryPreview : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Preview of the key. Specified for map-like collection entries.
        /// </summary>
        [DataMember(Name = ("key"), IsRequired = (false))]
        public CefSharp.DevTools.Runtime.ObjectPreview Key
        {
            get;
            set;
        }

        /// <summary>
        /// Preview of the value.
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (true))]
        public CefSharp.DevTools.Runtime.ObjectPreview Value
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Object property descriptor.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class PropertyDescriptor : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Property name or symbol description.
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// The value associated with the property.
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (false))]
        public CefSharp.DevTools.Runtime.RemoteObject Value
        {
            get;
            set;
        }

        /// <summary>
        /// True if the value associated with the property may be changed (data descriptors only).
        /// </summary>
        [DataMember(Name = ("writable"), IsRequired = (false))]
        public bool? Writable
        {
            get;
            set;
        }

        /// <summary>
        /// A function which serves as a getter for the property, or `undefined` if there is no getter
        /// (accessor descriptors only).
        /// </summary>
        [DataMember(Name = ("get"), IsRequired = (false))]
        public CefSharp.DevTools.Runtime.RemoteObject Get
        {
            get;
            set;
        }

        /// <summary>
        /// A function which serves as a setter for the property, or `undefined` if there is no setter
        /// (accessor descriptors only).
        /// </summary>
        [DataMember(Name = ("set"), IsRequired = (false))]
        public CefSharp.DevTools.Runtime.RemoteObject Set
        {
            get;
            set;
        }

        /// <summary>
        /// True if the type of this property descriptor may be changed and if the property may be
        /// deleted from the corresponding object.
        /// </summary>
        [DataMember(Name = ("configurable"), IsRequired = (true))]
        public bool Configurable
        {
            get;
            set;
        }

        /// <summary>
        /// True if this property shows up during enumeration of the properties on the corresponding
        /// object.
        /// </summary>
        [DataMember(Name = ("enumerable"), IsRequired = (true))]
        public bool Enumerable
        {
            get;
            set;
        }

        /// <summary>
        /// True if the result was thrown during the evaluation.
        /// </summary>
        [DataMember(Name = ("wasThrown"), IsRequired = (false))]
        public bool? WasThrown
        {
            get;
            set;
        }

        /// <summary>
        /// True if the property is owned for the object.
        /// </summary>
        [DataMember(Name = ("isOwn"), IsRequired = (false))]
        public bool? IsOwn
        {
            get;
            set;
        }

        /// <summary>
        /// Property symbol object, if the property is of the `symbol` type.
        /// </summary>
        [DataMember(Name = ("symbol"), IsRequired = (false))]
        public CefSharp.DevTools.Runtime.RemoteObject Symbol
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Object internal property descriptor. This property isn&apos;t normally visible in JavaScript code.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class InternalPropertyDescriptor : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Conventional property name.
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// The value associated with the property.
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (false))]
        public CefSharp.DevTools.Runtime.RemoteObject Value
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Object private field descriptor.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class PrivatePropertyDescriptor : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Private property name.
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// The value associated with the private property.
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (false))]
        public CefSharp.DevTools.Runtime.RemoteObject Value
        {
            get;
            set;
        }

        /// <summary>
        /// A function which serves as a getter for the private property,
        /// or `undefined` if there is no getter (accessor descriptors only).
        /// </summary>
        [DataMember(Name = ("get"), IsRequired = (false))]
        public CefSharp.DevTools.Runtime.RemoteObject Get
        {
            get;
            set;
        }

        /// <summary>
        /// A function which serves as a setter for the private property,
        /// or `undefined` if there is no setter (accessor descriptors only).
        /// </summary>
        [DataMember(Name = ("set"), IsRequired = (false))]
        public CefSharp.DevTools.Runtime.RemoteObject Set
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Represents function call argument. Either remote object id `objectId`, primitive `value`,
    /// unserializable primitive value or neither of (for undefined) them should be specified.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CallArgument : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Primitive value or serializable javascript object.
        /// </summary>
        [DataMember(Name = ("value"), IsRequired = (false))]
        public object Value
        {
            get;
            set;
        }

        /// <summary>
        /// Primitive value which can not be JSON-stringified.
        /// </summary>
        [DataMember(Name = ("unserializableValue"), IsRequired = (false))]
        public string UnserializableValue
        {
            get;
            set;
        }

        /// <summary>
        /// Remote object handle.
        /// </summary>
        [DataMember(Name = ("objectId"), IsRequired = (false))]
        public string ObjectId
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Description of an isolated world.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ExecutionContextDescription : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Unique id of the execution context. It can be used to specify in which execution context
        /// script evaluation should be performed.
        /// </summary>
        [DataMember(Name = ("id"), IsRequired = (true))]
        public int Id
        {
            get;
            set;
        }

        /// <summary>
        /// Execution context origin.
        /// </summary>
        [DataMember(Name = ("origin"), IsRequired = (true))]
        public string Origin
        {
            get;
            set;
        }

        /// <summary>
        /// Human readable name describing given context.
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// A system-unique execution context identifier. Unlike the id, this is unique across
        /// multiple processes, so can be reliably used to identify specific context while backend
        /// performs a cross-process navigation.
        /// </summary>
        [DataMember(Name = ("uniqueId"), IsRequired = (true))]
        public string UniqueId
        {
            get;
            set;
        }

        /// <summary>
        /// Embedder-specific auxiliary data likely matching {isDefault: boolean, type: &apos;default&apos;|&apos;isolated&apos;|&apos;worker&apos;, frameId: string}
        /// </summary>
        [DataMember(Name = ("auxData"), IsRequired = (false))]
        public object AuxData
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Detailed information about exception (or error) that was thrown during script compilation or
    /// execution.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class ExceptionDetails : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Exception id.
        /// </summary>
        [DataMember(Name = ("exceptionId"), IsRequired = (true))]
        public int ExceptionId
        {
            get;
            set;
        }

        /// <summary>
        /// Exception text, which should be used together with exception object when available.
        /// </summary>
        [DataMember(Name = ("text"), IsRequired = (true))]
        public string Text
        {
            get;
            set;
        }

        /// <summary>
        /// Line number of the exception location (0-based).
        /// </summary>
        [DataMember(Name = ("lineNumber"), IsRequired = (true))]
        public int LineNumber
        {
            get;
            set;
        }

        /// <summary>
        /// Column number of the exception location (0-based).
        /// </summary>
        [DataMember(Name = ("columnNumber"), IsRequired = (true))]
        public int ColumnNumber
        {
            get;
            set;
        }

        /// <summary>
        /// Script ID of the exception location.
        /// </summary>
        [DataMember(Name = ("scriptId"), IsRequired = (false))]
        public string ScriptId
        {
            get;
            set;
        }

        /// <summary>
        /// URL of the exception location, to be used when the script was not reported.
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (false))]
        public string Url
        {
            get;
            set;
        }

        /// <summary>
        /// JavaScript stack trace if available.
        /// </summary>
        [DataMember(Name = ("stackTrace"), IsRequired = (false))]
        public CefSharp.DevTools.Runtime.StackTrace StackTrace
        {
            get;
            set;
        }

        /// <summary>
        /// Exception object if available.
        /// </summary>
        [DataMember(Name = ("exception"), IsRequired = (false))]
        public CefSharp.DevTools.Runtime.RemoteObject Exception
        {
            get;
            set;
        }

        /// <summary>
        /// Identifier of the context where exception happened.
        /// </summary>
        [DataMember(Name = ("executionContextId"), IsRequired = (false))]
        public int? ExecutionContextId
        {
            get;
            set;
        }

        /// <summary>
        /// Dictionary with entries of meta data that the client associated
        /// with this exception, such as information about associated network
        /// requests, etc.
        /// </summary>
        [DataMember(Name = ("exceptionMetaData"), IsRequired = (false))]
        public object ExceptionMetaData
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Stack entry for runtime errors and assertions.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class CallFrame : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// JavaScript function name.
        /// </summary>
        [DataMember(Name = ("functionName"), IsRequired = (true))]
        public string FunctionName
        {
            get;
            set;
        }

        /// <summary>
        /// JavaScript script id.
        /// </summary>
        [DataMember(Name = ("scriptId"), IsRequired = (true))]
        public string ScriptId
        {
            get;
            set;
        }

        /// <summary>
        /// JavaScript script name or url.
        /// </summary>
        [DataMember(Name = ("url"), IsRequired = (true))]
        public string Url
        {
            get;
            set;
        }

        /// <summary>
        /// JavaScript script line number (0-based).
        /// </summary>
        [DataMember(Name = ("lineNumber"), IsRequired = (true))]
        public int LineNumber
        {
            get;
            set;
        }

        /// <summary>
        /// JavaScript script column number (0-based).
        /// </summary>
        [DataMember(Name = ("columnNumber"), IsRequired = (true))]
        public int ColumnNumber
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Call frames for assertions or error messages.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class StackTrace : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// String label of this stack trace. For async traces this may be a name of the function that
        /// initiated the async call.
        /// </summary>
        [DataMember(Name = ("description"), IsRequired = (false))]
        public string Description
        {
            get;
            set;
        }

        /// <summary>
        /// JavaScript function name.
        /// </summary>
        [DataMember(Name = ("callFrames"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Runtime.CallFrame> CallFrames
        {
            get;
            set;
        }

        /// <summary>
        /// Asynchronous JavaScript stack trace that preceded this stack, if available.
        /// </summary>
        [DataMember(Name = ("parent"), IsRequired = (false))]
        public CefSharp.DevTools.Runtime.StackTrace Parent
        {
            get;
            set;
        }

        /// <summary>
        /// Asynchronous JavaScript stack trace that preceded this stack, if available.
        /// </summary>
        [DataMember(Name = ("parentId"), IsRequired = (false))]
        public CefSharp.DevTools.Runtime.StackTraceId ParentId
        {
            get;
            set;
        }
    }

    /// <summary>
    /// If `debuggerId` is set stack trace comes from another debugger and can be resolved there. This
    /// allows to track cross-debugger calls. See `Runtime.StackTrace` and `Debugger.paused` for usages.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public partial class StackTraceId : CefSharp.DevTools.DevToolsDomainEntityBase
    {
        /// <summary>
        /// Id
        /// </summary>
        [DataMember(Name = ("id"), IsRequired = (true))]
        public string Id
        {
            get;
            set;
        }

        /// <summary>
        /// DebuggerId
        /// </summary>
        [DataMember(Name = ("debuggerId"), IsRequired = (false))]
        public string DebuggerId
        {
            get;
            set;
        }
    }

    /// <summary>
    /// Notification is issued every time when binding is called.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class BindingCalledEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Name
        /// </summary>
        [DataMember(Name = ("name"), IsRequired = (true))]
        public string Name
        {
            get;
            private set;
        }

        /// <summary>
        /// Payload
        /// </summary>
        [DataMember(Name = ("payload"), IsRequired = (true))]
        public string Payload
        {
            get;
            private set;
        }

        /// <summary>
        /// Identifier of the context where the call was made.
        /// </summary>
        [DataMember(Name = ("executionContextId"), IsRequired = (true))]
        public int ExecutionContextId
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Type of the call.
    /// </summary>
    public enum ConsoleAPICalledType
    {
        /// <summary>
        /// log
        /// </summary>
        [EnumMember(Value = ("log"))]
        Log,
        /// <summary>
        /// debug
        /// </summary>
        [EnumMember(Value = ("debug"))]
        Debug,
        /// <summary>
        /// info
        /// </summary>
        [EnumMember(Value = ("info"))]
        Info,
        /// <summary>
        /// error
        /// </summary>
        [EnumMember(Value = ("error"))]
        Error,
        /// <summary>
        /// warning
        /// </summary>
        [EnumMember(Value = ("warning"))]
        Warning,
        /// <summary>
        /// dir
        /// </summary>
        [EnumMember(Value = ("dir"))]
        Dir,
        /// <summary>
        /// dirxml
        /// </summary>
        [EnumMember(Value = ("dirxml"))]
        Dirxml,
        /// <summary>
        /// table
        /// </summary>
        [EnumMember(Value = ("table"))]
        Table,
        /// <summary>
        /// trace
        /// </summary>
        [EnumMember(Value = ("trace"))]
        Trace,
        /// <summary>
        /// clear
        /// </summary>
        [EnumMember(Value = ("clear"))]
        Clear,
        /// <summary>
        /// startGroup
        /// </summary>
        [EnumMember(Value = ("startGroup"))]
        StartGroup,
        /// <summary>
        /// startGroupCollapsed
        /// </summary>
        [EnumMember(Value = ("startGroupCollapsed"))]
        StartGroupCollapsed,
        /// <summary>
        /// endGroup
        /// </summary>
        [EnumMember(Value = ("endGroup"))]
        EndGroup,
        /// <summary>
        /// assert
        /// </summary>
        [EnumMember(Value = ("assert"))]
        Assert,
        /// <summary>
        /// profile
        /// </summary>
        [EnumMember(Value = ("profile"))]
        Profile,
        /// <summary>
        /// profileEnd
        /// </summary>
        [EnumMember(Value = ("profileEnd"))]
        ProfileEnd,
        /// <summary>
        /// count
        /// </summary>
        [EnumMember(Value = ("count"))]
        Count,
        /// <summary>
        /// timeEnd
        /// </summary>
        [EnumMember(Value = ("timeEnd"))]
        TimeEnd
    }

    /// <summary>
    /// Issued when console API was called.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class ConsoleAPICalledEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Type of the call.
        /// </summary>
        public CefSharp.DevTools.Runtime.ConsoleAPICalledType Type
        {
            get
            {
                return (CefSharp.DevTools.Runtime.ConsoleAPICalledType)(StringToEnum(typeof(CefSharp.DevTools.Runtime.ConsoleAPICalledType), type));
            }

            set
            {
                this.type = (EnumToString(value));
            }
        }

        /// <summary>
        /// Type of the call.
        /// </summary>
        [DataMember(Name = ("type"), IsRequired = (true))]
        internal string type
        {
            get;
            private set;
        }

        /// <summary>
        /// Call arguments.
        /// </summary>
        [DataMember(Name = ("args"), IsRequired = (true))]
        public System.Collections.Generic.IList<CefSharp.DevTools.Runtime.RemoteObject> Args
        {
            get;
            private set;
        }

        /// <summary>
        /// Identifier of the context where the call was made.
        /// </summary>
        [DataMember(Name = ("executionContextId"), IsRequired = (true))]
        public int ExecutionContextId
        {
            get;
            private set;
        }

        /// <summary>
        /// Call timestamp.
        /// </summary>
        [DataMember(Name = ("timestamp"), IsRequired = (true))]
        public double Timestamp
        {
            get;
            private set;
        }

        /// <summary>
        /// Stack trace captured when the call was made. The async stack chain is automatically reported for
        /// the following call types: `assert`, `error`, `trace`, `warning`. For other types the async call
        /// chain can be retrieved using `Debugger.getStackTrace` and `stackTrace.parentId` field.
        /// </summary>
        [DataMember(Name = ("stackTrace"), IsRequired = (false))]
        public CefSharp.DevTools.Runtime.StackTrace StackTrace
        {
            get;
            private set;
        }

        /// <summary>
        /// Console context descriptor for calls on non-default console context (not console.*):
        /// &apos;anonymous#unique-logger-id&apos; for call on unnamed context, &apos;name#unique-logger-id&apos; for call
        /// on named context.
        /// </summary>
        [DataMember(Name = ("context"), IsRequired = (false))]
        public string Context
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Issued when unhandled exception was revoked.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class ExceptionRevokedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Reason describing why exception was revoked.
        /// </summary>
        [DataMember(Name = ("reason"), IsRequired = (true))]
        public string Reason
        {
            get;
            private set;
        }

        /// <summary>
        /// The id of revoked exception, as reported in `exceptionThrown`.
        /// </summary>
        [DataMember(Name = ("exceptionId"), IsRequired = (true))]
        public int ExceptionId
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Issued when exception was thrown and unhandled.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class ExceptionThrownEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Timestamp of the exception.
        /// </summary>
        [DataMember(Name = ("timestamp"), IsRequired = (true))]
        public double Timestamp
        {
            get;
            private set;
        }

        /// <summary>
        /// ExceptionDetails
        /// </summary>
        [DataMember(Name = ("exceptionDetails"), IsRequired = (true))]
        public CefSharp.DevTools.Runtime.ExceptionDetails ExceptionDetails
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Issued when new execution context is created.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class ExecutionContextCreatedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// A newly created execution context.
        /// </summary>
        [DataMember(Name = ("context"), IsRequired = (true))]
        public CefSharp.DevTools.Runtime.ExecutionContextDescription Context
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Issued when execution context is destroyed.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class ExecutionContextDestroyedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Id of the destroyed context
        /// </summary>
        [DataMember(Name = ("executionContextId"), IsRequired = (true))]
        public int ExecutionContextId
        {
            get;
            private set;
        }

        /// <summary>
        /// Unique Id of the destroyed context
        /// </summary>
        [DataMember(Name = ("executionContextUniqueId"), IsRequired = (true))]
        public string ExecutionContextUniqueId
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// Issued when object should be inspected (for example, as a result of inspect() command line API
    /// call).
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute]
    public class InspectRequestedEventArgs : CefSharp.DevTools.DevToolsDomainEventArgsBase
    {
        /// <summary>
        /// Object
        /// </summary>
        [DataMember(Name = ("object"), IsRequired = (true))]
        public CefSharp.DevTools.Runtime.RemoteObject Object
        {
            get;
            private set;
        }

        /// <summary>
        /// Hints
        /// </summary>
        [DataMember(Name = ("hints"), IsRequired = (true))]
        public object Hints
        {
            get;
            private set;
        }

        /// <summary>
        /// Identifier of the context where the call was made.
        /// </summary>
        [DataMember(Name = ("executionContextId"), IsRequired = (false))]
        public int? ExecutionContextId
        {
            get;
            private set;
        }
    }
}

namespace CefSharp.DevTools.Accessibility
{
    /// <summary>
    /// GetPartialAXTreeResponse
    /// </summary>
    [DataContract]
    public class GetPartialAXTreeResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.Accessibility.AXNode> nodes
        {
            get;
            set;
        }

        /// <summary>
        /// nodes
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.Accessibility.AXNode> Nodes
        {
            get
            {
                return nodes;
            }
        }
    }
}

namespace CefSharp.DevTools.Accessibility
{
    /// <summary>
    /// GetFullAXTreeResponse
    /// </summary>
    [DataContract]
    public class GetFullAXTreeResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.Accessibility.AXNode> nodes
        {
            get;
            set;
        }

        /// <summary>
        /// nodes
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.Accessibility.AXNode> Nodes
        {
            get
            {
                return nodes;
            }
        }
    }
}

namespace CefSharp.DevTools.Accessibility
{
    /// <summary>
    /// GetRootAXNodeResponse
    /// </summary>
    [DataContract]
    public class GetRootAXNodeResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.Accessibility.AXNode node
        {
            get;
            set;
        }

        /// <summary>
        /// node
        /// </summary>
        public CefSharp.DevTools.Accessibility.AXNode Node
        {
            get
            {
                return node;
            }
        }
    }
}

namespace CefSharp.DevTools.Accessibility
{
    /// <summary>
    /// GetAXNodeAndAncestorsResponse
    /// </summary>
    [DataContract]
    public class GetAXNodeAndAncestorsResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.Accessibility.AXNode> nodes
        {
            get;
            set;
        }

        /// <summary>
        /// nodes
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.Accessibility.AXNode> Nodes
        {
            get
            {
                return nodes;
            }
        }
    }
}

namespace CefSharp.DevTools.Accessibility
{
    /// <summary>
    /// GetChildAXNodesResponse
    /// </summary>
    [DataContract]
    public class GetChildAXNodesResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.Accessibility.AXNode> nodes
        {
            get;
            set;
        }

        /// <summary>
        /// nodes
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.Accessibility.AXNode> Nodes
        {
            get
            {
                return nodes;
            }
        }
    }
}

namespace CefSharp.DevTools.Accessibility
{
    /// <summary>
    /// QueryAXTreeResponse
    /// </summary>
    [DataContract]
    public class QueryAXTreeResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.Accessibility.AXNode> nodes
        {
            get;
            set;
        }

        /// <summary>
        /// nodes
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.Accessibility.AXNode> Nodes
        {
            get
            {
                return nodes;
            }
        }
    }
}

namespace CefSharp.DevTools.Accessibility
{
    using System.Linq;

    /// <summary>
    /// Accessibility
    /// </summary>
    public partial class AccessibilityClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// Accessibility
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public AccessibilityClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// The loadComplete event mirrors the load complete event sent by the browser to assistive
        /// technology when the web page has finished loading.
        /// </summary>
        public event System.EventHandler<LoadCompleteEventArgs> LoadComplete
        {
            add
            {
                _client.AddEventHandler<LoadCompleteEventArgs>("Accessibility.loadComplete", value);
            }

            remove
            {
                _client.RemoveEventHandler<LoadCompleteEventArgs>("Accessibility.loadComplete", value);
            }
        }

        /// <summary>
        /// The nodesUpdated event is sent every time a previously requested node has changed the in tree.
        /// </summary>
        public event System.EventHandler<NodesUpdatedEventArgs> NodesUpdated
        {
            add
            {
                _client.AddEventHandler<NodesUpdatedEventArgs>("Accessibility.nodesUpdated", value);
            }

            remove
            {
                _client.RemoveEventHandler<NodesUpdatedEventArgs>("Accessibility.nodesUpdated", value);
            }
        }

        /// <summary>
        /// Disables the accessibility domain.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DisableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Accessibility.disable", dict);
        }

        /// <summary>
        /// Enables the accessibility domain which causes `AXNodeId`s to remain consistent between method calls.
        /// This turns on accessibility for the page, which can impact performance until accessibility is disabled.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> EnableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Accessibility.enable", dict);
        }

        partial void ValidateGetPartialAXTree(int? nodeId = null, int? backendNodeId = null, string objectId = null, bool? fetchRelatives = null);
        /// <summary>
        /// Fetches the accessibility node and partial accessibility tree for this DOM node, if it exists.
        /// </summary>
        /// <param name = "nodeId">Identifier of the node to get the partial accessibility tree for.</param>
        /// <param name = "backendNodeId">Identifier of the backend node to get the partial accessibility tree for.</param>
        /// <param name = "objectId">JavaScript object id of the node wrapper to get the partial accessibility tree for.</param>
        /// <param name = "fetchRelatives">Whether to fetch this node's ancestors, siblings and children. Defaults to true.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetPartialAXTreeResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetPartialAXTreeResponse> GetPartialAXTreeAsync(int? nodeId = null, int? backendNodeId = null, string objectId = null, bool? fetchRelatives = null)
        {
            ValidateGetPartialAXTree(nodeId, backendNodeId, objectId, fetchRelatives);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (nodeId.HasValue)
            {
                dict.Add("nodeId", nodeId.Value);
            }

            if (backendNodeId.HasValue)
            {
                dict.Add("backendNodeId", backendNodeId.Value);
            }

            if (!(string.IsNullOrEmpty(objectId)))
            {
                dict.Add("objectId", objectId);
            }

            if (fetchRelatives.HasValue)
            {
                dict.Add("fetchRelatives", fetchRelatives.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<GetPartialAXTreeResponse>("Accessibility.getPartialAXTree", dict);
        }

        partial void ValidateGetFullAXTree(int? depth = null, string frameId = null);
        /// <summary>
        /// Fetches the entire accessibility tree for the root Document
        /// </summary>
        /// <param name = "depth">The maximum depth at which descendants of the root node should be retrieved.If omitted, the full tree is returned.</param>
        /// <param name = "frameId">The frame for whose document the AX tree should be retrieved.If omitted, the root frame is used.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetFullAXTreeResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetFullAXTreeResponse> GetFullAXTreeAsync(int? depth = null, string frameId = null)
        {
            ValidateGetFullAXTree(depth, frameId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (depth.HasValue)
            {
                dict.Add("depth", depth.Value);
            }

            if (!(string.IsNullOrEmpty(frameId)))
            {
                dict.Add("frameId", frameId);
            }

            return _client.ExecuteDevToolsMethodAsync<GetFullAXTreeResponse>("Accessibility.getFullAXTree", dict);
        }

        partial void ValidateGetRootAXNode(string frameId = null);
        /// <summary>
        /// Fetches the root node.
        /// Requires `enable()` to have been called previously.
        /// </summary>
        /// <param name = "frameId">The frame in whose document the node resides.If omitted, the root frame is used.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetRootAXNodeResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetRootAXNodeResponse> GetRootAXNodeAsync(string frameId = null)
        {
            ValidateGetRootAXNode(frameId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (!(string.IsNullOrEmpty(frameId)))
            {
                dict.Add("frameId", frameId);
            }

            return _client.ExecuteDevToolsMethodAsync<GetRootAXNodeResponse>("Accessibility.getRootAXNode", dict);
        }

        partial void ValidateGetAXNodeAndAncestors(int? nodeId = null, int? backendNodeId = null, string objectId = null);
        /// <summary>
        /// Fetches a node and all ancestors up to and including the root.
        /// Requires `enable()` to have been called previously.
        /// </summary>
        /// <param name = "nodeId">Identifier of the node to get.</param>
        /// <param name = "backendNodeId">Identifier of the backend node to get.</param>
        /// <param name = "objectId">JavaScript object id of the node wrapper to get.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetAXNodeAndAncestorsResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetAXNodeAndAncestorsResponse> GetAXNodeAndAncestorsAsync(int? nodeId = null, int? backendNodeId = null, string objectId = null)
        {
            ValidateGetAXNodeAndAncestors(nodeId, backendNodeId, objectId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (nodeId.HasValue)
            {
                dict.Add("nodeId", nodeId.Value);
            }

            if (backendNodeId.HasValue)
            {
                dict.Add("backendNodeId", backendNodeId.Value);
            }

            if (!(string.IsNullOrEmpty(objectId)))
            {
                dict.Add("objectId", objectId);
            }

            return _client.ExecuteDevToolsMethodAsync<GetAXNodeAndAncestorsResponse>("Accessibility.getAXNodeAndAncestors", dict);
        }

        partial void ValidateGetChildAXNodes(string id, string frameId = null);
        /// <summary>
        /// Fetches a particular accessibility node by AXNodeId.
        /// Requires `enable()` to have been called previously.
        /// </summary>
        /// <param name = "id">id</param>
        /// <param name = "frameId">The frame in whose document the node resides.If omitted, the root frame is used.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetChildAXNodesResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetChildAXNodesResponse> GetChildAXNodesAsync(string id, string frameId = null)
        {
            ValidateGetChildAXNodes(id, frameId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("id", id);
            if (!(string.IsNullOrEmpty(frameId)))
            {
                dict.Add("frameId", frameId);
            }

            return _client.ExecuteDevToolsMethodAsync<GetChildAXNodesResponse>("Accessibility.getChildAXNodes", dict);
        }

        partial void ValidateQueryAXTree(int? nodeId = null, int? backendNodeId = null, string objectId = null, string accessibleName = null, string role = null);
        /// <summary>
        /// Query a DOM node&apos;s accessibility subtree for accessible name and role.
        /// This command computes the name and role for all nodes in the subtree, including those that are
        /// ignored for accessibility, and returns those that match the specified name and role. If no DOM
        /// node is specified, or the DOM node does not exist, the command returns an error. If neither
        /// `accessibleName` or `role` is specified, it returns all the accessibility nodes in the subtree.
        /// </summary>
        /// <param name = "nodeId">Identifier of the node for the root to query.</param>
        /// <param name = "backendNodeId">Identifier of the backend node for the root to query.</param>
        /// <param name = "objectId">JavaScript object id of the node wrapper for the root to query.</param>
        /// <param name = "accessibleName">Find nodes with this computed name.</param>
        /// <param name = "role">Find nodes with this computed role.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;QueryAXTreeResponse&gt;</returns>
        public System.Threading.Tasks.Task<QueryAXTreeResponse> QueryAXTreeAsync(int? nodeId = null, int? backendNodeId = null, string objectId = null, string accessibleName = null, string role = null)
        {
            ValidateQueryAXTree(nodeId, backendNodeId, objectId, accessibleName, role);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (nodeId.HasValue)
            {
                dict.Add("nodeId", nodeId.Value);
            }

            if (backendNodeId.HasValue)
            {
                dict.Add("backendNodeId", backendNodeId.Value);
            }

            if (!(string.IsNullOrEmpty(objectId)))
            {
                dict.Add("objectId", objectId);
            }

            if (!(string.IsNullOrEmpty(accessibleName)))
            {
                dict.Add("accessibleName", accessibleName);
            }

            if (!(string.IsNullOrEmpty(role)))
            {
                dict.Add("role", role);
            }

            return _client.ExecuteDevToolsMethodAsync<QueryAXTreeResponse>("Accessibility.queryAXTree", dict);
        }
    }
}

namespace CefSharp.DevTools.Animation
{
    /// <summary>
    /// GetCurrentTimeResponse
    /// </summary>
    [DataContract]
    public class GetCurrentTimeResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal double currentTime
        {
            get;
            set;
        }

        /// <summary>
        /// currentTime
        /// </summary>
        public double CurrentTime
        {
            get
            {
                return currentTime;
            }
        }
    }
}

namespace CefSharp.DevTools.Animation
{
    /// <summary>
    /// GetPlaybackRateResponse
    /// </summary>
    [DataContract]
    public class GetPlaybackRateResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal double playbackRate
        {
            get;
            set;
        }

        /// <summary>
        /// playbackRate
        /// </summary>
        public double PlaybackRate
        {
            get
            {
                return playbackRate;
            }
        }
    }
}

namespace CefSharp.DevTools.Animation
{
    /// <summary>
    /// ResolveAnimationResponse
    /// </summary>
    [DataContract]
    public class ResolveAnimationResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.Runtime.RemoteObject remoteObject
        {
            get;
            set;
        }

        /// <summary>
        /// remoteObject
        /// </summary>
        public CefSharp.DevTools.Runtime.RemoteObject RemoteObject
        {
            get
            {
                return remoteObject;
            }
        }
    }
}

namespace CefSharp.DevTools.Animation
{
    using System.Linq;

    /// <summary>
    /// Animation
    /// </summary>
    public partial class AnimationClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// Animation
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public AnimationClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// Event for when an animation has been cancelled.
        /// </summary>
        public event System.EventHandler<AnimationCanceledEventArgs> AnimationCanceled
        {
            add
            {
                _client.AddEventHandler<AnimationCanceledEventArgs>("Animation.animationCanceled", value);
            }

            remove
            {
                _client.RemoveEventHandler<AnimationCanceledEventArgs>("Animation.animationCanceled", value);
            }
        }

        /// <summary>
        /// Event for each animation that has been created.
        /// </summary>
        public event System.EventHandler<AnimationCreatedEventArgs> AnimationCreated
        {
            add
            {
                _client.AddEventHandler<AnimationCreatedEventArgs>("Animation.animationCreated", value);
            }

            remove
            {
                _client.RemoveEventHandler<AnimationCreatedEventArgs>("Animation.animationCreated", value);
            }
        }

        /// <summary>
        /// Event for animation that has been started.
        /// </summary>
        public event System.EventHandler<AnimationStartedEventArgs> AnimationStarted
        {
            add
            {
                _client.AddEventHandler<AnimationStartedEventArgs>("Animation.animationStarted", value);
            }

            remove
            {
                _client.RemoveEventHandler<AnimationStartedEventArgs>("Animation.animationStarted", value);
            }
        }

        /// <summary>
        /// Disables animation domain notifications.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DisableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Animation.disable", dict);
        }

        /// <summary>
        /// Enables animation domain notifications.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> EnableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Animation.enable", dict);
        }

        partial void ValidateGetCurrentTime(string id);
        /// <summary>
        /// Returns the current time of the an animation.
        /// </summary>
        /// <param name = "id">Id of animation.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetCurrentTimeResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetCurrentTimeResponse> GetCurrentTimeAsync(string id)
        {
            ValidateGetCurrentTime(id);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("id", id);
            return _client.ExecuteDevToolsMethodAsync<GetCurrentTimeResponse>("Animation.getCurrentTime", dict);
        }

        /// <summary>
        /// Gets the playback rate of the document timeline.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetPlaybackRateResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetPlaybackRateResponse> GetPlaybackRateAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<GetPlaybackRateResponse>("Animation.getPlaybackRate", dict);
        }

        partial void ValidateReleaseAnimations(string[] animations);
        /// <summary>
        /// Releases a set of animations to no longer be manipulated.
        /// </summary>
        /// <param name = "animations">List of animation ids to seek.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ReleaseAnimationsAsync(string[] animations)
        {
            ValidateReleaseAnimations(animations);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("animations", animations);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Animation.releaseAnimations", dict);
        }

        partial void ValidateResolveAnimation(string animationId);
        /// <summary>
        /// Gets the remote object of the Animation.
        /// </summary>
        /// <param name = "animationId">Animation id.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;ResolveAnimationResponse&gt;</returns>
        public System.Threading.Tasks.Task<ResolveAnimationResponse> ResolveAnimationAsync(string animationId)
        {
            ValidateResolveAnimation(animationId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("animationId", animationId);
            return _client.ExecuteDevToolsMethodAsync<ResolveAnimationResponse>("Animation.resolveAnimation", dict);
        }

        partial void ValidateSeekAnimations(string[] animations, double currentTime);
        /// <summary>
        /// Seek a set of animations to a particular time within each animation.
        /// </summary>
        /// <param name = "animations">List of animation ids to seek.</param>
        /// <param name = "currentTime">Set the current time of each animation.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SeekAnimationsAsync(string[] animations, double currentTime)
        {
            ValidateSeekAnimations(animations, currentTime);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("animations", animations);
            dict.Add("currentTime", currentTime);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Animation.seekAnimations", dict);
        }

        partial void ValidateSetPaused(string[] animations, bool paused);
        /// <summary>
        /// Sets the paused state of a set of animations.
        /// </summary>
        /// <param name = "animations">Animations to set the pause state of.</param>
        /// <param name = "paused">Paused state to set to.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetPausedAsync(string[] animations, bool paused)
        {
            ValidateSetPaused(animations, paused);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("animations", animations);
            dict.Add("paused", paused);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Animation.setPaused", dict);
        }

        partial void ValidateSetPlaybackRate(double playbackRate);
        /// <summary>
        /// Sets the playback rate of the document timeline.
        /// </summary>
        /// <param name = "playbackRate">Playback rate for animations on page</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetPlaybackRateAsync(double playbackRate)
        {
            ValidateSetPlaybackRate(playbackRate);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("playbackRate", playbackRate);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Animation.setPlaybackRate", dict);
        }

        partial void ValidateSetTiming(string animationId, double duration, double delay);
        /// <summary>
        /// Sets the timing of an animation node.
        /// </summary>
        /// <param name = "animationId">Animation id.</param>
        /// <param name = "duration">Duration of the animation.</param>
        /// <param name = "delay">Delay of the animation.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetTimingAsync(string animationId, double duration, double delay)
        {
            ValidateSetTiming(animationId, duration, delay);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("animationId", animationId);
            dict.Add("duration", duration);
            dict.Add("delay", delay);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Animation.setTiming", dict);
        }
    }
}

namespace CefSharp.DevTools.Audits
{
    /// <summary>
    /// GetEncodedResponseResponse
    /// </summary>
    [DataContract]
    public class GetEncodedResponseResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string body
        {
            get;
            set;
        }

        /// <summary>
        /// body
        /// </summary>
        public byte[] Body
        {
            get
            {
                return Convert(body);
            }
        }

        [DataMember]
        internal int originalSize
        {
            get;
            set;
        }

        /// <summary>
        /// originalSize
        /// </summary>
        public int OriginalSize
        {
            get
            {
                return originalSize;
            }
        }

        [DataMember]
        internal int encodedSize
        {
            get;
            set;
        }

        /// <summary>
        /// encodedSize
        /// </summary>
        public int EncodedSize
        {
            get
            {
                return encodedSize;
            }
        }
    }
}

namespace CefSharp.DevTools.Audits
{
    /// <summary>
    /// CheckFormsIssuesResponse
    /// </summary>
    [DataContract]
    public class CheckFormsIssuesResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.Audits.GenericIssueDetails> formIssues
        {
            get;
            set;
        }

        /// <summary>
        /// formIssues
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.Audits.GenericIssueDetails> FormIssues
        {
            get
            {
                return formIssues;
            }
        }
    }
}

namespace CefSharp.DevTools.Audits
{
    using System.Linq;

    /// <summary>
    /// The encoding to use.
    /// </summary>
    public enum GetEncodedResponseEncoding
    {
        /// <summary>
        /// webp
        /// </summary>
        [EnumMember(Value = ("webp"))]
        Webp,
        /// <summary>
        /// jpeg
        /// </summary>
        [EnumMember(Value = ("jpeg"))]
        Jpeg,
        /// <summary>
        /// png
        /// </summary>
        [EnumMember(Value = ("png"))]
        Png
    }

    /// <summary>
    /// Audits domain allows investigation of page violations and possible improvements.
    /// </summary>
    public partial class AuditsClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// Audits
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public AuditsClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// IssueAdded
        /// </summary>
        public event System.EventHandler<IssueAddedEventArgs> IssueAdded
        {
            add
            {
                _client.AddEventHandler<IssueAddedEventArgs>("Audits.issueAdded", value);
            }

            remove
            {
                _client.RemoveEventHandler<IssueAddedEventArgs>("Audits.issueAdded", value);
            }
        }

        partial void ValidateGetEncodedResponse(string requestId, CefSharp.DevTools.Audits.GetEncodedResponseEncoding encoding, double? quality = null, bool? sizeOnly = null);
        /// <summary>
        /// Returns the response body and size if it were re-encoded with the specified settings. Only
        /// applies to images.
        /// </summary>
        /// <param name = "requestId">Identifier of the network request to get content for.</param>
        /// <param name = "encoding">The encoding to use.</param>
        /// <param name = "quality">The quality of the encoding (0-1). (defaults to 1)</param>
        /// <param name = "sizeOnly">Whether to only return the size information (defaults to false).</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetEncodedResponseResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetEncodedResponseResponse> GetEncodedResponseAsync(string requestId, CefSharp.DevTools.Audits.GetEncodedResponseEncoding encoding, double? quality = null, bool? sizeOnly = null)
        {
            ValidateGetEncodedResponse(requestId, encoding, quality, sizeOnly);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("requestId", requestId);
            dict.Add("encoding", EnumToString(encoding));
            if (quality.HasValue)
            {
                dict.Add("quality", quality.Value);
            }

            if (sizeOnly.HasValue)
            {
                dict.Add("sizeOnly", sizeOnly.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<GetEncodedResponseResponse>("Audits.getEncodedResponse", dict);
        }

        /// <summary>
        /// Disables issues domain, prevents further issues from being reported to the client.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DisableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Audits.disable", dict);
        }

        /// <summary>
        /// Enables issues domain, sends the issues collected so far to the client by means of the
        /// `issueAdded` event.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> EnableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Audits.enable", dict);
        }

        partial void ValidateCheckContrast(bool? reportAAA = null);
        /// <summary>
        /// Runs the contrast check for the target page. Found issues are reported
        /// using Audits.issueAdded event.
        /// </summary>
        /// <param name = "reportAAA">Whether to report WCAG AAA level issues. Default is false.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> CheckContrastAsync(bool? reportAAA = null)
        {
            ValidateCheckContrast(reportAAA);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (reportAAA.HasValue)
            {
                dict.Add("reportAAA", reportAAA.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Audits.checkContrast", dict);
        }

        /// <summary>
        /// Runs the form issues check for the target page. Found issues are reported
        /// using Audits.issueAdded event.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;CheckFormsIssuesResponse&gt;</returns>
        public System.Threading.Tasks.Task<CheckFormsIssuesResponse> CheckFormsIssuesAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<CheckFormsIssuesResponse>("Audits.checkFormsIssues", dict);
        }
    }
}

namespace CefSharp.DevTools.Autofill
{
    using System.Linq;

    /// <summary>
    /// Defines commands and events for Autofill.
    /// </summary>
    public partial class AutofillClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// Autofill
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public AutofillClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// Emitted when an address form is filled.
        /// </summary>
        public event System.EventHandler<AddressFormFilledEventArgs> AddressFormFilled
        {
            add
            {
                _client.AddEventHandler<AddressFormFilledEventArgs>("Autofill.addressFormFilled", value);
            }

            remove
            {
                _client.RemoveEventHandler<AddressFormFilledEventArgs>("Autofill.addressFormFilled", value);
            }
        }

        partial void ValidateTrigger(int fieldId, CefSharp.DevTools.Autofill.CreditCard card, string frameId = null);
        /// <summary>
        /// Trigger autofill on a form identified by the fieldId.
        /// If the field and related form cannot be autofilled, returns an error.
        /// </summary>
        /// <param name = "fieldId">Identifies a field that serves as an anchor for autofill.</param>
        /// <param name = "card">Credit card information to fill out the form. Credit card data is not saved.</param>
        /// <param name = "frameId">Identifies the frame that field belongs to.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> TriggerAsync(int fieldId, CefSharp.DevTools.Autofill.CreditCard card, string frameId = null)
        {
            ValidateTrigger(fieldId, card, frameId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("fieldId", fieldId);
            dict.Add("card", card.ToDictionary());
            if (!(string.IsNullOrEmpty(frameId)))
            {
                dict.Add("frameId", frameId);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Autofill.trigger", dict);
        }

        partial void ValidateSetAddresses(System.Collections.Generic.IList<CefSharp.DevTools.Autofill.Address> addresses);
        /// <summary>
        /// Set addresses so that developers can verify their forms implementation.
        /// </summary>
        /// <param name = "addresses">addresses</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetAddressesAsync(System.Collections.Generic.IList<CefSharp.DevTools.Autofill.Address> addresses)
        {
            ValidateSetAddresses(addresses);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("addresses", addresses.Select(x => x.ToDictionary()));
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Autofill.setAddresses", dict);
        }

        /// <summary>
        /// Disables autofill domain notifications.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DisableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Autofill.disable", dict);
        }

        /// <summary>
        /// Enables autofill domain notifications.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> EnableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Autofill.enable", dict);
        }
    }
}

namespace CefSharp.DevTools.BackgroundService
{
    using System.Linq;

    /// <summary>
    /// Defines events for background web platform features.
    /// </summary>
    public partial class BackgroundServiceClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// BackgroundService
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public BackgroundServiceClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// Called when the recording state for the service has been updated.
        /// </summary>
        public event System.EventHandler<RecordingStateChangedEventArgs> RecordingStateChanged
        {
            add
            {
                _client.AddEventHandler<RecordingStateChangedEventArgs>("BackgroundService.recordingStateChanged", value);
            }

            remove
            {
                _client.RemoveEventHandler<RecordingStateChangedEventArgs>("BackgroundService.recordingStateChanged", value);
            }
        }

        /// <summary>
        /// Called with all existing backgroundServiceEvents when enabled, and all new
        /// events afterwards if enabled and recording.
        /// </summary>
        public event System.EventHandler<BackgroundServiceEventReceivedEventArgs> BackgroundServiceEventReceived
        {
            add
            {
                _client.AddEventHandler<BackgroundServiceEventReceivedEventArgs>("BackgroundService.backgroundServiceEventReceived", value);
            }

            remove
            {
                _client.RemoveEventHandler<BackgroundServiceEventReceivedEventArgs>("BackgroundService.backgroundServiceEventReceived", value);
            }
        }

        partial void ValidateStartObserving(CefSharp.DevTools.BackgroundService.ServiceName service);
        /// <summary>
        /// Enables event updates for the service.
        /// </summary>
        /// <param name = "service">service</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> StartObservingAsync(CefSharp.DevTools.BackgroundService.ServiceName service)
        {
            ValidateStartObserving(service);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("service", EnumToString(service));
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("BackgroundService.startObserving", dict);
        }

        partial void ValidateStopObserving(CefSharp.DevTools.BackgroundService.ServiceName service);
        /// <summary>
        /// Disables event updates for the service.
        /// </summary>
        /// <param name = "service">service</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> StopObservingAsync(CefSharp.DevTools.BackgroundService.ServiceName service)
        {
            ValidateStopObserving(service);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("service", EnumToString(service));
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("BackgroundService.stopObserving", dict);
        }

        partial void ValidateSetRecording(bool shouldRecord, CefSharp.DevTools.BackgroundService.ServiceName service);
        /// <summary>
        /// Set the recording state for the service.
        /// </summary>
        /// <param name = "shouldRecord">shouldRecord</param>
        /// <param name = "service">service</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetRecordingAsync(bool shouldRecord, CefSharp.DevTools.BackgroundService.ServiceName service)
        {
            ValidateSetRecording(shouldRecord, service);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("shouldRecord", shouldRecord);
            dict.Add("service", EnumToString(service));
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("BackgroundService.setRecording", dict);
        }

        partial void ValidateClearEvents(CefSharp.DevTools.BackgroundService.ServiceName service);
        /// <summary>
        /// Clears all stored data for the service.
        /// </summary>
        /// <param name = "service">service</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ClearEventsAsync(CefSharp.DevTools.BackgroundService.ServiceName service)
        {
            ValidateClearEvents(service);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("service", EnumToString(service));
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("BackgroundService.clearEvents", dict);
        }
    }
}

namespace CefSharp.DevTools.Browser
{
    /// <summary>
    /// GetVersionResponse
    /// </summary>
    [DataContract]
    public class GetVersionResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string protocolVersion
        {
            get;
            set;
        }

        /// <summary>
        /// protocolVersion
        /// </summary>
        public string ProtocolVersion
        {
            get
            {
                return protocolVersion;
            }
        }

        [DataMember]
        internal string product
        {
            get;
            set;
        }

        /// <summary>
        /// product
        /// </summary>
        public string Product
        {
            get
            {
                return product;
            }
        }

        [DataMember]
        internal string revision
        {
            get;
            set;
        }

        /// <summary>
        /// revision
        /// </summary>
        public string Revision
        {
            get
            {
                return revision;
            }
        }

        [DataMember]
        internal string userAgent
        {
            get;
            set;
        }

        /// <summary>
        /// userAgent
        /// </summary>
        public string UserAgent
        {
            get
            {
                return userAgent;
            }
        }

        [DataMember]
        internal string jsVersion
        {
            get;
            set;
        }

        /// <summary>
        /// jsVersion
        /// </summary>
        public string JsVersion
        {
            get
            {
                return jsVersion;
            }
        }
    }
}

namespace CefSharp.DevTools.Browser
{
    /// <summary>
    /// GetBrowserCommandLineResponse
    /// </summary>
    [DataContract]
    public class GetBrowserCommandLineResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string[] arguments
        {
            get;
            set;
        }

        /// <summary>
        /// arguments
        /// </summary>
        public string[] Arguments
        {
            get
            {
                return arguments;
            }
        }
    }
}

namespace CefSharp.DevTools.Browser
{
    /// <summary>
    /// GetHistogramsResponse
    /// </summary>
    [DataContract]
    public class GetHistogramsResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.Browser.Histogram> histograms
        {
            get;
            set;
        }

        /// <summary>
        /// histograms
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.Browser.Histogram> Histograms
        {
            get
            {
                return histograms;
            }
        }
    }
}

namespace CefSharp.DevTools.Browser
{
    /// <summary>
    /// GetHistogramResponse
    /// </summary>
    [DataContract]
    public class GetHistogramResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.Browser.Histogram histogram
        {
            get;
            set;
        }

        /// <summary>
        /// histogram
        /// </summary>
        public CefSharp.DevTools.Browser.Histogram Histogram
        {
            get
            {
                return histogram;
            }
        }
    }
}

namespace CefSharp.DevTools.Browser
{
    /// <summary>
    /// GetWindowBoundsResponse
    /// </summary>
    [DataContract]
    public class GetWindowBoundsResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.Browser.Bounds bounds
        {
            get;
            set;
        }

        /// <summary>
        /// bounds
        /// </summary>
        public CefSharp.DevTools.Browser.Bounds Bounds
        {
            get
            {
                return bounds;
            }
        }
    }
}

namespace CefSharp.DevTools.Browser
{
    /// <summary>
    /// GetWindowForTargetResponse
    /// </summary>
    [DataContract]
    public class GetWindowForTargetResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal int windowId
        {
            get;
            set;
        }

        /// <summary>
        /// windowId
        /// </summary>
        public int WindowId
        {
            get
            {
                return windowId;
            }
        }

        [DataMember]
        internal CefSharp.DevTools.Browser.Bounds bounds
        {
            get;
            set;
        }

        /// <summary>
        /// bounds
        /// </summary>
        public CefSharp.DevTools.Browser.Bounds Bounds
        {
            get
            {
                return bounds;
            }
        }
    }
}

namespace CefSharp.DevTools.Browser
{
    using System.Linq;

    /// <summary>
    /// Whether to allow all or deny all download requests, or use default Chrome behavior if
    /// available (otherwise deny). |allowAndName| allows download and names files according to
    /// their download guids.
    /// </summary>
    public enum SetDownloadBehaviorBehavior
    {
        /// <summary>
        /// deny
        /// </summary>
        [EnumMember(Value = ("deny"))]
        Deny,
        /// <summary>
        /// allow
        /// </summary>
        [EnumMember(Value = ("allow"))]
        Allow,
        /// <summary>
        /// allowAndName
        /// </summary>
        [EnumMember(Value = ("allowAndName"))]
        AllowAndName,
        /// <summary>
        /// default
        /// </summary>
        [EnumMember(Value = ("default"))]
        Default
    }

    /// <summary>
    /// The Browser domain defines methods and events for browser managing.
    /// </summary>
    public partial class BrowserClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// Browser
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public BrowserClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// Fired when page is about to start a download.
        /// </summary>
        public event System.EventHandler<DownloadWillBeginEventArgs> DownloadWillBegin
        {
            add
            {
                _client.AddEventHandler<DownloadWillBeginEventArgs>("Browser.downloadWillBegin", value);
            }

            remove
            {
                _client.RemoveEventHandler<DownloadWillBeginEventArgs>("Browser.downloadWillBegin", value);
            }
        }

        /// <summary>
        /// Fired when download makes progress. Last call has |done| == true.
        /// </summary>
        public event System.EventHandler<DownloadProgressEventArgs> DownloadProgress
        {
            add
            {
                _client.AddEventHandler<DownloadProgressEventArgs>("Browser.downloadProgress", value);
            }

            remove
            {
                _client.RemoveEventHandler<DownloadProgressEventArgs>("Browser.downloadProgress", value);
            }
        }

        partial void ValidateSetPermission(CefSharp.DevTools.Browser.PermissionDescriptor permission, CefSharp.DevTools.Browser.PermissionSetting setting, string origin = null, string browserContextId = null);
        /// <summary>
        /// Set permission settings for given origin.
        /// </summary>
        /// <param name = "permission">Descriptor of permission to override.</param>
        /// <param name = "setting">Setting of the permission.</param>
        /// <param name = "origin">Origin the permission applies to, all origins if not specified.</param>
        /// <param name = "browserContextId">Context to override. When omitted, default browser context is used.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetPermissionAsync(CefSharp.DevTools.Browser.PermissionDescriptor permission, CefSharp.DevTools.Browser.PermissionSetting setting, string origin = null, string browserContextId = null)
        {
            ValidateSetPermission(permission, setting, origin, browserContextId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("permission", permission.ToDictionary());
            dict.Add("setting", EnumToString(setting));
            if (!(string.IsNullOrEmpty(origin)))
            {
                dict.Add("origin", origin);
            }

            if (!(string.IsNullOrEmpty(browserContextId)))
            {
                dict.Add("browserContextId", browserContextId);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Browser.setPermission", dict);
        }

        partial void ValidateGrantPermissions(CefSharp.DevTools.Browser.PermissionType[] permissions, string origin = null, string browserContextId = null);
        /// <summary>
        /// Grant specific permissions to the given origin and reject all others.
        /// </summary>
        /// <param name = "permissions">permissions</param>
        /// <param name = "origin">Origin the permission applies to, all origins if not specified.</param>
        /// <param name = "browserContextId">BrowserContext to override permissions. When omitted, default browser context is used.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> GrantPermissionsAsync(CefSharp.DevTools.Browser.PermissionType[] permissions, string origin = null, string browserContextId = null)
        {
            ValidateGrantPermissions(permissions, origin, browserContextId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("permissions", EnumToString(permissions));
            if (!(string.IsNullOrEmpty(origin)))
            {
                dict.Add("origin", origin);
            }

            if (!(string.IsNullOrEmpty(browserContextId)))
            {
                dict.Add("browserContextId", browserContextId);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Browser.grantPermissions", dict);
        }

        partial void ValidateResetPermissions(string browserContextId = null);
        /// <summary>
        /// Reset all permission management for all origins.
        /// </summary>
        /// <param name = "browserContextId">BrowserContext to reset permissions. When omitted, default browser context is used.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ResetPermissionsAsync(string browserContextId = null)
        {
            ValidateResetPermissions(browserContextId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (!(string.IsNullOrEmpty(browserContextId)))
            {
                dict.Add("browserContextId", browserContextId);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Browser.resetPermissions", dict);
        }

        partial void ValidateSetDownloadBehavior(CefSharp.DevTools.Browser.SetDownloadBehaviorBehavior behavior, string browserContextId = null, string downloadPath = null, bool? eventsEnabled = null);
        /// <summary>
        /// Set the behavior when downloading a file.
        /// </summary>
        /// <param name = "behavior">Whether to allow all or deny all download requests, or use default Chrome behavior ifavailable (otherwise deny). |allowAndName| allows download and names files according totheir download guids.</param>
        /// <param name = "browserContextId">BrowserContext to set download behavior. When omitted, default browser context is used.</param>
        /// <param name = "downloadPath">The default path to save downloaded files to. This is required if behavior is set to 'allow'or 'allowAndName'.</param>
        /// <param name = "eventsEnabled">Whether to emit download events (defaults to false).</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetDownloadBehaviorAsync(CefSharp.DevTools.Browser.SetDownloadBehaviorBehavior behavior, string browserContextId = null, string downloadPath = null, bool? eventsEnabled = null)
        {
            ValidateSetDownloadBehavior(behavior, browserContextId, downloadPath, eventsEnabled);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("behavior", EnumToString(behavior));
            if (!(string.IsNullOrEmpty(browserContextId)))
            {
                dict.Add("browserContextId", browserContextId);
            }

            if (!(string.IsNullOrEmpty(downloadPath)))
            {
                dict.Add("downloadPath", downloadPath);
            }

            if (eventsEnabled.HasValue)
            {
                dict.Add("eventsEnabled", eventsEnabled.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Browser.setDownloadBehavior", dict);
        }

        partial void ValidateCancelDownload(string guid, string browserContextId = null);
        /// <summary>
        /// Cancel a download if in progress
        /// </summary>
        /// <param name = "guid">Global unique identifier of the download.</param>
        /// <param name = "browserContextId">BrowserContext to perform the action in. When omitted, default browser context is used.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> CancelDownloadAsync(string guid, string browserContextId = null)
        {
            ValidateCancelDownload(guid, browserContextId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("guid", guid);
            if (!(string.IsNullOrEmpty(browserContextId)))
            {
                dict.Add("browserContextId", browserContextId);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Browser.cancelDownload", dict);
        }

        /// <summary>
        /// Close browser gracefully.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> CloseAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Browser.close", dict);
        }

        /// <summary>
        /// Crashes browser on the main thread.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> CrashAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Browser.crash", dict);
        }

        /// <summary>
        /// Crashes GPU process.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> CrashGpuProcessAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Browser.crashGpuProcess", dict);
        }

        /// <summary>
        /// Returns version information.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetVersionResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetVersionResponse> GetVersionAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<GetVersionResponse>("Browser.getVersion", dict);
        }

        /// <summary>
        /// Returns the command line switches for the browser process if, and only if
        /// --enable-automation is on the commandline.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetBrowserCommandLineResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetBrowserCommandLineResponse> GetBrowserCommandLineAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<GetBrowserCommandLineResponse>("Browser.getBrowserCommandLine", dict);
        }

        partial void ValidateGetHistograms(string query = null, bool? delta = null);
        /// <summary>
        /// Get Chrome histograms.
        /// </summary>
        /// <param name = "query">Requested substring in name. Only histograms which have query as asubstring in their name are extracted. An empty or absent query returnsall histograms.</param>
        /// <param name = "delta">If true, retrieve delta since last delta call.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetHistogramsResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetHistogramsResponse> GetHistogramsAsync(string query = null, bool? delta = null)
        {
            ValidateGetHistograms(query, delta);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (!(string.IsNullOrEmpty(query)))
            {
                dict.Add("query", query);
            }

            if (delta.HasValue)
            {
                dict.Add("delta", delta.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<GetHistogramsResponse>("Browser.getHistograms", dict);
        }

        partial void ValidateGetHistogram(string name, bool? delta = null);
        /// <summary>
        /// Get a Chrome histogram by name.
        /// </summary>
        /// <param name = "name">Requested histogram name.</param>
        /// <param name = "delta">If true, retrieve delta since last delta call.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetHistogramResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetHistogramResponse> GetHistogramAsync(string name, bool? delta = null)
        {
            ValidateGetHistogram(name, delta);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("name", name);
            if (delta.HasValue)
            {
                dict.Add("delta", delta.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<GetHistogramResponse>("Browser.getHistogram", dict);
        }

        partial void ValidateGetWindowBounds(int windowId);
        /// <summary>
        /// Get position and size of the browser window.
        /// </summary>
        /// <param name = "windowId">Browser window id.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetWindowBoundsResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetWindowBoundsResponse> GetWindowBoundsAsync(int windowId)
        {
            ValidateGetWindowBounds(windowId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("windowId", windowId);
            return _client.ExecuteDevToolsMethodAsync<GetWindowBoundsResponse>("Browser.getWindowBounds", dict);
        }

        partial void ValidateGetWindowForTarget(string targetId = null);
        /// <summary>
        /// Get the browser window that contains the devtools target.
        /// </summary>
        /// <param name = "targetId">Devtools agent host id. If called as a part of the session, associated targetId is used.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetWindowForTargetResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetWindowForTargetResponse> GetWindowForTargetAsync(string targetId = null)
        {
            ValidateGetWindowForTarget(targetId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (!(string.IsNullOrEmpty(targetId)))
            {
                dict.Add("targetId", targetId);
            }

            return _client.ExecuteDevToolsMethodAsync<GetWindowForTargetResponse>("Browser.getWindowForTarget", dict);
        }

        partial void ValidateSetWindowBounds(int windowId, CefSharp.DevTools.Browser.Bounds bounds);
        /// <summary>
        /// Set position and/or size of the browser window.
        /// </summary>
        /// <param name = "windowId">Browser window id.</param>
        /// <param name = "bounds">New window bounds. The 'minimized', 'maximized' and 'fullscreen' states cannot be combinedwith 'left', 'top', 'width' or 'height'. Leaves unspecified fields unchanged.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetWindowBoundsAsync(int windowId, CefSharp.DevTools.Browser.Bounds bounds)
        {
            ValidateSetWindowBounds(windowId, bounds);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("windowId", windowId);
            dict.Add("bounds", bounds.ToDictionary());
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Browser.setWindowBounds", dict);
        }

        partial void ValidateSetDockTile(string badgeLabel = null, byte[] image = null);
        /// <summary>
        /// Set dock tile details, platform-specific.
        /// </summary>
        /// <param name = "badgeLabel">badgeLabel</param>
        /// <param name = "image">Png encoded image.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetDockTileAsync(string badgeLabel = null, byte[] image = null)
        {
            ValidateSetDockTile(badgeLabel, image);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (!(string.IsNullOrEmpty(badgeLabel)))
            {
                dict.Add("badgeLabel", badgeLabel);
            }

            if ((image) != (null))
            {
                dict.Add("image", ToBase64String(image));
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Browser.setDockTile", dict);
        }

        partial void ValidateExecuteBrowserCommand(CefSharp.DevTools.Browser.BrowserCommandId commandId);
        /// <summary>
        /// Invoke custom browser commands used by telemetry.
        /// </summary>
        /// <param name = "commandId">commandId</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ExecuteBrowserCommandAsync(CefSharp.DevTools.Browser.BrowserCommandId commandId)
        {
            ValidateExecuteBrowserCommand(commandId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("commandId", EnumToString(commandId));
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Browser.executeBrowserCommand", dict);
        }

        partial void ValidateAddPrivacySandboxEnrollmentOverride(string url);
        /// <summary>
        /// Allows a site to use privacy sandbox features that require enrollment
        /// without the site actually being enrolled. Only supported on page targets.
        /// </summary>
        /// <param name = "url">url</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> AddPrivacySandboxEnrollmentOverrideAsync(string url)
        {
            ValidateAddPrivacySandboxEnrollmentOverride(url);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("url", url);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Browser.addPrivacySandboxEnrollmentOverride", dict);
        }
    }
}

namespace CefSharp.DevTools.CSS
{
    /// <summary>
    /// AddRuleResponse
    /// </summary>
    [DataContract]
    public class AddRuleResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.CSS.CSSRule rule
        {
            get;
            set;
        }

        /// <summary>
        /// rule
        /// </summary>
        public CefSharp.DevTools.CSS.CSSRule Rule
        {
            get
            {
                return rule;
            }
        }
    }
}

namespace CefSharp.DevTools.CSS
{
    /// <summary>
    /// CollectClassNamesResponse
    /// </summary>
    [DataContract]
    public class CollectClassNamesResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string[] classNames
        {
            get;
            set;
        }

        /// <summary>
        /// classNames
        /// </summary>
        public string[] ClassNames
        {
            get
            {
                return classNames;
            }
        }
    }
}

namespace CefSharp.DevTools.CSS
{
    /// <summary>
    /// CreateStyleSheetResponse
    /// </summary>
    [DataContract]
    public class CreateStyleSheetResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string styleSheetId
        {
            get;
            set;
        }

        /// <summary>
        /// styleSheetId
        /// </summary>
        public string StyleSheetId
        {
            get
            {
                return styleSheetId;
            }
        }
    }
}

namespace CefSharp.DevTools.CSS
{
    /// <summary>
    /// GetBackgroundColorsResponse
    /// </summary>
    [DataContract]
    public class GetBackgroundColorsResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string[] backgroundColors
        {
            get;
            set;
        }

        /// <summary>
        /// backgroundColors
        /// </summary>
        public string[] BackgroundColors
        {
            get
            {
                return backgroundColors;
            }
        }

        [DataMember]
        internal string computedFontSize
        {
            get;
            set;
        }

        /// <summary>
        /// computedFontSize
        /// </summary>
        public string ComputedFontSize
        {
            get
            {
                return computedFontSize;
            }
        }

        [DataMember]
        internal string computedFontWeight
        {
            get;
            set;
        }

        /// <summary>
        /// computedFontWeight
        /// </summary>
        public string ComputedFontWeight
        {
            get
            {
                return computedFontWeight;
            }
        }
    }
}

namespace CefSharp.DevTools.CSS
{
    /// <summary>
    /// GetComputedStyleForNodeResponse
    /// </summary>
    [DataContract]
    public class GetComputedStyleForNodeResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.CSS.CSSComputedStyleProperty> computedStyle
        {
            get;
            set;
        }

        /// <summary>
        /// computedStyle
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.CSS.CSSComputedStyleProperty> ComputedStyle
        {
            get
            {
                return computedStyle;
            }
        }
    }
}

namespace CefSharp.DevTools.CSS
{
    /// <summary>
    /// GetInlineStylesForNodeResponse
    /// </summary>
    [DataContract]
    public class GetInlineStylesForNodeResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.CSS.CSSStyle inlineStyle
        {
            get;
            set;
        }

        /// <summary>
        /// inlineStyle
        /// </summary>
        public CefSharp.DevTools.CSS.CSSStyle InlineStyle
        {
            get
            {
                return inlineStyle;
            }
        }

        [DataMember]
        internal CefSharp.DevTools.CSS.CSSStyle attributesStyle
        {
            get;
            set;
        }

        /// <summary>
        /// attributesStyle
        /// </summary>
        public CefSharp.DevTools.CSS.CSSStyle AttributesStyle
        {
            get
            {
                return attributesStyle;
            }
        }
    }
}

namespace CefSharp.DevTools.CSS
{
    /// <summary>
    /// GetMatchedStylesForNodeResponse
    /// </summary>
    [DataContract]
    public class GetMatchedStylesForNodeResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.CSS.CSSStyle inlineStyle
        {
            get;
            set;
        }

        /// <summary>
        /// inlineStyle
        /// </summary>
        public CefSharp.DevTools.CSS.CSSStyle InlineStyle
        {
            get
            {
                return inlineStyle;
            }
        }

        [DataMember]
        internal CefSharp.DevTools.CSS.CSSStyle attributesStyle
        {
            get;
            set;
        }

        /// <summary>
        /// attributesStyle
        /// </summary>
        public CefSharp.DevTools.CSS.CSSStyle AttributesStyle
        {
            get
            {
                return attributesStyle;
            }
        }

        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.CSS.RuleMatch> matchedCSSRules
        {
            get;
            set;
        }

        /// <summary>
        /// matchedCSSRules
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.CSS.RuleMatch> MatchedCSSRules
        {
            get
            {
                return matchedCSSRules;
            }
        }

        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.CSS.PseudoElementMatches> pseudoElements
        {
            get;
            set;
        }

        /// <summary>
        /// pseudoElements
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.CSS.PseudoElementMatches> PseudoElements
        {
            get
            {
                return pseudoElements;
            }
        }

        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.CSS.InheritedStyleEntry> inherited
        {
            get;
            set;
        }

        /// <summary>
        /// inherited
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.CSS.InheritedStyleEntry> Inherited
        {
            get
            {
                return inherited;
            }
        }

        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.CSS.InheritedPseudoElementMatches> inheritedPseudoElements
        {
            get;
            set;
        }

        /// <summary>
        /// inheritedPseudoElements
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.CSS.InheritedPseudoElementMatches> InheritedPseudoElements
        {
            get
            {
                return inheritedPseudoElements;
            }
        }

        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.CSS.CSSKeyframesRule> cssKeyframesRules
        {
            get;
            set;
        }

        /// <summary>
        /// cssKeyframesRules
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.CSS.CSSKeyframesRule> CssKeyframesRules
        {
            get
            {
                return cssKeyframesRules;
            }
        }

        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.CSS.CSSPositionFallbackRule> cssPositionFallbackRules
        {
            get;
            set;
        }

        /// <summary>
        /// cssPositionFallbackRules
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.CSS.CSSPositionFallbackRule> CssPositionFallbackRules
        {
            get
            {
                return cssPositionFallbackRules;
            }
        }

        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.CSS.CSSPropertyRule> cssPropertyRules
        {
            get;
            set;
        }

        /// <summary>
        /// cssPropertyRules
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.CSS.CSSPropertyRule> CssPropertyRules
        {
            get
            {
                return cssPropertyRules;
            }
        }

        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.CSS.CSSPropertyRegistration> cssPropertyRegistrations
        {
            get;
            set;
        }

        /// <summary>
        /// cssPropertyRegistrations
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.CSS.CSSPropertyRegistration> CssPropertyRegistrations
        {
            get
            {
                return cssPropertyRegistrations;
            }
        }

        [DataMember]
        internal CefSharp.DevTools.CSS.CSSFontPaletteValuesRule cssFontPaletteValuesRule
        {
            get;
            set;
        }

        /// <summary>
        /// cssFontPaletteValuesRule
        /// </summary>
        public CefSharp.DevTools.CSS.CSSFontPaletteValuesRule CssFontPaletteValuesRule
        {
            get
            {
                return cssFontPaletteValuesRule;
            }
        }

        [DataMember]
        internal int? parentLayoutNodeId
        {
            get;
            set;
        }

        /// <summary>
        /// parentLayoutNodeId
        /// </summary>
        public int? ParentLayoutNodeId
        {
            get
            {
                return parentLayoutNodeId;
            }
        }
    }
}

namespace CefSharp.DevTools.CSS
{
    /// <summary>
    /// GetMediaQueriesResponse
    /// </summary>
    [DataContract]
    public class GetMediaQueriesResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.CSS.CSSMedia> medias
        {
            get;
            set;
        }

        /// <summary>
        /// medias
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.CSS.CSSMedia> Medias
        {
            get
            {
                return medias;
            }
        }
    }
}

namespace CefSharp.DevTools.CSS
{
    /// <summary>
    /// GetPlatformFontsForNodeResponse
    /// </summary>
    [DataContract]
    public class GetPlatformFontsForNodeResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.CSS.PlatformFontUsage> fonts
        {
            get;
            set;
        }

        /// <summary>
        /// fonts
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.CSS.PlatformFontUsage> Fonts
        {
            get
            {
                return fonts;
            }
        }
    }
}

namespace CefSharp.DevTools.CSS
{
    /// <summary>
    /// GetStyleSheetTextResponse
    /// </summary>
    [DataContract]
    public class GetStyleSheetTextResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string text
        {
            get;
            set;
        }

        /// <summary>
        /// text
        /// </summary>
        public string Text
        {
            get
            {
                return text;
            }
        }
    }
}

namespace CefSharp.DevTools.CSS
{
    /// <summary>
    /// GetLayersForNodeResponse
    /// </summary>
    [DataContract]
    public class GetLayersForNodeResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.CSS.CSSLayerData rootLayer
        {
            get;
            set;
        }

        /// <summary>
        /// rootLayer
        /// </summary>
        public CefSharp.DevTools.CSS.CSSLayerData RootLayer
        {
            get
            {
                return rootLayer;
            }
        }
    }
}

namespace CefSharp.DevTools.CSS
{
    /// <summary>
    /// TakeComputedStyleUpdatesResponse
    /// </summary>
    [DataContract]
    public class TakeComputedStyleUpdatesResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal int[] nodeIds
        {
            get;
            set;
        }

        /// <summary>
        /// nodeIds
        /// </summary>
        public int[] NodeIds
        {
            get
            {
                return nodeIds;
            }
        }
    }
}

namespace CefSharp.DevTools.CSS
{
    /// <summary>
    /// SetPropertyRulePropertyNameResponse
    /// </summary>
    [DataContract]
    public class SetPropertyRulePropertyNameResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.CSS.Value propertyName
        {
            get;
            set;
        }

        /// <summary>
        /// propertyName
        /// </summary>
        public CefSharp.DevTools.CSS.Value PropertyName
        {
            get
            {
                return propertyName;
            }
        }
    }
}

namespace CefSharp.DevTools.CSS
{
    /// <summary>
    /// SetKeyframeKeyResponse
    /// </summary>
    [DataContract]
    public class SetKeyframeKeyResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.CSS.Value keyText
        {
            get;
            set;
        }

        /// <summary>
        /// keyText
        /// </summary>
        public CefSharp.DevTools.CSS.Value KeyText
        {
            get
            {
                return keyText;
            }
        }
    }
}

namespace CefSharp.DevTools.CSS
{
    /// <summary>
    /// SetMediaTextResponse
    /// </summary>
    [DataContract]
    public class SetMediaTextResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.CSS.CSSMedia media
        {
            get;
            set;
        }

        /// <summary>
        /// media
        /// </summary>
        public CefSharp.DevTools.CSS.CSSMedia Media
        {
            get
            {
                return media;
            }
        }
    }
}

namespace CefSharp.DevTools.CSS
{
    /// <summary>
    /// SetContainerQueryTextResponse
    /// </summary>
    [DataContract]
    public class SetContainerQueryTextResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.CSS.CSSContainerQuery containerQuery
        {
            get;
            set;
        }

        /// <summary>
        /// containerQuery
        /// </summary>
        public CefSharp.DevTools.CSS.CSSContainerQuery ContainerQuery
        {
            get
            {
                return containerQuery;
            }
        }
    }
}

namespace CefSharp.DevTools.CSS
{
    /// <summary>
    /// SetSupportsTextResponse
    /// </summary>
    [DataContract]
    public class SetSupportsTextResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.CSS.CSSSupports supports
        {
            get;
            set;
        }

        /// <summary>
        /// supports
        /// </summary>
        public CefSharp.DevTools.CSS.CSSSupports Supports
        {
            get
            {
                return supports;
            }
        }
    }
}

namespace CefSharp.DevTools.CSS
{
    /// <summary>
    /// SetScopeTextResponse
    /// </summary>
    [DataContract]
    public class SetScopeTextResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.CSS.CSSScope scope
        {
            get;
            set;
        }

        /// <summary>
        /// scope
        /// </summary>
        public CefSharp.DevTools.CSS.CSSScope Scope
        {
            get
            {
                return scope;
            }
        }
    }
}

namespace CefSharp.DevTools.CSS
{
    /// <summary>
    /// SetRuleSelectorResponse
    /// </summary>
    [DataContract]
    public class SetRuleSelectorResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.CSS.SelectorList selectorList
        {
            get;
            set;
        }

        /// <summary>
        /// selectorList
        /// </summary>
        public CefSharp.DevTools.CSS.SelectorList SelectorList
        {
            get
            {
                return selectorList;
            }
        }
    }
}

namespace CefSharp.DevTools.CSS
{
    /// <summary>
    /// SetStyleSheetTextResponse
    /// </summary>
    [DataContract]
    public class SetStyleSheetTextResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string sourceMapURL
        {
            get;
            set;
        }

        /// <summary>
        /// sourceMapURL
        /// </summary>
        public string SourceMapURL
        {
            get
            {
                return sourceMapURL;
            }
        }
    }
}

namespace CefSharp.DevTools.CSS
{
    /// <summary>
    /// SetStyleTextsResponse
    /// </summary>
    [DataContract]
    public class SetStyleTextsResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.CSS.CSSStyle> styles
        {
            get;
            set;
        }

        /// <summary>
        /// styles
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.CSS.CSSStyle> Styles
        {
            get
            {
                return styles;
            }
        }
    }
}

namespace CefSharp.DevTools.CSS
{
    /// <summary>
    /// StopRuleUsageTrackingResponse
    /// </summary>
    [DataContract]
    public class StopRuleUsageTrackingResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.CSS.RuleUsage> ruleUsage
        {
            get;
            set;
        }

        /// <summary>
        /// ruleUsage
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.CSS.RuleUsage> RuleUsage
        {
            get
            {
                return ruleUsage;
            }
        }
    }
}

namespace CefSharp.DevTools.CSS
{
    /// <summary>
    /// TakeCoverageDeltaResponse
    /// </summary>
    [DataContract]
    public class TakeCoverageDeltaResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.CSS.RuleUsage> coverage
        {
            get;
            set;
        }

        /// <summary>
        /// coverage
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.CSS.RuleUsage> Coverage
        {
            get
            {
                return coverage;
            }
        }

        [DataMember]
        internal double timestamp
        {
            get;
            set;
        }

        /// <summary>
        /// timestamp
        /// </summary>
        public double Timestamp
        {
            get
            {
                return timestamp;
            }
        }
    }
}

namespace CefSharp.DevTools.CSS
{
    using System.Linq;

    /// <summary>
    /// This domain exposes CSS read/write operations. All CSS objects (stylesheets, rules, and styles)
    /// have an associated `id` used in subsequent operations on the related object. Each object type has
    /// a specific `id` structure, and those are not interchangeable between objects of different kinds.
    /// CSS objects can be loaded using the `get*ForNode()` calls (which accept a DOM node id). A client
    /// can also keep track of stylesheets via the `styleSheetAdded`/`styleSheetRemoved` events and
    /// subsequently load the required stylesheet contents using the `getStyleSheet[Text]()` methods.
    /// </summary>
    public partial class CSSClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// CSS
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public CSSClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// Fires whenever a web font is updated.  A non-empty font parameter indicates a successfully loaded
        /// web font.
        /// </summary>
        public event System.EventHandler<FontsUpdatedEventArgs> FontsUpdated
        {
            add
            {
                _client.AddEventHandler<FontsUpdatedEventArgs>("CSS.fontsUpdated", value);
            }

            remove
            {
                _client.RemoveEventHandler<FontsUpdatedEventArgs>("CSS.fontsUpdated", value);
            }
        }

        /// <summary>
        /// Fires whenever a MediaQuery result changes (for example, after a browser window has been
        /// resized.) The current implementation considers only viewport-dependent media features.
        /// </summary>
        public event System.EventHandler<System.EventArgs> MediaQueryResultChanged
        {
            add
            {
                _client.AddEventHandler<System.EventArgs>("CSS.mediaQueryResultChanged", value);
            }

            remove
            {
                _client.RemoveEventHandler<System.EventArgs>("CSS.mediaQueryResultChanged", value);
            }
        }

        /// <summary>
        /// Fired whenever an active document stylesheet is added.
        /// </summary>
        public event System.EventHandler<StyleSheetAddedEventArgs> StyleSheetAdded
        {
            add
            {
                _client.AddEventHandler<StyleSheetAddedEventArgs>("CSS.styleSheetAdded", value);
            }

            remove
            {
                _client.RemoveEventHandler<StyleSheetAddedEventArgs>("CSS.styleSheetAdded", value);
            }
        }

        /// <summary>
        /// Fired whenever a stylesheet is changed as a result of the client operation.
        /// </summary>
        public event System.EventHandler<StyleSheetChangedEventArgs> StyleSheetChanged
        {
            add
            {
                _client.AddEventHandler<StyleSheetChangedEventArgs>("CSS.styleSheetChanged", value);
            }

            remove
            {
                _client.RemoveEventHandler<StyleSheetChangedEventArgs>("CSS.styleSheetChanged", value);
            }
        }

        /// <summary>
        /// Fired whenever an active document stylesheet is removed.
        /// </summary>
        public event System.EventHandler<StyleSheetRemovedEventArgs> StyleSheetRemoved
        {
            add
            {
                _client.AddEventHandler<StyleSheetRemovedEventArgs>("CSS.styleSheetRemoved", value);
            }

            remove
            {
                _client.RemoveEventHandler<StyleSheetRemovedEventArgs>("CSS.styleSheetRemoved", value);
            }
        }

        partial void ValidateAddRule(string styleSheetId, string ruleText, CefSharp.DevTools.CSS.SourceRange location, int? nodeForPropertySyntaxValidation = null);
        /// <summary>
        /// Inserts a new rule with the given `ruleText` in a stylesheet with given `styleSheetId`, at the
        /// position specified by `location`.
        /// </summary>
        /// <param name = "styleSheetId">The css style sheet identifier where a new rule should be inserted.</param>
        /// <param name = "ruleText">The text of a new rule.</param>
        /// <param name = "location">Text position of a new rule in the target style sheet.</param>
        /// <param name = "nodeForPropertySyntaxValidation">NodeId for the DOM node in whose context custom property declarations for registered properties should bevalidated. If omitted, declarations in the new rule text can only be validated statically, which may produceincorrect results if the declaration contains a var() for example.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;AddRuleResponse&gt;</returns>
        public System.Threading.Tasks.Task<AddRuleResponse> AddRuleAsync(string styleSheetId, string ruleText, CefSharp.DevTools.CSS.SourceRange location, int? nodeForPropertySyntaxValidation = null)
        {
            ValidateAddRule(styleSheetId, ruleText, location, nodeForPropertySyntaxValidation);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("styleSheetId", styleSheetId);
            dict.Add("ruleText", ruleText);
            dict.Add("location", location.ToDictionary());
            if (nodeForPropertySyntaxValidation.HasValue)
            {
                dict.Add("nodeForPropertySyntaxValidation", nodeForPropertySyntaxValidation.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<AddRuleResponse>("CSS.addRule", dict);
        }

        partial void ValidateCollectClassNames(string styleSheetId);
        /// <summary>
        /// Returns all class names from specified stylesheet.
        /// </summary>
        /// <param name = "styleSheetId">styleSheetId</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;CollectClassNamesResponse&gt;</returns>
        public System.Threading.Tasks.Task<CollectClassNamesResponse> CollectClassNamesAsync(string styleSheetId)
        {
            ValidateCollectClassNames(styleSheetId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("styleSheetId", styleSheetId);
            return _client.ExecuteDevToolsMethodAsync<CollectClassNamesResponse>("CSS.collectClassNames", dict);
        }

        partial void ValidateCreateStyleSheet(string frameId);
        /// <summary>
        /// Creates a new special &quot;via-inspector&quot; stylesheet in the frame with given `frameId`.
        /// </summary>
        /// <param name = "frameId">Identifier of the frame where "via-inspector" stylesheet should be created.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;CreateStyleSheetResponse&gt;</returns>
        public System.Threading.Tasks.Task<CreateStyleSheetResponse> CreateStyleSheetAsync(string frameId)
        {
            ValidateCreateStyleSheet(frameId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("frameId", frameId);
            return _client.ExecuteDevToolsMethodAsync<CreateStyleSheetResponse>("CSS.createStyleSheet", dict);
        }

        /// <summary>
        /// Disables the CSS agent for the given page.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DisableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("CSS.disable", dict);
        }

        /// <summary>
        /// Enables the CSS agent for the given page. Clients should not assume that the CSS agent has been
        /// enabled until the result of this command is received.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> EnableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("CSS.enable", dict);
        }

        partial void ValidateForcePseudoState(int nodeId, string[] forcedPseudoClasses);
        /// <summary>
        /// Ensures that the given node will have specified pseudo-classes whenever its style is computed by
        /// the browser.
        /// </summary>
        /// <param name = "nodeId">The element id for which to force the pseudo state.</param>
        /// <param name = "forcedPseudoClasses">Element pseudo classes to force when computing the element's style.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ForcePseudoStateAsync(int nodeId, string[] forcedPseudoClasses)
        {
            ValidateForcePseudoState(nodeId, forcedPseudoClasses);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("nodeId", nodeId);
            dict.Add("forcedPseudoClasses", forcedPseudoClasses);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("CSS.forcePseudoState", dict);
        }

        partial void ValidateGetBackgroundColors(int nodeId);
        /// <summary>
        /// GetBackgroundColors
        /// </summary>
        /// <param name = "nodeId">Id of the node to get background colors for.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetBackgroundColorsResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetBackgroundColorsResponse> GetBackgroundColorsAsync(int nodeId)
        {
            ValidateGetBackgroundColors(nodeId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("nodeId", nodeId);
            return _client.ExecuteDevToolsMethodAsync<GetBackgroundColorsResponse>("CSS.getBackgroundColors", dict);
        }

        partial void ValidateGetComputedStyleForNode(int nodeId);
        /// <summary>
        /// Returns the computed style for a DOM node identified by `nodeId`.
        /// </summary>
        /// <param name = "nodeId">nodeId</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetComputedStyleForNodeResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetComputedStyleForNodeResponse> GetComputedStyleForNodeAsync(int nodeId)
        {
            ValidateGetComputedStyleForNode(nodeId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("nodeId", nodeId);
            return _client.ExecuteDevToolsMethodAsync<GetComputedStyleForNodeResponse>("CSS.getComputedStyleForNode", dict);
        }

        partial void ValidateGetInlineStylesForNode(int nodeId);
        /// <summary>
        /// Returns the styles defined inline (explicitly in the &quot;style&quot; attribute and implicitly, using DOM
        /// attributes) for a DOM node identified by `nodeId`.
        /// </summary>
        /// <param name = "nodeId">nodeId</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetInlineStylesForNodeResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetInlineStylesForNodeResponse> GetInlineStylesForNodeAsync(int nodeId)
        {
            ValidateGetInlineStylesForNode(nodeId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("nodeId", nodeId);
            return _client.ExecuteDevToolsMethodAsync<GetInlineStylesForNodeResponse>("CSS.getInlineStylesForNode", dict);
        }

        partial void ValidateGetMatchedStylesForNode(int nodeId);
        /// <summary>
        /// Returns requested styles for a DOM node identified by `nodeId`.
        /// </summary>
        /// <param name = "nodeId">nodeId</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetMatchedStylesForNodeResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetMatchedStylesForNodeResponse> GetMatchedStylesForNodeAsync(int nodeId)
        {
            ValidateGetMatchedStylesForNode(nodeId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("nodeId", nodeId);
            return _client.ExecuteDevToolsMethodAsync<GetMatchedStylesForNodeResponse>("CSS.getMatchedStylesForNode", dict);
        }

        /// <summary>
        /// Returns all media queries parsed by the rendering engine.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetMediaQueriesResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetMediaQueriesResponse> GetMediaQueriesAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<GetMediaQueriesResponse>("CSS.getMediaQueries", dict);
        }

        partial void ValidateGetPlatformFontsForNode(int nodeId);
        /// <summary>
        /// Requests information about platform fonts which we used to render child TextNodes in the given
        /// node.
        /// </summary>
        /// <param name = "nodeId">nodeId</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetPlatformFontsForNodeResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetPlatformFontsForNodeResponse> GetPlatformFontsForNodeAsync(int nodeId)
        {
            ValidateGetPlatformFontsForNode(nodeId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("nodeId", nodeId);
            return _client.ExecuteDevToolsMethodAsync<GetPlatformFontsForNodeResponse>("CSS.getPlatformFontsForNode", dict);
        }

        partial void ValidateGetStyleSheetText(string styleSheetId);
        /// <summary>
        /// Returns the current textual content for a stylesheet.
        /// </summary>
        /// <param name = "styleSheetId">styleSheetId</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetStyleSheetTextResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetStyleSheetTextResponse> GetStyleSheetTextAsync(string styleSheetId)
        {
            ValidateGetStyleSheetText(styleSheetId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("styleSheetId", styleSheetId);
            return _client.ExecuteDevToolsMethodAsync<GetStyleSheetTextResponse>("CSS.getStyleSheetText", dict);
        }

        partial void ValidateGetLayersForNode(int nodeId);
        /// <summary>
        /// Returns all layers parsed by the rendering engine for the tree scope of a node.
        /// Given a DOM element identified by nodeId, getLayersForNode returns the root
        /// layer for the nearest ancestor document or shadow root. The layer root contains
        /// the full layer tree for the tree scope and their ordering.
        /// </summary>
        /// <param name = "nodeId">nodeId</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetLayersForNodeResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetLayersForNodeResponse> GetLayersForNodeAsync(int nodeId)
        {
            ValidateGetLayersForNode(nodeId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("nodeId", nodeId);
            return _client.ExecuteDevToolsMethodAsync<GetLayersForNodeResponse>("CSS.getLayersForNode", dict);
        }

        partial void ValidateTrackComputedStyleUpdates(System.Collections.Generic.IList<CefSharp.DevTools.CSS.CSSComputedStyleProperty> propertiesToTrack);
        /// <summary>
        /// Starts tracking the given computed styles for updates. The specified array of properties
        /// replaces the one previously specified. Pass empty array to disable tracking.
        /// Use takeComputedStyleUpdates to retrieve the list of nodes that had properties modified.
        /// The changes to computed style properties are only tracked for nodes pushed to the front-end
        /// by the DOM agent. If no changes to the tracked properties occur after the node has been pushed
        /// to the front-end, no updates will be issued for the node.
        /// </summary>
        /// <param name = "propertiesToTrack">propertiesToTrack</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> TrackComputedStyleUpdatesAsync(System.Collections.Generic.IList<CefSharp.DevTools.CSS.CSSComputedStyleProperty> propertiesToTrack)
        {
            ValidateTrackComputedStyleUpdates(propertiesToTrack);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("propertiesToTrack", propertiesToTrack.Select(x => x.ToDictionary()));
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("CSS.trackComputedStyleUpdates", dict);
        }

        /// <summary>
        /// Polls the next batch of computed style updates.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;TakeComputedStyleUpdatesResponse&gt;</returns>
        public System.Threading.Tasks.Task<TakeComputedStyleUpdatesResponse> TakeComputedStyleUpdatesAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<TakeComputedStyleUpdatesResponse>("CSS.takeComputedStyleUpdates", dict);
        }

        partial void ValidateSetEffectivePropertyValueForNode(int nodeId, string propertyName, string value);
        /// <summary>
        /// Find a rule with the given active property for the given node and set the new value for this
        /// property
        /// </summary>
        /// <param name = "nodeId">The element id for which to set property.</param>
        /// <param name = "propertyName">propertyName</param>
        /// <param name = "value">value</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetEffectivePropertyValueForNodeAsync(int nodeId, string propertyName, string value)
        {
            ValidateSetEffectivePropertyValueForNode(nodeId, propertyName, value);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("nodeId", nodeId);
            dict.Add("propertyName", propertyName);
            dict.Add("value", value);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("CSS.setEffectivePropertyValueForNode", dict);
        }

        partial void ValidateSetPropertyRulePropertyName(string styleSheetId, CefSharp.DevTools.CSS.SourceRange range, string propertyName);
        /// <summary>
        /// Modifies the property rule property name.
        /// </summary>
        /// <param name = "styleSheetId">styleSheetId</param>
        /// <param name = "range">range</param>
        /// <param name = "propertyName">propertyName</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;SetPropertyRulePropertyNameResponse&gt;</returns>
        public System.Threading.Tasks.Task<SetPropertyRulePropertyNameResponse> SetPropertyRulePropertyNameAsync(string styleSheetId, CefSharp.DevTools.CSS.SourceRange range, string propertyName)
        {
            ValidateSetPropertyRulePropertyName(styleSheetId, range, propertyName);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("styleSheetId", styleSheetId);
            dict.Add("range", range.ToDictionary());
            dict.Add("propertyName", propertyName);
            return _client.ExecuteDevToolsMethodAsync<SetPropertyRulePropertyNameResponse>("CSS.setPropertyRulePropertyName", dict);
        }

        partial void ValidateSetKeyframeKey(string styleSheetId, CefSharp.DevTools.CSS.SourceRange range, string keyText);
        /// <summary>
        /// Modifies the keyframe rule key text.
        /// </summary>
        /// <param name = "styleSheetId">styleSheetId</param>
        /// <param name = "range">range</param>
        /// <param name = "keyText">keyText</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;SetKeyframeKeyResponse&gt;</returns>
        public System.Threading.Tasks.Task<SetKeyframeKeyResponse> SetKeyframeKeyAsync(string styleSheetId, CefSharp.DevTools.CSS.SourceRange range, string keyText)
        {
            ValidateSetKeyframeKey(styleSheetId, range, keyText);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("styleSheetId", styleSheetId);
            dict.Add("range", range.ToDictionary());
            dict.Add("keyText", keyText);
            return _client.ExecuteDevToolsMethodAsync<SetKeyframeKeyResponse>("CSS.setKeyframeKey", dict);
        }

        partial void ValidateSetMediaText(string styleSheetId, CefSharp.DevTools.CSS.SourceRange range, string text);
        /// <summary>
        /// Modifies the rule selector.
        /// </summary>
        /// <param name = "styleSheetId">styleSheetId</param>
        /// <param name = "range">range</param>
        /// <param name = "text">text</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;SetMediaTextResponse&gt;</returns>
        public System.Threading.Tasks.Task<SetMediaTextResponse> SetMediaTextAsync(string styleSheetId, CefSharp.DevTools.CSS.SourceRange range, string text)
        {
            ValidateSetMediaText(styleSheetId, range, text);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("styleSheetId", styleSheetId);
            dict.Add("range", range.ToDictionary());
            dict.Add("text", text);
            return _client.ExecuteDevToolsMethodAsync<SetMediaTextResponse>("CSS.setMediaText", dict);
        }

        partial void ValidateSetContainerQueryText(string styleSheetId, CefSharp.DevTools.CSS.SourceRange range, string text);
        /// <summary>
        /// Modifies the expression of a container query.
        /// </summary>
        /// <param name = "styleSheetId">styleSheetId</param>
        /// <param name = "range">range</param>
        /// <param name = "text">text</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;SetContainerQueryTextResponse&gt;</returns>
        public System.Threading.Tasks.Task<SetContainerQueryTextResponse> SetContainerQueryTextAsync(string styleSheetId, CefSharp.DevTools.CSS.SourceRange range, string text)
        {
            ValidateSetContainerQueryText(styleSheetId, range, text);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("styleSheetId", styleSheetId);
            dict.Add("range", range.ToDictionary());
            dict.Add("text", text);
            return _client.ExecuteDevToolsMethodAsync<SetContainerQueryTextResponse>("CSS.setContainerQueryText", dict);
        }

        partial void ValidateSetSupportsText(string styleSheetId, CefSharp.DevTools.CSS.SourceRange range, string text);
        /// <summary>
        /// Modifies the expression of a supports at-rule.
        /// </summary>
        /// <param name = "styleSheetId">styleSheetId</param>
        /// <param name = "range">range</param>
        /// <param name = "text">text</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;SetSupportsTextResponse&gt;</returns>
        public System.Threading.Tasks.Task<SetSupportsTextResponse> SetSupportsTextAsync(string styleSheetId, CefSharp.DevTools.CSS.SourceRange range, string text)
        {
            ValidateSetSupportsText(styleSheetId, range, text);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("styleSheetId", styleSheetId);
            dict.Add("range", range.ToDictionary());
            dict.Add("text", text);
            return _client.ExecuteDevToolsMethodAsync<SetSupportsTextResponse>("CSS.setSupportsText", dict);
        }

        partial void ValidateSetScopeText(string styleSheetId, CefSharp.DevTools.CSS.SourceRange range, string text);
        /// <summary>
        /// Modifies the expression of a scope at-rule.
        /// </summary>
        /// <param name = "styleSheetId">styleSheetId</param>
        /// <param name = "range">range</param>
        /// <param name = "text">text</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;SetScopeTextResponse&gt;</returns>
        public System.Threading.Tasks.Task<SetScopeTextResponse> SetScopeTextAsync(string styleSheetId, CefSharp.DevTools.CSS.SourceRange range, string text)
        {
            ValidateSetScopeText(styleSheetId, range, text);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("styleSheetId", styleSheetId);
            dict.Add("range", range.ToDictionary());
            dict.Add("text", text);
            return _client.ExecuteDevToolsMethodAsync<SetScopeTextResponse>("CSS.setScopeText", dict);
        }

        partial void ValidateSetRuleSelector(string styleSheetId, CefSharp.DevTools.CSS.SourceRange range, string selector);
        /// <summary>
        /// Modifies the rule selector.
        /// </summary>
        /// <param name = "styleSheetId">styleSheetId</param>
        /// <param name = "range">range</param>
        /// <param name = "selector">selector</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;SetRuleSelectorResponse&gt;</returns>
        public System.Threading.Tasks.Task<SetRuleSelectorResponse> SetRuleSelectorAsync(string styleSheetId, CefSharp.DevTools.CSS.SourceRange range, string selector)
        {
            ValidateSetRuleSelector(styleSheetId, range, selector);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("styleSheetId", styleSheetId);
            dict.Add("range", range.ToDictionary());
            dict.Add("selector", selector);
            return _client.ExecuteDevToolsMethodAsync<SetRuleSelectorResponse>("CSS.setRuleSelector", dict);
        }

        partial void ValidateSetStyleSheetText(string styleSheetId, string text);
        /// <summary>
        /// Sets the new stylesheet text.
        /// </summary>
        /// <param name = "styleSheetId">styleSheetId</param>
        /// <param name = "text">text</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;SetStyleSheetTextResponse&gt;</returns>
        public System.Threading.Tasks.Task<SetStyleSheetTextResponse> SetStyleSheetTextAsync(string styleSheetId, string text)
        {
            ValidateSetStyleSheetText(styleSheetId, text);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("styleSheetId", styleSheetId);
            dict.Add("text", text);
            return _client.ExecuteDevToolsMethodAsync<SetStyleSheetTextResponse>("CSS.setStyleSheetText", dict);
        }

        partial void ValidateSetStyleTexts(System.Collections.Generic.IList<CefSharp.DevTools.CSS.StyleDeclarationEdit> edits, int? nodeForPropertySyntaxValidation = null);
        /// <summary>
        /// Applies specified style edits one after another in the given order.
        /// </summary>
        /// <param name = "edits">edits</param>
        /// <param name = "nodeForPropertySyntaxValidation">NodeId for the DOM node in whose context custom property declarations for registered properties should bevalidated. If omitted, declarations in the new rule text can only be validated statically, which may produceincorrect results if the declaration contains a var() for example.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;SetStyleTextsResponse&gt;</returns>
        public System.Threading.Tasks.Task<SetStyleTextsResponse> SetStyleTextsAsync(System.Collections.Generic.IList<CefSharp.DevTools.CSS.StyleDeclarationEdit> edits, int? nodeForPropertySyntaxValidation = null)
        {
            ValidateSetStyleTexts(edits, nodeForPropertySyntaxValidation);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("edits", edits.Select(x => x.ToDictionary()));
            if (nodeForPropertySyntaxValidation.HasValue)
            {
                dict.Add("nodeForPropertySyntaxValidation", nodeForPropertySyntaxValidation.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<SetStyleTextsResponse>("CSS.setStyleTexts", dict);
        }

        /// <summary>
        /// Enables the selector recording.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> StartRuleUsageTrackingAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("CSS.startRuleUsageTracking", dict);
        }

        /// <summary>
        /// Stop tracking rule usage and return the list of rules that were used since last call to
        /// `takeCoverageDelta` (or since start of coverage instrumentation).
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;StopRuleUsageTrackingResponse&gt;</returns>
        public System.Threading.Tasks.Task<StopRuleUsageTrackingResponse> StopRuleUsageTrackingAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<StopRuleUsageTrackingResponse>("CSS.stopRuleUsageTracking", dict);
        }

        /// <summary>
        /// Obtain list of rules that became used since last call to this method (or since start of coverage
        /// instrumentation).
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;TakeCoverageDeltaResponse&gt;</returns>
        public System.Threading.Tasks.Task<TakeCoverageDeltaResponse> TakeCoverageDeltaAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<TakeCoverageDeltaResponse>("CSS.takeCoverageDelta", dict);
        }

        partial void ValidateSetLocalFontsEnabled(bool enabled);
        /// <summary>
        /// Enables/disables rendering of local CSS fonts (enabled by default).
        /// </summary>
        /// <param name = "enabled">Whether rendering of local fonts is enabled.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetLocalFontsEnabledAsync(bool enabled)
        {
            ValidateSetLocalFontsEnabled(enabled);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("enabled", enabled);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("CSS.setLocalFontsEnabled", dict);
        }
    }
}

namespace CefSharp.DevTools.CacheStorage
{
    /// <summary>
    /// RequestCacheNamesResponse
    /// </summary>
    [DataContract]
    public class RequestCacheNamesResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.CacheStorage.Cache> caches
        {
            get;
            set;
        }

        /// <summary>
        /// caches
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.CacheStorage.Cache> Caches
        {
            get
            {
                return caches;
            }
        }
    }
}

namespace CefSharp.DevTools.CacheStorage
{
    /// <summary>
    /// RequestCachedResponseResponse
    /// </summary>
    [DataContract]
    public class RequestCachedResponseResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.CacheStorage.CachedResponse response
        {
            get;
            set;
        }

        /// <summary>
        /// response
        /// </summary>
        public CefSharp.DevTools.CacheStorage.CachedResponse Response
        {
            get
            {
                return response;
            }
        }
    }
}

namespace CefSharp.DevTools.CacheStorage
{
    /// <summary>
    /// RequestEntriesResponse
    /// </summary>
    [DataContract]
    public class RequestEntriesResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.CacheStorage.DataEntry> cacheDataEntries
        {
            get;
            set;
        }

        /// <summary>
        /// cacheDataEntries
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.CacheStorage.DataEntry> CacheDataEntries
        {
            get
            {
                return cacheDataEntries;
            }
        }

        [DataMember]
        internal double returnCount
        {
            get;
            set;
        }

        /// <summary>
        /// returnCount
        /// </summary>
        public double ReturnCount
        {
            get
            {
                return returnCount;
            }
        }
    }
}

namespace CefSharp.DevTools.CacheStorage
{
    using System.Linq;

    /// <summary>
    /// CacheStorage
    /// </summary>
    public partial class CacheStorageClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// CacheStorage
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public CacheStorageClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        partial void ValidateDeleteCache(string cacheId);
        /// <summary>
        /// Deletes a cache.
        /// </summary>
        /// <param name = "cacheId">Id of cache for deletion.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DeleteCacheAsync(string cacheId)
        {
            ValidateDeleteCache(cacheId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("cacheId", cacheId);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("CacheStorage.deleteCache", dict);
        }

        partial void ValidateDeleteEntry(string cacheId, string request);
        /// <summary>
        /// Deletes a cache entry.
        /// </summary>
        /// <param name = "cacheId">Id of cache where the entry will be deleted.</param>
        /// <param name = "request">URL spec of the request.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DeleteEntryAsync(string cacheId, string request)
        {
            ValidateDeleteEntry(cacheId, request);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("cacheId", cacheId);
            dict.Add("request", request);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("CacheStorage.deleteEntry", dict);
        }

        partial void ValidateRequestCacheNames(string securityOrigin = null, string storageKey = null, CefSharp.DevTools.Storage.StorageBucket storageBucket = null);
        /// <summary>
        /// Requests cache names.
        /// </summary>
        /// <param name = "securityOrigin">At least and at most one of securityOrigin, storageKey, storageBucket must be specified.Security origin.</param>
        /// <param name = "storageKey">Storage key.</param>
        /// <param name = "storageBucket">Storage bucket. If not specified, it uses the default bucket.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;RequestCacheNamesResponse&gt;</returns>
        public System.Threading.Tasks.Task<RequestCacheNamesResponse> RequestCacheNamesAsync(string securityOrigin = null, string storageKey = null, CefSharp.DevTools.Storage.StorageBucket storageBucket = null)
        {
            ValidateRequestCacheNames(securityOrigin, storageKey, storageBucket);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (!(string.IsNullOrEmpty(securityOrigin)))
            {
                dict.Add("securityOrigin", securityOrigin);
            }

            if (!(string.IsNullOrEmpty(storageKey)))
            {
                dict.Add("storageKey", storageKey);
            }

            if ((storageBucket) != (null))
            {
                dict.Add("storageBucket", storageBucket.ToDictionary());
            }

            return _client.ExecuteDevToolsMethodAsync<RequestCacheNamesResponse>("CacheStorage.requestCacheNames", dict);
        }

        partial void ValidateRequestCachedResponse(string cacheId, string requestURL, System.Collections.Generic.IList<CefSharp.DevTools.CacheStorage.Header> requestHeaders);
        /// <summary>
        /// Fetches cache entry.
        /// </summary>
        /// <param name = "cacheId">Id of cache that contains the entry.</param>
        /// <param name = "requestURL">URL spec of the request.</param>
        /// <param name = "requestHeaders">headers of the request.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;RequestCachedResponseResponse&gt;</returns>
        public System.Threading.Tasks.Task<RequestCachedResponseResponse> RequestCachedResponseAsync(string cacheId, string requestURL, System.Collections.Generic.IList<CefSharp.DevTools.CacheStorage.Header> requestHeaders)
        {
            ValidateRequestCachedResponse(cacheId, requestURL, requestHeaders);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("cacheId", cacheId);
            dict.Add("requestURL", requestURL);
            dict.Add("requestHeaders", requestHeaders.Select(x => x.ToDictionary()));
            return _client.ExecuteDevToolsMethodAsync<RequestCachedResponseResponse>("CacheStorage.requestCachedResponse", dict);
        }

        partial void ValidateRequestEntries(string cacheId, int? skipCount = null, int? pageSize = null, string pathFilter = null);
        /// <summary>
        /// Requests data from cache.
        /// </summary>
        /// <param name = "cacheId">ID of cache to get entries from.</param>
        /// <param name = "skipCount">Number of records to skip.</param>
        /// <param name = "pageSize">Number of records to fetch.</param>
        /// <param name = "pathFilter">If present, only return the entries containing this substring in the path</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;RequestEntriesResponse&gt;</returns>
        public System.Threading.Tasks.Task<RequestEntriesResponse> RequestEntriesAsync(string cacheId, int? skipCount = null, int? pageSize = null, string pathFilter = null)
        {
            ValidateRequestEntries(cacheId, skipCount, pageSize, pathFilter);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("cacheId", cacheId);
            if (skipCount.HasValue)
            {
                dict.Add("skipCount", skipCount.Value);
            }

            if (pageSize.HasValue)
            {
                dict.Add("pageSize", pageSize.Value);
            }

            if (!(string.IsNullOrEmpty(pathFilter)))
            {
                dict.Add("pathFilter", pathFilter);
            }

            return _client.ExecuteDevToolsMethodAsync<RequestEntriesResponse>("CacheStorage.requestEntries", dict);
        }
    }
}

namespace CefSharp.DevTools.Cast
{
    using System.Linq;

    /// <summary>
    /// A domain for interacting with Cast, Presentation API, and Remote Playback API
    /// functionalities.
    /// </summary>
    public partial class CastClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// Cast
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public CastClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// This is fired whenever the list of available sinks changes. A sink is a
        /// device or a software surface that you can cast to.
        /// </summary>
        public event System.EventHandler<SinksUpdatedEventArgs> SinksUpdated
        {
            add
            {
                _client.AddEventHandler<SinksUpdatedEventArgs>("Cast.sinksUpdated", value);
            }

            remove
            {
                _client.RemoveEventHandler<SinksUpdatedEventArgs>("Cast.sinksUpdated", value);
            }
        }

        /// <summary>
        /// This is fired whenever the outstanding issue/error message changes.
        /// |issueMessage| is empty if there is no issue.
        /// </summary>
        public event System.EventHandler<IssueUpdatedEventArgs> IssueUpdated
        {
            add
            {
                _client.AddEventHandler<IssueUpdatedEventArgs>("Cast.issueUpdated", value);
            }

            remove
            {
                _client.RemoveEventHandler<IssueUpdatedEventArgs>("Cast.issueUpdated", value);
            }
        }

        partial void ValidateEnable(string presentationUrl = null);
        /// <summary>
        /// Starts observing for sinks that can be used for tab mirroring, and if set,
        /// sinks compatible with |presentationUrl| as well. When sinks are found, a
        /// |sinksUpdated| event is fired.
        /// Also starts observing for issue messages. When an issue is added or removed,
        /// an |issueUpdated| event is fired.
        /// </summary>
        /// <param name = "presentationUrl">presentationUrl</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> EnableAsync(string presentationUrl = null)
        {
            ValidateEnable(presentationUrl);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (!(string.IsNullOrEmpty(presentationUrl)))
            {
                dict.Add("presentationUrl", presentationUrl);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Cast.enable", dict);
        }

        /// <summary>
        /// Stops observing for sinks and issues.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DisableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Cast.disable", dict);
        }

        partial void ValidateSetSinkToUse(string sinkName);
        /// <summary>
        /// Sets a sink to be used when the web page requests the browser to choose a
        /// sink via Presentation API, Remote Playback API, or Cast SDK.
        /// </summary>
        /// <param name = "sinkName">sinkName</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetSinkToUseAsync(string sinkName)
        {
            ValidateSetSinkToUse(sinkName);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("sinkName", sinkName);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Cast.setSinkToUse", dict);
        }

        partial void ValidateStartDesktopMirroring(string sinkName);
        /// <summary>
        /// Starts mirroring the desktop to the sink.
        /// </summary>
        /// <param name = "sinkName">sinkName</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> StartDesktopMirroringAsync(string sinkName)
        {
            ValidateStartDesktopMirroring(sinkName);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("sinkName", sinkName);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Cast.startDesktopMirroring", dict);
        }

        partial void ValidateStartTabMirroring(string sinkName);
        /// <summary>
        /// Starts mirroring the tab to the sink.
        /// </summary>
        /// <param name = "sinkName">sinkName</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> StartTabMirroringAsync(string sinkName)
        {
            ValidateStartTabMirroring(sinkName);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("sinkName", sinkName);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Cast.startTabMirroring", dict);
        }

        partial void ValidateStopCasting(string sinkName);
        /// <summary>
        /// Stops the active Cast session on the sink.
        /// </summary>
        /// <param name = "sinkName">sinkName</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> StopCastingAsync(string sinkName)
        {
            ValidateStopCasting(sinkName);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("sinkName", sinkName);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Cast.stopCasting", dict);
        }
    }
}

namespace CefSharp.DevTools.DOM
{
    /// <summary>
    /// CollectClassNamesFromSubtreeResponse
    /// </summary>
    [DataContract]
    public class CollectClassNamesFromSubtreeResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string[] classNames
        {
            get;
            set;
        }

        /// <summary>
        /// classNames
        /// </summary>
        public string[] ClassNames
        {
            get
            {
                return classNames;
            }
        }
    }
}

namespace CefSharp.DevTools.DOM
{
    /// <summary>
    /// CopyToResponse
    /// </summary>
    [DataContract]
    public class CopyToResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal int nodeId
        {
            get;
            set;
        }

        /// <summary>
        /// nodeId
        /// </summary>
        public int NodeId
        {
            get
            {
                return nodeId;
            }
        }
    }
}

namespace CefSharp.DevTools.DOM
{
    /// <summary>
    /// DescribeNodeResponse
    /// </summary>
    [DataContract]
    public class DescribeNodeResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.DOM.Node node
        {
            get;
            set;
        }

        /// <summary>
        /// node
        /// </summary>
        public CefSharp.DevTools.DOM.Node Node
        {
            get
            {
                return node;
            }
        }
    }
}

namespace CefSharp.DevTools.DOM
{
    /// <summary>
    /// GetAttributesResponse
    /// </summary>
    [DataContract]
    public class GetAttributesResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string[] attributes
        {
            get;
            set;
        }

        /// <summary>
        /// attributes
        /// </summary>
        public string[] Attributes
        {
            get
            {
                return attributes;
            }
        }
    }
}

namespace CefSharp.DevTools.DOM
{
    /// <summary>
    /// GetBoxModelResponse
    /// </summary>
    [DataContract]
    public class GetBoxModelResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.DOM.BoxModel model
        {
            get;
            set;
        }

        /// <summary>
        /// model
        /// </summary>
        public CefSharp.DevTools.DOM.BoxModel Model
        {
            get
            {
                return model;
            }
        }
    }
}

namespace CefSharp.DevTools.DOM
{
    /// <summary>
    /// GetContentQuadsResponse
    /// </summary>
    [DataContract]
    public class GetContentQuadsResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal double[] quads
        {
            get;
            set;
        }

        /// <summary>
        /// quads
        /// </summary>
        public double[] Quads
        {
            get
            {
                return quads;
            }
        }
    }
}

namespace CefSharp.DevTools.DOM
{
    /// <summary>
    /// GetDocumentResponse
    /// </summary>
    [DataContract]
    public class GetDocumentResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.DOM.Node root
        {
            get;
            set;
        }

        /// <summary>
        /// root
        /// </summary>
        public CefSharp.DevTools.DOM.Node Root
        {
            get
            {
                return root;
            }
        }
    }
}

namespace CefSharp.DevTools.DOM
{
    /// <summary>
    /// GetNodesForSubtreeByStyleResponse
    /// </summary>
    [DataContract]
    public class GetNodesForSubtreeByStyleResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal int[] nodeIds
        {
            get;
            set;
        }

        /// <summary>
        /// nodeIds
        /// </summary>
        public int[] NodeIds
        {
            get
            {
                return nodeIds;
            }
        }
    }
}

namespace CefSharp.DevTools.DOM
{
    /// <summary>
    /// GetNodeForLocationResponse
    /// </summary>
    [DataContract]
    public class GetNodeForLocationResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal int backendNodeId
        {
            get;
            set;
        }

        /// <summary>
        /// backendNodeId
        /// </summary>
        public int BackendNodeId
        {
            get
            {
                return backendNodeId;
            }
        }

        [DataMember]
        internal string frameId
        {
            get;
            set;
        }

        /// <summary>
        /// frameId
        /// </summary>
        public string FrameId
        {
            get
            {
                return frameId;
            }
        }

        [DataMember]
        internal int? nodeId
        {
            get;
            set;
        }

        /// <summary>
        /// nodeId
        /// </summary>
        public int? NodeId
        {
            get
            {
                return nodeId;
            }
        }
    }
}

namespace CefSharp.DevTools.DOM
{
    /// <summary>
    /// GetOuterHTMLResponse
    /// </summary>
    [DataContract]
    public class GetOuterHTMLResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string outerHTML
        {
            get;
            set;
        }

        /// <summary>
        /// outerHTML
        /// </summary>
        public string OuterHTML
        {
            get
            {
                return outerHTML;
            }
        }
    }
}

namespace CefSharp.DevTools.DOM
{
    /// <summary>
    /// GetRelayoutBoundaryResponse
    /// </summary>
    [DataContract]
    public class GetRelayoutBoundaryResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal int nodeId
        {
            get;
            set;
        }

        /// <summary>
        /// nodeId
        /// </summary>
        public int NodeId
        {
            get
            {
                return nodeId;
            }
        }
    }
}

namespace CefSharp.DevTools.DOM
{
    /// <summary>
    /// GetSearchResultsResponse
    /// </summary>
    [DataContract]
    public class GetSearchResultsResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal int[] nodeIds
        {
            get;
            set;
        }

        /// <summary>
        /// nodeIds
        /// </summary>
        public int[] NodeIds
        {
            get
            {
                return nodeIds;
            }
        }
    }
}

namespace CefSharp.DevTools.DOM
{
    /// <summary>
    /// MoveToResponse
    /// </summary>
    [DataContract]
    public class MoveToResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal int nodeId
        {
            get;
            set;
        }

        /// <summary>
        /// nodeId
        /// </summary>
        public int NodeId
        {
            get
            {
                return nodeId;
            }
        }
    }
}

namespace CefSharp.DevTools.DOM
{
    /// <summary>
    /// PerformSearchResponse
    /// </summary>
    [DataContract]
    public class PerformSearchResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string searchId
        {
            get;
            set;
        }

        /// <summary>
        /// searchId
        /// </summary>
        public string SearchId
        {
            get
            {
                return searchId;
            }
        }

        [DataMember]
        internal int resultCount
        {
            get;
            set;
        }

        /// <summary>
        /// resultCount
        /// </summary>
        public int ResultCount
        {
            get
            {
                return resultCount;
            }
        }
    }
}

namespace CefSharp.DevTools.DOM
{
    /// <summary>
    /// PushNodeByPathToFrontendResponse
    /// </summary>
    [DataContract]
    public class PushNodeByPathToFrontendResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal int nodeId
        {
            get;
            set;
        }

        /// <summary>
        /// nodeId
        /// </summary>
        public int NodeId
        {
            get
            {
                return nodeId;
            }
        }
    }
}

namespace CefSharp.DevTools.DOM
{
    /// <summary>
    /// PushNodesByBackendIdsToFrontendResponse
    /// </summary>
    [DataContract]
    public class PushNodesByBackendIdsToFrontendResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal int[] nodeIds
        {
            get;
            set;
        }

        /// <summary>
        /// nodeIds
        /// </summary>
        public int[] NodeIds
        {
            get
            {
                return nodeIds;
            }
        }
    }
}

namespace CefSharp.DevTools.DOM
{
    /// <summary>
    /// QuerySelectorResponse
    /// </summary>
    [DataContract]
    public class QuerySelectorResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal int nodeId
        {
            get;
            set;
        }

        /// <summary>
        /// nodeId
        /// </summary>
        public int NodeId
        {
            get
            {
                return nodeId;
            }
        }
    }
}

namespace CefSharp.DevTools.DOM
{
    /// <summary>
    /// QuerySelectorAllResponse
    /// </summary>
    [DataContract]
    public class QuerySelectorAllResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal int[] nodeIds
        {
            get;
            set;
        }

        /// <summary>
        /// nodeIds
        /// </summary>
        public int[] NodeIds
        {
            get
            {
                return nodeIds;
            }
        }
    }
}

namespace CefSharp.DevTools.DOM
{
    /// <summary>
    /// GetTopLayerElementsResponse
    /// </summary>
    [DataContract]
    public class GetTopLayerElementsResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal int[] nodeIds
        {
            get;
            set;
        }

        /// <summary>
        /// nodeIds
        /// </summary>
        public int[] NodeIds
        {
            get
            {
                return nodeIds;
            }
        }
    }
}

namespace CefSharp.DevTools.DOM
{
    /// <summary>
    /// RequestNodeResponse
    /// </summary>
    [DataContract]
    public class RequestNodeResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal int nodeId
        {
            get;
            set;
        }

        /// <summary>
        /// nodeId
        /// </summary>
        public int NodeId
        {
            get
            {
                return nodeId;
            }
        }
    }
}

namespace CefSharp.DevTools.DOM
{
    /// <summary>
    /// ResolveNodeResponse
    /// </summary>
    [DataContract]
    public class ResolveNodeResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.Runtime.RemoteObject @object
        {
            get;
            set;
        }

        /// <summary>
        /// object
        /// </summary>
        public CefSharp.DevTools.Runtime.RemoteObject Object
        {
            get
            {
                return @object;
            }
        }
    }
}

namespace CefSharp.DevTools.DOM
{
    /// <summary>
    /// GetNodeStackTracesResponse
    /// </summary>
    [DataContract]
    public class GetNodeStackTracesResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.Runtime.StackTrace creation
        {
            get;
            set;
        }

        /// <summary>
        /// creation
        /// </summary>
        public CefSharp.DevTools.Runtime.StackTrace Creation
        {
            get
            {
                return creation;
            }
        }
    }
}

namespace CefSharp.DevTools.DOM
{
    /// <summary>
    /// GetFileInfoResponse
    /// </summary>
    [DataContract]
    public class GetFileInfoResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string path
        {
            get;
            set;
        }

        /// <summary>
        /// path
        /// </summary>
        public string Path
        {
            get
            {
                return path;
            }
        }
    }
}

namespace CefSharp.DevTools.DOM
{
    /// <summary>
    /// SetNodeNameResponse
    /// </summary>
    [DataContract]
    public class SetNodeNameResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal int nodeId
        {
            get;
            set;
        }

        /// <summary>
        /// nodeId
        /// </summary>
        public int NodeId
        {
            get
            {
                return nodeId;
            }
        }
    }
}

namespace CefSharp.DevTools.DOM
{
    /// <summary>
    /// GetFrameOwnerResponse
    /// </summary>
    [DataContract]
    public class GetFrameOwnerResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal int backendNodeId
        {
            get;
            set;
        }

        /// <summary>
        /// backendNodeId
        /// </summary>
        public int BackendNodeId
        {
            get
            {
                return backendNodeId;
            }
        }

        [DataMember]
        internal int? nodeId
        {
            get;
            set;
        }

        /// <summary>
        /// nodeId
        /// </summary>
        public int? NodeId
        {
            get
            {
                return nodeId;
            }
        }
    }
}

namespace CefSharp.DevTools.DOM
{
    /// <summary>
    /// GetContainerForNodeResponse
    /// </summary>
    [DataContract]
    public class GetContainerForNodeResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal int? nodeId
        {
            get;
            set;
        }

        /// <summary>
        /// nodeId
        /// </summary>
        public int? NodeId
        {
            get
            {
                return nodeId;
            }
        }
    }
}

namespace CefSharp.DevTools.DOM
{
    /// <summary>
    /// GetQueryingDescendantsForContainerResponse
    /// </summary>
    [DataContract]
    public class GetQueryingDescendantsForContainerResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal int[] nodeIds
        {
            get;
            set;
        }

        /// <summary>
        /// nodeIds
        /// </summary>
        public int[] NodeIds
        {
            get
            {
                return nodeIds;
            }
        }
    }
}

namespace CefSharp.DevTools.DOM
{
    using System.Linq;

    /// <summary>
    /// Whether to include whitespaces in the children array of returned Nodes.
    /// </summary>
    public enum EnableIncludeWhitespace
    {
        /// <summary>
        /// none
        /// </summary>
        [EnumMember(Value = ("none"))]
        None,
        /// <summary>
        /// all
        /// </summary>
        [EnumMember(Value = ("all"))]
        All
    }

    /// <summary>
    /// This domain exposes DOM read/write operations. Each DOM Node is represented with its mirror object
    /// that has an `id`. This `id` can be used to get additional information on the Node, resolve it into
    /// the JavaScript object wrapper, etc. It is important that client receives DOM events only for the
    /// nodes that are known to the client. Backend keeps track of the nodes that were sent to the client
    /// and never sends the same node twice. It is client&apos;s responsibility to collect information about
    /// the nodes that were sent to the client. Note that `iframe` owner elements will return
    /// corresponding document elements as their child nodes.
    /// </summary>
    public partial class DOMClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// DOM
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public DOMClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// Fired when `Element`&apos;s attribute is modified.
        /// </summary>
        public event System.EventHandler<AttributeModifiedEventArgs> AttributeModified
        {
            add
            {
                _client.AddEventHandler<AttributeModifiedEventArgs>("DOM.attributeModified", value);
            }

            remove
            {
                _client.RemoveEventHandler<AttributeModifiedEventArgs>("DOM.attributeModified", value);
            }
        }

        /// <summary>
        /// Fired when `Element`&apos;s attribute is removed.
        /// </summary>
        public event System.EventHandler<AttributeRemovedEventArgs> AttributeRemoved
        {
            add
            {
                _client.AddEventHandler<AttributeRemovedEventArgs>("DOM.attributeRemoved", value);
            }

            remove
            {
                _client.RemoveEventHandler<AttributeRemovedEventArgs>("DOM.attributeRemoved", value);
            }
        }

        /// <summary>
        /// Mirrors `DOMCharacterDataModified` event.
        /// </summary>
        public event System.EventHandler<CharacterDataModifiedEventArgs> CharacterDataModified
        {
            add
            {
                _client.AddEventHandler<CharacterDataModifiedEventArgs>("DOM.characterDataModified", value);
            }

            remove
            {
                _client.RemoveEventHandler<CharacterDataModifiedEventArgs>("DOM.characterDataModified", value);
            }
        }

        /// <summary>
        /// Fired when `Container`&apos;s child node count has changed.
        /// </summary>
        public event System.EventHandler<ChildNodeCountUpdatedEventArgs> ChildNodeCountUpdated
        {
            add
            {
                _client.AddEventHandler<ChildNodeCountUpdatedEventArgs>("DOM.childNodeCountUpdated", value);
            }

            remove
            {
                _client.RemoveEventHandler<ChildNodeCountUpdatedEventArgs>("DOM.childNodeCountUpdated", value);
            }
        }

        /// <summary>
        /// Mirrors `DOMNodeInserted` event.
        /// </summary>
        public event System.EventHandler<ChildNodeInsertedEventArgs> ChildNodeInserted
        {
            add
            {
                _client.AddEventHandler<ChildNodeInsertedEventArgs>("DOM.childNodeInserted", value);
            }

            remove
            {
                _client.RemoveEventHandler<ChildNodeInsertedEventArgs>("DOM.childNodeInserted", value);
            }
        }

        /// <summary>
        /// Mirrors `DOMNodeRemoved` event.
        /// </summary>
        public event System.EventHandler<ChildNodeRemovedEventArgs> ChildNodeRemoved
        {
            add
            {
                _client.AddEventHandler<ChildNodeRemovedEventArgs>("DOM.childNodeRemoved", value);
            }

            remove
            {
                _client.RemoveEventHandler<ChildNodeRemovedEventArgs>("DOM.childNodeRemoved", value);
            }
        }

        /// <summary>
        /// Called when distribution is changed.
        /// </summary>
        public event System.EventHandler<DistributedNodesUpdatedEventArgs> DistributedNodesUpdated
        {
            add
            {
                _client.AddEventHandler<DistributedNodesUpdatedEventArgs>("DOM.distributedNodesUpdated", value);
            }

            remove
            {
                _client.RemoveEventHandler<DistributedNodesUpdatedEventArgs>("DOM.distributedNodesUpdated", value);
            }
        }

        /// <summary>
        /// Fired when `Document` has been totally updated. Node ids are no longer valid.
        /// </summary>
        public event System.EventHandler<System.EventArgs> DocumentUpdated
        {
            add
            {
                _client.AddEventHandler<System.EventArgs>("DOM.documentUpdated", value);
            }

            remove
            {
                _client.RemoveEventHandler<System.EventArgs>("DOM.documentUpdated", value);
            }
        }

        /// <summary>
        /// Fired when `Element`&apos;s inline style is modified via a CSS property modification.
        /// </summary>
        public event System.EventHandler<InlineStyleInvalidatedEventArgs> InlineStyleInvalidated
        {
            add
            {
                _client.AddEventHandler<InlineStyleInvalidatedEventArgs>("DOM.inlineStyleInvalidated", value);
            }

            remove
            {
                _client.RemoveEventHandler<InlineStyleInvalidatedEventArgs>("DOM.inlineStyleInvalidated", value);
            }
        }

        /// <summary>
        /// Called when a pseudo element is added to an element.
        /// </summary>
        public event System.EventHandler<PseudoElementAddedEventArgs> PseudoElementAdded
        {
            add
            {
                _client.AddEventHandler<PseudoElementAddedEventArgs>("DOM.pseudoElementAdded", value);
            }

            remove
            {
                _client.RemoveEventHandler<PseudoElementAddedEventArgs>("DOM.pseudoElementAdded", value);
            }
        }

        /// <summary>
        /// Called when top layer elements are changed.
        /// </summary>
        public event System.EventHandler<System.EventArgs> TopLayerElementsUpdated
        {
            add
            {
                _client.AddEventHandler<System.EventArgs>("DOM.topLayerElementsUpdated", value);
            }

            remove
            {
                _client.RemoveEventHandler<System.EventArgs>("DOM.topLayerElementsUpdated", value);
            }
        }

        /// <summary>
        /// Called when a pseudo element is removed from an element.
        /// </summary>
        public event System.EventHandler<PseudoElementRemovedEventArgs> PseudoElementRemoved
        {
            add
            {
                _client.AddEventHandler<PseudoElementRemovedEventArgs>("DOM.pseudoElementRemoved", value);
            }

            remove
            {
                _client.RemoveEventHandler<PseudoElementRemovedEventArgs>("DOM.pseudoElementRemoved", value);
            }
        }

        /// <summary>
        /// Fired when backend wants to provide client with the missing DOM structure. This happens upon
        /// most of the calls requesting node ids.
        /// </summary>
        public event System.EventHandler<SetChildNodesEventArgs> SetChildNodes
        {
            add
            {
                _client.AddEventHandler<SetChildNodesEventArgs>("DOM.setChildNodes", value);
            }

            remove
            {
                _client.RemoveEventHandler<SetChildNodesEventArgs>("DOM.setChildNodes", value);
            }
        }

        /// <summary>
        /// Called when shadow root is popped from the element.
        /// </summary>
        public event System.EventHandler<ShadowRootPoppedEventArgs> ShadowRootPopped
        {
            add
            {
                _client.AddEventHandler<ShadowRootPoppedEventArgs>("DOM.shadowRootPopped", value);
            }

            remove
            {
                _client.RemoveEventHandler<ShadowRootPoppedEventArgs>("DOM.shadowRootPopped", value);
            }
        }

        /// <summary>
        /// Called when shadow root is pushed into the element.
        /// </summary>
        public event System.EventHandler<ShadowRootPushedEventArgs> ShadowRootPushed
        {
            add
            {
                _client.AddEventHandler<ShadowRootPushedEventArgs>("DOM.shadowRootPushed", value);
            }

            remove
            {
                _client.RemoveEventHandler<ShadowRootPushedEventArgs>("DOM.shadowRootPushed", value);
            }
        }

        partial void ValidateCollectClassNamesFromSubtree(int nodeId);
        /// <summary>
        /// Collects class names for the node with given id and all of it&apos;s child nodes.
        /// </summary>
        /// <param name = "nodeId">Id of the node to collect class names.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;CollectClassNamesFromSubtreeResponse&gt;</returns>
        public System.Threading.Tasks.Task<CollectClassNamesFromSubtreeResponse> CollectClassNamesFromSubtreeAsync(int nodeId)
        {
            ValidateCollectClassNamesFromSubtree(nodeId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("nodeId", nodeId);
            return _client.ExecuteDevToolsMethodAsync<CollectClassNamesFromSubtreeResponse>("DOM.collectClassNamesFromSubtree", dict);
        }

        partial void ValidateCopyTo(int nodeId, int targetNodeId, int? insertBeforeNodeId = null);
        /// <summary>
        /// Creates a deep copy of the specified node and places it into the target container before the
        /// given anchor.
        /// </summary>
        /// <param name = "nodeId">Id of the node to copy.</param>
        /// <param name = "targetNodeId">Id of the element to drop the copy into.</param>
        /// <param name = "insertBeforeNodeId">Drop the copy before this node (if absent, the copy becomes the last child of`targetNodeId`).</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;CopyToResponse&gt;</returns>
        public System.Threading.Tasks.Task<CopyToResponse> CopyToAsync(int nodeId, int targetNodeId, int? insertBeforeNodeId = null)
        {
            ValidateCopyTo(nodeId, targetNodeId, insertBeforeNodeId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("nodeId", nodeId);
            dict.Add("targetNodeId", targetNodeId);
            if (insertBeforeNodeId.HasValue)
            {
                dict.Add("insertBeforeNodeId", insertBeforeNodeId.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<CopyToResponse>("DOM.copyTo", dict);
        }

        partial void ValidateDescribeNode(int? nodeId = null, int? backendNodeId = null, string objectId = null, int? depth = null, bool? pierce = null);
        /// <summary>
        /// Describes node given its id, does not require domain to be enabled. Does not start tracking any
        /// objects, can be used for automation.
        /// </summary>
        /// <param name = "nodeId">Identifier of the node.</param>
        /// <param name = "backendNodeId">Identifier of the backend node.</param>
        /// <param name = "objectId">JavaScript object id of the node wrapper.</param>
        /// <param name = "depth">The maximum depth at which children should be retrieved, defaults to 1. Use -1 for theentire subtree or provide an integer larger than 0.</param>
        /// <param name = "pierce">Whether or not iframes and shadow roots should be traversed when returning the subtree(default is false).</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DescribeNodeResponse&gt;</returns>
        public System.Threading.Tasks.Task<DescribeNodeResponse> DescribeNodeAsync(int? nodeId = null, int? backendNodeId = null, string objectId = null, int? depth = null, bool? pierce = null)
        {
            ValidateDescribeNode(nodeId, backendNodeId, objectId, depth, pierce);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (nodeId.HasValue)
            {
                dict.Add("nodeId", nodeId.Value);
            }

            if (backendNodeId.HasValue)
            {
                dict.Add("backendNodeId", backendNodeId.Value);
            }

            if (!(string.IsNullOrEmpty(objectId)))
            {
                dict.Add("objectId", objectId);
            }

            if (depth.HasValue)
            {
                dict.Add("depth", depth.Value);
            }

            if (pierce.HasValue)
            {
                dict.Add("pierce", pierce.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<DescribeNodeResponse>("DOM.describeNode", dict);
        }

        partial void ValidateScrollIntoViewIfNeeded(int? nodeId = null, int? backendNodeId = null, string objectId = null, CefSharp.DevTools.DOM.Rect rect = null);
        /// <summary>
        /// Scrolls the specified rect of the given node into view if not already visible.
        /// Note: exactly one between nodeId, backendNodeId and objectId should be passed
        /// to identify the node.
        /// </summary>
        /// <param name = "nodeId">Identifier of the node.</param>
        /// <param name = "backendNodeId">Identifier of the backend node.</param>
        /// <param name = "objectId">JavaScript object id of the node wrapper.</param>
        /// <param name = "rect">The rect to be scrolled into view, relative to the node's border box, in CSS pixels.When omitted, center of the node will be used, similar to Element.scrollIntoView.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ScrollIntoViewIfNeededAsync(int? nodeId = null, int? backendNodeId = null, string objectId = null, CefSharp.DevTools.DOM.Rect rect = null)
        {
            ValidateScrollIntoViewIfNeeded(nodeId, backendNodeId, objectId, rect);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (nodeId.HasValue)
            {
                dict.Add("nodeId", nodeId.Value);
            }

            if (backendNodeId.HasValue)
            {
                dict.Add("backendNodeId", backendNodeId.Value);
            }

            if (!(string.IsNullOrEmpty(objectId)))
            {
                dict.Add("objectId", objectId);
            }

            if ((rect) != (null))
            {
                dict.Add("rect", rect.ToDictionary());
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DOM.scrollIntoViewIfNeeded", dict);
        }

        /// <summary>
        /// Disables DOM agent for the given page.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DisableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DOM.disable", dict);
        }

        partial void ValidateDiscardSearchResults(string searchId);
        /// <summary>
        /// Discards search results from the session with the given id. `getSearchResults` should no longer
        /// be called for that search.
        /// </summary>
        /// <param name = "searchId">Unique search session identifier.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DiscardSearchResultsAsync(string searchId)
        {
            ValidateDiscardSearchResults(searchId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("searchId", searchId);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DOM.discardSearchResults", dict);
        }

        partial void ValidateEnable(CefSharp.DevTools.DOM.EnableIncludeWhitespace? includeWhitespace = null);
        /// <summary>
        /// Enables DOM agent for the given page.
        /// </summary>
        /// <param name = "includeWhitespace">Whether to include whitespaces in the children array of returned Nodes.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> EnableAsync(CefSharp.DevTools.DOM.EnableIncludeWhitespace? includeWhitespace = null)
        {
            ValidateEnable(includeWhitespace);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (includeWhitespace.HasValue)
            {
                dict.Add("includeWhitespace", EnumToString(includeWhitespace));
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DOM.enable", dict);
        }

        partial void ValidateFocus(int? nodeId = null, int? backendNodeId = null, string objectId = null);
        /// <summary>
        /// Focuses the given element.
        /// </summary>
        /// <param name = "nodeId">Identifier of the node.</param>
        /// <param name = "backendNodeId">Identifier of the backend node.</param>
        /// <param name = "objectId">JavaScript object id of the node wrapper.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> FocusAsync(int? nodeId = null, int? backendNodeId = null, string objectId = null)
        {
            ValidateFocus(nodeId, backendNodeId, objectId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (nodeId.HasValue)
            {
                dict.Add("nodeId", nodeId.Value);
            }

            if (backendNodeId.HasValue)
            {
                dict.Add("backendNodeId", backendNodeId.Value);
            }

            if (!(string.IsNullOrEmpty(objectId)))
            {
                dict.Add("objectId", objectId);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DOM.focus", dict);
        }

        partial void ValidateGetAttributes(int nodeId);
        /// <summary>
        /// Returns attributes for the specified node.
        /// </summary>
        /// <param name = "nodeId">Id of the node to retrieve attributes for.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetAttributesResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetAttributesResponse> GetAttributesAsync(int nodeId)
        {
            ValidateGetAttributes(nodeId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("nodeId", nodeId);
            return _client.ExecuteDevToolsMethodAsync<GetAttributesResponse>("DOM.getAttributes", dict);
        }

        partial void ValidateGetBoxModel(int? nodeId = null, int? backendNodeId = null, string objectId = null);
        /// <summary>
        /// Returns boxes for the given node.
        /// </summary>
        /// <param name = "nodeId">Identifier of the node.</param>
        /// <param name = "backendNodeId">Identifier of the backend node.</param>
        /// <param name = "objectId">JavaScript object id of the node wrapper.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetBoxModelResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetBoxModelResponse> GetBoxModelAsync(int? nodeId = null, int? backendNodeId = null, string objectId = null)
        {
            ValidateGetBoxModel(nodeId, backendNodeId, objectId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (nodeId.HasValue)
            {
                dict.Add("nodeId", nodeId.Value);
            }

            if (backendNodeId.HasValue)
            {
                dict.Add("backendNodeId", backendNodeId.Value);
            }

            if (!(string.IsNullOrEmpty(objectId)))
            {
                dict.Add("objectId", objectId);
            }

            return _client.ExecuteDevToolsMethodAsync<GetBoxModelResponse>("DOM.getBoxModel", dict);
        }

        partial void ValidateGetContentQuads(int? nodeId = null, int? backendNodeId = null, string objectId = null);
        /// <summary>
        /// Returns quads that describe node position on the page. This method
        /// might return multiple quads for inline nodes.
        /// </summary>
        /// <param name = "nodeId">Identifier of the node.</param>
        /// <param name = "backendNodeId">Identifier of the backend node.</param>
        /// <param name = "objectId">JavaScript object id of the node wrapper.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetContentQuadsResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetContentQuadsResponse> GetContentQuadsAsync(int? nodeId = null, int? backendNodeId = null, string objectId = null)
        {
            ValidateGetContentQuads(nodeId, backendNodeId, objectId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (nodeId.HasValue)
            {
                dict.Add("nodeId", nodeId.Value);
            }

            if (backendNodeId.HasValue)
            {
                dict.Add("backendNodeId", backendNodeId.Value);
            }

            if (!(string.IsNullOrEmpty(objectId)))
            {
                dict.Add("objectId", objectId);
            }

            return _client.ExecuteDevToolsMethodAsync<GetContentQuadsResponse>("DOM.getContentQuads", dict);
        }

        partial void ValidateGetDocument(int? depth = null, bool? pierce = null);
        /// <summary>
        /// Returns the root DOM node (and optionally the subtree) to the caller.
        /// Implicitly enables the DOM domain events for the current target.
        /// </summary>
        /// <param name = "depth">The maximum depth at which children should be retrieved, defaults to 1. Use -1 for theentire subtree or provide an integer larger than 0.</param>
        /// <param name = "pierce">Whether or not iframes and shadow roots should be traversed when returning the subtree(default is false).</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetDocumentResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetDocumentResponse> GetDocumentAsync(int? depth = null, bool? pierce = null)
        {
            ValidateGetDocument(depth, pierce);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (depth.HasValue)
            {
                dict.Add("depth", depth.Value);
            }

            if (pierce.HasValue)
            {
                dict.Add("pierce", pierce.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<GetDocumentResponse>("DOM.getDocument", dict);
        }

        partial void ValidateGetNodesForSubtreeByStyle(int nodeId, System.Collections.Generic.IList<CefSharp.DevTools.DOM.CSSComputedStyleProperty> computedStyles, bool? pierce = null);
        /// <summary>
        /// Finds nodes with a given computed style in a subtree.
        /// </summary>
        /// <param name = "nodeId">Node ID pointing to the root of a subtree.</param>
        /// <param name = "computedStyles">The style to filter nodes by (includes nodes if any of properties matches).</param>
        /// <param name = "pierce">Whether or not iframes and shadow roots in the same target should be traversed when returning theresults (default is false).</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetNodesForSubtreeByStyleResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetNodesForSubtreeByStyleResponse> GetNodesForSubtreeByStyleAsync(int nodeId, System.Collections.Generic.IList<CefSharp.DevTools.DOM.CSSComputedStyleProperty> computedStyles, bool? pierce = null)
        {
            ValidateGetNodesForSubtreeByStyle(nodeId, computedStyles, pierce);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("nodeId", nodeId);
            dict.Add("computedStyles", computedStyles.Select(x => x.ToDictionary()));
            if (pierce.HasValue)
            {
                dict.Add("pierce", pierce.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<GetNodesForSubtreeByStyleResponse>("DOM.getNodesForSubtreeByStyle", dict);
        }

        partial void ValidateGetNodeForLocation(int x, int y, bool? includeUserAgentShadowDOM = null, bool? ignorePointerEventsNone = null);
        /// <summary>
        /// Returns node id at given location. Depending on whether DOM domain is enabled, nodeId is
        /// either returned or not.
        /// </summary>
        /// <param name = "x">X coordinate.</param>
        /// <param name = "y">Y coordinate.</param>
        /// <param name = "includeUserAgentShadowDOM">False to skip to the nearest non-UA shadow root ancestor (default: false).</param>
        /// <param name = "ignorePointerEventsNone">Whether to ignore pointer-events: none on elements and hit test them.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetNodeForLocationResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetNodeForLocationResponse> GetNodeForLocationAsync(int x, int y, bool? includeUserAgentShadowDOM = null, bool? ignorePointerEventsNone = null)
        {
            ValidateGetNodeForLocation(x, y, includeUserAgentShadowDOM, ignorePointerEventsNone);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("x", x);
            dict.Add("y", y);
            if (includeUserAgentShadowDOM.HasValue)
            {
                dict.Add("includeUserAgentShadowDOM", includeUserAgentShadowDOM.Value);
            }

            if (ignorePointerEventsNone.HasValue)
            {
                dict.Add("ignorePointerEventsNone", ignorePointerEventsNone.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<GetNodeForLocationResponse>("DOM.getNodeForLocation", dict);
        }

        partial void ValidateGetOuterHTML(int? nodeId = null, int? backendNodeId = null, string objectId = null);
        /// <summary>
        /// Returns node&apos;s HTML markup.
        /// </summary>
        /// <param name = "nodeId">Identifier of the node.</param>
        /// <param name = "backendNodeId">Identifier of the backend node.</param>
        /// <param name = "objectId">JavaScript object id of the node wrapper.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetOuterHTMLResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetOuterHTMLResponse> GetOuterHTMLAsync(int? nodeId = null, int? backendNodeId = null, string objectId = null)
        {
            ValidateGetOuterHTML(nodeId, backendNodeId, objectId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (nodeId.HasValue)
            {
                dict.Add("nodeId", nodeId.Value);
            }

            if (backendNodeId.HasValue)
            {
                dict.Add("backendNodeId", backendNodeId.Value);
            }

            if (!(string.IsNullOrEmpty(objectId)))
            {
                dict.Add("objectId", objectId);
            }

            return _client.ExecuteDevToolsMethodAsync<GetOuterHTMLResponse>("DOM.getOuterHTML", dict);
        }

        partial void ValidateGetRelayoutBoundary(int nodeId);
        /// <summary>
        /// Returns the id of the nearest ancestor that is a relayout boundary.
        /// </summary>
        /// <param name = "nodeId">Id of the node.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetRelayoutBoundaryResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetRelayoutBoundaryResponse> GetRelayoutBoundaryAsync(int nodeId)
        {
            ValidateGetRelayoutBoundary(nodeId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("nodeId", nodeId);
            return _client.ExecuteDevToolsMethodAsync<GetRelayoutBoundaryResponse>("DOM.getRelayoutBoundary", dict);
        }

        partial void ValidateGetSearchResults(string searchId, int fromIndex, int toIndex);
        /// <summary>
        /// Returns search results from given `fromIndex` to given `toIndex` from the search with the given
        /// identifier.
        /// </summary>
        /// <param name = "searchId">Unique search session identifier.</param>
        /// <param name = "fromIndex">Start index of the search result to be returned.</param>
        /// <param name = "toIndex">End index of the search result to be returned.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetSearchResultsResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetSearchResultsResponse> GetSearchResultsAsync(string searchId, int fromIndex, int toIndex)
        {
            ValidateGetSearchResults(searchId, fromIndex, toIndex);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("searchId", searchId);
            dict.Add("fromIndex", fromIndex);
            dict.Add("toIndex", toIndex);
            return _client.ExecuteDevToolsMethodAsync<GetSearchResultsResponse>("DOM.getSearchResults", dict);
        }

        /// <summary>
        /// Hides any highlight.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> HideHighlightAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DOM.hideHighlight", dict);
        }

        /// <summary>
        /// Highlights DOM node.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> HighlightNodeAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DOM.highlightNode", dict);
        }

        /// <summary>
        /// Highlights given rectangle.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> HighlightRectAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DOM.highlightRect", dict);
        }

        /// <summary>
        /// Marks last undoable state.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> MarkUndoableStateAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DOM.markUndoableState", dict);
        }

        partial void ValidateMoveTo(int nodeId, int targetNodeId, int? insertBeforeNodeId = null);
        /// <summary>
        /// Moves node into the new container, places it before the given anchor.
        /// </summary>
        /// <param name = "nodeId">Id of the node to move.</param>
        /// <param name = "targetNodeId">Id of the element to drop the moved node into.</param>
        /// <param name = "insertBeforeNodeId">Drop node before this one (if absent, the moved node becomes the last child of`targetNodeId`).</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;MoveToResponse&gt;</returns>
        public System.Threading.Tasks.Task<MoveToResponse> MoveToAsync(int nodeId, int targetNodeId, int? insertBeforeNodeId = null)
        {
            ValidateMoveTo(nodeId, targetNodeId, insertBeforeNodeId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("nodeId", nodeId);
            dict.Add("targetNodeId", targetNodeId);
            if (insertBeforeNodeId.HasValue)
            {
                dict.Add("insertBeforeNodeId", insertBeforeNodeId.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<MoveToResponse>("DOM.moveTo", dict);
        }

        partial void ValidatePerformSearch(string query, bool? includeUserAgentShadowDOM = null);
        /// <summary>
        /// Searches for a given string in the DOM tree. Use `getSearchResults` to access search results or
        /// `cancelSearch` to end this search session.
        /// </summary>
        /// <param name = "query">Plain text or query selector or XPath search query.</param>
        /// <param name = "includeUserAgentShadowDOM">True to search in user agent shadow DOM.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;PerformSearchResponse&gt;</returns>
        public System.Threading.Tasks.Task<PerformSearchResponse> PerformSearchAsync(string query, bool? includeUserAgentShadowDOM = null)
        {
            ValidatePerformSearch(query, includeUserAgentShadowDOM);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("query", query);
            if (includeUserAgentShadowDOM.HasValue)
            {
                dict.Add("includeUserAgentShadowDOM", includeUserAgentShadowDOM.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<PerformSearchResponse>("DOM.performSearch", dict);
        }

        partial void ValidatePushNodeByPathToFrontend(string path);
        /// <summary>
        /// Requests that the node is sent to the caller given its path. // FIXME, use XPath
        /// </summary>
        /// <param name = "path">Path to node in the proprietary format.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;PushNodeByPathToFrontendResponse&gt;</returns>
        public System.Threading.Tasks.Task<PushNodeByPathToFrontendResponse> PushNodeByPathToFrontendAsync(string path)
        {
            ValidatePushNodeByPathToFrontend(path);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("path", path);
            return _client.ExecuteDevToolsMethodAsync<PushNodeByPathToFrontendResponse>("DOM.pushNodeByPathToFrontend", dict);
        }

        partial void ValidatePushNodesByBackendIdsToFrontend(int[] backendNodeIds);
        /// <summary>
        /// Requests that a batch of nodes is sent to the caller given their backend node ids.
        /// </summary>
        /// <param name = "backendNodeIds">The array of backend node ids.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;PushNodesByBackendIdsToFrontendResponse&gt;</returns>
        public System.Threading.Tasks.Task<PushNodesByBackendIdsToFrontendResponse> PushNodesByBackendIdsToFrontendAsync(int[] backendNodeIds)
        {
            ValidatePushNodesByBackendIdsToFrontend(backendNodeIds);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("backendNodeIds", backendNodeIds);
            return _client.ExecuteDevToolsMethodAsync<PushNodesByBackendIdsToFrontendResponse>("DOM.pushNodesByBackendIdsToFrontend", dict);
        }

        partial void ValidateQuerySelector(int nodeId, string selector);
        /// <summary>
        /// Executes `querySelector` on a given node.
        /// </summary>
        /// <param name = "nodeId">Id of the node to query upon.</param>
        /// <param name = "selector">Selector string.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;QuerySelectorResponse&gt;</returns>
        public System.Threading.Tasks.Task<QuerySelectorResponse> QuerySelectorAsync(int nodeId, string selector)
        {
            ValidateQuerySelector(nodeId, selector);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("nodeId", nodeId);
            dict.Add("selector", selector);
            return _client.ExecuteDevToolsMethodAsync<QuerySelectorResponse>("DOM.querySelector", dict);
        }

        partial void ValidateQuerySelectorAll(int nodeId, string selector);
        /// <summary>
        /// Executes `querySelectorAll` on a given node.
        /// </summary>
        /// <param name = "nodeId">Id of the node to query upon.</param>
        /// <param name = "selector">Selector string.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;QuerySelectorAllResponse&gt;</returns>
        public System.Threading.Tasks.Task<QuerySelectorAllResponse> QuerySelectorAllAsync(int nodeId, string selector)
        {
            ValidateQuerySelectorAll(nodeId, selector);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("nodeId", nodeId);
            dict.Add("selector", selector);
            return _client.ExecuteDevToolsMethodAsync<QuerySelectorAllResponse>("DOM.querySelectorAll", dict);
        }

        /// <summary>
        /// Returns NodeIds of current top layer elements.
        /// Top layer is rendered closest to the user within a viewport, therefore its elements always
        /// appear on top of all other content.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetTopLayerElementsResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetTopLayerElementsResponse> GetTopLayerElementsAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<GetTopLayerElementsResponse>("DOM.getTopLayerElements", dict);
        }

        /// <summary>
        /// Re-does the last undone action.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> RedoAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DOM.redo", dict);
        }

        partial void ValidateRemoveAttribute(int nodeId, string name);
        /// <summary>
        /// Removes attribute with given name from an element with given id.
        /// </summary>
        /// <param name = "nodeId">Id of the element to remove attribute from.</param>
        /// <param name = "name">Name of the attribute to remove.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> RemoveAttributeAsync(int nodeId, string name)
        {
            ValidateRemoveAttribute(nodeId, name);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("nodeId", nodeId);
            dict.Add("name", name);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DOM.removeAttribute", dict);
        }

        partial void ValidateRemoveNode(int nodeId);
        /// <summary>
        /// Removes node with given id.
        /// </summary>
        /// <param name = "nodeId">Id of the node to remove.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> RemoveNodeAsync(int nodeId)
        {
            ValidateRemoveNode(nodeId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("nodeId", nodeId);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DOM.removeNode", dict);
        }

        partial void ValidateRequestChildNodes(int nodeId, int? depth = null, bool? pierce = null);
        /// <summary>
        /// Requests that children of the node with given id are returned to the caller in form of
        /// `setChildNodes` events where not only immediate children are retrieved, but all children down to
        /// the specified depth.
        /// </summary>
        /// <param name = "nodeId">Id of the node to get children for.</param>
        /// <param name = "depth">The maximum depth at which children should be retrieved, defaults to 1. Use -1 for theentire subtree or provide an integer larger than 0.</param>
        /// <param name = "pierce">Whether or not iframes and shadow roots should be traversed when returning the sub-tree(default is false).</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> RequestChildNodesAsync(int nodeId, int? depth = null, bool? pierce = null)
        {
            ValidateRequestChildNodes(nodeId, depth, pierce);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("nodeId", nodeId);
            if (depth.HasValue)
            {
                dict.Add("depth", depth.Value);
            }

            if (pierce.HasValue)
            {
                dict.Add("pierce", pierce.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DOM.requestChildNodes", dict);
        }

        partial void ValidateRequestNode(string objectId);
        /// <summary>
        /// Requests that the node is sent to the caller given the JavaScript node object reference. All
        /// nodes that form the path from the node to the root are also sent to the client as a series of
        /// `setChildNodes` notifications.
        /// </summary>
        /// <param name = "objectId">JavaScript object id to convert into node.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;RequestNodeResponse&gt;</returns>
        public System.Threading.Tasks.Task<RequestNodeResponse> RequestNodeAsync(string objectId)
        {
            ValidateRequestNode(objectId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("objectId", objectId);
            return _client.ExecuteDevToolsMethodAsync<RequestNodeResponse>("DOM.requestNode", dict);
        }

        partial void ValidateResolveNode(int? nodeId = null, int? backendNodeId = null, string objectGroup = null, int? executionContextId = null);
        /// <summary>
        /// Resolves the JavaScript node object for a given NodeId or BackendNodeId.
        /// </summary>
        /// <param name = "nodeId">Id of the node to resolve.</param>
        /// <param name = "backendNodeId">Backend identifier of the node to resolve.</param>
        /// <param name = "objectGroup">Symbolic group name that can be used to release multiple objects.</param>
        /// <param name = "executionContextId">Execution context in which to resolve the node.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;ResolveNodeResponse&gt;</returns>
        public System.Threading.Tasks.Task<ResolveNodeResponse> ResolveNodeAsync(int? nodeId = null, int? backendNodeId = null, string objectGroup = null, int? executionContextId = null)
        {
            ValidateResolveNode(nodeId, backendNodeId, objectGroup, executionContextId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (nodeId.HasValue)
            {
                dict.Add("nodeId", nodeId.Value);
            }

            if (backendNodeId.HasValue)
            {
                dict.Add("backendNodeId", backendNodeId.Value);
            }

            if (!(string.IsNullOrEmpty(objectGroup)))
            {
                dict.Add("objectGroup", objectGroup);
            }

            if (executionContextId.HasValue)
            {
                dict.Add("executionContextId", executionContextId.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<ResolveNodeResponse>("DOM.resolveNode", dict);
        }

        partial void ValidateSetAttributeValue(int nodeId, string name, string value);
        /// <summary>
        /// Sets attribute for an element with given id.
        /// </summary>
        /// <param name = "nodeId">Id of the element to set attribute for.</param>
        /// <param name = "name">Attribute name.</param>
        /// <param name = "value">Attribute value.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetAttributeValueAsync(int nodeId, string name, string value)
        {
            ValidateSetAttributeValue(nodeId, name, value);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("nodeId", nodeId);
            dict.Add("name", name);
            dict.Add("value", value);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DOM.setAttributeValue", dict);
        }

        partial void ValidateSetAttributesAsText(int nodeId, string text, string name = null);
        /// <summary>
        /// Sets attributes on element with given id. This method is useful when user edits some existing
        /// attribute value and types in several attribute name/value pairs.
        /// </summary>
        /// <param name = "nodeId">Id of the element to set attributes for.</param>
        /// <param name = "text">Text with a number of attributes. Will parse this text using HTML parser.</param>
        /// <param name = "name">Attribute name to replace with new attributes derived from text in case text parsedsuccessfully.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetAttributesAsTextAsync(int nodeId, string text, string name = null)
        {
            ValidateSetAttributesAsText(nodeId, text, name);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("nodeId", nodeId);
            dict.Add("text", text);
            if (!(string.IsNullOrEmpty(name)))
            {
                dict.Add("name", name);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DOM.setAttributesAsText", dict);
        }

        partial void ValidateSetFileInputFiles(string[] files, int? nodeId = null, int? backendNodeId = null, string objectId = null);
        /// <summary>
        /// Sets files for the given file input element.
        /// </summary>
        /// <param name = "files">Array of file paths to set.</param>
        /// <param name = "nodeId">Identifier of the node.</param>
        /// <param name = "backendNodeId">Identifier of the backend node.</param>
        /// <param name = "objectId">JavaScript object id of the node wrapper.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetFileInputFilesAsync(string[] files, int? nodeId = null, int? backendNodeId = null, string objectId = null)
        {
            ValidateSetFileInputFiles(files, nodeId, backendNodeId, objectId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("files", files);
            if (nodeId.HasValue)
            {
                dict.Add("nodeId", nodeId.Value);
            }

            if (backendNodeId.HasValue)
            {
                dict.Add("backendNodeId", backendNodeId.Value);
            }

            if (!(string.IsNullOrEmpty(objectId)))
            {
                dict.Add("objectId", objectId);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DOM.setFileInputFiles", dict);
        }

        partial void ValidateSetNodeStackTracesEnabled(bool enable);
        /// <summary>
        /// Sets if stack traces should be captured for Nodes. See `Node.getNodeStackTraces`. Default is disabled.
        /// </summary>
        /// <param name = "enable">Enable or disable.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetNodeStackTracesEnabledAsync(bool enable)
        {
            ValidateSetNodeStackTracesEnabled(enable);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("enable", enable);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DOM.setNodeStackTracesEnabled", dict);
        }

        partial void ValidateGetNodeStackTraces(int nodeId);
        /// <summary>
        /// Gets stack traces associated with a Node. As of now, only provides stack trace for Node creation.
        /// </summary>
        /// <param name = "nodeId">Id of the node to get stack traces for.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetNodeStackTracesResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetNodeStackTracesResponse> GetNodeStackTracesAsync(int nodeId)
        {
            ValidateGetNodeStackTraces(nodeId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("nodeId", nodeId);
            return _client.ExecuteDevToolsMethodAsync<GetNodeStackTracesResponse>("DOM.getNodeStackTraces", dict);
        }

        partial void ValidateGetFileInfo(string objectId);
        /// <summary>
        /// Returns file information for the given
        /// File wrapper.
        /// </summary>
        /// <param name = "objectId">JavaScript object id of the node wrapper.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetFileInfoResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetFileInfoResponse> GetFileInfoAsync(string objectId)
        {
            ValidateGetFileInfo(objectId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("objectId", objectId);
            return _client.ExecuteDevToolsMethodAsync<GetFileInfoResponse>("DOM.getFileInfo", dict);
        }

        partial void ValidateSetInspectedNode(int nodeId);
        /// <summary>
        /// Enables console to refer to the node with given id via $x (see Command Line API for more details
        /// $x functions).
        /// </summary>
        /// <param name = "nodeId">DOM node id to be accessible by means of $x command line API.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetInspectedNodeAsync(int nodeId)
        {
            ValidateSetInspectedNode(nodeId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("nodeId", nodeId);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DOM.setInspectedNode", dict);
        }

        partial void ValidateSetNodeName(int nodeId, string name);
        /// <summary>
        /// Sets node name for a node with given id.
        /// </summary>
        /// <param name = "nodeId">Id of the node to set name for.</param>
        /// <param name = "name">New node's name.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;SetNodeNameResponse&gt;</returns>
        public System.Threading.Tasks.Task<SetNodeNameResponse> SetNodeNameAsync(int nodeId, string name)
        {
            ValidateSetNodeName(nodeId, name);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("nodeId", nodeId);
            dict.Add("name", name);
            return _client.ExecuteDevToolsMethodAsync<SetNodeNameResponse>("DOM.setNodeName", dict);
        }

        partial void ValidateSetNodeValue(int nodeId, string value);
        /// <summary>
        /// Sets node value for a node with given id.
        /// </summary>
        /// <param name = "nodeId">Id of the node to set value for.</param>
        /// <param name = "value">New node's value.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetNodeValueAsync(int nodeId, string value)
        {
            ValidateSetNodeValue(nodeId, value);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("nodeId", nodeId);
            dict.Add("value", value);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DOM.setNodeValue", dict);
        }

        partial void ValidateSetOuterHTML(int nodeId, string outerHTML);
        /// <summary>
        /// Sets node HTML markup, returns new node id.
        /// </summary>
        /// <param name = "nodeId">Id of the node to set markup for.</param>
        /// <param name = "outerHTML">Outer HTML markup to set.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetOuterHTMLAsync(int nodeId, string outerHTML)
        {
            ValidateSetOuterHTML(nodeId, outerHTML);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("nodeId", nodeId);
            dict.Add("outerHTML", outerHTML);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DOM.setOuterHTML", dict);
        }

        /// <summary>
        /// Undoes the last performed action.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> UndoAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DOM.undo", dict);
        }

        partial void ValidateGetFrameOwner(string frameId);
        /// <summary>
        /// Returns iframe node that owns iframe with the given domain.
        /// </summary>
        /// <param name = "frameId">frameId</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetFrameOwnerResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetFrameOwnerResponse> GetFrameOwnerAsync(string frameId)
        {
            ValidateGetFrameOwner(frameId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("frameId", frameId);
            return _client.ExecuteDevToolsMethodAsync<GetFrameOwnerResponse>("DOM.getFrameOwner", dict);
        }

        partial void ValidateGetContainerForNode(int nodeId, string containerName = null, CefSharp.DevTools.DOM.PhysicalAxes? physicalAxes = null, CefSharp.DevTools.DOM.LogicalAxes? logicalAxes = null);
        /// <summary>
        /// Returns the query container of the given node based on container query
        /// conditions: containerName, physical, and logical axes. If no axes are
        /// provided, the style container is returned, which is the direct parent or the
        /// closest element with a matching container-name.
        /// </summary>
        /// <param name = "nodeId">nodeId</param>
        /// <param name = "containerName">containerName</param>
        /// <param name = "physicalAxes">physicalAxes</param>
        /// <param name = "logicalAxes">logicalAxes</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetContainerForNodeResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetContainerForNodeResponse> GetContainerForNodeAsync(int nodeId, string containerName = null, CefSharp.DevTools.DOM.PhysicalAxes? physicalAxes = null, CefSharp.DevTools.DOM.LogicalAxes? logicalAxes = null)
        {
            ValidateGetContainerForNode(nodeId, containerName, physicalAxes, logicalAxes);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("nodeId", nodeId);
            if (!(string.IsNullOrEmpty(containerName)))
            {
                dict.Add("containerName", containerName);
            }

            if (physicalAxes.HasValue)
            {
                dict.Add("physicalAxes", EnumToString(physicalAxes));
            }

            if (logicalAxes.HasValue)
            {
                dict.Add("logicalAxes", EnumToString(logicalAxes));
            }

            return _client.ExecuteDevToolsMethodAsync<GetContainerForNodeResponse>("DOM.getContainerForNode", dict);
        }

        partial void ValidateGetQueryingDescendantsForContainer(int nodeId);
        /// <summary>
        /// Returns the descendants of a container query container that have
        /// container queries against this container.
        /// </summary>
        /// <param name = "nodeId">Id of the container node to find querying descendants from.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetQueryingDescendantsForContainerResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetQueryingDescendantsForContainerResponse> GetQueryingDescendantsForContainerAsync(int nodeId)
        {
            ValidateGetQueryingDescendantsForContainer(nodeId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("nodeId", nodeId);
            return _client.ExecuteDevToolsMethodAsync<GetQueryingDescendantsForContainerResponse>("DOM.getQueryingDescendantsForContainer", dict);
        }
    }
}

namespace CefSharp.DevTools.DOMDebugger
{
    /// <summary>
    /// GetEventListenersResponse
    /// </summary>
    [DataContract]
    public class GetEventListenersResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.DOMDebugger.EventListener> listeners
        {
            get;
            set;
        }

        /// <summary>
        /// listeners
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.DOMDebugger.EventListener> Listeners
        {
            get
            {
                return listeners;
            }
        }
    }
}

namespace CefSharp.DevTools.DOMDebugger
{
    using System.Linq;

    /// <summary>
    /// DOM debugging allows setting breakpoints on particular DOM operations and events. JavaScript
    /// execution will stop on these operations as if there was a regular breakpoint set.
    /// </summary>
    public partial class DOMDebuggerClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// DOMDebugger
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public DOMDebuggerClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        partial void ValidateGetEventListeners(string objectId, int? depth = null, bool? pierce = null);
        /// <summary>
        /// Returns event listeners of the given object.
        /// </summary>
        /// <param name = "objectId">Identifier of the object to return listeners for.</param>
        /// <param name = "depth">The maximum depth at which Node children should be retrieved, defaults to 1. Use -1 for theentire subtree or provide an integer larger than 0.</param>
        /// <param name = "pierce">Whether or not iframes and shadow roots should be traversed when returning the subtree(default is false). Reports listeners for all contexts if pierce is enabled.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetEventListenersResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetEventListenersResponse> GetEventListenersAsync(string objectId, int? depth = null, bool? pierce = null)
        {
            ValidateGetEventListeners(objectId, depth, pierce);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("objectId", objectId);
            if (depth.HasValue)
            {
                dict.Add("depth", depth.Value);
            }

            if (pierce.HasValue)
            {
                dict.Add("pierce", pierce.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<GetEventListenersResponse>("DOMDebugger.getEventListeners", dict);
        }

        partial void ValidateRemoveDOMBreakpoint(int nodeId, CefSharp.DevTools.DOMDebugger.DOMBreakpointType type);
        /// <summary>
        /// Removes DOM breakpoint that was set using `setDOMBreakpoint`.
        /// </summary>
        /// <param name = "nodeId">Identifier of the node to remove breakpoint from.</param>
        /// <param name = "type">Type of the breakpoint to remove.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> RemoveDOMBreakpointAsync(int nodeId, CefSharp.DevTools.DOMDebugger.DOMBreakpointType type)
        {
            ValidateRemoveDOMBreakpoint(nodeId, type);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("nodeId", nodeId);
            dict.Add("type", EnumToString(type));
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DOMDebugger.removeDOMBreakpoint", dict);
        }

        partial void ValidateRemoveEventListenerBreakpoint(string eventName, string targetName = null);
        /// <summary>
        /// Removes breakpoint on particular DOM event.
        /// </summary>
        /// <param name = "eventName">Event name.</param>
        /// <param name = "targetName">EventTarget interface name.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> RemoveEventListenerBreakpointAsync(string eventName, string targetName = null)
        {
            ValidateRemoveEventListenerBreakpoint(eventName, targetName);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("eventName", eventName);
            if (!(string.IsNullOrEmpty(targetName)))
            {
                dict.Add("targetName", targetName);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DOMDebugger.removeEventListenerBreakpoint", dict);
        }

        partial void ValidateRemoveXHRBreakpoint(string url);
        /// <summary>
        /// Removes breakpoint from XMLHttpRequest.
        /// </summary>
        /// <param name = "url">Resource URL substring.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> RemoveXHRBreakpointAsync(string url)
        {
            ValidateRemoveXHRBreakpoint(url);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("url", url);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DOMDebugger.removeXHRBreakpoint", dict);
        }

        partial void ValidateSetBreakOnCSPViolation(CefSharp.DevTools.DOMDebugger.CSPViolationType[] violationTypes);
        /// <summary>
        /// Sets breakpoint on particular CSP violations.
        /// </summary>
        /// <param name = "violationTypes">CSP Violations to stop upon.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetBreakOnCSPViolationAsync(CefSharp.DevTools.DOMDebugger.CSPViolationType[] violationTypes)
        {
            ValidateSetBreakOnCSPViolation(violationTypes);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("violationTypes", EnumToString(violationTypes));
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DOMDebugger.setBreakOnCSPViolation", dict);
        }

        partial void ValidateSetDOMBreakpoint(int nodeId, CefSharp.DevTools.DOMDebugger.DOMBreakpointType type);
        /// <summary>
        /// Sets breakpoint on particular operation with DOM.
        /// </summary>
        /// <param name = "nodeId">Identifier of the node to set breakpoint on.</param>
        /// <param name = "type">Type of the operation to stop upon.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetDOMBreakpointAsync(int nodeId, CefSharp.DevTools.DOMDebugger.DOMBreakpointType type)
        {
            ValidateSetDOMBreakpoint(nodeId, type);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("nodeId", nodeId);
            dict.Add("type", EnumToString(type));
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DOMDebugger.setDOMBreakpoint", dict);
        }

        partial void ValidateSetEventListenerBreakpoint(string eventName, string targetName = null);
        /// <summary>
        /// Sets breakpoint on particular DOM event.
        /// </summary>
        /// <param name = "eventName">DOM Event name to stop on (any DOM event will do).</param>
        /// <param name = "targetName">EventTarget interface name to stop on. If equal to `"*"` or not provided, will stop on anyEventTarget.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetEventListenerBreakpointAsync(string eventName, string targetName = null)
        {
            ValidateSetEventListenerBreakpoint(eventName, targetName);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("eventName", eventName);
            if (!(string.IsNullOrEmpty(targetName)))
            {
                dict.Add("targetName", targetName);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DOMDebugger.setEventListenerBreakpoint", dict);
        }

        partial void ValidateSetXHRBreakpoint(string url);
        /// <summary>
        /// Sets breakpoint on XMLHttpRequest.
        /// </summary>
        /// <param name = "url">Resource URL substring. All XHRs having this substring in the URL will get stopped upon.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetXHRBreakpointAsync(string url)
        {
            ValidateSetXHRBreakpoint(url);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("url", url);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DOMDebugger.setXHRBreakpoint", dict);
        }
    }
}

namespace CefSharp.DevTools.EventBreakpoints
{
    using System.Linq;

    /// <summary>
    /// EventBreakpoints permits setting JavaScript breakpoints on operations and events
    /// occurring in native code invoked from JavaScript. Once breakpoint is hit, it is
    /// reported through Debugger domain, similarly to regular breakpoints being hit.
    /// </summary>
    public partial class EventBreakpointsClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// EventBreakpoints
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public EventBreakpointsClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        partial void ValidateSetInstrumentationBreakpoint(string eventName);
        /// <summary>
        /// Sets breakpoint on particular native event.
        /// </summary>
        /// <param name = "eventName">Instrumentation name to stop on.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetInstrumentationBreakpointAsync(string eventName)
        {
            ValidateSetInstrumentationBreakpoint(eventName);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("eventName", eventName);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("EventBreakpoints.setInstrumentationBreakpoint", dict);
        }

        partial void ValidateRemoveInstrumentationBreakpoint(string eventName);
        /// <summary>
        /// Removes breakpoint on particular native event.
        /// </summary>
        /// <param name = "eventName">Instrumentation name to stop on.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> RemoveInstrumentationBreakpointAsync(string eventName)
        {
            ValidateRemoveInstrumentationBreakpoint(eventName);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("eventName", eventName);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("EventBreakpoints.removeInstrumentationBreakpoint", dict);
        }

        /// <summary>
        /// Removes all breakpoints
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DisableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("EventBreakpoints.disable", dict);
        }
    }
}

namespace CefSharp.DevTools.DOMSnapshot
{
    /// <summary>
    /// CaptureSnapshotResponse
    /// </summary>
    [DataContract]
    public class CaptureSnapshotResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.DOMSnapshot.DocumentSnapshot> documents
        {
            get;
            set;
        }

        /// <summary>
        /// documents
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.DOMSnapshot.DocumentSnapshot> Documents
        {
            get
            {
                return documents;
            }
        }

        [DataMember]
        internal string[] strings
        {
            get;
            set;
        }

        /// <summary>
        /// strings
        /// </summary>
        public string[] Strings
        {
            get
            {
                return strings;
            }
        }
    }
}

namespace CefSharp.DevTools.DOMSnapshot
{
    using System.Linq;

    /// <summary>
    /// This domain facilitates obtaining document snapshots with DOM, layout, and style information.
    /// </summary>
    public partial class DOMSnapshotClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// DOMSnapshot
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public DOMSnapshotClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// Disables DOM snapshot agent for the given page.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DisableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DOMSnapshot.disable", dict);
        }

        /// <summary>
        /// Enables DOM snapshot agent for the given page.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> EnableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DOMSnapshot.enable", dict);
        }

        partial void ValidateCaptureSnapshot(string[] computedStyles, bool? includePaintOrder = null, bool? includeDOMRects = null, bool? includeBlendedBackgroundColors = null, bool? includeTextColorOpacities = null);
        /// <summary>
        /// Returns a document snapshot, including the full DOM tree of the root node (including iframes,
        /// template contents, and imported documents) in a flattened array, as well as layout and
        /// white-listed computed style information for the nodes. Shadow DOM in the returned DOM tree is
        /// flattened.
        /// </summary>
        /// <param name = "computedStyles">Whitelist of computed styles to return.</param>
        /// <param name = "includePaintOrder">Whether to include layout object paint orders into the snapshot.</param>
        /// <param name = "includeDOMRects">Whether to include DOM rectangles (offsetRects, clientRects, scrollRects) into the snapshot</param>
        /// <param name = "includeBlendedBackgroundColors">Whether to include blended background colors in the snapshot (default: false).Blended background color is achieved by blending background colors of all elementsthat overlap with the current element.</param>
        /// <param name = "includeTextColorOpacities">Whether to include text color opacity in the snapshot (default: false).An element might have the opacity property set that affects the text color of the element.The final text color opacity is computed based on the opacity of all overlapping elements.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;CaptureSnapshotResponse&gt;</returns>
        public System.Threading.Tasks.Task<CaptureSnapshotResponse> CaptureSnapshotAsync(string[] computedStyles, bool? includePaintOrder = null, bool? includeDOMRects = null, bool? includeBlendedBackgroundColors = null, bool? includeTextColorOpacities = null)
        {
            ValidateCaptureSnapshot(computedStyles, includePaintOrder, includeDOMRects, includeBlendedBackgroundColors, includeTextColorOpacities);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("computedStyles", computedStyles);
            if (includePaintOrder.HasValue)
            {
                dict.Add("includePaintOrder", includePaintOrder.Value);
            }

            if (includeDOMRects.HasValue)
            {
                dict.Add("includeDOMRects", includeDOMRects.Value);
            }

            if (includeBlendedBackgroundColors.HasValue)
            {
                dict.Add("includeBlendedBackgroundColors", includeBlendedBackgroundColors.Value);
            }

            if (includeTextColorOpacities.HasValue)
            {
                dict.Add("includeTextColorOpacities", includeTextColorOpacities.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<CaptureSnapshotResponse>("DOMSnapshot.captureSnapshot", dict);
        }
    }
}

namespace CefSharp.DevTools.DOMStorage
{
    /// <summary>
    /// GetDOMStorageItemsResponse
    /// </summary>
    [DataContract]
    public class GetDOMStorageItemsResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string[] entries
        {
            get;
            set;
        }

        /// <summary>
        /// entries
        /// </summary>
        public string[] Entries
        {
            get
            {
                return entries;
            }
        }
    }
}

namespace CefSharp.DevTools.DOMStorage
{
    using System.Linq;

    /// <summary>
    /// Query and modify DOM storage.
    /// </summary>
    public partial class DOMStorageClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// DOMStorage
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public DOMStorageClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// DomStorageItemAdded
        /// </summary>
        public event System.EventHandler<DomStorageItemAddedEventArgs> DomStorageItemAdded
        {
            add
            {
                _client.AddEventHandler<DomStorageItemAddedEventArgs>("DOMStorage.domStorageItemAdded", value);
            }

            remove
            {
                _client.RemoveEventHandler<DomStorageItemAddedEventArgs>("DOMStorage.domStorageItemAdded", value);
            }
        }

        /// <summary>
        /// DomStorageItemRemoved
        /// </summary>
        public event System.EventHandler<DomStorageItemRemovedEventArgs> DomStorageItemRemoved
        {
            add
            {
                _client.AddEventHandler<DomStorageItemRemovedEventArgs>("DOMStorage.domStorageItemRemoved", value);
            }

            remove
            {
                _client.RemoveEventHandler<DomStorageItemRemovedEventArgs>("DOMStorage.domStorageItemRemoved", value);
            }
        }

        /// <summary>
        /// DomStorageItemUpdated
        /// </summary>
        public event System.EventHandler<DomStorageItemUpdatedEventArgs> DomStorageItemUpdated
        {
            add
            {
                _client.AddEventHandler<DomStorageItemUpdatedEventArgs>("DOMStorage.domStorageItemUpdated", value);
            }

            remove
            {
                _client.RemoveEventHandler<DomStorageItemUpdatedEventArgs>("DOMStorage.domStorageItemUpdated", value);
            }
        }

        /// <summary>
        /// DomStorageItemsCleared
        /// </summary>
        public event System.EventHandler<DomStorageItemsClearedEventArgs> DomStorageItemsCleared
        {
            add
            {
                _client.AddEventHandler<DomStorageItemsClearedEventArgs>("DOMStorage.domStorageItemsCleared", value);
            }

            remove
            {
                _client.RemoveEventHandler<DomStorageItemsClearedEventArgs>("DOMStorage.domStorageItemsCleared", value);
            }
        }

        partial void ValidateClear(CefSharp.DevTools.DOMStorage.StorageId storageId);
        /// <summary>
        /// Clear
        /// </summary>
        /// <param name = "storageId">storageId</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ClearAsync(CefSharp.DevTools.DOMStorage.StorageId storageId)
        {
            ValidateClear(storageId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("storageId", storageId.ToDictionary());
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DOMStorage.clear", dict);
        }

        /// <summary>
        /// Disables storage tracking, prevents storage events from being sent to the client.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DisableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DOMStorage.disable", dict);
        }

        /// <summary>
        /// Enables storage tracking, storage events will now be delivered to the client.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> EnableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DOMStorage.enable", dict);
        }

        partial void ValidateGetDOMStorageItems(CefSharp.DevTools.DOMStorage.StorageId storageId);
        /// <summary>
        /// GetDOMStorageItems
        /// </summary>
        /// <param name = "storageId">storageId</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetDOMStorageItemsResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetDOMStorageItemsResponse> GetDOMStorageItemsAsync(CefSharp.DevTools.DOMStorage.StorageId storageId)
        {
            ValidateGetDOMStorageItems(storageId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("storageId", storageId.ToDictionary());
            return _client.ExecuteDevToolsMethodAsync<GetDOMStorageItemsResponse>("DOMStorage.getDOMStorageItems", dict);
        }

        partial void ValidateRemoveDOMStorageItem(CefSharp.DevTools.DOMStorage.StorageId storageId, string key);
        /// <summary>
        /// RemoveDOMStorageItem
        /// </summary>
        /// <param name = "storageId">storageId</param>
        /// <param name = "key">key</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> RemoveDOMStorageItemAsync(CefSharp.DevTools.DOMStorage.StorageId storageId, string key)
        {
            ValidateRemoveDOMStorageItem(storageId, key);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("storageId", storageId.ToDictionary());
            dict.Add("key", key);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DOMStorage.removeDOMStorageItem", dict);
        }

        partial void ValidateSetDOMStorageItem(CefSharp.DevTools.DOMStorage.StorageId storageId, string key, string value);
        /// <summary>
        /// SetDOMStorageItem
        /// </summary>
        /// <param name = "storageId">storageId</param>
        /// <param name = "key">key</param>
        /// <param name = "value">value</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetDOMStorageItemAsync(CefSharp.DevTools.DOMStorage.StorageId storageId, string key, string value)
        {
            ValidateSetDOMStorageItem(storageId, key, value);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("storageId", storageId.ToDictionary());
            dict.Add("key", key);
            dict.Add("value", value);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DOMStorage.setDOMStorageItem", dict);
        }
    }
}

namespace CefSharp.DevTools.Database
{
    /// <summary>
    /// ExecuteSQLResponse
    /// </summary>
    [DataContract]
    public class ExecuteSQLResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string[] columnNames
        {
            get;
            set;
        }

        /// <summary>
        /// columnNames
        /// </summary>
        public string[] ColumnNames
        {
            get
            {
                return columnNames;
            }
        }

        [DataMember]
        internal object[] values
        {
            get;
            set;
        }

        /// <summary>
        /// values
        /// </summary>
        public object[] Values
        {
            get
            {
                return values;
            }
        }

        [DataMember]
        internal CefSharp.DevTools.Database.Error sqlError
        {
            get;
            set;
        }

        /// <summary>
        /// sqlError
        /// </summary>
        public CefSharp.DevTools.Database.Error SqlError
        {
            get
            {
                return sqlError;
            }
        }
    }
}

namespace CefSharp.DevTools.Database
{
    /// <summary>
    /// GetDatabaseTableNamesResponse
    /// </summary>
    [DataContract]
    public class GetDatabaseTableNamesResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string[] tableNames
        {
            get;
            set;
        }

        /// <summary>
        /// tableNames
        /// </summary>
        public string[] TableNames
        {
            get
            {
                return tableNames;
            }
        }
    }
}

namespace CefSharp.DevTools.Database
{
    using System.Linq;

    /// <summary>
    /// Database
    /// </summary>
    public partial class DatabaseClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// Database
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public DatabaseClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// AddDatabase
        /// </summary>
        public event System.EventHandler<AddDatabaseEventArgs> AddDatabase
        {
            add
            {
                _client.AddEventHandler<AddDatabaseEventArgs>("Database.addDatabase", value);
            }

            remove
            {
                _client.RemoveEventHandler<AddDatabaseEventArgs>("Database.addDatabase", value);
            }
        }

        /// <summary>
        /// Disables database tracking, prevents database events from being sent to the client.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DisableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Database.disable", dict);
        }

        /// <summary>
        /// Enables database tracking, database events will now be delivered to the client.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> EnableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Database.enable", dict);
        }

        partial void ValidateExecuteSQL(string databaseId, string query);
        /// <summary>
        /// ExecuteSQL
        /// </summary>
        /// <param name = "databaseId">databaseId</param>
        /// <param name = "query">query</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;ExecuteSQLResponse&gt;</returns>
        public System.Threading.Tasks.Task<ExecuteSQLResponse> ExecuteSQLAsync(string databaseId, string query)
        {
            ValidateExecuteSQL(databaseId, query);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("databaseId", databaseId);
            dict.Add("query", query);
            return _client.ExecuteDevToolsMethodAsync<ExecuteSQLResponse>("Database.executeSQL", dict);
        }

        partial void ValidateGetDatabaseTableNames(string databaseId);
        /// <summary>
        /// GetDatabaseTableNames
        /// </summary>
        /// <param name = "databaseId">databaseId</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetDatabaseTableNamesResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetDatabaseTableNamesResponse> GetDatabaseTableNamesAsync(string databaseId)
        {
            ValidateGetDatabaseTableNames(databaseId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("databaseId", databaseId);
            return _client.ExecuteDevToolsMethodAsync<GetDatabaseTableNamesResponse>("Database.getDatabaseTableNames", dict);
        }
    }
}

namespace CefSharp.DevTools.DeviceOrientation
{
    using System.Linq;

    /// <summary>
    /// DeviceOrientation
    /// </summary>
    public partial class DeviceOrientationClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// DeviceOrientation
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public DeviceOrientationClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// Clears the overridden Device Orientation.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ClearDeviceOrientationOverrideAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DeviceOrientation.clearDeviceOrientationOverride", dict);
        }

        partial void ValidateSetDeviceOrientationOverride(double alpha, double beta, double gamma);
        /// <summary>
        /// Overrides the Device Orientation.
        /// </summary>
        /// <param name = "alpha">Mock alpha</param>
        /// <param name = "beta">Mock beta</param>
        /// <param name = "gamma">Mock gamma</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetDeviceOrientationOverrideAsync(double alpha, double beta, double gamma)
        {
            ValidateSetDeviceOrientationOverride(alpha, beta, gamma);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("alpha", alpha);
            dict.Add("beta", beta);
            dict.Add("gamma", gamma);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DeviceOrientation.setDeviceOrientationOverride", dict);
        }
    }
}

namespace CefSharp.DevTools.Emulation
{
    /// <summary>
    /// CanEmulateResponse
    /// </summary>
    [DataContract]
    public class CanEmulateResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal bool result
        {
            get;
            set;
        }

        /// <summary>
        /// result
        /// </summary>
        public bool Result
        {
            get
            {
                return result;
            }
        }
    }
}

namespace CefSharp.DevTools.Emulation
{
    /// <summary>
    /// GetOverriddenSensorInformationResponse
    /// </summary>
    [DataContract]
    public class GetOverriddenSensorInformationResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal double requestedSamplingFrequency
        {
            get;
            set;
        }

        /// <summary>
        /// requestedSamplingFrequency
        /// </summary>
        public double RequestedSamplingFrequency
        {
            get
            {
                return requestedSamplingFrequency;
            }
        }
    }
}

namespace CefSharp.DevTools.Emulation
{
    /// <summary>
    /// SetVirtualTimePolicyResponse
    /// </summary>
    [DataContract]
    public class SetVirtualTimePolicyResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal double virtualTimeTicksBase
        {
            get;
            set;
        }

        /// <summary>
        /// virtualTimeTicksBase
        /// </summary>
        public double VirtualTimeTicksBase
        {
            get
            {
                return virtualTimeTicksBase;
            }
        }
    }
}

namespace CefSharp.DevTools.Emulation
{
    using System.Linq;

    /// <summary>
    /// Touch/gesture events configuration. Default: current platform.
    /// </summary>
    public enum SetEmitTouchEventsForMouseConfiguration
    {
        /// <summary>
        /// mobile
        /// </summary>
        [EnumMember(Value = ("mobile"))]
        Mobile,
        /// <summary>
        /// desktop
        /// </summary>
        [EnumMember(Value = ("desktop"))]
        Desktop
    }

    /// <summary>
    /// Vision deficiency to emulate. Order: best-effort emulations come first, followed by any
    /// physiologically accurate emulations for medically recognized color vision deficiencies.
    /// </summary>
    public enum SetEmulatedVisionDeficiencyType
    {
        /// <summary>
        /// none
        /// </summary>
        [EnumMember(Value = ("none"))]
        None,
        /// <summary>
        /// blurredVision
        /// </summary>
        [EnumMember(Value = ("blurredVision"))]
        BlurredVision,
        /// <summary>
        /// reducedContrast
        /// </summary>
        [EnumMember(Value = ("reducedContrast"))]
        ReducedContrast,
        /// <summary>
        /// achromatopsia
        /// </summary>
        [EnumMember(Value = ("achromatopsia"))]
        Achromatopsia,
        /// <summary>
        /// deuteranopia
        /// </summary>
        [EnumMember(Value = ("deuteranopia"))]
        Deuteranopia,
        /// <summary>
        /// protanopia
        /// </summary>
        [EnumMember(Value = ("protanopia"))]
        Protanopia,
        /// <summary>
        /// tritanopia
        /// </summary>
        [EnumMember(Value = ("tritanopia"))]
        Tritanopia
    }

    /// <summary>
    /// This domain emulates different environments for the page.
    /// </summary>
    public partial class EmulationClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// Emulation
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public EmulationClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// Notification sent after the virtual time budget for the current VirtualTimePolicy has run out.
        /// </summary>
        public event System.EventHandler<System.EventArgs> VirtualTimeBudgetExpired
        {
            add
            {
                _client.AddEventHandler<System.EventArgs>("Emulation.virtualTimeBudgetExpired", value);
            }

            remove
            {
                _client.RemoveEventHandler<System.EventArgs>("Emulation.virtualTimeBudgetExpired", value);
            }
        }

        /// <summary>
        /// Tells whether emulation is supported.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;CanEmulateResponse&gt;</returns>
        public System.Threading.Tasks.Task<CanEmulateResponse> CanEmulateAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<CanEmulateResponse>("Emulation.canEmulate", dict);
        }

        /// <summary>
        /// Clears the overridden device metrics.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ClearDeviceMetricsOverrideAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Emulation.clearDeviceMetricsOverride", dict);
        }

        /// <summary>
        /// Clears the overridden Geolocation Position and Error.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ClearGeolocationOverrideAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Emulation.clearGeolocationOverride", dict);
        }

        /// <summary>
        /// Requests that page scale factor is reset to initial values.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ResetPageScaleFactorAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Emulation.resetPageScaleFactor", dict);
        }

        partial void ValidateSetFocusEmulationEnabled(bool enabled);
        /// <summary>
        /// Enables or disables simulating a focused and active page.
        /// </summary>
        /// <param name = "enabled">Whether to enable to disable focus emulation.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetFocusEmulationEnabledAsync(bool enabled)
        {
            ValidateSetFocusEmulationEnabled(enabled);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("enabled", enabled);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Emulation.setFocusEmulationEnabled", dict);
        }

        partial void ValidateSetAutoDarkModeOverride(bool? enabled = null);
        /// <summary>
        /// Automatically render all web contents using a dark theme.
        /// </summary>
        /// <param name = "enabled">Whether to enable or disable automatic dark mode.If not specified, any existing override will be cleared.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetAutoDarkModeOverrideAsync(bool? enabled = null)
        {
            ValidateSetAutoDarkModeOverride(enabled);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (enabled.HasValue)
            {
                dict.Add("enabled", enabled.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Emulation.setAutoDarkModeOverride", dict);
        }

        partial void ValidateSetCPUThrottlingRate(double rate);
        /// <summary>
        /// Enables CPU throttling to emulate slow CPUs.
        /// </summary>
        /// <param name = "rate">Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc).</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetCPUThrottlingRateAsync(double rate)
        {
            ValidateSetCPUThrottlingRate(rate);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("rate", rate);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Emulation.setCPUThrottlingRate", dict);
        }

        partial void ValidateSetDefaultBackgroundColorOverride(CefSharp.DevTools.DOM.RGBA color = null);
        /// <summary>
        /// Sets or clears an override of the default background color of the frame. This override is used
        /// if the content does not specify one.
        /// </summary>
        /// <param name = "color">RGBA of the default background color. If not specified, any existing override will becleared.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetDefaultBackgroundColorOverrideAsync(CefSharp.DevTools.DOM.RGBA color = null)
        {
            ValidateSetDefaultBackgroundColorOverride(color);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if ((color) != (null))
            {
                dict.Add("color", color.ToDictionary());
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Emulation.setDefaultBackgroundColorOverride", dict);
        }

        partial void ValidateSetDeviceMetricsOverride(int width, int height, double deviceScaleFactor, bool mobile, double? scale = null, int? screenWidth = null, int? screenHeight = null, int? positionX = null, int? positionY = null, bool? dontSetVisibleSize = null, CefSharp.DevTools.Emulation.ScreenOrientation screenOrientation = null, CefSharp.DevTools.Page.Viewport viewport = null, CefSharp.DevTools.Emulation.DisplayFeature displayFeature = null, CefSharp.DevTools.Emulation.DevicePosture devicePosture = null);
        /// <summary>
        /// Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
        /// window.innerWidth, window.innerHeight, and &quot;device-width&quot;/&quot;device-height&quot;-related CSS media
        /// query results).
        /// </summary>
        /// <param name = "width">Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.</param>
        /// <param name = "height">Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.</param>
        /// <param name = "deviceScaleFactor">Overriding device scale factor value. 0 disables the override.</param>
        /// <param name = "mobile">Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, textautosizing and more.</param>
        /// <param name = "scale">Scale to apply to resulting view image.</param>
        /// <param name = "screenWidth">Overriding screen width value in pixels (minimum 0, maximum 10000000).</param>
        /// <param name = "screenHeight">Overriding screen height value in pixels (minimum 0, maximum 10000000).</param>
        /// <param name = "positionX">Overriding view X position on screen in pixels (minimum 0, maximum 10000000).</param>
        /// <param name = "positionY">Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).</param>
        /// <param name = "dontSetVisibleSize">Do not set visible view size, rely upon explicit setVisibleSize call.</param>
        /// <param name = "screenOrientation">Screen orientation override.</param>
        /// <param name = "viewport">If set, the visible area of the page will be overridden to this viewport. This viewportchange is not observed by the page, e.g. viewport-relative elements do not change positions.</param>
        /// <param name = "displayFeature">If set, the display feature of a multi-segment screen. If not set, multi-segment supportis turned-off.</param>
        /// <param name = "devicePosture">If set, the posture of a foldable device. If not set the posture is setto continuous.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetDeviceMetricsOverrideAsync(int width, int height, double deviceScaleFactor, bool mobile, double? scale = null, int? screenWidth = null, int? screenHeight = null, int? positionX = null, int? positionY = null, bool? dontSetVisibleSize = null, CefSharp.DevTools.Emulation.ScreenOrientation screenOrientation = null, CefSharp.DevTools.Page.Viewport viewport = null, CefSharp.DevTools.Emulation.DisplayFeature displayFeature = null, CefSharp.DevTools.Emulation.DevicePosture devicePosture = null)
        {
            ValidateSetDeviceMetricsOverride(width, height, deviceScaleFactor, mobile, scale, screenWidth, screenHeight, positionX, positionY, dontSetVisibleSize, screenOrientation, viewport, displayFeature, devicePosture);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("width", width);
            dict.Add("height", height);
            dict.Add("deviceScaleFactor", deviceScaleFactor);
            dict.Add("mobile", mobile);
            if (scale.HasValue)
            {
                dict.Add("scale", scale.Value);
            }

            if (screenWidth.HasValue)
            {
                dict.Add("screenWidth", screenWidth.Value);
            }

            if (screenHeight.HasValue)
            {
                dict.Add("screenHeight", screenHeight.Value);
            }

            if (positionX.HasValue)
            {
                dict.Add("positionX", positionX.Value);
            }

            if (positionY.HasValue)
            {
                dict.Add("positionY", positionY.Value);
            }

            if (dontSetVisibleSize.HasValue)
            {
                dict.Add("dontSetVisibleSize", dontSetVisibleSize.Value);
            }

            if ((screenOrientation) != (null))
            {
                dict.Add("screenOrientation", screenOrientation.ToDictionary());
            }

            if ((viewport) != (null))
            {
                dict.Add("viewport", viewport.ToDictionary());
            }

            if ((displayFeature) != (null))
            {
                dict.Add("displayFeature", displayFeature.ToDictionary());
            }

            if ((devicePosture) != (null))
            {
                dict.Add("devicePosture", devicePosture.ToDictionary());
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Emulation.setDeviceMetricsOverride", dict);
        }

        partial void ValidateSetScrollbarsHidden(bool hidden);
        /// <summary>
        /// SetScrollbarsHidden
        /// </summary>
        /// <param name = "hidden">Whether scrollbars should be always hidden.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetScrollbarsHiddenAsync(bool hidden)
        {
            ValidateSetScrollbarsHidden(hidden);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("hidden", hidden);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Emulation.setScrollbarsHidden", dict);
        }

        partial void ValidateSetDocumentCookieDisabled(bool disabled);
        /// <summary>
        /// SetDocumentCookieDisabled
        /// </summary>
        /// <param name = "disabled">Whether document.coookie API should be disabled.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetDocumentCookieDisabledAsync(bool disabled)
        {
            ValidateSetDocumentCookieDisabled(disabled);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("disabled", disabled);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Emulation.setDocumentCookieDisabled", dict);
        }

        partial void ValidateSetEmitTouchEventsForMouse(bool enabled, CefSharp.DevTools.Emulation.SetEmitTouchEventsForMouseConfiguration? configuration = null);
        /// <summary>
        /// SetEmitTouchEventsForMouse
        /// </summary>
        /// <param name = "enabled">Whether touch emulation based on mouse input should be enabled.</param>
        /// <param name = "configuration">Touch/gesture events configuration. Default: current platform.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetEmitTouchEventsForMouseAsync(bool enabled, CefSharp.DevTools.Emulation.SetEmitTouchEventsForMouseConfiguration? configuration = null)
        {
            ValidateSetEmitTouchEventsForMouse(enabled, configuration);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("enabled", enabled);
            if (configuration.HasValue)
            {
                dict.Add("configuration", EnumToString(configuration));
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Emulation.setEmitTouchEventsForMouse", dict);
        }

        partial void ValidateSetEmulatedMedia(string media = null, System.Collections.Generic.IList<CefSharp.DevTools.Emulation.MediaFeature> features = null);
        /// <summary>
        /// Emulates the given media type or media feature for CSS media queries.
        /// </summary>
        /// <param name = "media">Media type to emulate. Empty string disables the override.</param>
        /// <param name = "features">Media features to emulate.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetEmulatedMediaAsync(string media = null, System.Collections.Generic.IList<CefSharp.DevTools.Emulation.MediaFeature> features = null)
        {
            ValidateSetEmulatedMedia(media, features);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (!(string.IsNullOrEmpty(media)))
            {
                dict.Add("media", media);
            }

            if ((features) != (null))
            {
                dict.Add("features", features.Select(x => x.ToDictionary()));
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Emulation.setEmulatedMedia", dict);
        }

        partial void ValidateSetEmulatedVisionDeficiency(CefSharp.DevTools.Emulation.SetEmulatedVisionDeficiencyType type);
        /// <summary>
        /// Emulates the given vision deficiency.
        /// </summary>
        /// <param name = "type">Vision deficiency to emulate. Order: best-effort emulations come first, followed by anyphysiologically accurate emulations for medically recognized color vision deficiencies.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetEmulatedVisionDeficiencyAsync(CefSharp.DevTools.Emulation.SetEmulatedVisionDeficiencyType type)
        {
            ValidateSetEmulatedVisionDeficiency(type);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("type", EnumToString(type));
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Emulation.setEmulatedVisionDeficiency", dict);
        }

        partial void ValidateSetGeolocationOverride(double? latitude = null, double? longitude = null, double? accuracy = null);
        /// <summary>
        /// Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
        /// unavailable.
        /// </summary>
        /// <param name = "latitude">Mock latitude</param>
        /// <param name = "longitude">Mock longitude</param>
        /// <param name = "accuracy">Mock accuracy</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetGeolocationOverrideAsync(double? latitude = null, double? longitude = null, double? accuracy = null)
        {
            ValidateSetGeolocationOverride(latitude, longitude, accuracy);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (latitude.HasValue)
            {
                dict.Add("latitude", latitude.Value);
            }

            if (longitude.HasValue)
            {
                dict.Add("longitude", longitude.Value);
            }

            if (accuracy.HasValue)
            {
                dict.Add("accuracy", accuracy.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Emulation.setGeolocationOverride", dict);
        }

        partial void ValidateGetOverriddenSensorInformation(CefSharp.DevTools.Emulation.SensorType type);
        /// <summary>
        /// GetOverriddenSensorInformation
        /// </summary>
        /// <param name = "type">type</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetOverriddenSensorInformationResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetOverriddenSensorInformationResponse> GetOverriddenSensorInformationAsync(CefSharp.DevTools.Emulation.SensorType type)
        {
            ValidateGetOverriddenSensorInformation(type);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("type", EnumToString(type));
            return _client.ExecuteDevToolsMethodAsync<GetOverriddenSensorInformationResponse>("Emulation.getOverriddenSensorInformation", dict);
        }

        partial void ValidateSetSensorOverrideEnabled(bool enabled, CefSharp.DevTools.Emulation.SensorType type, CefSharp.DevTools.Emulation.SensorMetadata metadata = null);
        /// <summary>
        /// Overrides a platform sensor of a given type. If |enabled| is true, calls to
        /// Sensor.start() will use a virtual sensor as backend rather than fetching
        /// data from a real hardware sensor. Otherwise, existing virtual
        /// sensor-backend Sensor objects will fire an error event and new calls to
        /// Sensor.start() will attempt to use a real sensor instead.
        /// </summary>
        /// <param name = "enabled">enabled</param>
        /// <param name = "type">type</param>
        /// <param name = "metadata">metadata</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetSensorOverrideEnabledAsync(bool enabled, CefSharp.DevTools.Emulation.SensorType type, CefSharp.DevTools.Emulation.SensorMetadata metadata = null)
        {
            ValidateSetSensorOverrideEnabled(enabled, type, metadata);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("enabled", enabled);
            dict.Add("type", EnumToString(type));
            if ((metadata) != (null))
            {
                dict.Add("metadata", metadata.ToDictionary());
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Emulation.setSensorOverrideEnabled", dict);
        }

        partial void ValidateSetSensorOverrideReadings(CefSharp.DevTools.Emulation.SensorType type, CefSharp.DevTools.Emulation.SensorReading reading);
        /// <summary>
        /// Updates the sensor readings reported by a sensor type previously overridden
        /// by setSensorOverrideEnabled.
        /// </summary>
        /// <param name = "type">type</param>
        /// <param name = "reading">reading</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetSensorOverrideReadingsAsync(CefSharp.DevTools.Emulation.SensorType type, CefSharp.DevTools.Emulation.SensorReading reading)
        {
            ValidateSetSensorOverrideReadings(type, reading);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("type", EnumToString(type));
            dict.Add("reading", reading.ToDictionary());
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Emulation.setSensorOverrideReadings", dict);
        }

        partial void ValidateSetIdleOverride(bool isUserActive, bool isScreenUnlocked);
        /// <summary>
        /// Overrides the Idle state.
        /// </summary>
        /// <param name = "isUserActive">Mock isUserActive</param>
        /// <param name = "isScreenUnlocked">Mock isScreenUnlocked</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetIdleOverrideAsync(bool isUserActive, bool isScreenUnlocked)
        {
            ValidateSetIdleOverride(isUserActive, isScreenUnlocked);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("isUserActive", isUserActive);
            dict.Add("isScreenUnlocked", isScreenUnlocked);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Emulation.setIdleOverride", dict);
        }

        /// <summary>
        /// Clears Idle state overrides.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ClearIdleOverrideAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Emulation.clearIdleOverride", dict);
        }

        partial void ValidateSetPageScaleFactor(double pageScaleFactor);
        /// <summary>
        /// Sets a specified page scale factor.
        /// </summary>
        /// <param name = "pageScaleFactor">Page scale factor.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetPageScaleFactorAsync(double pageScaleFactor)
        {
            ValidateSetPageScaleFactor(pageScaleFactor);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("pageScaleFactor", pageScaleFactor);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Emulation.setPageScaleFactor", dict);
        }

        partial void ValidateSetScriptExecutionDisabled(bool value);
        /// <summary>
        /// Switches script execution in the page.
        /// </summary>
        /// <param name = "value">Whether script execution should be disabled in the page.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetScriptExecutionDisabledAsync(bool value)
        {
            ValidateSetScriptExecutionDisabled(value);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("value", value);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Emulation.setScriptExecutionDisabled", dict);
        }

        partial void ValidateSetTouchEmulationEnabled(bool enabled, int? maxTouchPoints = null);
        /// <summary>
        /// Enables touch on platforms which do not support them.
        /// </summary>
        /// <param name = "enabled">Whether the touch event emulation should be enabled.</param>
        /// <param name = "maxTouchPoints">Maximum touch points supported. Defaults to one.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetTouchEmulationEnabledAsync(bool enabled, int? maxTouchPoints = null)
        {
            ValidateSetTouchEmulationEnabled(enabled, maxTouchPoints);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("enabled", enabled);
            if (maxTouchPoints.HasValue)
            {
                dict.Add("maxTouchPoints", maxTouchPoints.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Emulation.setTouchEmulationEnabled", dict);
        }

        partial void ValidateSetVirtualTimePolicy(CefSharp.DevTools.Emulation.VirtualTimePolicy policy, double? budget = null, int? maxVirtualTimeTaskStarvationCount = null, double? initialVirtualTime = null);
        /// <summary>
        /// Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
        /// the current virtual time policy.  Note this supersedes any previous time budget.
        /// </summary>
        /// <param name = "policy">policy</param>
        /// <param name = "budget">If set, after this many virtual milliseconds have elapsed virtual time will be paused and avirtualTimeBudgetExpired event is sent.</param>
        /// <param name = "maxVirtualTimeTaskStarvationCount">If set this specifies the maximum number of tasks that can be run before virtual is forcedforwards to prevent deadlock.</param>
        /// <param name = "initialVirtualTime">If set, base::Time::Now will be overridden to initially return this value.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;SetVirtualTimePolicyResponse&gt;</returns>
        public System.Threading.Tasks.Task<SetVirtualTimePolicyResponse> SetVirtualTimePolicyAsync(CefSharp.DevTools.Emulation.VirtualTimePolicy policy, double? budget = null, int? maxVirtualTimeTaskStarvationCount = null, double? initialVirtualTime = null)
        {
            ValidateSetVirtualTimePolicy(policy, budget, maxVirtualTimeTaskStarvationCount, initialVirtualTime);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("policy", EnumToString(policy));
            if (budget.HasValue)
            {
                dict.Add("budget", budget.Value);
            }

            if (maxVirtualTimeTaskStarvationCount.HasValue)
            {
                dict.Add("maxVirtualTimeTaskStarvationCount", maxVirtualTimeTaskStarvationCount.Value);
            }

            if (initialVirtualTime.HasValue)
            {
                dict.Add("initialVirtualTime", initialVirtualTime.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<SetVirtualTimePolicyResponse>("Emulation.setVirtualTimePolicy", dict);
        }

        partial void ValidateSetLocaleOverride(string locale = null);
        /// <summary>
        /// Overrides default host system locale with the specified one.
        /// </summary>
        /// <param name = "locale">ICU style C locale (e.g. "en_US"). If not specified or empty, disables the override andrestores default host system locale.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetLocaleOverrideAsync(string locale = null)
        {
            ValidateSetLocaleOverride(locale);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (!(string.IsNullOrEmpty(locale)))
            {
                dict.Add("locale", locale);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Emulation.setLocaleOverride", dict);
        }

        partial void ValidateSetTimezoneOverride(string timezoneId);
        /// <summary>
        /// Overrides default host system timezone with the specified one.
        /// </summary>
        /// <param name = "timezoneId">The timezone identifier. List of supported timezones:https://source.chromium.org/chromium/chromium/deps/icu.git/+/faee8bc70570192d82d2978a71e2a615788597d1:source/data/misc/metaZones.txtIf empty, disables the override and restores default host system timezone.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetTimezoneOverrideAsync(string timezoneId)
        {
            ValidateSetTimezoneOverride(timezoneId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("timezoneId", timezoneId);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Emulation.setTimezoneOverride", dict);
        }

        partial void ValidateSetDisabledImageTypes(CefSharp.DevTools.Emulation.DisabledImageType[] imageTypes);
        /// <summary>
        /// SetDisabledImageTypes
        /// </summary>
        /// <param name = "imageTypes">Image types to disable.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetDisabledImageTypesAsync(CefSharp.DevTools.Emulation.DisabledImageType[] imageTypes)
        {
            ValidateSetDisabledImageTypes(imageTypes);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("imageTypes", EnumToString(imageTypes));
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Emulation.setDisabledImageTypes", dict);
        }

        partial void ValidateSetHardwareConcurrencyOverride(int hardwareConcurrency);
        /// <summary>
        /// SetHardwareConcurrencyOverride
        /// </summary>
        /// <param name = "hardwareConcurrency">Hardware concurrency to report</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetHardwareConcurrencyOverrideAsync(int hardwareConcurrency)
        {
            ValidateSetHardwareConcurrencyOverride(hardwareConcurrency);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("hardwareConcurrency", hardwareConcurrency);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Emulation.setHardwareConcurrencyOverride", dict);
        }

        partial void ValidateSetUserAgentOverride(string userAgent, string acceptLanguage = null, string platform = null, CefSharp.DevTools.Emulation.UserAgentMetadata userAgentMetadata = null);
        /// <summary>
        /// Allows overriding user agent with the given string.
        /// `userAgentMetadata` must be set for Client Hint headers to be sent.
        /// </summary>
        /// <param name = "userAgent">User agent to use.</param>
        /// <param name = "acceptLanguage">Browser language to emulate.</param>
        /// <param name = "platform">The platform navigator.platform should return.</param>
        /// <param name = "userAgentMetadata">To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetUserAgentOverrideAsync(string userAgent, string acceptLanguage = null, string platform = null, CefSharp.DevTools.Emulation.UserAgentMetadata userAgentMetadata = null)
        {
            ValidateSetUserAgentOverride(userAgent, acceptLanguage, platform, userAgentMetadata);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("userAgent", userAgent);
            if (!(string.IsNullOrEmpty(acceptLanguage)))
            {
                dict.Add("acceptLanguage", acceptLanguage);
            }

            if (!(string.IsNullOrEmpty(platform)))
            {
                dict.Add("platform", platform);
            }

            if ((userAgentMetadata) != (null))
            {
                dict.Add("userAgentMetadata", userAgentMetadata.ToDictionary());
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Emulation.setUserAgentOverride", dict);
        }

        partial void ValidateSetAutomationOverride(bool enabled);
        /// <summary>
        /// Allows overriding the automation flag.
        /// </summary>
        /// <param name = "enabled">Whether the override should be enabled.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetAutomationOverrideAsync(bool enabled)
        {
            ValidateSetAutomationOverride(enabled);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("enabled", enabled);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Emulation.setAutomationOverride", dict);
        }
    }
}

namespace CefSharp.DevTools.HeadlessExperimental
{
    /// <summary>
    /// BeginFrameResponse
    /// </summary>
    [DataContract]
    public class BeginFrameResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal bool hasDamage
        {
            get;
            set;
        }

        /// <summary>
        /// hasDamage
        /// </summary>
        public bool HasDamage
        {
            get
            {
                return hasDamage;
            }
        }

        [DataMember]
        internal string screenshotData
        {
            get;
            set;
        }

        /// <summary>
        /// screenshotData
        /// </summary>
        public byte[] ScreenshotData
        {
            get
            {
                return Convert(screenshotData);
            }
        }
    }
}

namespace CefSharp.DevTools.HeadlessExperimental
{
    using System.Linq;

    /// <summary>
    /// This domain provides experimental commands only supported in headless mode.
    /// </summary>
    public partial class HeadlessExperimentalClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// HeadlessExperimental
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public HeadlessExperimentalClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        partial void ValidateBeginFrame(double? frameTimeTicks = null, double? interval = null, bool? noDisplayUpdates = null, CefSharp.DevTools.HeadlessExperimental.ScreenshotParams screenshot = null);
        /// <summary>
        /// Sends a BeginFrame to the target and returns when the frame was completed. Optionally captures a
        /// screenshot from the resulting frame. Requires that the target was created with enabled
        /// BeginFrameControl. Designed for use with --run-all-compositor-stages-before-draw, see also
        /// https://goo.gle/chrome-headless-rendering for more background.
        /// </summary>
        /// <param name = "frameTimeTicks">Timestamp of this BeginFrame in Renderer TimeTicks (milliseconds of uptime). If not set,the current time will be used.</param>
        /// <param name = "interval">The interval between BeginFrames that is reported to the compositor, in milliseconds.Defaults to a 60 frames/second interval, i.e. about 16.666 milliseconds.</param>
        /// <param name = "noDisplayUpdates">Whether updates should not be committed and drawn onto the display. False by default. Iftrue, only side effects of the BeginFrame will be run, such as layout and animations, butany visual updates may not be visible on the display or in screenshots.</param>
        /// <param name = "screenshot">If set, a screenshot of the frame will be captured and returned in the response. Otherwise,no screenshot will be captured. Note that capturing a screenshot can fail, for example,during renderer initialization. In such a case, no screenshot data will be returned.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;BeginFrameResponse&gt;</returns>
        public System.Threading.Tasks.Task<BeginFrameResponse> BeginFrameAsync(double? frameTimeTicks = null, double? interval = null, bool? noDisplayUpdates = null, CefSharp.DevTools.HeadlessExperimental.ScreenshotParams screenshot = null)
        {
            ValidateBeginFrame(frameTimeTicks, interval, noDisplayUpdates, screenshot);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (frameTimeTicks.HasValue)
            {
                dict.Add("frameTimeTicks", frameTimeTicks.Value);
            }

            if (interval.HasValue)
            {
                dict.Add("interval", interval.Value);
            }

            if (noDisplayUpdates.HasValue)
            {
                dict.Add("noDisplayUpdates", noDisplayUpdates.Value);
            }

            if ((screenshot) != (null))
            {
                dict.Add("screenshot", screenshot.ToDictionary());
            }

            return _client.ExecuteDevToolsMethodAsync<BeginFrameResponse>("HeadlessExperimental.beginFrame", dict);
        }
    }
}

namespace CefSharp.DevTools.IO
{
    /// <summary>
    /// ReadResponse
    /// </summary>
    [DataContract]
    public class ReadResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal bool? base64Encoded
        {
            get;
            set;
        }

        /// <summary>
        /// base64Encoded
        /// </summary>
        public bool? Base64Encoded
        {
            get
            {
                return base64Encoded;
            }
        }

        [DataMember]
        internal string data
        {
            get;
            set;
        }

        /// <summary>
        /// data
        /// </summary>
        public string Data
        {
            get
            {
                return data;
            }
        }

        [DataMember]
        internal bool eof
        {
            get;
            set;
        }

        /// <summary>
        /// eof
        /// </summary>
        public bool Eof
        {
            get
            {
                return eof;
            }
        }
    }
}

namespace CefSharp.DevTools.IO
{
    /// <summary>
    /// ResolveBlobResponse
    /// </summary>
    [DataContract]
    public class ResolveBlobResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string uuid
        {
            get;
            set;
        }

        /// <summary>
        /// uuid
        /// </summary>
        public string Uuid
        {
            get
            {
                return uuid;
            }
        }
    }
}

namespace CefSharp.DevTools.IO
{
    using System.Linq;

    /// <summary>
    /// Input/Output operations for streams produced by DevTools.
    /// </summary>
    public partial class IOClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// IO
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public IOClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        partial void ValidateClose(string handle);
        /// <summary>
        /// Close the stream, discard any temporary backing storage.
        /// </summary>
        /// <param name = "handle">Handle of the stream to close.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> CloseAsync(string handle)
        {
            ValidateClose(handle);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("handle", handle);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("IO.close", dict);
        }

        partial void ValidateRead(string handle, int? offset = null, int? size = null);
        /// <summary>
        /// Read a chunk of the stream
        /// </summary>
        /// <param name = "handle">Handle of the stream to read.</param>
        /// <param name = "offset">Seek to the specified offset before reading (if not specified, proceed with offsetfollowing the last read). Some types of streams may only support sequential reads.</param>
        /// <param name = "size">Maximum number of bytes to read (left upon the agent discretion if not specified).</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;ReadResponse&gt;</returns>
        public System.Threading.Tasks.Task<ReadResponse> ReadAsync(string handle, int? offset = null, int? size = null)
        {
            ValidateRead(handle, offset, size);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("handle", handle);
            if (offset.HasValue)
            {
                dict.Add("offset", offset.Value);
            }

            if (size.HasValue)
            {
                dict.Add("size", size.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<ReadResponse>("IO.read", dict);
        }

        partial void ValidateResolveBlob(string objectId);
        /// <summary>
        /// Return UUID of Blob object specified by a remote object id.
        /// </summary>
        /// <param name = "objectId">Object id of a Blob object wrapper.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;ResolveBlobResponse&gt;</returns>
        public System.Threading.Tasks.Task<ResolveBlobResponse> ResolveBlobAsync(string objectId)
        {
            ValidateResolveBlob(objectId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("objectId", objectId);
            return _client.ExecuteDevToolsMethodAsync<ResolveBlobResponse>("IO.resolveBlob", dict);
        }
    }
}

namespace CefSharp.DevTools.IndexedDB
{
    /// <summary>
    /// RequestDataResponse
    /// </summary>
    [DataContract]
    public class RequestDataResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.IndexedDB.DataEntry> objectStoreDataEntries
        {
            get;
            set;
        }

        /// <summary>
        /// objectStoreDataEntries
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.IndexedDB.DataEntry> ObjectStoreDataEntries
        {
            get
            {
                return objectStoreDataEntries;
            }
        }

        [DataMember]
        internal bool hasMore
        {
            get;
            set;
        }

        /// <summary>
        /// hasMore
        /// </summary>
        public bool HasMore
        {
            get
            {
                return hasMore;
            }
        }
    }
}

namespace CefSharp.DevTools.IndexedDB
{
    /// <summary>
    /// GetMetadataResponse
    /// </summary>
    [DataContract]
    public class GetMetadataResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal double entriesCount
        {
            get;
            set;
        }

        /// <summary>
        /// entriesCount
        /// </summary>
        public double EntriesCount
        {
            get
            {
                return entriesCount;
            }
        }

        [DataMember]
        internal double keyGeneratorValue
        {
            get;
            set;
        }

        /// <summary>
        /// keyGeneratorValue
        /// </summary>
        public double KeyGeneratorValue
        {
            get
            {
                return keyGeneratorValue;
            }
        }
    }
}

namespace CefSharp.DevTools.IndexedDB
{
    /// <summary>
    /// RequestDatabaseResponse
    /// </summary>
    [DataContract]
    public class RequestDatabaseResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.IndexedDB.DatabaseWithObjectStores databaseWithObjectStores
        {
            get;
            set;
        }

        /// <summary>
        /// databaseWithObjectStores
        /// </summary>
        public CefSharp.DevTools.IndexedDB.DatabaseWithObjectStores DatabaseWithObjectStores
        {
            get
            {
                return databaseWithObjectStores;
            }
        }
    }
}

namespace CefSharp.DevTools.IndexedDB
{
    /// <summary>
    /// RequestDatabaseNamesResponse
    /// </summary>
    [DataContract]
    public class RequestDatabaseNamesResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string[] databaseNames
        {
            get;
            set;
        }

        /// <summary>
        /// databaseNames
        /// </summary>
        public string[] DatabaseNames
        {
            get
            {
                return databaseNames;
            }
        }
    }
}

namespace CefSharp.DevTools.IndexedDB
{
    using System.Linq;

    /// <summary>
    /// IndexedDB
    /// </summary>
    public partial class IndexedDBClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// IndexedDB
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public IndexedDBClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        partial void ValidateClearObjectStore(string databaseName, string objectStoreName, string securityOrigin = null, string storageKey = null, CefSharp.DevTools.Storage.StorageBucket storageBucket = null);
        /// <summary>
        /// Clears all entries from an object store.
        /// </summary>
        /// <param name = "databaseName">Database name.</param>
        /// <param name = "objectStoreName">Object store name.</param>
        /// <param name = "securityOrigin">At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.Security origin.</param>
        /// <param name = "storageKey">Storage key.</param>
        /// <param name = "storageBucket">Storage bucket. If not specified, it uses the default bucket.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ClearObjectStoreAsync(string databaseName, string objectStoreName, string securityOrigin = null, string storageKey = null, CefSharp.DevTools.Storage.StorageBucket storageBucket = null)
        {
            ValidateClearObjectStore(databaseName, objectStoreName, securityOrigin, storageKey, storageBucket);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("databaseName", databaseName);
            dict.Add("objectStoreName", objectStoreName);
            if (!(string.IsNullOrEmpty(securityOrigin)))
            {
                dict.Add("securityOrigin", securityOrigin);
            }

            if (!(string.IsNullOrEmpty(storageKey)))
            {
                dict.Add("storageKey", storageKey);
            }

            if ((storageBucket) != (null))
            {
                dict.Add("storageBucket", storageBucket.ToDictionary());
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("IndexedDB.clearObjectStore", dict);
        }

        partial void ValidateDeleteDatabase(string databaseName, string securityOrigin = null, string storageKey = null, CefSharp.DevTools.Storage.StorageBucket storageBucket = null);
        /// <summary>
        /// Deletes a database.
        /// </summary>
        /// <param name = "databaseName">Database name.</param>
        /// <param name = "securityOrigin">At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.Security origin.</param>
        /// <param name = "storageKey">Storage key.</param>
        /// <param name = "storageBucket">Storage bucket. If not specified, it uses the default bucket.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DeleteDatabaseAsync(string databaseName, string securityOrigin = null, string storageKey = null, CefSharp.DevTools.Storage.StorageBucket storageBucket = null)
        {
            ValidateDeleteDatabase(databaseName, securityOrigin, storageKey, storageBucket);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("databaseName", databaseName);
            if (!(string.IsNullOrEmpty(securityOrigin)))
            {
                dict.Add("securityOrigin", securityOrigin);
            }

            if (!(string.IsNullOrEmpty(storageKey)))
            {
                dict.Add("storageKey", storageKey);
            }

            if ((storageBucket) != (null))
            {
                dict.Add("storageBucket", storageBucket.ToDictionary());
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("IndexedDB.deleteDatabase", dict);
        }

        partial void ValidateDeleteObjectStoreEntries(string databaseName, string objectStoreName, CefSharp.DevTools.IndexedDB.KeyRange keyRange, string securityOrigin = null, string storageKey = null, CefSharp.DevTools.Storage.StorageBucket storageBucket = null);
        /// <summary>
        /// Delete a range of entries from an object store
        /// </summary>
        /// <param name = "databaseName">databaseName</param>
        /// <param name = "objectStoreName">objectStoreName</param>
        /// <param name = "keyRange">Range of entry keys to delete</param>
        /// <param name = "securityOrigin">At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.Security origin.</param>
        /// <param name = "storageKey">Storage key.</param>
        /// <param name = "storageBucket">Storage bucket. If not specified, it uses the default bucket.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DeleteObjectStoreEntriesAsync(string databaseName, string objectStoreName, CefSharp.DevTools.IndexedDB.KeyRange keyRange, string securityOrigin = null, string storageKey = null, CefSharp.DevTools.Storage.StorageBucket storageBucket = null)
        {
            ValidateDeleteObjectStoreEntries(databaseName, objectStoreName, keyRange, securityOrigin, storageKey, storageBucket);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("databaseName", databaseName);
            dict.Add("objectStoreName", objectStoreName);
            dict.Add("keyRange", keyRange.ToDictionary());
            if (!(string.IsNullOrEmpty(securityOrigin)))
            {
                dict.Add("securityOrigin", securityOrigin);
            }

            if (!(string.IsNullOrEmpty(storageKey)))
            {
                dict.Add("storageKey", storageKey);
            }

            if ((storageBucket) != (null))
            {
                dict.Add("storageBucket", storageBucket.ToDictionary());
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("IndexedDB.deleteObjectStoreEntries", dict);
        }

        /// <summary>
        /// Disables events from backend.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DisableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("IndexedDB.disable", dict);
        }

        /// <summary>
        /// Enables events from backend.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> EnableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("IndexedDB.enable", dict);
        }

        partial void ValidateRequestData(string databaseName, string objectStoreName, string indexName, int skipCount, int pageSize, string securityOrigin = null, string storageKey = null, CefSharp.DevTools.Storage.StorageBucket storageBucket = null, CefSharp.DevTools.IndexedDB.KeyRange keyRange = null);
        /// <summary>
        /// Requests data from object store or index.
        /// </summary>
        /// <param name = "databaseName">Database name.</param>
        /// <param name = "objectStoreName">Object store name.</param>
        /// <param name = "indexName">Index name, empty string for object store data requests.</param>
        /// <param name = "skipCount">Number of records to skip.</param>
        /// <param name = "pageSize">Number of records to fetch.</param>
        /// <param name = "securityOrigin">At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.Security origin.</param>
        /// <param name = "storageKey">Storage key.</param>
        /// <param name = "storageBucket">Storage bucket. If not specified, it uses the default bucket.</param>
        /// <param name = "keyRange">Key range.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;RequestDataResponse&gt;</returns>
        public System.Threading.Tasks.Task<RequestDataResponse> RequestDataAsync(string databaseName, string objectStoreName, string indexName, int skipCount, int pageSize, string securityOrigin = null, string storageKey = null, CefSharp.DevTools.Storage.StorageBucket storageBucket = null, CefSharp.DevTools.IndexedDB.KeyRange keyRange = null)
        {
            ValidateRequestData(databaseName, objectStoreName, indexName, skipCount, pageSize, securityOrigin, storageKey, storageBucket, keyRange);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("databaseName", databaseName);
            dict.Add("objectStoreName", objectStoreName);
            dict.Add("indexName", indexName);
            dict.Add("skipCount", skipCount);
            dict.Add("pageSize", pageSize);
            if (!(string.IsNullOrEmpty(securityOrigin)))
            {
                dict.Add("securityOrigin", securityOrigin);
            }

            if (!(string.IsNullOrEmpty(storageKey)))
            {
                dict.Add("storageKey", storageKey);
            }

            if ((storageBucket) != (null))
            {
                dict.Add("storageBucket", storageBucket.ToDictionary());
            }

            if ((keyRange) != (null))
            {
                dict.Add("keyRange", keyRange.ToDictionary());
            }

            return _client.ExecuteDevToolsMethodAsync<RequestDataResponse>("IndexedDB.requestData", dict);
        }

        partial void ValidateGetMetadata(string databaseName, string objectStoreName, string securityOrigin = null, string storageKey = null, CefSharp.DevTools.Storage.StorageBucket storageBucket = null);
        /// <summary>
        /// Gets metadata of an object store.
        /// </summary>
        /// <param name = "databaseName">Database name.</param>
        /// <param name = "objectStoreName">Object store name.</param>
        /// <param name = "securityOrigin">At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.Security origin.</param>
        /// <param name = "storageKey">Storage key.</param>
        /// <param name = "storageBucket">Storage bucket. If not specified, it uses the default bucket.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetMetadataResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetMetadataResponse> GetMetadataAsync(string databaseName, string objectStoreName, string securityOrigin = null, string storageKey = null, CefSharp.DevTools.Storage.StorageBucket storageBucket = null)
        {
            ValidateGetMetadata(databaseName, objectStoreName, securityOrigin, storageKey, storageBucket);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("databaseName", databaseName);
            dict.Add("objectStoreName", objectStoreName);
            if (!(string.IsNullOrEmpty(securityOrigin)))
            {
                dict.Add("securityOrigin", securityOrigin);
            }

            if (!(string.IsNullOrEmpty(storageKey)))
            {
                dict.Add("storageKey", storageKey);
            }

            if ((storageBucket) != (null))
            {
                dict.Add("storageBucket", storageBucket.ToDictionary());
            }

            return _client.ExecuteDevToolsMethodAsync<GetMetadataResponse>("IndexedDB.getMetadata", dict);
        }

        partial void ValidateRequestDatabase(string databaseName, string securityOrigin = null, string storageKey = null, CefSharp.DevTools.Storage.StorageBucket storageBucket = null);
        /// <summary>
        /// Requests database with given name in given frame.
        /// </summary>
        /// <param name = "databaseName">Database name.</param>
        /// <param name = "securityOrigin">At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.Security origin.</param>
        /// <param name = "storageKey">Storage key.</param>
        /// <param name = "storageBucket">Storage bucket. If not specified, it uses the default bucket.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;RequestDatabaseResponse&gt;</returns>
        public System.Threading.Tasks.Task<RequestDatabaseResponse> RequestDatabaseAsync(string databaseName, string securityOrigin = null, string storageKey = null, CefSharp.DevTools.Storage.StorageBucket storageBucket = null)
        {
            ValidateRequestDatabase(databaseName, securityOrigin, storageKey, storageBucket);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("databaseName", databaseName);
            if (!(string.IsNullOrEmpty(securityOrigin)))
            {
                dict.Add("securityOrigin", securityOrigin);
            }

            if (!(string.IsNullOrEmpty(storageKey)))
            {
                dict.Add("storageKey", storageKey);
            }

            if ((storageBucket) != (null))
            {
                dict.Add("storageBucket", storageBucket.ToDictionary());
            }

            return _client.ExecuteDevToolsMethodAsync<RequestDatabaseResponse>("IndexedDB.requestDatabase", dict);
        }

        partial void ValidateRequestDatabaseNames(string securityOrigin = null, string storageKey = null, CefSharp.DevTools.Storage.StorageBucket storageBucket = null);
        /// <summary>
        /// Requests database names for given security origin.
        /// </summary>
        /// <param name = "securityOrigin">At least and at most one of securityOrigin, storageKey, or storageBucket must be specified.Security origin.</param>
        /// <param name = "storageKey">Storage key.</param>
        /// <param name = "storageBucket">Storage bucket. If not specified, it uses the default bucket.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;RequestDatabaseNamesResponse&gt;</returns>
        public System.Threading.Tasks.Task<RequestDatabaseNamesResponse> RequestDatabaseNamesAsync(string securityOrigin = null, string storageKey = null, CefSharp.DevTools.Storage.StorageBucket storageBucket = null)
        {
            ValidateRequestDatabaseNames(securityOrigin, storageKey, storageBucket);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (!(string.IsNullOrEmpty(securityOrigin)))
            {
                dict.Add("securityOrigin", securityOrigin);
            }

            if (!(string.IsNullOrEmpty(storageKey)))
            {
                dict.Add("storageKey", storageKey);
            }

            if ((storageBucket) != (null))
            {
                dict.Add("storageBucket", storageBucket.ToDictionary());
            }

            return _client.ExecuteDevToolsMethodAsync<RequestDatabaseNamesResponse>("IndexedDB.requestDatabaseNames", dict);
        }
    }
}

namespace CefSharp.DevTools.Input
{
    using System.Linq;

    /// <summary>
    /// Type of the drag event.
    /// </summary>
    public enum DispatchDragEventType
    {
        /// <summary>
        /// dragEnter
        /// </summary>
        [EnumMember(Value = ("dragEnter"))]
        DragEnter,
        /// <summary>
        /// dragOver
        /// </summary>
        [EnumMember(Value = ("dragOver"))]
        DragOver,
        /// <summary>
        /// drop
        /// </summary>
        [EnumMember(Value = ("drop"))]
        Drop,
        /// <summary>
        /// dragCancel
        /// </summary>
        [EnumMember(Value = ("dragCancel"))]
        DragCancel
    }

    /// <summary>
    /// Type of the key event.
    /// </summary>
    public enum DispatchKeyEventType
    {
        /// <summary>
        /// keyDown
        /// </summary>
        [EnumMember(Value = ("keyDown"))]
        KeyDown,
        /// <summary>
        /// keyUp
        /// </summary>
        [EnumMember(Value = ("keyUp"))]
        KeyUp,
        /// <summary>
        /// rawKeyDown
        /// </summary>
        [EnumMember(Value = ("rawKeyDown"))]
        RawKeyDown,
        /// <summary>
        /// char
        /// </summary>
        [EnumMember(Value = ("char"))]
        Char
    }

    /// <summary>
    /// Type of the mouse event.
    /// </summary>
    public enum DispatchMouseEventType
    {
        /// <summary>
        /// mousePressed
        /// </summary>
        [EnumMember(Value = ("mousePressed"))]
        MousePressed,
        /// <summary>
        /// mouseReleased
        /// </summary>
        [EnumMember(Value = ("mouseReleased"))]
        MouseReleased,
        /// <summary>
        /// mouseMoved
        /// </summary>
        [EnumMember(Value = ("mouseMoved"))]
        MouseMoved,
        /// <summary>
        /// mouseWheel
        /// </summary>
        [EnumMember(Value = ("mouseWheel"))]
        MouseWheel
    }

    /// <summary>
    /// Pointer type (default: &quot;mouse&quot;).
    /// </summary>
    public enum DispatchMouseEventPointerType
    {
        /// <summary>
        /// mouse
        /// </summary>
        [EnumMember(Value = ("mouse"))]
        Mouse,
        /// <summary>
        /// pen
        /// </summary>
        [EnumMember(Value = ("pen"))]
        Pen
    }

    /// <summary>
    /// Type of the touch event. TouchEnd and TouchCancel must not contain any touch points, while
    /// TouchStart and TouchMove must contains at least one.
    /// </summary>
    public enum DispatchTouchEventType
    {
        /// <summary>
        /// touchStart
        /// </summary>
        [EnumMember(Value = ("touchStart"))]
        TouchStart,
        /// <summary>
        /// touchEnd
        /// </summary>
        [EnumMember(Value = ("touchEnd"))]
        TouchEnd,
        /// <summary>
        /// touchMove
        /// </summary>
        [EnumMember(Value = ("touchMove"))]
        TouchMove,
        /// <summary>
        /// touchCancel
        /// </summary>
        [EnumMember(Value = ("touchCancel"))]
        TouchCancel
    }

    /// <summary>
    /// Type of the mouse event.
    /// </summary>
    public enum EmulateTouchFromMouseEventType
    {
        /// <summary>
        /// mousePressed
        /// </summary>
        [EnumMember(Value = ("mousePressed"))]
        MousePressed,
        /// <summary>
        /// mouseReleased
        /// </summary>
        [EnumMember(Value = ("mouseReleased"))]
        MouseReleased,
        /// <summary>
        /// mouseMoved
        /// </summary>
        [EnumMember(Value = ("mouseMoved"))]
        MouseMoved,
        /// <summary>
        /// mouseWheel
        /// </summary>
        [EnumMember(Value = ("mouseWheel"))]
        MouseWheel
    }

    /// <summary>
    /// Input
    /// </summary>
    public partial class InputClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// Input
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public InputClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// Emitted only when `Input.setInterceptDrags` is enabled. Use this data with `Input.dispatchDragEvent` to
        /// restore normal drag and drop behavior.
        /// </summary>
        public event System.EventHandler<DragInterceptedEventArgs> DragIntercepted
        {
            add
            {
                _client.AddEventHandler<DragInterceptedEventArgs>("Input.dragIntercepted", value);
            }

            remove
            {
                _client.RemoveEventHandler<DragInterceptedEventArgs>("Input.dragIntercepted", value);
            }
        }

        partial void ValidateDispatchDragEvent(CefSharp.DevTools.Input.DispatchDragEventType type, double x, double y, CefSharp.DevTools.Input.DragData data, int? modifiers = null);
        /// <summary>
        /// Dispatches a drag event into the page.
        /// </summary>
        /// <param name = "type">Type of the drag event.</param>
        /// <param name = "x">X coordinate of the event relative to the main frame's viewport in CSS pixels.</param>
        /// <param name = "y">Y coordinate of the event relative to the main frame's viewport in CSS pixels. 0 refers tothe top of the viewport and Y increases as it proceeds towards the bottom of the viewport.</param>
        /// <param name = "data">data</param>
        /// <param name = "modifiers">Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8(default: 0).</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DispatchDragEventAsync(CefSharp.DevTools.Input.DispatchDragEventType type, double x, double y, CefSharp.DevTools.Input.DragData data, int? modifiers = null)
        {
            ValidateDispatchDragEvent(type, x, y, data, modifiers);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("type", EnumToString(type));
            dict.Add("x", x);
            dict.Add("y", y);
            dict.Add("data", data.ToDictionary());
            if (modifiers.HasValue)
            {
                dict.Add("modifiers", modifiers.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Input.dispatchDragEvent", dict);
        }

        partial void ValidateDispatchKeyEvent(CefSharp.DevTools.Input.DispatchKeyEventType type, int? modifiers = null, double? timestamp = null, string text = null, string unmodifiedText = null, string keyIdentifier = null, string code = null, string key = null, int? windowsVirtualKeyCode = null, int? nativeVirtualKeyCode = null, bool? autoRepeat = null, bool? isKeypad = null, bool? isSystemKey = null, int? location = null, string[] commands = null);
        /// <summary>
        /// Dispatches a key event to the page.
        /// </summary>
        /// <param name = "type">Type of the key event.</param>
        /// <param name = "modifiers">Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8(default: 0).</param>
        /// <param name = "timestamp">Time at which the event occurred.</param>
        /// <param name = "text">Text as generated by processing a virtual key code with a keyboard layout. Not needed forfor `keyUp` and `rawKeyDown` events (default: "")</param>
        /// <param name = "unmodifiedText">Text that would have been generated by the keyboard if no modifiers were pressed (except forshift). Useful for shortcut (accelerator) key handling (default: "").</param>
        /// <param name = "keyIdentifier">Unique key identifier (e.g., 'U+0041') (default: "").</param>
        /// <param name = "code">Unique DOM defined string value for each physical key (e.g., 'KeyA') (default: "").</param>
        /// <param name = "key">Unique DOM defined string value describing the meaning of the key in the context of activemodifiers, keyboard layout, etc (e.g., 'AltGr') (default: "").</param>
        /// <param name = "windowsVirtualKeyCode">Windows virtual key code (default: 0).</param>
        /// <param name = "nativeVirtualKeyCode">Native virtual key code (default: 0).</param>
        /// <param name = "autoRepeat">Whether the event was generated from auto repeat (default: false).</param>
        /// <param name = "isKeypad">Whether the event was generated from the keypad (default: false).</param>
        /// <param name = "isSystemKey">Whether the event was a system key event (default: false).</param>
        /// <param name = "location">Whether the event was from the left or right side of the keyboard. 1=Left, 2=Right (default:0).</param>
        /// <param name = "commands">Editing commands to send with the key event (e.g., 'selectAll') (default: []).These are related to but not equal the command names used in `document.execCommand` and NSStandardKeyBindingResponding.See https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h for valid command names.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DispatchKeyEventAsync(CefSharp.DevTools.Input.DispatchKeyEventType type, int? modifiers = null, double? timestamp = null, string text = null, string unmodifiedText = null, string keyIdentifier = null, string code = null, string key = null, int? windowsVirtualKeyCode = null, int? nativeVirtualKeyCode = null, bool? autoRepeat = null, bool? isKeypad = null, bool? isSystemKey = null, int? location = null, string[] commands = null)
        {
            ValidateDispatchKeyEvent(type, modifiers, timestamp, text, unmodifiedText, keyIdentifier, code, key, windowsVirtualKeyCode, nativeVirtualKeyCode, autoRepeat, isKeypad, isSystemKey, location, commands);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("type", EnumToString(type));
            if (modifiers.HasValue)
            {
                dict.Add("modifiers", modifiers.Value);
            }

            if (timestamp.HasValue)
            {
                dict.Add("timestamp", timestamp.Value);
            }

            if (!(string.IsNullOrEmpty(text)))
            {
                dict.Add("text", text);
            }

            if (!(string.IsNullOrEmpty(unmodifiedText)))
            {
                dict.Add("unmodifiedText", unmodifiedText);
            }

            if (!(string.IsNullOrEmpty(keyIdentifier)))
            {
                dict.Add("keyIdentifier", keyIdentifier);
            }

            if (!(string.IsNullOrEmpty(code)))
            {
                dict.Add("code", code);
            }

            if (!(string.IsNullOrEmpty(key)))
            {
                dict.Add("key", key);
            }

            if (windowsVirtualKeyCode.HasValue)
            {
                dict.Add("windowsVirtualKeyCode", windowsVirtualKeyCode.Value);
            }

            if (nativeVirtualKeyCode.HasValue)
            {
                dict.Add("nativeVirtualKeyCode", nativeVirtualKeyCode.Value);
            }

            if (autoRepeat.HasValue)
            {
                dict.Add("autoRepeat", autoRepeat.Value);
            }

            if (isKeypad.HasValue)
            {
                dict.Add("isKeypad", isKeypad.Value);
            }

            if (isSystemKey.HasValue)
            {
                dict.Add("isSystemKey", isSystemKey.Value);
            }

            if (location.HasValue)
            {
                dict.Add("location", location.Value);
            }

            if ((commands) != (null))
            {
                dict.Add("commands", commands);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Input.dispatchKeyEvent", dict);
        }

        partial void ValidateInsertText(string text);
        /// <summary>
        /// This method emulates inserting text that doesn&apos;t come from a key press,
        /// for example an emoji keyboard or an IME.
        /// </summary>
        /// <param name = "text">The text to insert.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> InsertTextAsync(string text)
        {
            ValidateInsertText(text);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("text", text);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Input.insertText", dict);
        }

        partial void ValidateImeSetComposition(string text, int selectionStart, int selectionEnd, int? replacementStart = null, int? replacementEnd = null);
        /// <summary>
        /// This method sets the current candidate text for IME.
        /// Use imeCommitComposition to commit the final text.
        /// Use imeSetComposition with empty string as text to cancel composition.
        /// </summary>
        /// <param name = "text">The text to insert</param>
        /// <param name = "selectionStart">selection start</param>
        /// <param name = "selectionEnd">selection end</param>
        /// <param name = "replacementStart">replacement start</param>
        /// <param name = "replacementEnd">replacement end</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ImeSetCompositionAsync(string text, int selectionStart, int selectionEnd, int? replacementStart = null, int? replacementEnd = null)
        {
            ValidateImeSetComposition(text, selectionStart, selectionEnd, replacementStart, replacementEnd);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("text", text);
            dict.Add("selectionStart", selectionStart);
            dict.Add("selectionEnd", selectionEnd);
            if (replacementStart.HasValue)
            {
                dict.Add("replacementStart", replacementStart.Value);
            }

            if (replacementEnd.HasValue)
            {
                dict.Add("replacementEnd", replacementEnd.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Input.imeSetComposition", dict);
        }

        partial void ValidateDispatchMouseEvent(CefSharp.DevTools.Input.DispatchMouseEventType type, double x, double y, int? modifiers = null, double? timestamp = null, CefSharp.DevTools.Input.MouseButton? button = null, int? buttons = null, int? clickCount = null, double? force = null, double? tangentialPressure = null, double? tiltX = null, double? tiltY = null, int? twist = null, double? deltaX = null, double? deltaY = null, CefSharp.DevTools.Input.DispatchMouseEventPointerType? pointerType = null);
        /// <summary>
        /// Dispatches a mouse event to the page.
        /// </summary>
        /// <param name = "type">Type of the mouse event.</param>
        /// <param name = "x">X coordinate of the event relative to the main frame's viewport in CSS pixels.</param>
        /// <param name = "y">Y coordinate of the event relative to the main frame's viewport in CSS pixels. 0 refers tothe top of the viewport and Y increases as it proceeds towards the bottom of the viewport.</param>
        /// <param name = "modifiers">Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8(default: 0).</param>
        /// <param name = "timestamp">Time at which the event occurred.</param>
        /// <param name = "button">Mouse button (default: "none").</param>
        /// <param name = "buttons">A number indicating which buttons are pressed on the mouse when a mouse event is triggered.Left=1, Right=2, Middle=4, Back=8, Forward=16, None=0.</param>
        /// <param name = "clickCount">Number of times the mouse button was clicked (default: 0).</param>
        /// <param name = "force">The normalized pressure, which has a range of [0,1] (default: 0).</param>
        /// <param name = "tangentialPressure">The normalized tangential pressure, which has a range of [-1,1] (default: 0).</param>
        /// <param name = "tiltX">The plane angle between the Y-Z plane and the plane containing both the stylus axis and the Y axis, in degrees of the range [-90,90], a positive tiltX is to the right (default: 0).</param>
        /// <param name = "tiltY">The plane angle between the X-Z plane and the plane containing both the stylus axis and the X axis, in degrees of the range [-90,90], a positive tiltY is towards the user (default: 0).</param>
        /// <param name = "twist">The clockwise rotation of a pen stylus around its own major axis, in degrees in the range [0,359] (default: 0).</param>
        /// <param name = "deltaX">X delta in CSS pixels for mouse wheel event (default: 0).</param>
        /// <param name = "deltaY">Y delta in CSS pixels for mouse wheel event (default: 0).</param>
        /// <param name = "pointerType">Pointer type (default: "mouse").</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DispatchMouseEventAsync(CefSharp.DevTools.Input.DispatchMouseEventType type, double x, double y, int? modifiers = null, double? timestamp = null, CefSharp.DevTools.Input.MouseButton? button = null, int? buttons = null, int? clickCount = null, double? force = null, double? tangentialPressure = null, double? tiltX = null, double? tiltY = null, int? twist = null, double? deltaX = null, double? deltaY = null, CefSharp.DevTools.Input.DispatchMouseEventPointerType? pointerType = null)
        {
            ValidateDispatchMouseEvent(type, x, y, modifiers, timestamp, button, buttons, clickCount, force, tangentialPressure, tiltX, tiltY, twist, deltaX, deltaY, pointerType);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("type", EnumToString(type));
            dict.Add("x", x);
            dict.Add("y", y);
            if (modifiers.HasValue)
            {
                dict.Add("modifiers", modifiers.Value);
            }

            if (timestamp.HasValue)
            {
                dict.Add("timestamp", timestamp.Value);
            }

            if (button.HasValue)
            {
                dict.Add("button", EnumToString(button));
            }

            if (buttons.HasValue)
            {
                dict.Add("buttons", buttons.Value);
            }

            if (clickCount.HasValue)
            {
                dict.Add("clickCount", clickCount.Value);
            }

            if (force.HasValue)
            {
                dict.Add("force", force.Value);
            }

            if (tangentialPressure.HasValue)
            {
                dict.Add("tangentialPressure", tangentialPressure.Value);
            }

            if (tiltX.HasValue)
            {
                dict.Add("tiltX", tiltX.Value);
            }

            if (tiltY.HasValue)
            {
                dict.Add("tiltY", tiltY.Value);
            }

            if (twist.HasValue)
            {
                dict.Add("twist", twist.Value);
            }

            if (deltaX.HasValue)
            {
                dict.Add("deltaX", deltaX.Value);
            }

            if (deltaY.HasValue)
            {
                dict.Add("deltaY", deltaY.Value);
            }

            if (pointerType.HasValue)
            {
                dict.Add("pointerType", EnumToString(pointerType));
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Input.dispatchMouseEvent", dict);
        }

        partial void ValidateDispatchTouchEvent(CefSharp.DevTools.Input.DispatchTouchEventType type, System.Collections.Generic.IList<CefSharp.DevTools.Input.TouchPoint> touchPoints, int? modifiers = null, double? timestamp = null);
        /// <summary>
        /// Dispatches a touch event to the page.
        /// </summary>
        /// <param name = "type">Type of the touch event. TouchEnd and TouchCancel must not contain any touch points, whileTouchStart and TouchMove must contains at least one.</param>
        /// <param name = "touchPoints">Active touch points on the touch device. One event per any changed point (compared toprevious touch event in a sequence) is generated, emulating pressing/moving/releasing pointsone by one.</param>
        /// <param name = "modifiers">Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8(default: 0).</param>
        /// <param name = "timestamp">Time at which the event occurred.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DispatchTouchEventAsync(CefSharp.DevTools.Input.DispatchTouchEventType type, System.Collections.Generic.IList<CefSharp.DevTools.Input.TouchPoint> touchPoints, int? modifiers = null, double? timestamp = null)
        {
            ValidateDispatchTouchEvent(type, touchPoints, modifiers, timestamp);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("type", EnumToString(type));
            dict.Add("touchPoints", touchPoints.Select(x => x.ToDictionary()));
            if (modifiers.HasValue)
            {
                dict.Add("modifiers", modifiers.Value);
            }

            if (timestamp.HasValue)
            {
                dict.Add("timestamp", timestamp.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Input.dispatchTouchEvent", dict);
        }

        /// <summary>
        /// Cancels any active dragging in the page.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> CancelDraggingAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Input.cancelDragging", dict);
        }

        partial void ValidateEmulateTouchFromMouseEvent(CefSharp.DevTools.Input.EmulateTouchFromMouseEventType type, int x, int y, CefSharp.DevTools.Input.MouseButton button, double? timestamp = null, double? deltaX = null, double? deltaY = null, int? modifiers = null, int? clickCount = null);
        /// <summary>
        /// Emulates touch event from the mouse event parameters.
        /// </summary>
        /// <param name = "type">Type of the mouse event.</param>
        /// <param name = "x">X coordinate of the mouse pointer in DIP.</param>
        /// <param name = "y">Y coordinate of the mouse pointer in DIP.</param>
        /// <param name = "button">Mouse button. Only "none", "left", "right" are supported.</param>
        /// <param name = "timestamp">Time at which the event occurred (default: current time).</param>
        /// <param name = "deltaX">X delta in DIP for mouse wheel event (default: 0).</param>
        /// <param name = "deltaY">Y delta in DIP for mouse wheel event (default: 0).</param>
        /// <param name = "modifiers">Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8(default: 0).</param>
        /// <param name = "clickCount">Number of times the mouse button was clicked (default: 0).</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> EmulateTouchFromMouseEventAsync(CefSharp.DevTools.Input.EmulateTouchFromMouseEventType type, int x, int y, CefSharp.DevTools.Input.MouseButton button, double? timestamp = null, double? deltaX = null, double? deltaY = null, int? modifiers = null, int? clickCount = null)
        {
            ValidateEmulateTouchFromMouseEvent(type, x, y, button, timestamp, deltaX, deltaY, modifiers, clickCount);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("type", EnumToString(type));
            dict.Add("x", x);
            dict.Add("y", y);
            dict.Add("button", EnumToString(button));
            if (timestamp.HasValue)
            {
                dict.Add("timestamp", timestamp.Value);
            }

            if (deltaX.HasValue)
            {
                dict.Add("deltaX", deltaX.Value);
            }

            if (deltaY.HasValue)
            {
                dict.Add("deltaY", deltaY.Value);
            }

            if (modifiers.HasValue)
            {
                dict.Add("modifiers", modifiers.Value);
            }

            if (clickCount.HasValue)
            {
                dict.Add("clickCount", clickCount.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Input.emulateTouchFromMouseEvent", dict);
        }

        partial void ValidateSetIgnoreInputEvents(bool ignore);
        /// <summary>
        /// Ignores input events (useful while auditing page).
        /// </summary>
        /// <param name = "ignore">Ignores input events processing when set to true.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetIgnoreInputEventsAsync(bool ignore)
        {
            ValidateSetIgnoreInputEvents(ignore);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("ignore", ignore);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Input.setIgnoreInputEvents", dict);
        }

        partial void ValidateSetInterceptDrags(bool enabled);
        /// <summary>
        /// Prevents default drag and drop behavior and instead emits `Input.dragIntercepted` events.
        /// Drag and drop behavior can be directly controlled via `Input.dispatchDragEvent`.
        /// </summary>
        /// <param name = "enabled">enabled</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetInterceptDragsAsync(bool enabled)
        {
            ValidateSetInterceptDrags(enabled);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("enabled", enabled);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Input.setInterceptDrags", dict);
        }

        partial void ValidateSynthesizePinchGesture(double x, double y, double scaleFactor, int? relativeSpeed = null, CefSharp.DevTools.Input.GestureSourceType? gestureSourceType = null);
        /// <summary>
        /// Synthesizes a pinch gesture over a time period by issuing appropriate touch events.
        /// </summary>
        /// <param name = "x">X coordinate of the start of the gesture in CSS pixels.</param>
        /// <param name = "y">Y coordinate of the start of the gesture in CSS pixels.</param>
        /// <param name = "scaleFactor">Relative scale factor after zooming (&gt;1.0 zooms in, &lt;1.0 zooms out).</param>
        /// <param name = "relativeSpeed">Relative pointer speed in pixels per second (default: 800).</param>
        /// <param name = "gestureSourceType">Which type of input events to be generated (default: 'default', which queries the platformfor the preferred input type).</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SynthesizePinchGestureAsync(double x, double y, double scaleFactor, int? relativeSpeed = null, CefSharp.DevTools.Input.GestureSourceType? gestureSourceType = null)
        {
            ValidateSynthesizePinchGesture(x, y, scaleFactor, relativeSpeed, gestureSourceType);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("x", x);
            dict.Add("y", y);
            dict.Add("scaleFactor", scaleFactor);
            if (relativeSpeed.HasValue)
            {
                dict.Add("relativeSpeed", relativeSpeed.Value);
            }

            if (gestureSourceType.HasValue)
            {
                dict.Add("gestureSourceType", EnumToString(gestureSourceType));
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Input.synthesizePinchGesture", dict);
        }

        partial void ValidateSynthesizeScrollGesture(double x, double y, double? xDistance = null, double? yDistance = null, double? xOverscroll = null, double? yOverscroll = null, bool? preventFling = null, int? speed = null, CefSharp.DevTools.Input.GestureSourceType? gestureSourceType = null, int? repeatCount = null, int? repeatDelayMs = null, string interactionMarkerName = null);
        /// <summary>
        /// Synthesizes a scroll gesture over a time period by issuing appropriate touch events.
        /// </summary>
        /// <param name = "x">X coordinate of the start of the gesture in CSS pixels.</param>
        /// <param name = "y">Y coordinate of the start of the gesture in CSS pixels.</param>
        /// <param name = "xDistance">The distance to scroll along the X axis (positive to scroll left).</param>
        /// <param name = "yDistance">The distance to scroll along the Y axis (positive to scroll up).</param>
        /// <param name = "xOverscroll">The number of additional pixels to scroll back along the X axis, in addition to the givendistance.</param>
        /// <param name = "yOverscroll">The number of additional pixels to scroll back along the Y axis, in addition to the givendistance.</param>
        /// <param name = "preventFling">Prevent fling (default: true).</param>
        /// <param name = "speed">Swipe speed in pixels per second (default: 800).</param>
        /// <param name = "gestureSourceType">Which type of input events to be generated (default: 'default', which queries the platformfor the preferred input type).</param>
        /// <param name = "repeatCount">The number of times to repeat the gesture (default: 0).</param>
        /// <param name = "repeatDelayMs">The number of milliseconds delay between each repeat. (default: 250).</param>
        /// <param name = "interactionMarkerName">The name of the interaction markers to generate, if not empty (default: "").</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SynthesizeScrollGestureAsync(double x, double y, double? xDistance = null, double? yDistance = null, double? xOverscroll = null, double? yOverscroll = null, bool? preventFling = null, int? speed = null, CefSharp.DevTools.Input.GestureSourceType? gestureSourceType = null, int? repeatCount = null, int? repeatDelayMs = null, string interactionMarkerName = null)
        {
            ValidateSynthesizeScrollGesture(x, y, xDistance, yDistance, xOverscroll, yOverscroll, preventFling, speed, gestureSourceType, repeatCount, repeatDelayMs, interactionMarkerName);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("x", x);
            dict.Add("y", y);
            if (xDistance.HasValue)
            {
                dict.Add("xDistance", xDistance.Value);
            }

            if (yDistance.HasValue)
            {
                dict.Add("yDistance", yDistance.Value);
            }

            if (xOverscroll.HasValue)
            {
                dict.Add("xOverscroll", xOverscroll.Value);
            }

            if (yOverscroll.HasValue)
            {
                dict.Add("yOverscroll", yOverscroll.Value);
            }

            if (preventFling.HasValue)
            {
                dict.Add("preventFling", preventFling.Value);
            }

            if (speed.HasValue)
            {
                dict.Add("speed", speed.Value);
            }

            if (gestureSourceType.HasValue)
            {
                dict.Add("gestureSourceType", EnumToString(gestureSourceType));
            }

            if (repeatCount.HasValue)
            {
                dict.Add("repeatCount", repeatCount.Value);
            }

            if (repeatDelayMs.HasValue)
            {
                dict.Add("repeatDelayMs", repeatDelayMs.Value);
            }

            if (!(string.IsNullOrEmpty(interactionMarkerName)))
            {
                dict.Add("interactionMarkerName", interactionMarkerName);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Input.synthesizeScrollGesture", dict);
        }

        partial void ValidateSynthesizeTapGesture(double x, double y, int? duration = null, int? tapCount = null, CefSharp.DevTools.Input.GestureSourceType? gestureSourceType = null);
        /// <summary>
        /// Synthesizes a tap gesture over a time period by issuing appropriate touch events.
        /// </summary>
        /// <param name = "x">X coordinate of the start of the gesture in CSS pixels.</param>
        /// <param name = "y">Y coordinate of the start of the gesture in CSS pixels.</param>
        /// <param name = "duration">Duration between touchdown and touchup events in ms (default: 50).</param>
        /// <param name = "tapCount">Number of times to perform the tap (e.g. 2 for double tap, default: 1).</param>
        /// <param name = "gestureSourceType">Which type of input events to be generated (default: 'default', which queries the platformfor the preferred input type).</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SynthesizeTapGestureAsync(double x, double y, int? duration = null, int? tapCount = null, CefSharp.DevTools.Input.GestureSourceType? gestureSourceType = null)
        {
            ValidateSynthesizeTapGesture(x, y, duration, tapCount, gestureSourceType);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("x", x);
            dict.Add("y", y);
            if (duration.HasValue)
            {
                dict.Add("duration", duration.Value);
            }

            if (tapCount.HasValue)
            {
                dict.Add("tapCount", tapCount.Value);
            }

            if (gestureSourceType.HasValue)
            {
                dict.Add("gestureSourceType", EnumToString(gestureSourceType));
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Input.synthesizeTapGesture", dict);
        }
    }
}

namespace CefSharp.DevTools.Inspector
{
    using System.Linq;

    /// <summary>
    /// Inspector
    /// </summary>
    public partial class InspectorClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// Inspector
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public InspectorClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// Fired when remote debugging connection is about to be terminated. Contains detach reason.
        /// </summary>
        public event System.EventHandler<DetachedEventArgs> Detached
        {
            add
            {
                _client.AddEventHandler<DetachedEventArgs>("Inspector.detached", value);
            }

            remove
            {
                _client.RemoveEventHandler<DetachedEventArgs>("Inspector.detached", value);
            }
        }

        /// <summary>
        /// Fired when debugging target has crashed
        /// </summary>
        public event System.EventHandler<System.EventArgs> TargetCrashed
        {
            add
            {
                _client.AddEventHandler<System.EventArgs>("Inspector.targetCrashed", value);
            }

            remove
            {
                _client.RemoveEventHandler<System.EventArgs>("Inspector.targetCrashed", value);
            }
        }

        /// <summary>
        /// Fired when debugging target has reloaded after crash
        /// </summary>
        public event System.EventHandler<System.EventArgs> TargetReloadedAfterCrash
        {
            add
            {
                _client.AddEventHandler<System.EventArgs>("Inspector.targetReloadedAfterCrash", value);
            }

            remove
            {
                _client.RemoveEventHandler<System.EventArgs>("Inspector.targetReloadedAfterCrash", value);
            }
        }

        /// <summary>
        /// Disables inspector domain notifications.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DisableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Inspector.disable", dict);
        }

        /// <summary>
        /// Enables inspector domain notifications.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> EnableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Inspector.enable", dict);
        }
    }
}

namespace CefSharp.DevTools.LayerTree
{
    /// <summary>
    /// CompositingReasonsResponse
    /// </summary>
    [DataContract]
    public class CompositingReasonsResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string[] compositingReasons
        {
            get;
            set;
        }

        /// <summary>
        /// compositingReasons
        /// </summary>
        public string[] CompositingReasons
        {
            get
            {
                return compositingReasons;
            }
        }

        [DataMember]
        internal string[] compositingReasonIds
        {
            get;
            set;
        }

        /// <summary>
        /// compositingReasonIds
        /// </summary>
        public string[] CompositingReasonIds
        {
            get
            {
                return compositingReasonIds;
            }
        }
    }
}

namespace CefSharp.DevTools.LayerTree
{
    /// <summary>
    /// LoadSnapshotResponse
    /// </summary>
    [DataContract]
    public class LoadSnapshotResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string snapshotId
        {
            get;
            set;
        }

        /// <summary>
        /// snapshotId
        /// </summary>
        public string SnapshotId
        {
            get
            {
                return snapshotId;
            }
        }
    }
}

namespace CefSharp.DevTools.LayerTree
{
    /// <summary>
    /// MakeSnapshotResponse
    /// </summary>
    [DataContract]
    public class MakeSnapshotResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string snapshotId
        {
            get;
            set;
        }

        /// <summary>
        /// snapshotId
        /// </summary>
        public string SnapshotId
        {
            get
            {
                return snapshotId;
            }
        }
    }
}

namespace CefSharp.DevTools.LayerTree
{
    /// <summary>
    /// ProfileSnapshotResponse
    /// </summary>
    [DataContract]
    public class ProfileSnapshotResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal double[] timings
        {
            get;
            set;
        }

        /// <summary>
        /// timings
        /// </summary>
        public double[] Timings
        {
            get
            {
                return timings;
            }
        }
    }
}

namespace CefSharp.DevTools.LayerTree
{
    /// <summary>
    /// ReplaySnapshotResponse
    /// </summary>
    [DataContract]
    public class ReplaySnapshotResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string dataURL
        {
            get;
            set;
        }

        /// <summary>
        /// dataURL
        /// </summary>
        public string DataURL
        {
            get
            {
                return dataURL;
            }
        }
    }
}

namespace CefSharp.DevTools.LayerTree
{
    /// <summary>
    /// SnapshotCommandLogResponse
    /// </summary>
    [DataContract]
    public class SnapshotCommandLogResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<object> commandLog
        {
            get;
            set;
        }

        /// <summary>
        /// commandLog
        /// </summary>
        public System.Collections.Generic.IList<object> CommandLog
        {
            get
            {
                return commandLog;
            }
        }
    }
}

namespace CefSharp.DevTools.LayerTree
{
    using System.Linq;

    /// <summary>
    /// LayerTree
    /// </summary>
    public partial class LayerTreeClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// LayerTree
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public LayerTreeClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// LayerPainted
        /// </summary>
        public event System.EventHandler<LayerPaintedEventArgs> LayerPainted
        {
            add
            {
                _client.AddEventHandler<LayerPaintedEventArgs>("LayerTree.layerPainted", value);
            }

            remove
            {
                _client.RemoveEventHandler<LayerPaintedEventArgs>("LayerTree.layerPainted", value);
            }
        }

        /// <summary>
        /// LayerTreeDidChange
        /// </summary>
        public event System.EventHandler<LayerTreeDidChangeEventArgs> LayerTreeDidChange
        {
            add
            {
                _client.AddEventHandler<LayerTreeDidChangeEventArgs>("LayerTree.layerTreeDidChange", value);
            }

            remove
            {
                _client.RemoveEventHandler<LayerTreeDidChangeEventArgs>("LayerTree.layerTreeDidChange", value);
            }
        }

        partial void ValidateCompositingReasons(string layerId);
        /// <summary>
        /// Provides the reasons why the given layer was composited.
        /// </summary>
        /// <param name = "layerId">The id of the layer for which we want to get the reasons it was composited.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;CompositingReasonsResponse&gt;</returns>
        public System.Threading.Tasks.Task<CompositingReasonsResponse> CompositingReasonsAsync(string layerId)
        {
            ValidateCompositingReasons(layerId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("layerId", layerId);
            return _client.ExecuteDevToolsMethodAsync<CompositingReasonsResponse>("LayerTree.compositingReasons", dict);
        }

        /// <summary>
        /// Disables compositing tree inspection.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DisableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("LayerTree.disable", dict);
        }

        /// <summary>
        /// Enables compositing tree inspection.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> EnableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("LayerTree.enable", dict);
        }

        partial void ValidateLoadSnapshot(System.Collections.Generic.IList<CefSharp.DevTools.LayerTree.PictureTile> tiles);
        /// <summary>
        /// Returns the snapshot identifier.
        /// </summary>
        /// <param name = "tiles">An array of tiles composing the snapshot.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;LoadSnapshotResponse&gt;</returns>
        public System.Threading.Tasks.Task<LoadSnapshotResponse> LoadSnapshotAsync(System.Collections.Generic.IList<CefSharp.DevTools.LayerTree.PictureTile> tiles)
        {
            ValidateLoadSnapshot(tiles);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("tiles", tiles.Select(x => x.ToDictionary()));
            return _client.ExecuteDevToolsMethodAsync<LoadSnapshotResponse>("LayerTree.loadSnapshot", dict);
        }

        partial void ValidateMakeSnapshot(string layerId);
        /// <summary>
        /// Returns the layer snapshot identifier.
        /// </summary>
        /// <param name = "layerId">The id of the layer.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;MakeSnapshotResponse&gt;</returns>
        public System.Threading.Tasks.Task<MakeSnapshotResponse> MakeSnapshotAsync(string layerId)
        {
            ValidateMakeSnapshot(layerId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("layerId", layerId);
            return _client.ExecuteDevToolsMethodAsync<MakeSnapshotResponse>("LayerTree.makeSnapshot", dict);
        }

        partial void ValidateProfileSnapshot(string snapshotId, int? minRepeatCount = null, double? minDuration = null, CefSharp.DevTools.DOM.Rect clipRect = null);
        /// <summary>
        /// ProfileSnapshot
        /// </summary>
        /// <param name = "snapshotId">The id of the layer snapshot.</param>
        /// <param name = "minRepeatCount">The maximum number of times to replay the snapshot (1, if not specified).</param>
        /// <param name = "minDuration">The minimum duration (in seconds) to replay the snapshot.</param>
        /// <param name = "clipRect">The clip rectangle to apply when replaying the snapshot.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;ProfileSnapshotResponse&gt;</returns>
        public System.Threading.Tasks.Task<ProfileSnapshotResponse> ProfileSnapshotAsync(string snapshotId, int? minRepeatCount = null, double? minDuration = null, CefSharp.DevTools.DOM.Rect clipRect = null)
        {
            ValidateProfileSnapshot(snapshotId, minRepeatCount, minDuration, clipRect);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("snapshotId", snapshotId);
            if (minRepeatCount.HasValue)
            {
                dict.Add("minRepeatCount", minRepeatCount.Value);
            }

            if (minDuration.HasValue)
            {
                dict.Add("minDuration", minDuration.Value);
            }

            if ((clipRect) != (null))
            {
                dict.Add("clipRect", clipRect.ToDictionary());
            }

            return _client.ExecuteDevToolsMethodAsync<ProfileSnapshotResponse>("LayerTree.profileSnapshot", dict);
        }

        partial void ValidateReleaseSnapshot(string snapshotId);
        /// <summary>
        /// Releases layer snapshot captured by the back-end.
        /// </summary>
        /// <param name = "snapshotId">The id of the layer snapshot.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ReleaseSnapshotAsync(string snapshotId)
        {
            ValidateReleaseSnapshot(snapshotId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("snapshotId", snapshotId);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("LayerTree.releaseSnapshot", dict);
        }

        partial void ValidateReplaySnapshot(string snapshotId, int? fromStep = null, int? toStep = null, double? scale = null);
        /// <summary>
        /// Replays the layer snapshot and returns the resulting bitmap.
        /// </summary>
        /// <param name = "snapshotId">The id of the layer snapshot.</param>
        /// <param name = "fromStep">The first step to replay from (replay from the very start if not specified).</param>
        /// <param name = "toStep">The last step to replay to (replay till the end if not specified).</param>
        /// <param name = "scale">The scale to apply while replaying (defaults to 1).</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;ReplaySnapshotResponse&gt;</returns>
        public System.Threading.Tasks.Task<ReplaySnapshotResponse> ReplaySnapshotAsync(string snapshotId, int? fromStep = null, int? toStep = null, double? scale = null)
        {
            ValidateReplaySnapshot(snapshotId, fromStep, toStep, scale);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("snapshotId", snapshotId);
            if (fromStep.HasValue)
            {
                dict.Add("fromStep", fromStep.Value);
            }

            if (toStep.HasValue)
            {
                dict.Add("toStep", toStep.Value);
            }

            if (scale.HasValue)
            {
                dict.Add("scale", scale.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<ReplaySnapshotResponse>("LayerTree.replaySnapshot", dict);
        }

        partial void ValidateSnapshotCommandLog(string snapshotId);
        /// <summary>
        /// Replays the layer snapshot and returns canvas log.
        /// </summary>
        /// <param name = "snapshotId">The id of the layer snapshot.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;SnapshotCommandLogResponse&gt;</returns>
        public System.Threading.Tasks.Task<SnapshotCommandLogResponse> SnapshotCommandLogAsync(string snapshotId)
        {
            ValidateSnapshotCommandLog(snapshotId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("snapshotId", snapshotId);
            return _client.ExecuteDevToolsMethodAsync<SnapshotCommandLogResponse>("LayerTree.snapshotCommandLog", dict);
        }
    }
}

namespace CefSharp.DevTools.Log
{
    using System.Linq;

    /// <summary>
    /// Provides access to log entries.
    /// </summary>
    public partial class LogClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// Log
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public LogClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// Issued when new message was logged.
        /// </summary>
        public event System.EventHandler<EntryAddedEventArgs> EntryAdded
        {
            add
            {
                _client.AddEventHandler<EntryAddedEventArgs>("Log.entryAdded", value);
            }

            remove
            {
                _client.RemoveEventHandler<EntryAddedEventArgs>("Log.entryAdded", value);
            }
        }

        /// <summary>
        /// Clears the log.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ClearAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Log.clear", dict);
        }

        /// <summary>
        /// Disables log domain, prevents further log entries from being reported to the client.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DisableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Log.disable", dict);
        }

        /// <summary>
        /// Enables log domain, sends the entries collected so far to the client by means of the
        /// `entryAdded` notification.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> EnableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Log.enable", dict);
        }

        partial void ValidateStartViolationsReport(System.Collections.Generic.IList<CefSharp.DevTools.Log.ViolationSetting> config);
        /// <summary>
        /// start violation reporting.
        /// </summary>
        /// <param name = "config">Configuration for violations.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> StartViolationsReportAsync(System.Collections.Generic.IList<CefSharp.DevTools.Log.ViolationSetting> config)
        {
            ValidateStartViolationsReport(config);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("config", config.Select(x => x.ToDictionary()));
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Log.startViolationsReport", dict);
        }

        /// <summary>
        /// Stop violation reporting.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> StopViolationsReportAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Log.stopViolationsReport", dict);
        }
    }
}

namespace CefSharp.DevTools.Memory
{
    /// <summary>
    /// GetDOMCountersResponse
    /// </summary>
    [DataContract]
    public class GetDOMCountersResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal int documents
        {
            get;
            set;
        }

        /// <summary>
        /// documents
        /// </summary>
        public int Documents
        {
            get
            {
                return documents;
            }
        }

        [DataMember]
        internal int nodes
        {
            get;
            set;
        }

        /// <summary>
        /// nodes
        /// </summary>
        public int Nodes
        {
            get
            {
                return nodes;
            }
        }

        [DataMember]
        internal int jsEventListeners
        {
            get;
            set;
        }

        /// <summary>
        /// jsEventListeners
        /// </summary>
        public int JsEventListeners
        {
            get
            {
                return jsEventListeners;
            }
        }
    }
}

namespace CefSharp.DevTools.Memory
{
    /// <summary>
    /// GetAllTimeSamplingProfileResponse
    /// </summary>
    [DataContract]
    public class GetAllTimeSamplingProfileResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.Memory.SamplingProfile profile
        {
            get;
            set;
        }

        /// <summary>
        /// profile
        /// </summary>
        public CefSharp.DevTools.Memory.SamplingProfile Profile
        {
            get
            {
                return profile;
            }
        }
    }
}

namespace CefSharp.DevTools.Memory
{
    /// <summary>
    /// GetBrowserSamplingProfileResponse
    /// </summary>
    [DataContract]
    public class GetBrowserSamplingProfileResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.Memory.SamplingProfile profile
        {
            get;
            set;
        }

        /// <summary>
        /// profile
        /// </summary>
        public CefSharp.DevTools.Memory.SamplingProfile Profile
        {
            get
            {
                return profile;
            }
        }
    }
}

namespace CefSharp.DevTools.Memory
{
    /// <summary>
    /// GetSamplingProfileResponse
    /// </summary>
    [DataContract]
    public class GetSamplingProfileResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.Memory.SamplingProfile profile
        {
            get;
            set;
        }

        /// <summary>
        /// profile
        /// </summary>
        public CefSharp.DevTools.Memory.SamplingProfile Profile
        {
            get
            {
                return profile;
            }
        }
    }
}

namespace CefSharp.DevTools.Memory
{
    using System.Linq;

    /// <summary>
    /// Memory
    /// </summary>
    public partial class MemoryClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// Memory
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public MemoryClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// GetDOMCounters
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetDOMCountersResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetDOMCountersResponse> GetDOMCountersAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<GetDOMCountersResponse>("Memory.getDOMCounters", dict);
        }

        /// <summary>
        /// PrepareForLeakDetection
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> PrepareForLeakDetectionAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Memory.prepareForLeakDetection", dict);
        }

        /// <summary>
        /// Simulate OomIntervention by purging V8 memory.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ForciblyPurgeJavaScriptMemoryAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Memory.forciblyPurgeJavaScriptMemory", dict);
        }

        partial void ValidateSetPressureNotificationsSuppressed(bool suppressed);
        /// <summary>
        /// Enable/disable suppressing memory pressure notifications in all processes.
        /// </summary>
        /// <param name = "suppressed">If true, memory pressure notifications will be suppressed.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetPressureNotificationsSuppressedAsync(bool suppressed)
        {
            ValidateSetPressureNotificationsSuppressed(suppressed);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("suppressed", suppressed);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Memory.setPressureNotificationsSuppressed", dict);
        }

        partial void ValidateSimulatePressureNotification(CefSharp.DevTools.Memory.PressureLevel level);
        /// <summary>
        /// Simulate a memory pressure notification in all processes.
        /// </summary>
        /// <param name = "level">Memory pressure level of the notification.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SimulatePressureNotificationAsync(CefSharp.DevTools.Memory.PressureLevel level)
        {
            ValidateSimulatePressureNotification(level);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("level", EnumToString(level));
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Memory.simulatePressureNotification", dict);
        }

        partial void ValidateStartSampling(int? samplingInterval = null, bool? suppressRandomness = null);
        /// <summary>
        /// Start collecting native memory profile.
        /// </summary>
        /// <param name = "samplingInterval">Average number of bytes between samples.</param>
        /// <param name = "suppressRandomness">Do not randomize intervals between samples.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> StartSamplingAsync(int? samplingInterval = null, bool? suppressRandomness = null)
        {
            ValidateStartSampling(samplingInterval, suppressRandomness);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (samplingInterval.HasValue)
            {
                dict.Add("samplingInterval", samplingInterval.Value);
            }

            if (suppressRandomness.HasValue)
            {
                dict.Add("suppressRandomness", suppressRandomness.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Memory.startSampling", dict);
        }

        /// <summary>
        /// Stop collecting native memory profile.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> StopSamplingAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Memory.stopSampling", dict);
        }

        /// <summary>
        /// Retrieve native memory allocations profile
        /// collected since renderer process startup.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetAllTimeSamplingProfileResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetAllTimeSamplingProfileResponse> GetAllTimeSamplingProfileAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<GetAllTimeSamplingProfileResponse>("Memory.getAllTimeSamplingProfile", dict);
        }

        /// <summary>
        /// Retrieve native memory allocations profile
        /// collected since browser process startup.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetBrowserSamplingProfileResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetBrowserSamplingProfileResponse> GetBrowserSamplingProfileAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<GetBrowserSamplingProfileResponse>("Memory.getBrowserSamplingProfile", dict);
        }

        /// <summary>
        /// Retrieve native memory allocations profile collected since last
        /// `startSampling` call.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetSamplingProfileResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetSamplingProfileResponse> GetSamplingProfileAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<GetSamplingProfileResponse>("Memory.getSamplingProfile", dict);
        }
    }
}

namespace CefSharp.DevTools.Network
{
    /// <summary>
    /// GetCertificateResponse
    /// </summary>
    [DataContract]
    public class GetCertificateResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string[] tableNames
        {
            get;
            set;
        }

        /// <summary>
        /// tableNames
        /// </summary>
        public string[] TableNames
        {
            get
            {
                return tableNames;
            }
        }
    }
}

namespace CefSharp.DevTools.Network
{
    /// <summary>
    /// GetCookiesResponse
    /// </summary>
    [DataContract]
    public class GetCookiesResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.Network.Cookie> cookies
        {
            get;
            set;
        }

        /// <summary>
        /// cookies
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.Network.Cookie> Cookies
        {
            get
            {
                return cookies;
            }
        }
    }
}

namespace CefSharp.DevTools.Network
{
    /// <summary>
    /// GetResponseBodyResponse
    /// </summary>
    [DataContract]
    public class GetResponseBodyResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string body
        {
            get;
            set;
        }

        /// <summary>
        /// body
        /// </summary>
        public string Body
        {
            get
            {
                return body;
            }
        }

        [DataMember]
        internal bool base64Encoded
        {
            get;
            set;
        }

        /// <summary>
        /// base64Encoded
        /// </summary>
        public bool Base64Encoded
        {
            get
            {
                return base64Encoded;
            }
        }
    }
}

namespace CefSharp.DevTools.Network
{
    /// <summary>
    /// GetRequestPostDataResponse
    /// </summary>
    [DataContract]
    public class GetRequestPostDataResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string postData
        {
            get;
            set;
        }

        /// <summary>
        /// postData
        /// </summary>
        public string PostData
        {
            get
            {
                return postData;
            }
        }
    }
}

namespace CefSharp.DevTools.Network
{
    /// <summary>
    /// GetResponseBodyForInterceptionResponse
    /// </summary>
    [DataContract]
    public class GetResponseBodyForInterceptionResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string body
        {
            get;
            set;
        }

        /// <summary>
        /// body
        /// </summary>
        public string Body
        {
            get
            {
                return body;
            }
        }

        [DataMember]
        internal bool base64Encoded
        {
            get;
            set;
        }

        /// <summary>
        /// base64Encoded
        /// </summary>
        public bool Base64Encoded
        {
            get
            {
                return base64Encoded;
            }
        }
    }
}

namespace CefSharp.DevTools.Network
{
    /// <summary>
    /// TakeResponseBodyForInterceptionAsStreamResponse
    /// </summary>
    [DataContract]
    public class TakeResponseBodyForInterceptionAsStreamResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string stream
        {
            get;
            set;
        }

        /// <summary>
        /// stream
        /// </summary>
        public string Stream
        {
            get
            {
                return stream;
            }
        }
    }
}

namespace CefSharp.DevTools.Network
{
    /// <summary>
    /// SearchInResponseBodyResponse
    /// </summary>
    [DataContract]
    public class SearchInResponseBodyResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.Debugger.SearchMatch> result
        {
            get;
            set;
        }

        /// <summary>
        /// result
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.Debugger.SearchMatch> Result
        {
            get
            {
                return result;
            }
        }
    }
}

namespace CefSharp.DevTools.Network
{
    /// <summary>
    /// SetCookieResponse
    /// </summary>
    [DataContract]
    public class SetCookieResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal bool success
        {
            get;
            set;
        }

        /// <summary>
        /// success
        /// </summary>
        public bool Success
        {
            get
            {
                return success;
            }
        }
    }
}

namespace CefSharp.DevTools.Network
{
    /// <summary>
    /// StreamResourceContentResponse
    /// </summary>
    [DataContract]
    public class StreamResourceContentResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string bufferedData
        {
            get;
            set;
        }

        /// <summary>
        /// bufferedData
        /// </summary>
        public byte[] BufferedData
        {
            get
            {
                return Convert(bufferedData);
            }
        }
    }
}

namespace CefSharp.DevTools.Network
{
    /// <summary>
    /// GetSecurityIsolationStatusResponse
    /// </summary>
    [DataContract]
    public class GetSecurityIsolationStatusResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.Network.SecurityIsolationStatus status
        {
            get;
            set;
        }

        /// <summary>
        /// status
        /// </summary>
        public CefSharp.DevTools.Network.SecurityIsolationStatus Status
        {
            get
            {
                return status;
            }
        }
    }
}

namespace CefSharp.DevTools.Network
{
    /// <summary>
    /// LoadNetworkResourceResponse
    /// </summary>
    [DataContract]
    public class LoadNetworkResourceResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.Network.LoadNetworkResourcePageResult resource
        {
            get;
            set;
        }

        /// <summary>
        /// resource
        /// </summary>
        public CefSharp.DevTools.Network.LoadNetworkResourcePageResult Resource
        {
            get
            {
                return resource;
            }
        }
    }
}

namespace CefSharp.DevTools.Network
{
    using System.Linq;

    /// <summary>
    /// Network domain allows tracking network activities of the page. It exposes information about http,
    /// file, data and other requests and responses, their headers, bodies, timing, etc.
    /// </summary>
    public partial class NetworkClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// Network
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public NetworkClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// Fired when data chunk was received over the network.
        /// </summary>
        public event System.EventHandler<DataReceivedEventArgs> DataReceived
        {
            add
            {
                _client.AddEventHandler<DataReceivedEventArgs>("Network.dataReceived", value);
            }

            remove
            {
                _client.RemoveEventHandler<DataReceivedEventArgs>("Network.dataReceived", value);
            }
        }

        /// <summary>
        /// Fired when EventSource message is received.
        /// </summary>
        public event System.EventHandler<EventSourceMessageReceivedEventArgs> EventSourceMessageReceived
        {
            add
            {
                _client.AddEventHandler<EventSourceMessageReceivedEventArgs>("Network.eventSourceMessageReceived", value);
            }

            remove
            {
                _client.RemoveEventHandler<EventSourceMessageReceivedEventArgs>("Network.eventSourceMessageReceived", value);
            }
        }

        /// <summary>
        /// Fired when HTTP request has failed to load.
        /// </summary>
        public event System.EventHandler<LoadingFailedEventArgs> LoadingFailed
        {
            add
            {
                _client.AddEventHandler<LoadingFailedEventArgs>("Network.loadingFailed", value);
            }

            remove
            {
                _client.RemoveEventHandler<LoadingFailedEventArgs>("Network.loadingFailed", value);
            }
        }

        /// <summary>
        /// Fired when HTTP request has finished loading.
        /// </summary>
        public event System.EventHandler<LoadingFinishedEventArgs> LoadingFinished
        {
            add
            {
                _client.AddEventHandler<LoadingFinishedEventArgs>("Network.loadingFinished", value);
            }

            remove
            {
                _client.RemoveEventHandler<LoadingFinishedEventArgs>("Network.loadingFinished", value);
            }
        }

        /// <summary>
        /// Fired if request ended up loading from cache.
        /// </summary>
        public event System.EventHandler<RequestServedFromCacheEventArgs> RequestServedFromCache
        {
            add
            {
                _client.AddEventHandler<RequestServedFromCacheEventArgs>("Network.requestServedFromCache", value);
            }

            remove
            {
                _client.RemoveEventHandler<RequestServedFromCacheEventArgs>("Network.requestServedFromCache", value);
            }
        }

        /// <summary>
        /// Fired when page is about to send HTTP request.
        /// </summary>
        public event System.EventHandler<RequestWillBeSentEventArgs> RequestWillBeSent
        {
            add
            {
                _client.AddEventHandler<RequestWillBeSentEventArgs>("Network.requestWillBeSent", value);
            }

            remove
            {
                _client.RemoveEventHandler<RequestWillBeSentEventArgs>("Network.requestWillBeSent", value);
            }
        }

        /// <summary>
        /// Fired when resource loading priority is changed
        /// </summary>
        public event System.EventHandler<ResourceChangedPriorityEventArgs> ResourceChangedPriority
        {
            add
            {
                _client.AddEventHandler<ResourceChangedPriorityEventArgs>("Network.resourceChangedPriority", value);
            }

            remove
            {
                _client.RemoveEventHandler<ResourceChangedPriorityEventArgs>("Network.resourceChangedPriority", value);
            }
        }

        /// <summary>
        /// Fired when a signed exchange was received over the network
        /// </summary>
        public event System.EventHandler<SignedExchangeReceivedEventArgs> SignedExchangeReceived
        {
            add
            {
                _client.AddEventHandler<SignedExchangeReceivedEventArgs>("Network.signedExchangeReceived", value);
            }

            remove
            {
                _client.RemoveEventHandler<SignedExchangeReceivedEventArgs>("Network.signedExchangeReceived", value);
            }
        }

        /// <summary>
        /// Fired when HTTP response is available.
        /// </summary>
        public event System.EventHandler<ResponseReceivedEventArgs> ResponseReceived
        {
            add
            {
                _client.AddEventHandler<ResponseReceivedEventArgs>("Network.responseReceived", value);
            }

            remove
            {
                _client.RemoveEventHandler<ResponseReceivedEventArgs>("Network.responseReceived", value);
            }
        }

        /// <summary>
        /// Fired when WebSocket is closed.
        /// </summary>
        public event System.EventHandler<WebSocketClosedEventArgs> WebSocketClosed
        {
            add
            {
                _client.AddEventHandler<WebSocketClosedEventArgs>("Network.webSocketClosed", value);
            }

            remove
            {
                _client.RemoveEventHandler<WebSocketClosedEventArgs>("Network.webSocketClosed", value);
            }
        }

        /// <summary>
        /// Fired upon WebSocket creation.
        /// </summary>
        public event System.EventHandler<WebSocketCreatedEventArgs> WebSocketCreated
        {
            add
            {
                _client.AddEventHandler<WebSocketCreatedEventArgs>("Network.webSocketCreated", value);
            }

            remove
            {
                _client.RemoveEventHandler<WebSocketCreatedEventArgs>("Network.webSocketCreated", value);
            }
        }

        /// <summary>
        /// Fired when WebSocket message error occurs.
        /// </summary>
        public event System.EventHandler<WebSocketFrameErrorEventArgs> WebSocketFrameError
        {
            add
            {
                _client.AddEventHandler<WebSocketFrameErrorEventArgs>("Network.webSocketFrameError", value);
            }

            remove
            {
                _client.RemoveEventHandler<WebSocketFrameErrorEventArgs>("Network.webSocketFrameError", value);
            }
        }

        /// <summary>
        /// Fired when WebSocket message is received.
        /// </summary>
        public event System.EventHandler<WebSocketFrameReceivedEventArgs> WebSocketFrameReceived
        {
            add
            {
                _client.AddEventHandler<WebSocketFrameReceivedEventArgs>("Network.webSocketFrameReceived", value);
            }

            remove
            {
                _client.RemoveEventHandler<WebSocketFrameReceivedEventArgs>("Network.webSocketFrameReceived", value);
            }
        }

        /// <summary>
        /// Fired when WebSocket message is sent.
        /// </summary>
        public event System.EventHandler<WebSocketFrameSentEventArgs> WebSocketFrameSent
        {
            add
            {
                _client.AddEventHandler<WebSocketFrameSentEventArgs>("Network.webSocketFrameSent", value);
            }

            remove
            {
                _client.RemoveEventHandler<WebSocketFrameSentEventArgs>("Network.webSocketFrameSent", value);
            }
        }

        /// <summary>
        /// Fired when WebSocket handshake response becomes available.
        /// </summary>
        public event System.EventHandler<WebSocketHandshakeResponseReceivedEventArgs> WebSocketHandshakeResponseReceived
        {
            add
            {
                _client.AddEventHandler<WebSocketHandshakeResponseReceivedEventArgs>("Network.webSocketHandshakeResponseReceived", value);
            }

            remove
            {
                _client.RemoveEventHandler<WebSocketHandshakeResponseReceivedEventArgs>("Network.webSocketHandshakeResponseReceived", value);
            }
        }

        /// <summary>
        /// Fired when WebSocket is about to initiate handshake.
        /// </summary>
        public event System.EventHandler<WebSocketWillSendHandshakeRequestEventArgs> WebSocketWillSendHandshakeRequest
        {
            add
            {
                _client.AddEventHandler<WebSocketWillSendHandshakeRequestEventArgs>("Network.webSocketWillSendHandshakeRequest", value);
            }

            remove
            {
                _client.RemoveEventHandler<WebSocketWillSendHandshakeRequestEventArgs>("Network.webSocketWillSendHandshakeRequest", value);
            }
        }

        /// <summary>
        /// Fired upon WebTransport creation.
        /// </summary>
        public event System.EventHandler<WebTransportCreatedEventArgs> WebTransportCreated
        {
            add
            {
                _client.AddEventHandler<WebTransportCreatedEventArgs>("Network.webTransportCreated", value);
            }

            remove
            {
                _client.RemoveEventHandler<WebTransportCreatedEventArgs>("Network.webTransportCreated", value);
            }
        }

        /// <summary>
        /// Fired when WebTransport handshake is finished.
        /// </summary>
        public event System.EventHandler<WebTransportConnectionEstablishedEventArgs> WebTransportConnectionEstablished
        {
            add
            {
                _client.AddEventHandler<WebTransportConnectionEstablishedEventArgs>("Network.webTransportConnectionEstablished", value);
            }

            remove
            {
                _client.RemoveEventHandler<WebTransportConnectionEstablishedEventArgs>("Network.webTransportConnectionEstablished", value);
            }
        }

        /// <summary>
        /// Fired when WebTransport is disposed.
        /// </summary>
        public event System.EventHandler<WebTransportClosedEventArgs> WebTransportClosed
        {
            add
            {
                _client.AddEventHandler<WebTransportClosedEventArgs>("Network.webTransportClosed", value);
            }

            remove
            {
                _client.RemoveEventHandler<WebTransportClosedEventArgs>("Network.webTransportClosed", value);
            }
        }

        /// <summary>
        /// Fired when additional information about a requestWillBeSent event is available from the
        /// network stack. Not every requestWillBeSent event will have an additional
        /// requestWillBeSentExtraInfo fired for it, and there is no guarantee whether requestWillBeSent
        /// or requestWillBeSentExtraInfo will be fired first for the same request.
        /// </summary>
        public event System.EventHandler<RequestWillBeSentExtraInfoEventArgs> RequestWillBeSentExtraInfo
        {
            add
            {
                _client.AddEventHandler<RequestWillBeSentExtraInfoEventArgs>("Network.requestWillBeSentExtraInfo", value);
            }

            remove
            {
                _client.RemoveEventHandler<RequestWillBeSentExtraInfoEventArgs>("Network.requestWillBeSentExtraInfo", value);
            }
        }

        /// <summary>
        /// Fired when additional information about a responseReceived event is available from the network
        /// stack. Not every responseReceived event will have an additional responseReceivedExtraInfo for
        /// it, and responseReceivedExtraInfo may be fired before or after responseReceived.
        /// </summary>
        public event System.EventHandler<ResponseReceivedExtraInfoEventArgs> ResponseReceivedExtraInfo
        {
            add
            {
                _client.AddEventHandler<ResponseReceivedExtraInfoEventArgs>("Network.responseReceivedExtraInfo", value);
            }

            remove
            {
                _client.RemoveEventHandler<ResponseReceivedExtraInfoEventArgs>("Network.responseReceivedExtraInfo", value);
            }
        }

        /// <summary>
        /// Fired exactly once for each Trust Token operation. Depending on
        /// the type of the operation and whether the operation succeeded or
        /// failed, the event is fired before the corresponding request was sent
        /// or after the response was received.
        /// </summary>
        public event System.EventHandler<TrustTokenOperationDoneEventArgs> TrustTokenOperationDone
        {
            add
            {
                _client.AddEventHandler<TrustTokenOperationDoneEventArgs>("Network.trustTokenOperationDone", value);
            }

            remove
            {
                _client.RemoveEventHandler<TrustTokenOperationDoneEventArgs>("Network.trustTokenOperationDone", value);
            }
        }

        /// <summary>
        /// Fired once when parsing the .wbn file has succeeded.
        /// The event contains the information about the web bundle contents.
        /// </summary>
        public event System.EventHandler<SubresourceWebBundleMetadataReceivedEventArgs> SubresourceWebBundleMetadataReceived
        {
            add
            {
                _client.AddEventHandler<SubresourceWebBundleMetadataReceivedEventArgs>("Network.subresourceWebBundleMetadataReceived", value);
            }

            remove
            {
                _client.RemoveEventHandler<SubresourceWebBundleMetadataReceivedEventArgs>("Network.subresourceWebBundleMetadataReceived", value);
            }
        }

        /// <summary>
        /// Fired once when parsing the .wbn file has failed.
        /// </summary>
        public event System.EventHandler<SubresourceWebBundleMetadataErrorEventArgs> SubresourceWebBundleMetadataError
        {
            add
            {
                _client.AddEventHandler<SubresourceWebBundleMetadataErrorEventArgs>("Network.subresourceWebBundleMetadataError", value);
            }

            remove
            {
                _client.RemoveEventHandler<SubresourceWebBundleMetadataErrorEventArgs>("Network.subresourceWebBundleMetadataError", value);
            }
        }

        /// <summary>
        /// Fired when handling requests for resources within a .wbn file.
        /// Note: this will only be fired for resources that are requested by the webpage.
        /// </summary>
        public event System.EventHandler<SubresourceWebBundleInnerResponseParsedEventArgs> SubresourceWebBundleInnerResponseParsed
        {
            add
            {
                _client.AddEventHandler<SubresourceWebBundleInnerResponseParsedEventArgs>("Network.subresourceWebBundleInnerResponseParsed", value);
            }

            remove
            {
                _client.RemoveEventHandler<SubresourceWebBundleInnerResponseParsedEventArgs>("Network.subresourceWebBundleInnerResponseParsed", value);
            }
        }

        /// <summary>
        /// Fired when request for resources within a .wbn file failed.
        /// </summary>
        public event System.EventHandler<SubresourceWebBundleInnerResponseErrorEventArgs> SubresourceWebBundleInnerResponseError
        {
            add
            {
                _client.AddEventHandler<SubresourceWebBundleInnerResponseErrorEventArgs>("Network.subresourceWebBundleInnerResponseError", value);
            }

            remove
            {
                _client.RemoveEventHandler<SubresourceWebBundleInnerResponseErrorEventArgs>("Network.subresourceWebBundleInnerResponseError", value);
            }
        }

        /// <summary>
        /// Is sent whenever a new report is added.
        /// And after &apos;enableReportingApi&apos; for all existing reports.
        /// </summary>
        public event System.EventHandler<ReportingApiReportAddedEventArgs> ReportingApiReportAdded
        {
            add
            {
                _client.AddEventHandler<ReportingApiReportAddedEventArgs>("Network.reportingApiReportAdded", value);
            }

            remove
            {
                _client.RemoveEventHandler<ReportingApiReportAddedEventArgs>("Network.reportingApiReportAdded", value);
            }
        }

        /// <summary>
        /// ReportingApiReportUpdated
        /// </summary>
        public event System.EventHandler<ReportingApiReportUpdatedEventArgs> ReportingApiReportUpdated
        {
            add
            {
                _client.AddEventHandler<ReportingApiReportUpdatedEventArgs>("Network.reportingApiReportUpdated", value);
            }

            remove
            {
                _client.RemoveEventHandler<ReportingApiReportUpdatedEventArgs>("Network.reportingApiReportUpdated", value);
            }
        }

        /// <summary>
        /// ReportingApiEndpointsChangedForOrigin
        /// </summary>
        public event System.EventHandler<ReportingApiEndpointsChangedForOriginEventArgs> ReportingApiEndpointsChangedForOrigin
        {
            add
            {
                _client.AddEventHandler<ReportingApiEndpointsChangedForOriginEventArgs>("Network.reportingApiEndpointsChangedForOrigin", value);
            }

            remove
            {
                _client.RemoveEventHandler<ReportingApiEndpointsChangedForOriginEventArgs>("Network.reportingApiEndpointsChangedForOrigin", value);
            }
        }

        partial void ValidateSetAcceptedEncodings(CefSharp.DevTools.Network.ContentEncoding[] encodings);
        /// <summary>
        /// Sets a list of content encodings that will be accepted. Empty list means no encoding is accepted.
        /// </summary>
        /// <param name = "encodings">List of accepted content encodings.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetAcceptedEncodingsAsync(CefSharp.DevTools.Network.ContentEncoding[] encodings)
        {
            ValidateSetAcceptedEncodings(encodings);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("encodings", EnumToString(encodings));
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Network.setAcceptedEncodings", dict);
        }

        /// <summary>
        /// Clears accepted encodings set by setAcceptedEncodings
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ClearAcceptedEncodingsOverrideAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Network.clearAcceptedEncodingsOverride", dict);
        }

        /// <summary>
        /// Clears browser cache.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ClearBrowserCacheAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Network.clearBrowserCache", dict);
        }

        /// <summary>
        /// Clears browser cookies.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ClearBrowserCookiesAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Network.clearBrowserCookies", dict);
        }

        partial void ValidateDeleteCookies(string name, string url = null, string domain = null, string path = null, string partitionKey = null);
        /// <summary>
        /// Deletes browser cookies with matching name and url or domain/path/partitionKey pair.
        /// </summary>
        /// <param name = "name">Name of the cookies to remove.</param>
        /// <param name = "url">If specified, deletes all the cookies with the given name where domain and path matchprovided URL.</param>
        /// <param name = "domain">If specified, deletes only cookies with the exact domain.</param>
        /// <param name = "path">If specified, deletes only cookies with the exact path.</param>
        /// <param name = "partitionKey">If specified, deletes only cookies with the the given name and partitionKey where domainmatches provided URL.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DeleteCookiesAsync(string name, string url = null, string domain = null, string path = null, string partitionKey = null)
        {
            ValidateDeleteCookies(name, url, domain, path, partitionKey);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("name", name);
            if (!(string.IsNullOrEmpty(url)))
            {
                dict.Add("url", url);
            }

            if (!(string.IsNullOrEmpty(domain)))
            {
                dict.Add("domain", domain);
            }

            if (!(string.IsNullOrEmpty(path)))
            {
                dict.Add("path", path);
            }

            if (!(string.IsNullOrEmpty(partitionKey)))
            {
                dict.Add("partitionKey", partitionKey);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Network.deleteCookies", dict);
        }

        /// <summary>
        /// Disables network tracking, prevents network events from being sent to the client.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DisableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Network.disable", dict);
        }

        partial void ValidateEmulateNetworkConditions(bool offline, double latency, double downloadThroughput, double uploadThroughput, CefSharp.DevTools.Network.ConnectionType? connectionType = null);
        /// <summary>
        /// Activates emulation of network conditions.
        /// </summary>
        /// <param name = "offline">True to emulate internet disconnection.</param>
        /// <param name = "latency">Minimum latency from request sent to response headers received (ms).</param>
        /// <param name = "downloadThroughput">Maximal aggregated download throughput (bytes/sec). -1 disables download throttling.</param>
        /// <param name = "uploadThroughput">Maximal aggregated upload throughput (bytes/sec).  -1 disables upload throttling.</param>
        /// <param name = "connectionType">Connection type if known.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> EmulateNetworkConditionsAsync(bool offline, double latency, double downloadThroughput, double uploadThroughput, CefSharp.DevTools.Network.ConnectionType? connectionType = null)
        {
            ValidateEmulateNetworkConditions(offline, latency, downloadThroughput, uploadThroughput, connectionType);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("offline", offline);
            dict.Add("latency", latency);
            dict.Add("downloadThroughput", downloadThroughput);
            dict.Add("uploadThroughput", uploadThroughput);
            if (connectionType.HasValue)
            {
                dict.Add("connectionType", EnumToString(connectionType));
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Network.emulateNetworkConditions", dict);
        }

        partial void ValidateEnable(int? maxTotalBufferSize = null, int? maxResourceBufferSize = null, int? maxPostDataSize = null);
        /// <summary>
        /// Enables network tracking, network events will now be delivered to the client.
        /// </summary>
        /// <param name = "maxTotalBufferSize">Buffer size in bytes to use when preserving network payloads (XHRs, etc).</param>
        /// <param name = "maxResourceBufferSize">Per-resource buffer size in bytes to use when preserving network payloads (XHRs, etc).</param>
        /// <param name = "maxPostDataSize">Longest post body size (in bytes) that would be included in requestWillBeSent notification</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> EnableAsync(int? maxTotalBufferSize = null, int? maxResourceBufferSize = null, int? maxPostDataSize = null)
        {
            ValidateEnable(maxTotalBufferSize, maxResourceBufferSize, maxPostDataSize);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (maxTotalBufferSize.HasValue)
            {
                dict.Add("maxTotalBufferSize", maxTotalBufferSize.Value);
            }

            if (maxResourceBufferSize.HasValue)
            {
                dict.Add("maxResourceBufferSize", maxResourceBufferSize.Value);
            }

            if (maxPostDataSize.HasValue)
            {
                dict.Add("maxPostDataSize", maxPostDataSize.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Network.enable", dict);
        }

        partial void ValidateGetCertificate(string origin);
        /// <summary>
        /// Returns the DER-encoded certificate.
        /// </summary>
        /// <param name = "origin">Origin to get certificate for.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetCertificateResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetCertificateResponse> GetCertificateAsync(string origin)
        {
            ValidateGetCertificate(origin);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("origin", origin);
            return _client.ExecuteDevToolsMethodAsync<GetCertificateResponse>("Network.getCertificate", dict);
        }

        partial void ValidateGetCookies(string[] urls = null);
        /// <summary>
        /// Returns all browser cookies for the current URL. Depending on the backend support, will return
        /// detailed cookie information in the `cookies` field.
        /// </summary>
        /// <param name = "urls">The list of URLs for which applicable cookies will be fetched.If not specified, it's assumed to be set to the list containingthe URLs of the page and all of its subframes.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetCookiesResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetCookiesResponse> GetCookiesAsync(string[] urls = null)
        {
            ValidateGetCookies(urls);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if ((urls) != (null))
            {
                dict.Add("urls", urls);
            }

            return _client.ExecuteDevToolsMethodAsync<GetCookiesResponse>("Network.getCookies", dict);
        }

        partial void ValidateGetResponseBody(string requestId);
        /// <summary>
        /// Returns content served for the given request.
        /// </summary>
        /// <param name = "requestId">Identifier of the network request to get content for.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetResponseBodyResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetResponseBodyResponse> GetResponseBodyAsync(string requestId)
        {
            ValidateGetResponseBody(requestId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("requestId", requestId);
            return _client.ExecuteDevToolsMethodAsync<GetResponseBodyResponse>("Network.getResponseBody", dict);
        }

        partial void ValidateGetRequestPostData(string requestId);
        /// <summary>
        /// Returns post data sent with the request. Returns an error when no data was sent with the request.
        /// </summary>
        /// <param name = "requestId">Identifier of the network request to get content for.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetRequestPostDataResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetRequestPostDataResponse> GetRequestPostDataAsync(string requestId)
        {
            ValidateGetRequestPostData(requestId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("requestId", requestId);
            return _client.ExecuteDevToolsMethodAsync<GetRequestPostDataResponse>("Network.getRequestPostData", dict);
        }

        partial void ValidateGetResponseBodyForInterception(string interceptionId);
        /// <summary>
        /// Returns content served for the given currently intercepted request.
        /// </summary>
        /// <param name = "interceptionId">Identifier for the intercepted request to get body for.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetResponseBodyForInterceptionResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetResponseBodyForInterceptionResponse> GetResponseBodyForInterceptionAsync(string interceptionId)
        {
            ValidateGetResponseBodyForInterception(interceptionId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("interceptionId", interceptionId);
            return _client.ExecuteDevToolsMethodAsync<GetResponseBodyForInterceptionResponse>("Network.getResponseBodyForInterception", dict);
        }

        partial void ValidateTakeResponseBodyForInterceptionAsStream(string interceptionId);
        /// <summary>
        /// Returns a handle to the stream representing the response body. Note that after this command,
        /// the intercepted request can&apos;t be continued as is -- you either need to cancel it or to provide
        /// the response body. The stream only supports sequential read, IO.read will fail if the position
        /// is specified.
        /// </summary>
        /// <param name = "interceptionId">interceptionId</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;TakeResponseBodyForInterceptionAsStreamResponse&gt;</returns>
        public System.Threading.Tasks.Task<TakeResponseBodyForInterceptionAsStreamResponse> TakeResponseBodyForInterceptionAsStreamAsync(string interceptionId)
        {
            ValidateTakeResponseBodyForInterceptionAsStream(interceptionId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("interceptionId", interceptionId);
            return _client.ExecuteDevToolsMethodAsync<TakeResponseBodyForInterceptionAsStreamResponse>("Network.takeResponseBodyForInterceptionAsStream", dict);
        }

        partial void ValidateReplayXHR(string requestId);
        /// <summary>
        /// This method sends a new XMLHttpRequest which is identical to the original one. The following
        /// parameters should be identical: method, url, async, request body, extra headers, withCredentials
        /// attribute, user, password.
        /// </summary>
        /// <param name = "requestId">Identifier of XHR to replay.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ReplayXHRAsync(string requestId)
        {
            ValidateReplayXHR(requestId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("requestId", requestId);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Network.replayXHR", dict);
        }

        partial void ValidateSearchInResponseBody(string requestId, string query, bool? caseSensitive = null, bool? isRegex = null);
        /// <summary>
        /// Searches for given string in response content.
        /// </summary>
        /// <param name = "requestId">Identifier of the network response to search.</param>
        /// <param name = "query">String to search for.</param>
        /// <param name = "caseSensitive">If true, search is case sensitive.</param>
        /// <param name = "isRegex">If true, treats string parameter as regex.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;SearchInResponseBodyResponse&gt;</returns>
        public System.Threading.Tasks.Task<SearchInResponseBodyResponse> SearchInResponseBodyAsync(string requestId, string query, bool? caseSensitive = null, bool? isRegex = null)
        {
            ValidateSearchInResponseBody(requestId, query, caseSensitive, isRegex);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("requestId", requestId);
            dict.Add("query", query);
            if (caseSensitive.HasValue)
            {
                dict.Add("caseSensitive", caseSensitive.Value);
            }

            if (isRegex.HasValue)
            {
                dict.Add("isRegex", isRegex.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<SearchInResponseBodyResponse>("Network.searchInResponseBody", dict);
        }

        partial void ValidateSetBlockedURLs(string[] urls);
        /// <summary>
        /// Blocks URLs from loading.
        /// </summary>
        /// <param name = "urls">URL patterns to block. Wildcards ('*') are allowed.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetBlockedURLsAsync(string[] urls)
        {
            ValidateSetBlockedURLs(urls);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("urls", urls);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Network.setBlockedURLs", dict);
        }

        partial void ValidateSetBypassServiceWorker(bool bypass);
        /// <summary>
        /// Toggles ignoring of service worker for each request.
        /// </summary>
        /// <param name = "bypass">Bypass service worker and load from network.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetBypassServiceWorkerAsync(bool bypass)
        {
            ValidateSetBypassServiceWorker(bypass);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("bypass", bypass);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Network.setBypassServiceWorker", dict);
        }

        partial void ValidateSetCacheDisabled(bool cacheDisabled);
        /// <summary>
        /// Toggles ignoring cache for each request. If `true`, cache will not be used.
        /// </summary>
        /// <param name = "cacheDisabled">Cache disabled state.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetCacheDisabledAsync(bool cacheDisabled)
        {
            ValidateSetCacheDisabled(cacheDisabled);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("cacheDisabled", cacheDisabled);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Network.setCacheDisabled", dict);
        }

        partial void ValidateSetCookie(string name, string value, string url = null, string domain = null, string path = null, bool? secure = null, bool? httpOnly = null, CefSharp.DevTools.Network.CookieSameSite? sameSite = null, double? expires = null, CefSharp.DevTools.Network.CookiePriority? priority = null, bool? sameParty = null, CefSharp.DevTools.Network.CookieSourceScheme? sourceScheme = null, int? sourcePort = null, string partitionKey = null);
        /// <summary>
        /// Sets a cookie with the given cookie data; may overwrite equivalent cookies if they exist.
        /// </summary>
        /// <param name = "name">Cookie name.</param>
        /// <param name = "value">Cookie value.</param>
        /// <param name = "url">The request-URI to associate with the setting of the cookie. This value can affect thedefault domain, path, source port, and source scheme values of the created cookie.</param>
        /// <param name = "domain">Cookie domain.</param>
        /// <param name = "path">Cookie path.</param>
        /// <param name = "secure">True if cookie is secure.</param>
        /// <param name = "httpOnly">True if cookie is http-only.</param>
        /// <param name = "sameSite">Cookie SameSite type.</param>
        /// <param name = "expires">Cookie expiration date, session cookie if not set</param>
        /// <param name = "priority">Cookie Priority type.</param>
        /// <param name = "sameParty">True if cookie is SameParty.</param>
        /// <param name = "sourceScheme">Cookie source scheme type.</param>
        /// <param name = "sourcePort">Cookie source port. Valid values are {-1, [1, 65535]}, -1 indicates an unspecified port.An unspecified port value allows protocol clients to emulate legacy cookie scope for the port.This is a temporary ability and it will be removed in the future.</param>
        /// <param name = "partitionKey">Cookie partition key. The site of the top-level URL the browser was visiting at the startof the request to the endpoint that set the cookie.If not set, the cookie will be set as not partitioned.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;SetCookieResponse&gt;</returns>
        public System.Threading.Tasks.Task<SetCookieResponse> SetCookieAsync(string name, string value, string url = null, string domain = null, string path = null, bool? secure = null, bool? httpOnly = null, CefSharp.DevTools.Network.CookieSameSite? sameSite = null, double? expires = null, CefSharp.DevTools.Network.CookiePriority? priority = null, bool? sameParty = null, CefSharp.DevTools.Network.CookieSourceScheme? sourceScheme = null, int? sourcePort = null, string partitionKey = null)
        {
            ValidateSetCookie(name, value, url, domain, path, secure, httpOnly, sameSite, expires, priority, sameParty, sourceScheme, sourcePort, partitionKey);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("name", name);
            dict.Add("value", value);
            if (!(string.IsNullOrEmpty(url)))
            {
                dict.Add("url", url);
            }

            if (!(string.IsNullOrEmpty(domain)))
            {
                dict.Add("domain", domain);
            }

            if (!(string.IsNullOrEmpty(path)))
            {
                dict.Add("path", path);
            }

            if (secure.HasValue)
            {
                dict.Add("secure", secure.Value);
            }

            if (httpOnly.HasValue)
            {
                dict.Add("httpOnly", httpOnly.Value);
            }

            if (sameSite.HasValue)
            {
                dict.Add("sameSite", EnumToString(sameSite));
            }

            if (expires.HasValue)
            {
                dict.Add("expires", expires.Value);
            }

            if (priority.HasValue)
            {
                dict.Add("priority", EnumToString(priority));
            }

            if (sameParty.HasValue)
            {
                dict.Add("sameParty", sameParty.Value);
            }

            if (sourceScheme.HasValue)
            {
                dict.Add("sourceScheme", EnumToString(sourceScheme));
            }

            if (sourcePort.HasValue)
            {
                dict.Add("sourcePort", sourcePort.Value);
            }

            if (!(string.IsNullOrEmpty(partitionKey)))
            {
                dict.Add("partitionKey", partitionKey);
            }

            return _client.ExecuteDevToolsMethodAsync<SetCookieResponse>("Network.setCookie", dict);
        }

        partial void ValidateSetCookies(System.Collections.Generic.IList<CefSharp.DevTools.Network.CookieParam> cookies);
        /// <summary>
        /// Sets given cookies.
        /// </summary>
        /// <param name = "cookies">Cookies to be set.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetCookiesAsync(System.Collections.Generic.IList<CefSharp.DevTools.Network.CookieParam> cookies)
        {
            ValidateSetCookies(cookies);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("cookies", cookies.Select(x => x.ToDictionary()));
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Network.setCookies", dict);
        }

        partial void ValidateSetExtraHTTPHeaders(CefSharp.DevTools.Network.Headers headers);
        /// <summary>
        /// Specifies whether to always send extra HTTP headers with the requests from this page.
        /// </summary>
        /// <param name = "headers">Map with extra HTTP headers.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetExtraHTTPHeadersAsync(CefSharp.DevTools.Network.Headers headers)
        {
            ValidateSetExtraHTTPHeaders(headers);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("headers", headers.ToDictionary());
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Network.setExtraHTTPHeaders", dict);
        }

        partial void ValidateSetAttachDebugStack(bool enabled);
        /// <summary>
        /// Specifies whether to attach a page script stack id in requests
        /// </summary>
        /// <param name = "enabled">Whether to attach a page script stack for debugging purpose.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetAttachDebugStackAsync(bool enabled)
        {
            ValidateSetAttachDebugStack(enabled);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("enabled", enabled);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Network.setAttachDebugStack", dict);
        }

        partial void ValidateSetUserAgentOverride(string userAgent, string acceptLanguage = null, string platform = null, CefSharp.DevTools.Emulation.UserAgentMetadata userAgentMetadata = null);
        /// <summary>
        /// Allows overriding user agent with the given string.
        /// </summary>
        /// <param name = "userAgent">User agent to use.</param>
        /// <param name = "acceptLanguage">Browser language to emulate.</param>
        /// <param name = "platform">The platform navigator.platform should return.</param>
        /// <param name = "userAgentMetadata">To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetUserAgentOverrideAsync(string userAgent, string acceptLanguage = null, string platform = null, CefSharp.DevTools.Emulation.UserAgentMetadata userAgentMetadata = null)
        {
            ValidateSetUserAgentOverride(userAgent, acceptLanguage, platform, userAgentMetadata);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("userAgent", userAgent);
            if (!(string.IsNullOrEmpty(acceptLanguage)))
            {
                dict.Add("acceptLanguage", acceptLanguage);
            }

            if (!(string.IsNullOrEmpty(platform)))
            {
                dict.Add("platform", platform);
            }

            if ((userAgentMetadata) != (null))
            {
                dict.Add("userAgentMetadata", userAgentMetadata.ToDictionary());
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Network.setUserAgentOverride", dict);
        }

        partial void ValidateStreamResourceContent(string requestId);
        /// <summary>
        /// Enables streaming of the response for the given requestId.
        /// If enabled, the dataReceived event contains the data that was received during streaming.
        /// </summary>
        /// <param name = "requestId">Identifier of the request to stream.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;StreamResourceContentResponse&gt;</returns>
        public System.Threading.Tasks.Task<StreamResourceContentResponse> StreamResourceContentAsync(string requestId)
        {
            ValidateStreamResourceContent(requestId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("requestId", requestId);
            return _client.ExecuteDevToolsMethodAsync<StreamResourceContentResponse>("Network.streamResourceContent", dict);
        }

        partial void ValidateGetSecurityIsolationStatus(string frameId = null);
        /// <summary>
        /// Returns information about the COEP/COOP isolation status.
        /// </summary>
        /// <param name = "frameId">If no frameId is provided, the status of the target is provided.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetSecurityIsolationStatusResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetSecurityIsolationStatusResponse> GetSecurityIsolationStatusAsync(string frameId = null)
        {
            ValidateGetSecurityIsolationStatus(frameId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (!(string.IsNullOrEmpty(frameId)))
            {
                dict.Add("frameId", frameId);
            }

            return _client.ExecuteDevToolsMethodAsync<GetSecurityIsolationStatusResponse>("Network.getSecurityIsolationStatus", dict);
        }

        partial void ValidateEnableReportingApi(bool enable);
        /// <summary>
        /// Enables tracking for the Reporting API, events generated by the Reporting API will now be delivered to the client.
        /// Enabling triggers &apos;reportingApiReportAdded&apos; for all existing reports.
        /// </summary>
        /// <param name = "enable">Whether to enable or disable events for the Reporting API</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> EnableReportingApiAsync(bool enable)
        {
            ValidateEnableReportingApi(enable);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("enable", enable);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Network.enableReportingApi", dict);
        }

        partial void ValidateLoadNetworkResource(string url, CefSharp.DevTools.Network.LoadNetworkResourceOptions options, string frameId = null);
        /// <summary>
        /// Fetches the resource and returns the content.
        /// </summary>
        /// <param name = "url">URL of the resource to get content for.</param>
        /// <param name = "options">Options for the request.</param>
        /// <param name = "frameId">Frame id to get the resource for. Mandatory for frame targets, andshould be omitted for worker targets.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;LoadNetworkResourceResponse&gt;</returns>
        public System.Threading.Tasks.Task<LoadNetworkResourceResponse> LoadNetworkResourceAsync(string url, CefSharp.DevTools.Network.LoadNetworkResourceOptions options, string frameId = null)
        {
            ValidateLoadNetworkResource(url, options, frameId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("url", url);
            dict.Add("options", options.ToDictionary());
            if (!(string.IsNullOrEmpty(frameId)))
            {
                dict.Add("frameId", frameId);
            }

            return _client.ExecuteDevToolsMethodAsync<LoadNetworkResourceResponse>("Network.loadNetworkResource", dict);
        }
    }
}

namespace CefSharp.DevTools.Overlay
{
    /// <summary>
    /// GetHighlightObjectForTestResponse
    /// </summary>
    [DataContract]
    public class GetHighlightObjectForTestResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal object highlight
        {
            get;
            set;
        }

        /// <summary>
        /// highlight
        /// </summary>
        public object Highlight
        {
            get
            {
                return highlight;
            }
        }
    }
}

namespace CefSharp.DevTools.Overlay
{
    /// <summary>
    /// GetGridHighlightObjectsForTestResponse
    /// </summary>
    [DataContract]
    public class GetGridHighlightObjectsForTestResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal object highlights
        {
            get;
            set;
        }

        /// <summary>
        /// highlights
        /// </summary>
        public object Highlights
        {
            get
            {
                return highlights;
            }
        }
    }
}

namespace CefSharp.DevTools.Overlay
{
    /// <summary>
    /// GetSourceOrderHighlightObjectForTestResponse
    /// </summary>
    [DataContract]
    public class GetSourceOrderHighlightObjectForTestResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal object highlight
        {
            get;
            set;
        }

        /// <summary>
        /// highlight
        /// </summary>
        public object Highlight
        {
            get
            {
                return highlight;
            }
        }
    }
}

namespace CefSharp.DevTools.Overlay
{
    using System.Linq;

    /// <summary>
    /// This domain provides various functionality related to drawing atop the inspected page.
    /// </summary>
    public partial class OverlayClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// Overlay
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public OverlayClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// Fired when the node should be inspected. This happens after call to `setInspectMode` or when
        /// user manually inspects an element.
        /// </summary>
        public event System.EventHandler<InspectNodeRequestedEventArgs> InspectNodeRequested
        {
            add
            {
                _client.AddEventHandler<InspectNodeRequestedEventArgs>("Overlay.inspectNodeRequested", value);
            }

            remove
            {
                _client.RemoveEventHandler<InspectNodeRequestedEventArgs>("Overlay.inspectNodeRequested", value);
            }
        }

        /// <summary>
        /// Fired when the node should be highlighted. This happens after call to `setInspectMode`.
        /// </summary>
        public event System.EventHandler<NodeHighlightRequestedEventArgs> NodeHighlightRequested
        {
            add
            {
                _client.AddEventHandler<NodeHighlightRequestedEventArgs>("Overlay.nodeHighlightRequested", value);
            }

            remove
            {
                _client.RemoveEventHandler<NodeHighlightRequestedEventArgs>("Overlay.nodeHighlightRequested", value);
            }
        }

        /// <summary>
        /// Fired when user asks to capture screenshot of some area on the page.
        /// </summary>
        public event System.EventHandler<ScreenshotRequestedEventArgs> ScreenshotRequested
        {
            add
            {
                _client.AddEventHandler<ScreenshotRequestedEventArgs>("Overlay.screenshotRequested", value);
            }

            remove
            {
                _client.RemoveEventHandler<ScreenshotRequestedEventArgs>("Overlay.screenshotRequested", value);
            }
        }

        /// <summary>
        /// Fired when user cancels the inspect mode.
        /// </summary>
        public event System.EventHandler<System.EventArgs> InspectModeCanceled
        {
            add
            {
                _client.AddEventHandler<System.EventArgs>("Overlay.inspectModeCanceled", value);
            }

            remove
            {
                _client.RemoveEventHandler<System.EventArgs>("Overlay.inspectModeCanceled", value);
            }
        }

        /// <summary>
        /// Disables domain notifications.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DisableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Overlay.disable", dict);
        }

        /// <summary>
        /// Enables domain notifications.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> EnableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Overlay.enable", dict);
        }

        partial void ValidateGetHighlightObjectForTest(int nodeId, bool? includeDistance = null, bool? includeStyle = null, CefSharp.DevTools.Overlay.ColorFormat? colorFormat = null, bool? showAccessibilityInfo = null);
        /// <summary>
        /// For testing.
        /// </summary>
        /// <param name = "nodeId">Id of the node to get highlight object for.</param>
        /// <param name = "includeDistance">Whether to include distance info.</param>
        /// <param name = "includeStyle">Whether to include style info.</param>
        /// <param name = "colorFormat">The color format to get config with (default: hex).</param>
        /// <param name = "showAccessibilityInfo">Whether to show accessibility info (default: true).</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetHighlightObjectForTestResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetHighlightObjectForTestResponse> GetHighlightObjectForTestAsync(int nodeId, bool? includeDistance = null, bool? includeStyle = null, CefSharp.DevTools.Overlay.ColorFormat? colorFormat = null, bool? showAccessibilityInfo = null)
        {
            ValidateGetHighlightObjectForTest(nodeId, includeDistance, includeStyle, colorFormat, showAccessibilityInfo);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("nodeId", nodeId);
            if (includeDistance.HasValue)
            {
                dict.Add("includeDistance", includeDistance.Value);
            }

            if (includeStyle.HasValue)
            {
                dict.Add("includeStyle", includeStyle.Value);
            }

            if (colorFormat.HasValue)
            {
                dict.Add("colorFormat", EnumToString(colorFormat));
            }

            if (showAccessibilityInfo.HasValue)
            {
                dict.Add("showAccessibilityInfo", showAccessibilityInfo.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<GetHighlightObjectForTestResponse>("Overlay.getHighlightObjectForTest", dict);
        }

        partial void ValidateGetGridHighlightObjectsForTest(int[] nodeIds);
        /// <summary>
        /// For Persistent Grid testing.
        /// </summary>
        /// <param name = "nodeIds">Ids of the node to get highlight object for.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetGridHighlightObjectsForTestResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetGridHighlightObjectsForTestResponse> GetGridHighlightObjectsForTestAsync(int[] nodeIds)
        {
            ValidateGetGridHighlightObjectsForTest(nodeIds);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("nodeIds", nodeIds);
            return _client.ExecuteDevToolsMethodAsync<GetGridHighlightObjectsForTestResponse>("Overlay.getGridHighlightObjectsForTest", dict);
        }

        partial void ValidateGetSourceOrderHighlightObjectForTest(int nodeId);
        /// <summary>
        /// For Source Order Viewer testing.
        /// </summary>
        /// <param name = "nodeId">Id of the node to highlight.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetSourceOrderHighlightObjectForTestResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetSourceOrderHighlightObjectForTestResponse> GetSourceOrderHighlightObjectForTestAsync(int nodeId)
        {
            ValidateGetSourceOrderHighlightObjectForTest(nodeId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("nodeId", nodeId);
            return _client.ExecuteDevToolsMethodAsync<GetSourceOrderHighlightObjectForTestResponse>("Overlay.getSourceOrderHighlightObjectForTest", dict);
        }

        /// <summary>
        /// Hides any highlight.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> HideHighlightAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Overlay.hideHighlight", dict);
        }

        partial void ValidateHighlightNode(CefSharp.DevTools.Overlay.HighlightConfig highlightConfig, int? nodeId = null, int? backendNodeId = null, string objectId = null, string selector = null);
        /// <summary>
        /// Highlights DOM node with given id or with the given JavaScript object wrapper. Either nodeId or
        /// objectId must be specified.
        /// </summary>
        /// <param name = "highlightConfig">A descriptor for the highlight appearance.</param>
        /// <param name = "nodeId">Identifier of the node to highlight.</param>
        /// <param name = "backendNodeId">Identifier of the backend node to highlight.</param>
        /// <param name = "objectId">JavaScript object id of the node to be highlighted.</param>
        /// <param name = "selector">Selectors to highlight relevant nodes.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> HighlightNodeAsync(CefSharp.DevTools.Overlay.HighlightConfig highlightConfig, int? nodeId = null, int? backendNodeId = null, string objectId = null, string selector = null)
        {
            ValidateHighlightNode(highlightConfig, nodeId, backendNodeId, objectId, selector);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("highlightConfig", highlightConfig.ToDictionary());
            if (nodeId.HasValue)
            {
                dict.Add("nodeId", nodeId.Value);
            }

            if (backendNodeId.HasValue)
            {
                dict.Add("backendNodeId", backendNodeId.Value);
            }

            if (!(string.IsNullOrEmpty(objectId)))
            {
                dict.Add("objectId", objectId);
            }

            if (!(string.IsNullOrEmpty(selector)))
            {
                dict.Add("selector", selector);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Overlay.highlightNode", dict);
        }

        partial void ValidateHighlightQuad(double[] quad, CefSharp.DevTools.DOM.RGBA color = null, CefSharp.DevTools.DOM.RGBA outlineColor = null);
        /// <summary>
        /// Highlights given quad. Coordinates are absolute with respect to the main frame viewport.
        /// </summary>
        /// <param name = "quad">Quad to highlight</param>
        /// <param name = "color">The highlight fill color (default: transparent).</param>
        /// <param name = "outlineColor">The highlight outline color (default: transparent).</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> HighlightQuadAsync(double[] quad, CefSharp.DevTools.DOM.RGBA color = null, CefSharp.DevTools.DOM.RGBA outlineColor = null)
        {
            ValidateHighlightQuad(quad, color, outlineColor);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("quad", quad);
            if ((color) != (null))
            {
                dict.Add("color", color.ToDictionary());
            }

            if ((outlineColor) != (null))
            {
                dict.Add("outlineColor", outlineColor.ToDictionary());
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Overlay.highlightQuad", dict);
        }

        partial void ValidateHighlightRect(int x, int y, int width, int height, CefSharp.DevTools.DOM.RGBA color = null, CefSharp.DevTools.DOM.RGBA outlineColor = null);
        /// <summary>
        /// Highlights given rectangle. Coordinates are absolute with respect to the main frame viewport.
        /// </summary>
        /// <param name = "x">X coordinate</param>
        /// <param name = "y">Y coordinate</param>
        /// <param name = "width">Rectangle width</param>
        /// <param name = "height">Rectangle height</param>
        /// <param name = "color">The highlight fill color (default: transparent).</param>
        /// <param name = "outlineColor">The highlight outline color (default: transparent).</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> HighlightRectAsync(int x, int y, int width, int height, CefSharp.DevTools.DOM.RGBA color = null, CefSharp.DevTools.DOM.RGBA outlineColor = null)
        {
            ValidateHighlightRect(x, y, width, height, color, outlineColor);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("x", x);
            dict.Add("y", y);
            dict.Add("width", width);
            dict.Add("height", height);
            if ((color) != (null))
            {
                dict.Add("color", color.ToDictionary());
            }

            if ((outlineColor) != (null))
            {
                dict.Add("outlineColor", outlineColor.ToDictionary());
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Overlay.highlightRect", dict);
        }

        partial void ValidateHighlightSourceOrder(CefSharp.DevTools.Overlay.SourceOrderConfig sourceOrderConfig, int? nodeId = null, int? backendNodeId = null, string objectId = null);
        /// <summary>
        /// Highlights the source order of the children of the DOM node with given id or with the given
        /// JavaScript object wrapper. Either nodeId or objectId must be specified.
        /// </summary>
        /// <param name = "sourceOrderConfig">A descriptor for the appearance of the overlay drawing.</param>
        /// <param name = "nodeId">Identifier of the node to highlight.</param>
        /// <param name = "backendNodeId">Identifier of the backend node to highlight.</param>
        /// <param name = "objectId">JavaScript object id of the node to be highlighted.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> HighlightSourceOrderAsync(CefSharp.DevTools.Overlay.SourceOrderConfig sourceOrderConfig, int? nodeId = null, int? backendNodeId = null, string objectId = null)
        {
            ValidateHighlightSourceOrder(sourceOrderConfig, nodeId, backendNodeId, objectId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("sourceOrderConfig", sourceOrderConfig.ToDictionary());
            if (nodeId.HasValue)
            {
                dict.Add("nodeId", nodeId.Value);
            }

            if (backendNodeId.HasValue)
            {
                dict.Add("backendNodeId", backendNodeId.Value);
            }

            if (!(string.IsNullOrEmpty(objectId)))
            {
                dict.Add("objectId", objectId);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Overlay.highlightSourceOrder", dict);
        }

        partial void ValidateSetInspectMode(CefSharp.DevTools.Overlay.InspectMode mode, CefSharp.DevTools.Overlay.HighlightConfig highlightConfig = null);
        /// <summary>
        /// Enters the &apos;inspect&apos; mode. In this mode, elements that user is hovering over are highlighted.
        /// Backend then generates &apos;inspectNodeRequested&apos; event upon element selection.
        /// </summary>
        /// <param name = "mode">Set an inspection mode.</param>
        /// <param name = "highlightConfig">A descriptor for the highlight appearance of hovered-over nodes. May be omitted if `enabled== false`.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetInspectModeAsync(CefSharp.DevTools.Overlay.InspectMode mode, CefSharp.DevTools.Overlay.HighlightConfig highlightConfig = null)
        {
            ValidateSetInspectMode(mode, highlightConfig);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("mode", EnumToString(mode));
            if ((highlightConfig) != (null))
            {
                dict.Add("highlightConfig", highlightConfig.ToDictionary());
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Overlay.setInspectMode", dict);
        }

        partial void ValidateSetShowAdHighlights(bool show);
        /// <summary>
        /// Highlights owner element of all frames detected to be ads.
        /// </summary>
        /// <param name = "show">True for showing ad highlights</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetShowAdHighlightsAsync(bool show)
        {
            ValidateSetShowAdHighlights(show);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("show", show);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Overlay.setShowAdHighlights", dict);
        }

        partial void ValidateSetPausedInDebuggerMessage(string message = null);
        /// <summary>
        /// SetPausedInDebuggerMessage
        /// </summary>
        /// <param name = "message">The message to display, also triggers resume and step over controls.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetPausedInDebuggerMessageAsync(string message = null)
        {
            ValidateSetPausedInDebuggerMessage(message);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (!(string.IsNullOrEmpty(message)))
            {
                dict.Add("message", message);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Overlay.setPausedInDebuggerMessage", dict);
        }

        partial void ValidateSetShowDebugBorders(bool show);
        /// <summary>
        /// Requests that backend shows debug borders on layers
        /// </summary>
        /// <param name = "show">True for showing debug borders</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetShowDebugBordersAsync(bool show)
        {
            ValidateSetShowDebugBorders(show);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("show", show);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Overlay.setShowDebugBorders", dict);
        }

        partial void ValidateSetShowFPSCounter(bool show);
        /// <summary>
        /// Requests that backend shows the FPS counter
        /// </summary>
        /// <param name = "show">True for showing the FPS counter</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetShowFPSCounterAsync(bool show)
        {
            ValidateSetShowFPSCounter(show);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("show", show);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Overlay.setShowFPSCounter", dict);
        }

        partial void ValidateSetShowGridOverlays(System.Collections.Generic.IList<CefSharp.DevTools.Overlay.GridNodeHighlightConfig> gridNodeHighlightConfigs);
        /// <summary>
        /// Highlight multiple elements with the CSS Grid overlay.
        /// </summary>
        /// <param name = "gridNodeHighlightConfigs">An array of node identifiers and descriptors for the highlight appearance.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetShowGridOverlaysAsync(System.Collections.Generic.IList<CefSharp.DevTools.Overlay.GridNodeHighlightConfig> gridNodeHighlightConfigs)
        {
            ValidateSetShowGridOverlays(gridNodeHighlightConfigs);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("gridNodeHighlightConfigs", gridNodeHighlightConfigs.Select(x => x.ToDictionary()));
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Overlay.setShowGridOverlays", dict);
        }

        partial void ValidateSetShowFlexOverlays(System.Collections.Generic.IList<CefSharp.DevTools.Overlay.FlexNodeHighlightConfig> flexNodeHighlightConfigs);
        /// <summary>
        /// SetShowFlexOverlays
        /// </summary>
        /// <param name = "flexNodeHighlightConfigs">An array of node identifiers and descriptors for the highlight appearance.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetShowFlexOverlaysAsync(System.Collections.Generic.IList<CefSharp.DevTools.Overlay.FlexNodeHighlightConfig> flexNodeHighlightConfigs)
        {
            ValidateSetShowFlexOverlays(flexNodeHighlightConfigs);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("flexNodeHighlightConfigs", flexNodeHighlightConfigs.Select(x => x.ToDictionary()));
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Overlay.setShowFlexOverlays", dict);
        }

        partial void ValidateSetShowScrollSnapOverlays(System.Collections.Generic.IList<CefSharp.DevTools.Overlay.ScrollSnapHighlightConfig> scrollSnapHighlightConfigs);
        /// <summary>
        /// SetShowScrollSnapOverlays
        /// </summary>
        /// <param name = "scrollSnapHighlightConfigs">An array of node identifiers and descriptors for the highlight appearance.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetShowScrollSnapOverlaysAsync(System.Collections.Generic.IList<CefSharp.DevTools.Overlay.ScrollSnapHighlightConfig> scrollSnapHighlightConfigs)
        {
            ValidateSetShowScrollSnapOverlays(scrollSnapHighlightConfigs);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("scrollSnapHighlightConfigs", scrollSnapHighlightConfigs.Select(x => x.ToDictionary()));
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Overlay.setShowScrollSnapOverlays", dict);
        }

        partial void ValidateSetShowContainerQueryOverlays(System.Collections.Generic.IList<CefSharp.DevTools.Overlay.ContainerQueryHighlightConfig> containerQueryHighlightConfigs);
        /// <summary>
        /// SetShowContainerQueryOverlays
        /// </summary>
        /// <param name = "containerQueryHighlightConfigs">An array of node identifiers and descriptors for the highlight appearance.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetShowContainerQueryOverlaysAsync(System.Collections.Generic.IList<CefSharp.DevTools.Overlay.ContainerQueryHighlightConfig> containerQueryHighlightConfigs)
        {
            ValidateSetShowContainerQueryOverlays(containerQueryHighlightConfigs);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("containerQueryHighlightConfigs", containerQueryHighlightConfigs.Select(x => x.ToDictionary()));
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Overlay.setShowContainerQueryOverlays", dict);
        }

        partial void ValidateSetShowPaintRects(bool result);
        /// <summary>
        /// Requests that backend shows paint rectangles
        /// </summary>
        /// <param name = "result">True for showing paint rectangles</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetShowPaintRectsAsync(bool result)
        {
            ValidateSetShowPaintRects(result);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("result", result);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Overlay.setShowPaintRects", dict);
        }

        partial void ValidateSetShowLayoutShiftRegions(bool result);
        /// <summary>
        /// Requests that backend shows layout shift regions
        /// </summary>
        /// <param name = "result">True for showing layout shift regions</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetShowLayoutShiftRegionsAsync(bool result)
        {
            ValidateSetShowLayoutShiftRegions(result);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("result", result);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Overlay.setShowLayoutShiftRegions", dict);
        }

        partial void ValidateSetShowScrollBottleneckRects(bool show);
        /// <summary>
        /// Requests that backend shows scroll bottleneck rects
        /// </summary>
        /// <param name = "show">True for showing scroll bottleneck rects</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetShowScrollBottleneckRectsAsync(bool show)
        {
            ValidateSetShowScrollBottleneckRects(show);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("show", show);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Overlay.setShowScrollBottleneckRects", dict);
        }

        partial void ValidateSetShowWebVitals(bool show);
        /// <summary>
        /// Request that backend shows an overlay with web vital metrics.
        /// </summary>
        /// <param name = "show">show</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetShowWebVitalsAsync(bool show)
        {
            ValidateSetShowWebVitals(show);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("show", show);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Overlay.setShowWebVitals", dict);
        }

        partial void ValidateSetShowViewportSizeOnResize(bool show);
        /// <summary>
        /// Paints viewport size upon main frame resize.
        /// </summary>
        /// <param name = "show">Whether to paint size or not.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetShowViewportSizeOnResizeAsync(bool show)
        {
            ValidateSetShowViewportSizeOnResize(show);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("show", show);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Overlay.setShowViewportSizeOnResize", dict);
        }

        partial void ValidateSetShowHinge(CefSharp.DevTools.Overlay.HingeConfig hingeConfig = null);
        /// <summary>
        /// Add a dual screen device hinge
        /// </summary>
        /// <param name = "hingeConfig">hinge data, null means hideHinge</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetShowHingeAsync(CefSharp.DevTools.Overlay.HingeConfig hingeConfig = null)
        {
            ValidateSetShowHinge(hingeConfig);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if ((hingeConfig) != (null))
            {
                dict.Add("hingeConfig", hingeConfig.ToDictionary());
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Overlay.setShowHinge", dict);
        }

        partial void ValidateSetShowIsolatedElements(System.Collections.Generic.IList<CefSharp.DevTools.Overlay.IsolatedElementHighlightConfig> isolatedElementHighlightConfigs);
        /// <summary>
        /// Show elements in isolation mode with overlays.
        /// </summary>
        /// <param name = "isolatedElementHighlightConfigs">An array of node identifiers and descriptors for the highlight appearance.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetShowIsolatedElementsAsync(System.Collections.Generic.IList<CefSharp.DevTools.Overlay.IsolatedElementHighlightConfig> isolatedElementHighlightConfigs)
        {
            ValidateSetShowIsolatedElements(isolatedElementHighlightConfigs);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("isolatedElementHighlightConfigs", isolatedElementHighlightConfigs.Select(x => x.ToDictionary()));
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Overlay.setShowIsolatedElements", dict);
        }

        partial void ValidateSetShowWindowControlsOverlay(CefSharp.DevTools.Overlay.WindowControlsOverlayConfig windowControlsOverlayConfig = null);
        /// <summary>
        /// Show Window Controls Overlay for PWA
        /// </summary>
        /// <param name = "windowControlsOverlayConfig">Window Controls Overlay data, null means hide Window Controls Overlay</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetShowWindowControlsOverlayAsync(CefSharp.DevTools.Overlay.WindowControlsOverlayConfig windowControlsOverlayConfig = null)
        {
            ValidateSetShowWindowControlsOverlay(windowControlsOverlayConfig);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if ((windowControlsOverlayConfig) != (null))
            {
                dict.Add("windowControlsOverlayConfig", windowControlsOverlayConfig.ToDictionary());
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Overlay.setShowWindowControlsOverlay", dict);
        }
    }
}

namespace CefSharp.DevTools.Page
{
    /// <summary>
    /// AddScriptToEvaluateOnNewDocumentResponse
    /// </summary>
    [DataContract]
    public class AddScriptToEvaluateOnNewDocumentResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string identifier
        {
            get;
            set;
        }

        /// <summary>
        /// identifier
        /// </summary>
        public string Identifier
        {
            get
            {
                return identifier;
            }
        }
    }
}

namespace CefSharp.DevTools.Page
{
    /// <summary>
    /// CaptureScreenshotResponse
    /// </summary>
    [DataContract]
    public class CaptureScreenshotResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string data
        {
            get;
            set;
        }

        /// <summary>
        /// data
        /// </summary>
        public byte[] Data
        {
            get
            {
                return Convert(data);
            }
        }
    }
}

namespace CefSharp.DevTools.Page
{
    /// <summary>
    /// CaptureSnapshotResponse
    /// </summary>
    [DataContract]
    public class CaptureSnapshotResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string data
        {
            get;
            set;
        }

        /// <summary>
        /// data
        /// </summary>
        public string Data
        {
            get
            {
                return data;
            }
        }
    }
}

namespace CefSharp.DevTools.Page
{
    /// <summary>
    /// CreateIsolatedWorldResponse
    /// </summary>
    [DataContract]
    public class CreateIsolatedWorldResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal int executionContextId
        {
            get;
            set;
        }

        /// <summary>
        /// executionContextId
        /// </summary>
        public int ExecutionContextId
        {
            get
            {
                return executionContextId;
            }
        }
    }
}

namespace CefSharp.DevTools.Page
{
    /// <summary>
    /// GetAppManifestResponse
    /// </summary>
    [DataContract]
    public class GetAppManifestResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string url
        {
            get;
            set;
        }

        /// <summary>
        /// url
        /// </summary>
        public string Url
        {
            get
            {
                return url;
            }
        }

        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.Page.AppManifestError> errors
        {
            get;
            set;
        }

        /// <summary>
        /// errors
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.Page.AppManifestError> Errors
        {
            get
            {
                return errors;
            }
        }

        [DataMember]
        internal string data
        {
            get;
            set;
        }

        /// <summary>
        /// data
        /// </summary>
        public string Data
        {
            get
            {
                return data;
            }
        }

        [DataMember]
        internal CefSharp.DevTools.Page.AppManifestParsedProperties parsed
        {
            get;
            set;
        }

        /// <summary>
        /// parsed
        /// </summary>
        public CefSharp.DevTools.Page.AppManifestParsedProperties Parsed
        {
            get
            {
                return parsed;
            }
        }
    }
}

namespace CefSharp.DevTools.Page
{
    /// <summary>
    /// GetInstallabilityErrorsResponse
    /// </summary>
    [DataContract]
    public class GetInstallabilityErrorsResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.Page.InstallabilityError> installabilityErrors
        {
            get;
            set;
        }

        /// <summary>
        /// installabilityErrors
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.Page.InstallabilityError> InstallabilityErrors
        {
            get
            {
                return installabilityErrors;
            }
        }
    }
}

namespace CefSharp.DevTools.Page
{
    /// <summary>
    /// GetAppIdResponse
    /// </summary>
    [DataContract]
    public class GetAppIdResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string appId
        {
            get;
            set;
        }

        /// <summary>
        /// appId
        /// </summary>
        public string AppId
        {
            get
            {
                return appId;
            }
        }

        [DataMember]
        internal string recommendedId
        {
            get;
            set;
        }

        /// <summary>
        /// recommendedId
        /// </summary>
        public string RecommendedId
        {
            get
            {
                return recommendedId;
            }
        }
    }
}

namespace CefSharp.DevTools.Page
{
    /// <summary>
    /// GetAdScriptIdResponse
    /// </summary>
    [DataContract]
    public class GetAdScriptIdResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.Page.AdScriptId adScriptId
        {
            get;
            set;
        }

        /// <summary>
        /// adScriptId
        /// </summary>
        public CefSharp.DevTools.Page.AdScriptId AdScriptId
        {
            get
            {
                return adScriptId;
            }
        }
    }
}

namespace CefSharp.DevTools.Page
{
    /// <summary>
    /// GetFrameTreeResponse
    /// </summary>
    [DataContract]
    public class GetFrameTreeResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.Page.FrameTree frameTree
        {
            get;
            set;
        }

        /// <summary>
        /// frameTree
        /// </summary>
        public CefSharp.DevTools.Page.FrameTree FrameTree
        {
            get
            {
                return frameTree;
            }
        }
    }
}

namespace CefSharp.DevTools.Page
{
    /// <summary>
    /// GetLayoutMetricsResponse
    /// </summary>
    [DataContract]
    public class GetLayoutMetricsResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.Page.LayoutViewport layoutViewport
        {
            get;
            set;
        }

        /// <summary>
        /// layoutViewport
        /// </summary>
        public CefSharp.DevTools.Page.LayoutViewport LayoutViewport
        {
            get
            {
                return layoutViewport;
            }
        }

        [DataMember]
        internal CefSharp.DevTools.Page.VisualViewport visualViewport
        {
            get;
            set;
        }

        /// <summary>
        /// visualViewport
        /// </summary>
        public CefSharp.DevTools.Page.VisualViewport VisualViewport
        {
            get
            {
                return visualViewport;
            }
        }

        [DataMember]
        internal CefSharp.DevTools.DOM.Rect contentSize
        {
            get;
            set;
        }

        /// <summary>
        /// contentSize
        /// </summary>
        public CefSharp.DevTools.DOM.Rect ContentSize
        {
            get
            {
                return contentSize;
            }
        }

        [DataMember]
        internal CefSharp.DevTools.Page.LayoutViewport cssLayoutViewport
        {
            get;
            set;
        }

        /// <summary>
        /// cssLayoutViewport
        /// </summary>
        public CefSharp.DevTools.Page.LayoutViewport CssLayoutViewport
        {
            get
            {
                return cssLayoutViewport;
            }
        }

        [DataMember]
        internal CefSharp.DevTools.Page.VisualViewport cssVisualViewport
        {
            get;
            set;
        }

        /// <summary>
        /// cssVisualViewport
        /// </summary>
        public CefSharp.DevTools.Page.VisualViewport CssVisualViewport
        {
            get
            {
                return cssVisualViewport;
            }
        }

        [DataMember]
        internal CefSharp.DevTools.DOM.Rect cssContentSize
        {
            get;
            set;
        }

        /// <summary>
        /// cssContentSize
        /// </summary>
        public CefSharp.DevTools.DOM.Rect CssContentSize
        {
            get
            {
                return cssContentSize;
            }
        }
    }
}

namespace CefSharp.DevTools.Page
{
    /// <summary>
    /// GetNavigationHistoryResponse
    /// </summary>
    [DataContract]
    public class GetNavigationHistoryResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal int currentIndex
        {
            get;
            set;
        }

        /// <summary>
        /// currentIndex
        /// </summary>
        public int CurrentIndex
        {
            get
            {
                return currentIndex;
            }
        }

        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.Page.NavigationEntry> entries
        {
            get;
            set;
        }

        /// <summary>
        /// entries
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.Page.NavigationEntry> Entries
        {
            get
            {
                return entries;
            }
        }
    }
}

namespace CefSharp.DevTools.Page
{
    /// <summary>
    /// GetResourceContentResponse
    /// </summary>
    [DataContract]
    public class GetResourceContentResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string content
        {
            get;
            set;
        }

        /// <summary>
        /// content
        /// </summary>
        public string Content
        {
            get
            {
                return content;
            }
        }

        [DataMember]
        internal bool base64Encoded
        {
            get;
            set;
        }

        /// <summary>
        /// base64Encoded
        /// </summary>
        public bool Base64Encoded
        {
            get
            {
                return base64Encoded;
            }
        }
    }
}

namespace CefSharp.DevTools.Page
{
    /// <summary>
    /// GetResourceTreeResponse
    /// </summary>
    [DataContract]
    public class GetResourceTreeResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.Page.FrameResourceTree frameTree
        {
            get;
            set;
        }

        /// <summary>
        /// frameTree
        /// </summary>
        public CefSharp.DevTools.Page.FrameResourceTree FrameTree
        {
            get
            {
                return frameTree;
            }
        }
    }
}

namespace CefSharp.DevTools.Page
{
    /// <summary>
    /// NavigateResponse
    /// </summary>
    [DataContract]
    public class NavigateResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string frameId
        {
            get;
            set;
        }

        /// <summary>
        /// frameId
        /// </summary>
        public string FrameId
        {
            get
            {
                return frameId;
            }
        }

        [DataMember]
        internal string loaderId
        {
            get;
            set;
        }

        /// <summary>
        /// loaderId
        /// </summary>
        public string LoaderId
        {
            get
            {
                return loaderId;
            }
        }

        [DataMember]
        internal string errorText
        {
            get;
            set;
        }

        /// <summary>
        /// errorText
        /// </summary>
        public string ErrorText
        {
            get
            {
                return errorText;
            }
        }
    }
}

namespace CefSharp.DevTools.Page
{
    /// <summary>
    /// PrintToPDFResponse
    /// </summary>
    [DataContract]
    public class PrintToPDFResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string data
        {
            get;
            set;
        }

        /// <summary>
        /// data
        /// </summary>
        public byte[] Data
        {
            get
            {
                return Convert(data);
            }
        }

        [DataMember]
        internal string stream
        {
            get;
            set;
        }

        /// <summary>
        /// stream
        /// </summary>
        public string Stream
        {
            get
            {
                return stream;
            }
        }
    }
}

namespace CefSharp.DevTools.Page
{
    /// <summary>
    /// SearchInResourceResponse
    /// </summary>
    [DataContract]
    public class SearchInResourceResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.Debugger.SearchMatch> result
        {
            get;
            set;
        }

        /// <summary>
        /// result
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.Debugger.SearchMatch> Result
        {
            get
            {
                return result;
            }
        }
    }
}

namespace CefSharp.DevTools.Page
{
    /// <summary>
    /// GetPermissionsPolicyStateResponse
    /// </summary>
    [DataContract]
    public class GetPermissionsPolicyStateResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.Page.PermissionsPolicyFeatureState> states
        {
            get;
            set;
        }

        /// <summary>
        /// states
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.Page.PermissionsPolicyFeatureState> States
        {
            get
            {
                return states;
            }
        }
    }
}

namespace CefSharp.DevTools.Page
{
    /// <summary>
    /// GetOriginTrialsResponse
    /// </summary>
    [DataContract]
    public class GetOriginTrialsResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.Page.OriginTrial> originTrials
        {
            get;
            set;
        }

        /// <summary>
        /// originTrials
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.Page.OriginTrial> OriginTrials
        {
            get
            {
                return originTrials;
            }
        }
    }
}

namespace CefSharp.DevTools.Page
{
    using System.Linq;

    /// <summary>
    /// Image compression format (defaults to png).
    /// </summary>
    public enum CaptureScreenshotFormat
    {
        /// <summary>
        /// jpeg
        /// </summary>
        [EnumMember(Value = ("jpeg"))]
        Jpeg,
        /// <summary>
        /// png
        /// </summary>
        [EnumMember(Value = ("png"))]
        Png,
        /// <summary>
        /// webp
        /// </summary>
        [EnumMember(Value = ("webp"))]
        Webp
    }

    /// <summary>
    /// Format (defaults to mhtml).
    /// </summary>
    public enum CaptureSnapshotFormat
    {
        /// <summary>
        /// mhtml
        /// </summary>
        [EnumMember(Value = ("mhtml"))]
        Mhtml
    }

    /// <summary>
    /// return as stream
    /// </summary>
    public enum PrintToPDFTransferMode
    {
        /// <summary>
        /// ReturnAsBase64
        /// </summary>
        [EnumMember(Value = ("ReturnAsBase64"))]
        ReturnAsBase64,
        /// <summary>
        /// ReturnAsStream
        /// </summary>
        [EnumMember(Value = ("ReturnAsStream"))]
        ReturnAsStream
    }

    /// <summary>
    /// Image compression format.
    /// </summary>
    public enum StartScreencastFormat
    {
        /// <summary>
        /// jpeg
        /// </summary>
        [EnumMember(Value = ("jpeg"))]
        Jpeg,
        /// <summary>
        /// png
        /// </summary>
        [EnumMember(Value = ("png"))]
        Png
    }

    /// <summary>
    /// Target lifecycle state
    /// </summary>
    public enum SetWebLifecycleStateState
    {
        /// <summary>
        /// frozen
        /// </summary>
        [EnumMember(Value = ("frozen"))]
        Frozen,
        /// <summary>
        /// active
        /// </summary>
        [EnumMember(Value = ("active"))]
        Active
    }

    /// <summary>
    /// Actions and events related to the inspected page belong to the page domain.
    /// </summary>
    public partial class PageClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// Page
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public PageClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// DomContentEventFired
        /// </summary>
        public event System.EventHandler<DomContentEventFiredEventArgs> DomContentEventFired
        {
            add
            {
                _client.AddEventHandler<DomContentEventFiredEventArgs>("Page.domContentEventFired", value);
            }

            remove
            {
                _client.RemoveEventHandler<DomContentEventFiredEventArgs>("Page.domContentEventFired", value);
            }
        }

        /// <summary>
        /// Emitted only when `page.interceptFileChooser` is enabled.
        /// </summary>
        public event System.EventHandler<FileChooserOpenedEventArgs> FileChooserOpened
        {
            add
            {
                _client.AddEventHandler<FileChooserOpenedEventArgs>("Page.fileChooserOpened", value);
            }

            remove
            {
                _client.RemoveEventHandler<FileChooserOpenedEventArgs>("Page.fileChooserOpened", value);
            }
        }

        /// <summary>
        /// Fired when frame has been attached to its parent.
        /// </summary>
        public event System.EventHandler<FrameAttachedEventArgs> FrameAttached
        {
            add
            {
                _client.AddEventHandler<FrameAttachedEventArgs>("Page.frameAttached", value);
            }

            remove
            {
                _client.RemoveEventHandler<FrameAttachedEventArgs>("Page.frameAttached", value);
            }
        }

        /// <summary>
        /// Fired when frame has been detached from its parent.
        /// </summary>
        public event System.EventHandler<FrameDetachedEventArgs> FrameDetached
        {
            add
            {
                _client.AddEventHandler<FrameDetachedEventArgs>("Page.frameDetached", value);
            }

            remove
            {
                _client.RemoveEventHandler<FrameDetachedEventArgs>("Page.frameDetached", value);
            }
        }

        /// <summary>
        /// Fired once navigation of the frame has completed. Frame is now associated with the new loader.
        /// </summary>
        public event System.EventHandler<FrameNavigatedEventArgs> FrameNavigated
        {
            add
            {
                _client.AddEventHandler<FrameNavigatedEventArgs>("Page.frameNavigated", value);
            }

            remove
            {
                _client.RemoveEventHandler<FrameNavigatedEventArgs>("Page.frameNavigated", value);
            }
        }

        /// <summary>
        /// Fired when opening document to write to.
        /// </summary>
        public event System.EventHandler<DocumentOpenedEventArgs> DocumentOpened
        {
            add
            {
                _client.AddEventHandler<DocumentOpenedEventArgs>("Page.documentOpened", value);
            }

            remove
            {
                _client.RemoveEventHandler<DocumentOpenedEventArgs>("Page.documentOpened", value);
            }
        }

        /// <summary>
        /// FrameResized
        /// </summary>
        public event System.EventHandler<System.EventArgs> FrameResized
        {
            add
            {
                _client.AddEventHandler<System.EventArgs>("Page.frameResized", value);
            }

            remove
            {
                _client.RemoveEventHandler<System.EventArgs>("Page.frameResized", value);
            }
        }

        /// <summary>
        /// Fired when a renderer-initiated navigation is requested.
        /// Navigation may still be cancelled after the event is issued.
        /// </summary>
        public event System.EventHandler<FrameRequestedNavigationEventArgs> FrameRequestedNavigation
        {
            add
            {
                _client.AddEventHandler<FrameRequestedNavigationEventArgs>("Page.frameRequestedNavigation", value);
            }

            remove
            {
                _client.RemoveEventHandler<FrameRequestedNavigationEventArgs>("Page.frameRequestedNavigation", value);
            }
        }

        /// <summary>
        /// Fired when frame has started loading.
        /// </summary>
        public event System.EventHandler<FrameStartedLoadingEventArgs> FrameStartedLoading
        {
            add
            {
                _client.AddEventHandler<FrameStartedLoadingEventArgs>("Page.frameStartedLoading", value);
            }

            remove
            {
                _client.RemoveEventHandler<FrameStartedLoadingEventArgs>("Page.frameStartedLoading", value);
            }
        }

        /// <summary>
        /// Fired when frame has stopped loading.
        /// </summary>
        public event System.EventHandler<FrameStoppedLoadingEventArgs> FrameStoppedLoading
        {
            add
            {
                _client.AddEventHandler<FrameStoppedLoadingEventArgs>("Page.frameStoppedLoading", value);
            }

            remove
            {
                _client.RemoveEventHandler<FrameStoppedLoadingEventArgs>("Page.frameStoppedLoading", value);
            }
        }

        /// <summary>
        /// Fired when interstitial page was hidden
        /// </summary>
        public event System.EventHandler<System.EventArgs> InterstitialHidden
        {
            add
            {
                _client.AddEventHandler<System.EventArgs>("Page.interstitialHidden", value);
            }

            remove
            {
                _client.RemoveEventHandler<System.EventArgs>("Page.interstitialHidden", value);
            }
        }

        /// <summary>
        /// Fired when interstitial page was shown
        /// </summary>
        public event System.EventHandler<System.EventArgs> InterstitialShown
        {
            add
            {
                _client.AddEventHandler<System.EventArgs>("Page.interstitialShown", value);
            }

            remove
            {
                _client.RemoveEventHandler<System.EventArgs>("Page.interstitialShown", value);
            }
        }

        /// <summary>
        /// Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) has been
        /// closed.
        /// </summary>
        public event System.EventHandler<JavascriptDialogClosedEventArgs> JavascriptDialogClosed
        {
            add
            {
                _client.AddEventHandler<JavascriptDialogClosedEventArgs>("Page.javascriptDialogClosed", value);
            }

            remove
            {
                _client.RemoveEventHandler<JavascriptDialogClosedEventArgs>("Page.javascriptDialogClosed", value);
            }
        }

        /// <summary>
        /// Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) is about to
        /// open.
        /// </summary>
        public event System.EventHandler<JavascriptDialogOpeningEventArgs> JavascriptDialogOpening
        {
            add
            {
                _client.AddEventHandler<JavascriptDialogOpeningEventArgs>("Page.javascriptDialogOpening", value);
            }

            remove
            {
                _client.RemoveEventHandler<JavascriptDialogOpeningEventArgs>("Page.javascriptDialogOpening", value);
            }
        }

        /// <summary>
        /// Fired for top level page lifecycle events such as navigation, load, paint, etc.
        /// </summary>
        public event System.EventHandler<LifecycleEventEventArgs> LifecycleEvent
        {
            add
            {
                _client.AddEventHandler<LifecycleEventEventArgs>("Page.lifecycleEvent", value);
            }

            remove
            {
                _client.RemoveEventHandler<LifecycleEventEventArgs>("Page.lifecycleEvent", value);
            }
        }

        /// <summary>
        /// Fired for failed bfcache history navigations if BackForwardCache feature is enabled. Do
        /// not assume any ordering with the Page.frameNavigated event. This event is fired only for
        /// main-frame history navigation where the document changes (non-same-document navigations),
        /// when bfcache navigation fails.
        /// </summary>
        public event System.EventHandler<BackForwardCacheNotUsedEventArgs> BackForwardCacheNotUsed
        {
            add
            {
                _client.AddEventHandler<BackForwardCacheNotUsedEventArgs>("Page.backForwardCacheNotUsed", value);
            }

            remove
            {
                _client.RemoveEventHandler<BackForwardCacheNotUsedEventArgs>("Page.backForwardCacheNotUsed", value);
            }
        }

        /// <summary>
        /// LoadEventFired
        /// </summary>
        public event System.EventHandler<LoadEventFiredEventArgs> LoadEventFired
        {
            add
            {
                _client.AddEventHandler<LoadEventFiredEventArgs>("Page.loadEventFired", value);
            }

            remove
            {
                _client.RemoveEventHandler<LoadEventFiredEventArgs>("Page.loadEventFired", value);
            }
        }

        /// <summary>
        /// Fired when same-document navigation happens, e.g. due to history API usage or anchor navigation.
        /// </summary>
        public event System.EventHandler<NavigatedWithinDocumentEventArgs> NavigatedWithinDocument
        {
            add
            {
                _client.AddEventHandler<NavigatedWithinDocumentEventArgs>("Page.navigatedWithinDocument", value);
            }

            remove
            {
                _client.RemoveEventHandler<NavigatedWithinDocumentEventArgs>("Page.navigatedWithinDocument", value);
            }
        }

        /// <summary>
        /// Compressed image data requested by the `startScreencast`.
        /// </summary>
        public event System.EventHandler<ScreencastFrameEventArgs> ScreencastFrame
        {
            add
            {
                _client.AddEventHandler<ScreencastFrameEventArgs>("Page.screencastFrame", value);
            }

            remove
            {
                _client.RemoveEventHandler<ScreencastFrameEventArgs>("Page.screencastFrame", value);
            }
        }

        /// <summary>
        /// Fired when the page with currently enabled screencast was shown or hidden `.
        /// </summary>
        public event System.EventHandler<ScreencastVisibilityChangedEventArgs> ScreencastVisibilityChanged
        {
            add
            {
                _client.AddEventHandler<ScreencastVisibilityChangedEventArgs>("Page.screencastVisibilityChanged", value);
            }

            remove
            {
                _client.RemoveEventHandler<ScreencastVisibilityChangedEventArgs>("Page.screencastVisibilityChanged", value);
            }
        }

        /// <summary>
        /// Fired when a new window is going to be opened, via window.open(), link click, form submission,
        /// etc.
        /// </summary>
        public event System.EventHandler<WindowOpenEventArgs> WindowOpen
        {
            add
            {
                _client.AddEventHandler<WindowOpenEventArgs>("Page.windowOpen", value);
            }

            remove
            {
                _client.RemoveEventHandler<WindowOpenEventArgs>("Page.windowOpen", value);
            }
        }

        /// <summary>
        /// Issued for every compilation cache generated. Is only available
        /// if Page.setGenerateCompilationCache is enabled.
        /// </summary>
        public event System.EventHandler<CompilationCacheProducedEventArgs> CompilationCacheProduced
        {
            add
            {
                _client.AddEventHandler<CompilationCacheProducedEventArgs>("Page.compilationCacheProduced", value);
            }

            remove
            {
                _client.RemoveEventHandler<CompilationCacheProducedEventArgs>("Page.compilationCacheProduced", value);
            }
        }

        partial void ValidateAddScriptToEvaluateOnNewDocument(string source, string worldName = null, bool? includeCommandLineAPI = null, bool? runImmediately = null);
        /// <summary>
        /// Evaluates given script in every frame upon creation (before loading frame&apos;s scripts).
        /// </summary>
        /// <param name = "source">source</param>
        /// <param name = "worldName">If specified, creates an isolated world with the given name and evaluates given script in it.This world name will be used as the ExecutionContextDescription::name when the correspondingevent is emitted.</param>
        /// <param name = "includeCommandLineAPI">Specifies whether command line API should be available to the script, defaultsto false.</param>
        /// <param name = "runImmediately">If true, runs the script immediately on existing execution contexts or worlds.Default: false.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;AddScriptToEvaluateOnNewDocumentResponse&gt;</returns>
        public System.Threading.Tasks.Task<AddScriptToEvaluateOnNewDocumentResponse> AddScriptToEvaluateOnNewDocumentAsync(string source, string worldName = null, bool? includeCommandLineAPI = null, bool? runImmediately = null)
        {
            ValidateAddScriptToEvaluateOnNewDocument(source, worldName, includeCommandLineAPI, runImmediately);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("source", source);
            if (!(string.IsNullOrEmpty(worldName)))
            {
                dict.Add("worldName", worldName);
            }

            if (includeCommandLineAPI.HasValue)
            {
                dict.Add("includeCommandLineAPI", includeCommandLineAPI.Value);
            }

            if (runImmediately.HasValue)
            {
                dict.Add("runImmediately", runImmediately.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<AddScriptToEvaluateOnNewDocumentResponse>("Page.addScriptToEvaluateOnNewDocument", dict);
        }

        /// <summary>
        /// Brings page to front (activates tab).
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> BringToFrontAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Page.bringToFront", dict);
        }

        partial void ValidateCaptureScreenshot(CefSharp.DevTools.Page.CaptureScreenshotFormat? format = null, int? quality = null, CefSharp.DevTools.Page.Viewport clip = null, bool? fromSurface = null, bool? captureBeyondViewport = null, bool? optimizeForSpeed = null);
        /// <summary>
        /// Capture page screenshot.
        /// </summary>
        /// <param name = "format">Image compression format (defaults to png).</param>
        /// <param name = "quality">Compression quality from range [0..100] (jpeg only).</param>
        /// <param name = "clip">Capture the screenshot of a given region only.</param>
        /// <param name = "fromSurface">Capture the screenshot from the surface, rather than the view. Defaults to true.</param>
        /// <param name = "captureBeyondViewport">Capture the screenshot beyond the viewport. Defaults to false.</param>
        /// <param name = "optimizeForSpeed">Optimize image encoding for speed, not for resulting size (defaults to false)</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;CaptureScreenshotResponse&gt;</returns>
        public System.Threading.Tasks.Task<CaptureScreenshotResponse> CaptureScreenshotAsync(CefSharp.DevTools.Page.CaptureScreenshotFormat? format = null, int? quality = null, CefSharp.DevTools.Page.Viewport clip = null, bool? fromSurface = null, bool? captureBeyondViewport = null, bool? optimizeForSpeed = null)
        {
            ValidateCaptureScreenshot(format, quality, clip, fromSurface, captureBeyondViewport, optimizeForSpeed);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (format.HasValue)
            {
                dict.Add("format", EnumToString(format));
            }

            if (quality.HasValue)
            {
                dict.Add("quality", quality.Value);
            }

            if ((clip) != (null))
            {
                dict.Add("clip", clip.ToDictionary());
            }

            if (fromSurface.HasValue)
            {
                dict.Add("fromSurface", fromSurface.Value);
            }

            if (captureBeyondViewport.HasValue)
            {
                dict.Add("captureBeyondViewport", captureBeyondViewport.Value);
            }

            if (optimizeForSpeed.HasValue)
            {
                dict.Add("optimizeForSpeed", optimizeForSpeed.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<CaptureScreenshotResponse>("Page.captureScreenshot", dict);
        }

        partial void ValidateCaptureSnapshot(CefSharp.DevTools.Page.CaptureSnapshotFormat? format = null);
        /// <summary>
        /// Returns a snapshot of the page as a string. For MHTML format, the serialization includes
        /// iframes, shadow DOM, external resources, and element-inline styles.
        /// </summary>
        /// <param name = "format">Format (defaults to mhtml).</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;CaptureSnapshotResponse&gt;</returns>
        public System.Threading.Tasks.Task<CaptureSnapshotResponse> CaptureSnapshotAsync(CefSharp.DevTools.Page.CaptureSnapshotFormat? format = null)
        {
            ValidateCaptureSnapshot(format);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (format.HasValue)
            {
                dict.Add("format", EnumToString(format));
            }

            return _client.ExecuteDevToolsMethodAsync<CaptureSnapshotResponse>("Page.captureSnapshot", dict);
        }

        partial void ValidateCreateIsolatedWorld(string frameId, string worldName = null, bool? grantUniveralAccess = null);
        /// <summary>
        /// Creates an isolated world for the given frame.
        /// </summary>
        /// <param name = "frameId">Id of the frame in which the isolated world should be created.</param>
        /// <param name = "worldName">An optional name which is reported in the Execution Context.</param>
        /// <param name = "grantUniveralAccess">Whether or not universal access should be granted to the isolated world. This is a powerfuloption, use with caution.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;CreateIsolatedWorldResponse&gt;</returns>
        public System.Threading.Tasks.Task<CreateIsolatedWorldResponse> CreateIsolatedWorldAsync(string frameId, string worldName = null, bool? grantUniveralAccess = null)
        {
            ValidateCreateIsolatedWorld(frameId, worldName, grantUniveralAccess);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("frameId", frameId);
            if (!(string.IsNullOrEmpty(worldName)))
            {
                dict.Add("worldName", worldName);
            }

            if (grantUniveralAccess.HasValue)
            {
                dict.Add("grantUniveralAccess", grantUniveralAccess.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<CreateIsolatedWorldResponse>("Page.createIsolatedWorld", dict);
        }

        /// <summary>
        /// Disables page domain notifications.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DisableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Page.disable", dict);
        }

        /// <summary>
        /// Enables page domain notifications.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> EnableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Page.enable", dict);
        }

        /// <summary>
        /// GetAppManifest
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetAppManifestResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetAppManifestResponse> GetAppManifestAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<GetAppManifestResponse>("Page.getAppManifest", dict);
        }

        /// <summary>
        /// GetInstallabilityErrors
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetInstallabilityErrorsResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetInstallabilityErrorsResponse> GetInstallabilityErrorsAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<GetInstallabilityErrorsResponse>("Page.getInstallabilityErrors", dict);
        }

        /// <summary>
        /// Returns the unique (PWA) app id.
        /// Only returns values if the feature flag &apos;WebAppEnableManifestId&apos; is enabled
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetAppIdResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetAppIdResponse> GetAppIdAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<GetAppIdResponse>("Page.getAppId", dict);
        }

        partial void ValidateGetAdScriptId(string frameId);
        /// <summary>
        /// GetAdScriptId
        /// </summary>
        /// <param name = "frameId">frameId</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetAdScriptIdResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetAdScriptIdResponse> GetAdScriptIdAsync(string frameId)
        {
            ValidateGetAdScriptId(frameId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("frameId", frameId);
            return _client.ExecuteDevToolsMethodAsync<GetAdScriptIdResponse>("Page.getAdScriptId", dict);
        }

        /// <summary>
        /// Returns present frame tree structure.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetFrameTreeResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetFrameTreeResponse> GetFrameTreeAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<GetFrameTreeResponse>("Page.getFrameTree", dict);
        }

        /// <summary>
        /// Returns metrics relating to the layouting of the page, such as viewport bounds/scale.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetLayoutMetricsResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetLayoutMetricsResponse> GetLayoutMetricsAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<GetLayoutMetricsResponse>("Page.getLayoutMetrics", dict);
        }

        /// <summary>
        /// Returns navigation history for the current page.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetNavigationHistoryResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetNavigationHistoryResponse> GetNavigationHistoryAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<GetNavigationHistoryResponse>("Page.getNavigationHistory", dict);
        }

        /// <summary>
        /// Resets navigation history for the current page.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ResetNavigationHistoryAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Page.resetNavigationHistory", dict);
        }

        partial void ValidateGetResourceContent(string frameId, string url);
        /// <summary>
        /// Returns content of the given resource.
        /// </summary>
        /// <param name = "frameId">Frame id to get resource for.</param>
        /// <param name = "url">URL of the resource to get content for.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetResourceContentResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetResourceContentResponse> GetResourceContentAsync(string frameId, string url)
        {
            ValidateGetResourceContent(frameId, url);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("frameId", frameId);
            dict.Add("url", url);
            return _client.ExecuteDevToolsMethodAsync<GetResourceContentResponse>("Page.getResourceContent", dict);
        }

        /// <summary>
        /// Returns present frame / resource tree structure.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetResourceTreeResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetResourceTreeResponse> GetResourceTreeAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<GetResourceTreeResponse>("Page.getResourceTree", dict);
        }

        partial void ValidateHandleJavaScriptDialog(bool accept, string promptText = null);
        /// <summary>
        /// Accepts or dismisses a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload).
        /// </summary>
        /// <param name = "accept">Whether to accept or dismiss the dialog.</param>
        /// <param name = "promptText">The text to enter into the dialog prompt before accepting. Used only if this is a promptdialog.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> HandleJavaScriptDialogAsync(bool accept, string promptText = null)
        {
            ValidateHandleJavaScriptDialog(accept, promptText);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("accept", accept);
            if (!(string.IsNullOrEmpty(promptText)))
            {
                dict.Add("promptText", promptText);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Page.handleJavaScriptDialog", dict);
        }

        partial void ValidateNavigate(string url, string referrer = null, CefSharp.DevTools.Page.TransitionType? transitionType = null, string frameId = null, CefSharp.DevTools.Page.ReferrerPolicy? referrerPolicy = null);
        /// <summary>
        /// Navigates current page to the given URL.
        /// </summary>
        /// <param name = "url">URL to navigate the page to.</param>
        /// <param name = "referrer">Referrer URL.</param>
        /// <param name = "transitionType">Intended transition type.</param>
        /// <param name = "frameId">Frame id to navigate, if not specified navigates the top frame.</param>
        /// <param name = "referrerPolicy">Referrer-policy used for the navigation.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;NavigateResponse&gt;</returns>
        public System.Threading.Tasks.Task<NavigateResponse> NavigateAsync(string url, string referrer = null, CefSharp.DevTools.Page.TransitionType? transitionType = null, string frameId = null, CefSharp.DevTools.Page.ReferrerPolicy? referrerPolicy = null)
        {
            ValidateNavigate(url, referrer, transitionType, frameId, referrerPolicy);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("url", url);
            if (!(string.IsNullOrEmpty(referrer)))
            {
                dict.Add("referrer", referrer);
            }

            if (transitionType.HasValue)
            {
                dict.Add("transitionType", EnumToString(transitionType));
            }

            if (!(string.IsNullOrEmpty(frameId)))
            {
                dict.Add("frameId", frameId);
            }

            if (referrerPolicy.HasValue)
            {
                dict.Add("referrerPolicy", EnumToString(referrerPolicy));
            }

            return _client.ExecuteDevToolsMethodAsync<NavigateResponse>("Page.navigate", dict);
        }

        partial void ValidateNavigateToHistoryEntry(int entryId);
        /// <summary>
        /// Navigates current page to the given history entry.
        /// </summary>
        /// <param name = "entryId">Unique id of the entry to navigate to.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> NavigateToHistoryEntryAsync(int entryId)
        {
            ValidateNavigateToHistoryEntry(entryId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("entryId", entryId);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Page.navigateToHistoryEntry", dict);
        }

        partial void ValidatePrintToPDF(bool? landscape = null, bool? displayHeaderFooter = null, bool? printBackground = null, double? scale = null, double? paperWidth = null, double? paperHeight = null, double? marginTop = null, double? marginBottom = null, double? marginLeft = null, double? marginRight = null, string pageRanges = null, string headerTemplate = null, string footerTemplate = null, bool? preferCSSPageSize = null, CefSharp.DevTools.Page.PrintToPDFTransferMode? transferMode = null, bool? generateTaggedPDF = null, bool? generateDocumentOutline = null);
        /// <summary>
        /// Print page as PDF.
        /// </summary>
        /// <param name = "landscape">Paper orientation. Defaults to false.</param>
        /// <param name = "displayHeaderFooter">Display header and footer. Defaults to false.</param>
        /// <param name = "printBackground">Print background graphics. Defaults to false.</param>
        /// <param name = "scale">Scale of the webpage rendering. Defaults to 1.</param>
        /// <param name = "paperWidth">Paper width in inches. Defaults to 8.5 inches.</param>
        /// <param name = "paperHeight">Paper height in inches. Defaults to 11 inches.</param>
        /// <param name = "marginTop">Top margin in inches. Defaults to 1cm (~0.4 inches).</param>
        /// <param name = "marginBottom">Bottom margin in inches. Defaults to 1cm (~0.4 inches).</param>
        /// <param name = "marginLeft">Left margin in inches. Defaults to 1cm (~0.4 inches).</param>
        /// <param name = "marginRight">Right margin in inches. Defaults to 1cm (~0.4 inches).</param>
        /// <param name = "pageRanges">Paper ranges to print, one based, e.g., '1-5, 8, 11-13'. Pages areprinted in the document order, not in the order specified, and nomore than once.Defaults to empty string, which implies the entire document is printed.The page numbers are quietly capped to actual page count of thedocument, and ranges beyond the end of the document are ignored.If this results in no pages to print, an error is reported.It is an error to specify a range with start greater than end.</param>
        /// <param name = "headerTemplate">HTML template for the print header. Should be valid HTML markup with followingclasses used to inject printing values into them:- `date`: formatted print date- `title`: document title- `url`: document location- `pageNumber`: current page number- `totalPages`: total pages in the documentFor example, `&lt;span class=title&gt; &lt;/span&gt;` would generate span containing the title.</param>
        /// <param name = "footerTemplate">HTML template for the print footer. Should use the same format as the `headerTemplate`.</param>
        /// <param name = "preferCSSPageSize">Whether or not to prefer page size as defined by css. Defaults to false,in which case the content will be scaled to fit the paper size.</param>
        /// <param name = "transferMode">return as stream</param>
        /// <param name = "generateTaggedPDF">Whether or not to generate tagged (accessible) PDF. Defaults to embedder choice.</param>
        /// <param name = "generateDocumentOutline">Whether or not to embed the document outline into the PDF.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;PrintToPDFResponse&gt;</returns>
        public System.Threading.Tasks.Task<PrintToPDFResponse> PrintToPDFAsync(bool? landscape = null, bool? displayHeaderFooter = null, bool? printBackground = null, double? scale = null, double? paperWidth = null, double? paperHeight = null, double? marginTop = null, double? marginBottom = null, double? marginLeft = null, double? marginRight = null, string pageRanges = null, string headerTemplate = null, string footerTemplate = null, bool? preferCSSPageSize = null, CefSharp.DevTools.Page.PrintToPDFTransferMode? transferMode = null, bool? generateTaggedPDF = null, bool? generateDocumentOutline = null)
        {
            ValidatePrintToPDF(landscape, displayHeaderFooter, printBackground, scale, paperWidth, paperHeight, marginTop, marginBottom, marginLeft, marginRight, pageRanges, headerTemplate, footerTemplate, preferCSSPageSize, transferMode, generateTaggedPDF, generateDocumentOutline);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (landscape.HasValue)
            {
                dict.Add("landscape", landscape.Value);
            }

            if (displayHeaderFooter.HasValue)
            {
                dict.Add("displayHeaderFooter", displayHeaderFooter.Value);
            }

            if (printBackground.HasValue)
            {
                dict.Add("printBackground", printBackground.Value);
            }

            if (scale.HasValue)
            {
                dict.Add("scale", scale.Value);
            }

            if (paperWidth.HasValue)
            {
                dict.Add("paperWidth", paperWidth.Value);
            }

            if (paperHeight.HasValue)
            {
                dict.Add("paperHeight", paperHeight.Value);
            }

            if (marginTop.HasValue)
            {
                dict.Add("marginTop", marginTop.Value);
            }

            if (marginBottom.HasValue)
            {
                dict.Add("marginBottom", marginBottom.Value);
            }

            if (marginLeft.HasValue)
            {
                dict.Add("marginLeft", marginLeft.Value);
            }

            if (marginRight.HasValue)
            {
                dict.Add("marginRight", marginRight.Value);
            }

            if (!(string.IsNullOrEmpty(pageRanges)))
            {
                dict.Add("pageRanges", pageRanges);
            }

            if (!(string.IsNullOrEmpty(headerTemplate)))
            {
                dict.Add("headerTemplate", headerTemplate);
            }

            if (!(string.IsNullOrEmpty(footerTemplate)))
            {
                dict.Add("footerTemplate", footerTemplate);
            }

            if (preferCSSPageSize.HasValue)
            {
                dict.Add("preferCSSPageSize", preferCSSPageSize.Value);
            }

            if (transferMode.HasValue)
            {
                dict.Add("transferMode", EnumToString(transferMode));
            }

            if (generateTaggedPDF.HasValue)
            {
                dict.Add("generateTaggedPDF", generateTaggedPDF.Value);
            }

            if (generateDocumentOutline.HasValue)
            {
                dict.Add("generateDocumentOutline", generateDocumentOutline.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<PrintToPDFResponse>("Page.printToPDF", dict);
        }

        partial void ValidateReload(bool? ignoreCache = null, string scriptToEvaluateOnLoad = null);
        /// <summary>
        /// Reloads given page optionally ignoring the cache.
        /// </summary>
        /// <param name = "ignoreCache">If true, browser cache is ignored (as if the user pressed Shift+refresh).</param>
        /// <param name = "scriptToEvaluateOnLoad">If set, the script will be injected into all frames of the inspected page after reload.Argument will be ignored if reloading dataURL origin.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ReloadAsync(bool? ignoreCache = null, string scriptToEvaluateOnLoad = null)
        {
            ValidateReload(ignoreCache, scriptToEvaluateOnLoad);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (ignoreCache.HasValue)
            {
                dict.Add("ignoreCache", ignoreCache.Value);
            }

            if (!(string.IsNullOrEmpty(scriptToEvaluateOnLoad)))
            {
                dict.Add("scriptToEvaluateOnLoad", scriptToEvaluateOnLoad);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Page.reload", dict);
        }

        partial void ValidateRemoveScriptToEvaluateOnNewDocument(string identifier);
        /// <summary>
        /// Removes given script from the list.
        /// </summary>
        /// <param name = "identifier">identifier</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> RemoveScriptToEvaluateOnNewDocumentAsync(string identifier)
        {
            ValidateRemoveScriptToEvaluateOnNewDocument(identifier);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("identifier", identifier);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Page.removeScriptToEvaluateOnNewDocument", dict);
        }

        partial void ValidateScreencastFrameAck(int sessionId);
        /// <summary>
        /// Acknowledges that a screencast frame has been received by the frontend.
        /// </summary>
        /// <param name = "sessionId">Frame number.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ScreencastFrameAckAsync(int sessionId)
        {
            ValidateScreencastFrameAck(sessionId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("sessionId", sessionId);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Page.screencastFrameAck", dict);
        }

        partial void ValidateSearchInResource(string frameId, string url, string query, bool? caseSensitive = null, bool? isRegex = null);
        /// <summary>
        /// Searches for given string in resource content.
        /// </summary>
        /// <param name = "frameId">Frame id for resource to search in.</param>
        /// <param name = "url">URL of the resource to search in.</param>
        /// <param name = "query">String to search for.</param>
        /// <param name = "caseSensitive">If true, search is case sensitive.</param>
        /// <param name = "isRegex">If true, treats string parameter as regex.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;SearchInResourceResponse&gt;</returns>
        public System.Threading.Tasks.Task<SearchInResourceResponse> SearchInResourceAsync(string frameId, string url, string query, bool? caseSensitive = null, bool? isRegex = null)
        {
            ValidateSearchInResource(frameId, url, query, caseSensitive, isRegex);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("frameId", frameId);
            dict.Add("url", url);
            dict.Add("query", query);
            if (caseSensitive.HasValue)
            {
                dict.Add("caseSensitive", caseSensitive.Value);
            }

            if (isRegex.HasValue)
            {
                dict.Add("isRegex", isRegex.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<SearchInResourceResponse>("Page.searchInResource", dict);
        }

        partial void ValidateSetAdBlockingEnabled(bool enabled);
        /// <summary>
        /// Enable Chrome&apos;s experimental ad filter on all sites.
        /// </summary>
        /// <param name = "enabled">Whether to block ads.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetAdBlockingEnabledAsync(bool enabled)
        {
            ValidateSetAdBlockingEnabled(enabled);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("enabled", enabled);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Page.setAdBlockingEnabled", dict);
        }

        partial void ValidateSetBypassCSP(bool enabled);
        /// <summary>
        /// Enable page Content Security Policy by-passing.
        /// </summary>
        /// <param name = "enabled">Whether to bypass page CSP.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetBypassCSPAsync(bool enabled)
        {
            ValidateSetBypassCSP(enabled);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("enabled", enabled);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Page.setBypassCSP", dict);
        }

        partial void ValidateGetPermissionsPolicyState(string frameId);
        /// <summary>
        /// Get Permissions Policy state on given frame.
        /// </summary>
        /// <param name = "frameId">frameId</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetPermissionsPolicyStateResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetPermissionsPolicyStateResponse> GetPermissionsPolicyStateAsync(string frameId)
        {
            ValidateGetPermissionsPolicyState(frameId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("frameId", frameId);
            return _client.ExecuteDevToolsMethodAsync<GetPermissionsPolicyStateResponse>("Page.getPermissionsPolicyState", dict);
        }

        partial void ValidateGetOriginTrials(string frameId);
        /// <summary>
        /// Get Origin Trials on given frame.
        /// </summary>
        /// <param name = "frameId">frameId</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetOriginTrialsResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetOriginTrialsResponse> GetOriginTrialsAsync(string frameId)
        {
            ValidateGetOriginTrials(frameId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("frameId", frameId);
            return _client.ExecuteDevToolsMethodAsync<GetOriginTrialsResponse>("Page.getOriginTrials", dict);
        }

        partial void ValidateSetFontFamilies(CefSharp.DevTools.Page.FontFamilies fontFamilies, System.Collections.Generic.IList<CefSharp.DevTools.Page.ScriptFontFamilies> forScripts = null);
        /// <summary>
        /// Set generic font families.
        /// </summary>
        /// <param name = "fontFamilies">Specifies font families to set. If a font family is not specified, it won't be changed.</param>
        /// <param name = "forScripts">Specifies font families to set for individual scripts.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetFontFamiliesAsync(CefSharp.DevTools.Page.FontFamilies fontFamilies, System.Collections.Generic.IList<CefSharp.DevTools.Page.ScriptFontFamilies> forScripts = null)
        {
            ValidateSetFontFamilies(fontFamilies, forScripts);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("fontFamilies", fontFamilies.ToDictionary());
            if ((forScripts) != (null))
            {
                dict.Add("forScripts", forScripts.Select(x => x.ToDictionary()));
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Page.setFontFamilies", dict);
        }

        partial void ValidateSetFontSizes(CefSharp.DevTools.Page.FontSizes fontSizes);
        /// <summary>
        /// Set default font sizes.
        /// </summary>
        /// <param name = "fontSizes">Specifies font sizes to set. If a font size is not specified, it won't be changed.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetFontSizesAsync(CefSharp.DevTools.Page.FontSizes fontSizes)
        {
            ValidateSetFontSizes(fontSizes);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("fontSizes", fontSizes.ToDictionary());
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Page.setFontSizes", dict);
        }

        partial void ValidateSetDocumentContent(string frameId, string html);
        /// <summary>
        /// Sets given markup as the document&apos;s HTML.
        /// </summary>
        /// <param name = "frameId">Frame id to set HTML for.</param>
        /// <param name = "html">HTML content to set.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetDocumentContentAsync(string frameId, string html)
        {
            ValidateSetDocumentContent(frameId, html);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("frameId", frameId);
            dict.Add("html", html);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Page.setDocumentContent", dict);
        }

        partial void ValidateSetLifecycleEventsEnabled(bool enabled);
        /// <summary>
        /// Controls whether page will emit lifecycle events.
        /// </summary>
        /// <param name = "enabled">If true, starts emitting lifecycle events.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetLifecycleEventsEnabledAsync(bool enabled)
        {
            ValidateSetLifecycleEventsEnabled(enabled);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("enabled", enabled);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Page.setLifecycleEventsEnabled", dict);
        }

        partial void ValidateStartScreencast(CefSharp.DevTools.Page.StartScreencastFormat? format = null, int? quality = null, int? maxWidth = null, int? maxHeight = null, int? everyNthFrame = null);
        /// <summary>
        /// Starts sending each frame using the `screencastFrame` event.
        /// </summary>
        /// <param name = "format">Image compression format.</param>
        /// <param name = "quality">Compression quality from range [0..100].</param>
        /// <param name = "maxWidth">Maximum screenshot width.</param>
        /// <param name = "maxHeight">Maximum screenshot height.</param>
        /// <param name = "everyNthFrame">Send every n-th frame.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> StartScreencastAsync(CefSharp.DevTools.Page.StartScreencastFormat? format = null, int? quality = null, int? maxWidth = null, int? maxHeight = null, int? everyNthFrame = null)
        {
            ValidateStartScreencast(format, quality, maxWidth, maxHeight, everyNthFrame);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (format.HasValue)
            {
                dict.Add("format", EnumToString(format));
            }

            if (quality.HasValue)
            {
                dict.Add("quality", quality.Value);
            }

            if (maxWidth.HasValue)
            {
                dict.Add("maxWidth", maxWidth.Value);
            }

            if (maxHeight.HasValue)
            {
                dict.Add("maxHeight", maxHeight.Value);
            }

            if (everyNthFrame.HasValue)
            {
                dict.Add("everyNthFrame", everyNthFrame.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Page.startScreencast", dict);
        }

        /// <summary>
        /// Force the page stop all navigations and pending resource fetches.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> StopLoadingAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Page.stopLoading", dict);
        }

        /// <summary>
        /// Crashes renderer on the IO thread, generates minidumps.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> CrashAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Page.crash", dict);
        }

        /// <summary>
        /// Tries to close page, running its beforeunload hooks, if any.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> CloseAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Page.close", dict);
        }

        partial void ValidateSetWebLifecycleState(CefSharp.DevTools.Page.SetWebLifecycleStateState state);
        /// <summary>
        /// Tries to update the web lifecycle state of the page.
        /// It will transition the page to the given state according to:
        /// https://github.com/WICG/web-lifecycle/
        /// </summary>
        /// <param name = "state">Target lifecycle state</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetWebLifecycleStateAsync(CefSharp.DevTools.Page.SetWebLifecycleStateState state)
        {
            ValidateSetWebLifecycleState(state);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("state", EnumToString(state));
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Page.setWebLifecycleState", dict);
        }

        /// <summary>
        /// Stops sending each frame in the `screencastFrame`.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> StopScreencastAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Page.stopScreencast", dict);
        }

        partial void ValidateProduceCompilationCache(System.Collections.Generic.IList<CefSharp.DevTools.Page.CompilationCacheParams> scripts);
        /// <summary>
        /// Requests backend to produce compilation cache for the specified scripts.
        /// `scripts` are appended to the list of scripts for which the cache
        /// would be produced. The list may be reset during page navigation.
        /// When script with a matching URL is encountered, the cache is optionally
        /// produced upon backend discretion, based on internal heuristics.
        /// See also: `Page.compilationCacheProduced`.
        /// </summary>
        /// <param name = "scripts">scripts</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ProduceCompilationCacheAsync(System.Collections.Generic.IList<CefSharp.DevTools.Page.CompilationCacheParams> scripts)
        {
            ValidateProduceCompilationCache(scripts);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("scripts", scripts.Select(x => x.ToDictionary()));
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Page.produceCompilationCache", dict);
        }

        partial void ValidateAddCompilationCache(string url, byte[] data);
        /// <summary>
        /// Seeds compilation cache for given url. Compilation cache does not survive
        /// cross-process navigation.
        /// </summary>
        /// <param name = "url">url</param>
        /// <param name = "data">Base64-encoded data</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> AddCompilationCacheAsync(string url, byte[] data)
        {
            ValidateAddCompilationCache(url, data);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("url", url);
            dict.Add("data", ToBase64String(data));
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Page.addCompilationCache", dict);
        }

        /// <summary>
        /// Clears seeded compilation cache.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ClearCompilationCacheAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Page.clearCompilationCache", dict);
        }

        partial void ValidateSetSPCTransactionMode(CefSharp.DevTools.Page.AutoResponseMode mode);
        /// <summary>
        /// Sets the Secure Payment Confirmation transaction mode.
        /// https://w3c.github.io/secure-payment-confirmation/#sctn-automation-set-spc-transaction-mode
        /// </summary>
        /// <param name = "mode">mode</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetSPCTransactionModeAsync(CefSharp.DevTools.Page.AutoResponseMode mode)
        {
            ValidateSetSPCTransactionMode(mode);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("mode", EnumToString(mode));
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Page.setSPCTransactionMode", dict);
        }

        partial void ValidateSetRPHRegistrationMode(CefSharp.DevTools.Page.AutoResponseMode mode);
        /// <summary>
        /// Extensions for Custom Handlers API:
        /// https://html.spec.whatwg.org/multipage/system-state.html#rph-automation
        /// </summary>
        /// <param name = "mode">mode</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetRPHRegistrationModeAsync(CefSharp.DevTools.Page.AutoResponseMode mode)
        {
            ValidateSetRPHRegistrationMode(mode);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("mode", EnumToString(mode));
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Page.setRPHRegistrationMode", dict);
        }

        partial void ValidateGenerateTestReport(string message, string group = null);
        /// <summary>
        /// Generates a report for testing.
        /// </summary>
        /// <param name = "message">Message to be displayed in the report.</param>
        /// <param name = "group">Specifies the endpoint group to deliver the report to.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> GenerateTestReportAsync(string message, string group = null)
        {
            ValidateGenerateTestReport(message, group);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("message", message);
            if (!(string.IsNullOrEmpty(group)))
            {
                dict.Add("group", group);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Page.generateTestReport", dict);
        }

        /// <summary>
        /// Pauses page execution. Can be resumed using generic Runtime.runIfWaitingForDebugger.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> WaitForDebuggerAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Page.waitForDebugger", dict);
        }

        partial void ValidateSetInterceptFileChooserDialog(bool enabled);
        /// <summary>
        /// Intercept file chooser requests and transfer control to protocol clients.
        /// When file chooser interception is enabled, native file chooser dialog is not shown.
        /// Instead, a protocol event `Page.fileChooserOpened` is emitted.
        /// </summary>
        /// <param name = "enabled">enabled</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetInterceptFileChooserDialogAsync(bool enabled)
        {
            ValidateSetInterceptFileChooserDialog(enabled);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("enabled", enabled);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Page.setInterceptFileChooserDialog", dict);
        }

        partial void ValidateSetPrerenderingAllowed(bool isAllowed);
        /// <summary>
        /// Enable/disable prerendering manually.
        /// 
        /// This command is a short-term solution for https://crbug.com/1440085.
        /// See https://docs.google.com/document/d/12HVmFxYj5Jc-eJr5OmWsa2bqTJsbgGLKI6ZIyx0_wpA
        /// for more details.
        /// 
        /// TODO(https://crbug.com/1440085): Remove this once Puppeteer supports tab targets.
        /// </summary>
        /// <param name = "isAllowed">isAllowed</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetPrerenderingAllowedAsync(bool isAllowed)
        {
            ValidateSetPrerenderingAllowed(isAllowed);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("isAllowed", isAllowed);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Page.setPrerenderingAllowed", dict);
        }
    }
}

namespace CefSharp.DevTools.Performance
{
    /// <summary>
    /// GetMetricsResponse
    /// </summary>
    [DataContract]
    public class GetMetricsResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.Performance.Metric> metrics
        {
            get;
            set;
        }

        /// <summary>
        /// metrics
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.Performance.Metric> Metrics
        {
            get
            {
                return metrics;
            }
        }
    }
}

namespace CefSharp.DevTools.Performance
{
    using System.Linq;

    /// <summary>
    /// Time domain to use for collecting and reporting duration metrics.
    /// </summary>
    public enum EnableTimeDomain
    {
        /// <summary>
        /// timeTicks
        /// </summary>
        [EnumMember(Value = ("timeTicks"))]
        TimeTicks,
        /// <summary>
        /// threadTicks
        /// </summary>
        [EnumMember(Value = ("threadTicks"))]
        ThreadTicks
    }

    /// <summary>
    /// Performance
    /// </summary>
    public partial class PerformanceClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// Performance
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public PerformanceClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// Current values of the metrics.
        /// </summary>
        public event System.EventHandler<MetricsEventArgs> Metrics
        {
            add
            {
                _client.AddEventHandler<MetricsEventArgs>("Performance.metrics", value);
            }

            remove
            {
                _client.RemoveEventHandler<MetricsEventArgs>("Performance.metrics", value);
            }
        }

        /// <summary>
        /// Disable collecting and reporting metrics.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DisableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Performance.disable", dict);
        }

        partial void ValidateEnable(CefSharp.DevTools.Performance.EnableTimeDomain? timeDomain = null);
        /// <summary>
        /// Enable collecting and reporting metrics.
        /// </summary>
        /// <param name = "timeDomain">Time domain to use for collecting and reporting duration metrics.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> EnableAsync(CefSharp.DevTools.Performance.EnableTimeDomain? timeDomain = null)
        {
            ValidateEnable(timeDomain);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (timeDomain.HasValue)
            {
                dict.Add("timeDomain", EnumToString(timeDomain));
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Performance.enable", dict);
        }

        /// <summary>
        /// Retrieve current values of run-time metrics.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetMetricsResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetMetricsResponse> GetMetricsAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<GetMetricsResponse>("Performance.getMetrics", dict);
        }
    }
}

namespace CefSharp.DevTools.PerformanceTimeline
{
    using System.Linq;

    /// <summary>
    /// Reporting of performance timeline events, as specified in
    /// https://w3c.github.io/performance-timeline/#dom-performanceobserver.
    /// </summary>
    public partial class PerformanceTimelineClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// PerformanceTimeline
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public PerformanceTimelineClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// Sent when a performance timeline event is added. See reportPerformanceTimeline method.
        /// </summary>
        public event System.EventHandler<TimelineEventAddedEventArgs> TimelineEventAdded
        {
            add
            {
                _client.AddEventHandler<TimelineEventAddedEventArgs>("PerformanceTimeline.timelineEventAdded", value);
            }

            remove
            {
                _client.RemoveEventHandler<TimelineEventAddedEventArgs>("PerformanceTimeline.timelineEventAdded", value);
            }
        }

        partial void ValidateEnable(string[] eventTypes);
        /// <summary>
        /// Previously buffered events would be reported before method returns.
        /// See also: timelineEventAdded
        /// </summary>
        /// <param name = "eventTypes">The types of event to report, as specified inhttps://w3c.github.io/performance-timeline/#dom-performanceentry-entrytypeThe specified filter overrides any previous filters, passing emptyfilter disables recording.Note that not all types exposed to the web platform are currently supported.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> EnableAsync(string[] eventTypes)
        {
            ValidateEnable(eventTypes);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("eventTypes", eventTypes);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("PerformanceTimeline.enable", dict);
        }
    }
}

namespace CefSharp.DevTools.Security
{
    using System.Linq;

    /// <summary>
    /// Security
    /// </summary>
    public partial class SecurityClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// Security
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public SecurityClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// The security state of the page changed.
        /// </summary>
        public event System.EventHandler<VisibleSecurityStateChangedEventArgs> VisibleSecurityStateChanged
        {
            add
            {
                _client.AddEventHandler<VisibleSecurityStateChangedEventArgs>("Security.visibleSecurityStateChanged", value);
            }

            remove
            {
                _client.RemoveEventHandler<VisibleSecurityStateChangedEventArgs>("Security.visibleSecurityStateChanged", value);
            }
        }

        /// <summary>
        /// Disables tracking security state changes.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DisableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Security.disable", dict);
        }

        /// <summary>
        /// Enables tracking security state changes.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> EnableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Security.enable", dict);
        }

        partial void ValidateSetIgnoreCertificateErrors(bool ignore);
        /// <summary>
        /// Enable/disable whether all certificate errors should be ignored.
        /// </summary>
        /// <param name = "ignore">If true, all certificate errors will be ignored.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetIgnoreCertificateErrorsAsync(bool ignore)
        {
            ValidateSetIgnoreCertificateErrors(ignore);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("ignore", ignore);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Security.setIgnoreCertificateErrors", dict);
        }
    }
}

namespace CefSharp.DevTools.ServiceWorker
{
    using System.Linq;

    /// <summary>
    /// ServiceWorker
    /// </summary>
    public partial class ServiceWorkerClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// ServiceWorker
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public ServiceWorkerClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// WorkerErrorReported
        /// </summary>
        public event System.EventHandler<WorkerErrorReportedEventArgs> WorkerErrorReported
        {
            add
            {
                _client.AddEventHandler<WorkerErrorReportedEventArgs>("ServiceWorker.workerErrorReported", value);
            }

            remove
            {
                _client.RemoveEventHandler<WorkerErrorReportedEventArgs>("ServiceWorker.workerErrorReported", value);
            }
        }

        /// <summary>
        /// WorkerRegistrationUpdated
        /// </summary>
        public event System.EventHandler<WorkerRegistrationUpdatedEventArgs> WorkerRegistrationUpdated
        {
            add
            {
                _client.AddEventHandler<WorkerRegistrationUpdatedEventArgs>("ServiceWorker.workerRegistrationUpdated", value);
            }

            remove
            {
                _client.RemoveEventHandler<WorkerRegistrationUpdatedEventArgs>("ServiceWorker.workerRegistrationUpdated", value);
            }
        }

        /// <summary>
        /// WorkerVersionUpdated
        /// </summary>
        public event System.EventHandler<WorkerVersionUpdatedEventArgs> WorkerVersionUpdated
        {
            add
            {
                _client.AddEventHandler<WorkerVersionUpdatedEventArgs>("ServiceWorker.workerVersionUpdated", value);
            }

            remove
            {
                _client.RemoveEventHandler<WorkerVersionUpdatedEventArgs>("ServiceWorker.workerVersionUpdated", value);
            }
        }

        partial void ValidateDeliverPushMessage(string origin, string registrationId, string data);
        /// <summary>
        /// DeliverPushMessage
        /// </summary>
        /// <param name = "origin">origin</param>
        /// <param name = "registrationId">registrationId</param>
        /// <param name = "data">data</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DeliverPushMessageAsync(string origin, string registrationId, string data)
        {
            ValidateDeliverPushMessage(origin, registrationId, data);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("origin", origin);
            dict.Add("registrationId", registrationId);
            dict.Add("data", data);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("ServiceWorker.deliverPushMessage", dict);
        }

        /// <summary>
        /// Disable
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DisableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("ServiceWorker.disable", dict);
        }

        partial void ValidateDispatchSyncEvent(string origin, string registrationId, string tag, bool lastChance);
        /// <summary>
        /// DispatchSyncEvent
        /// </summary>
        /// <param name = "origin">origin</param>
        /// <param name = "registrationId">registrationId</param>
        /// <param name = "tag">tag</param>
        /// <param name = "lastChance">lastChance</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DispatchSyncEventAsync(string origin, string registrationId, string tag, bool lastChance)
        {
            ValidateDispatchSyncEvent(origin, registrationId, tag, lastChance);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("origin", origin);
            dict.Add("registrationId", registrationId);
            dict.Add("tag", tag);
            dict.Add("lastChance", lastChance);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("ServiceWorker.dispatchSyncEvent", dict);
        }

        partial void ValidateDispatchPeriodicSyncEvent(string origin, string registrationId, string tag);
        /// <summary>
        /// DispatchPeriodicSyncEvent
        /// </summary>
        /// <param name = "origin">origin</param>
        /// <param name = "registrationId">registrationId</param>
        /// <param name = "tag">tag</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DispatchPeriodicSyncEventAsync(string origin, string registrationId, string tag)
        {
            ValidateDispatchPeriodicSyncEvent(origin, registrationId, tag);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("origin", origin);
            dict.Add("registrationId", registrationId);
            dict.Add("tag", tag);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("ServiceWorker.dispatchPeriodicSyncEvent", dict);
        }

        /// <summary>
        /// Enable
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> EnableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("ServiceWorker.enable", dict);
        }

        partial void ValidateInspectWorker(string versionId);
        /// <summary>
        /// InspectWorker
        /// </summary>
        /// <param name = "versionId">versionId</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> InspectWorkerAsync(string versionId)
        {
            ValidateInspectWorker(versionId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("versionId", versionId);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("ServiceWorker.inspectWorker", dict);
        }

        partial void ValidateSetForceUpdateOnPageLoad(bool forceUpdateOnPageLoad);
        /// <summary>
        /// SetForceUpdateOnPageLoad
        /// </summary>
        /// <param name = "forceUpdateOnPageLoad">forceUpdateOnPageLoad</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetForceUpdateOnPageLoadAsync(bool forceUpdateOnPageLoad)
        {
            ValidateSetForceUpdateOnPageLoad(forceUpdateOnPageLoad);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("forceUpdateOnPageLoad", forceUpdateOnPageLoad);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("ServiceWorker.setForceUpdateOnPageLoad", dict);
        }

        partial void ValidateSkipWaiting(string scopeURL);
        /// <summary>
        /// SkipWaiting
        /// </summary>
        /// <param name = "scopeURL">scopeURL</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SkipWaitingAsync(string scopeURL)
        {
            ValidateSkipWaiting(scopeURL);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("scopeURL", scopeURL);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("ServiceWorker.skipWaiting", dict);
        }

        partial void ValidateStartWorker(string scopeURL);
        /// <summary>
        /// StartWorker
        /// </summary>
        /// <param name = "scopeURL">scopeURL</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> StartWorkerAsync(string scopeURL)
        {
            ValidateStartWorker(scopeURL);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("scopeURL", scopeURL);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("ServiceWorker.startWorker", dict);
        }

        /// <summary>
        /// StopAllWorkers
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> StopAllWorkersAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("ServiceWorker.stopAllWorkers", dict);
        }

        partial void ValidateStopWorker(string versionId);
        /// <summary>
        /// StopWorker
        /// </summary>
        /// <param name = "versionId">versionId</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> StopWorkerAsync(string versionId)
        {
            ValidateStopWorker(versionId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("versionId", versionId);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("ServiceWorker.stopWorker", dict);
        }

        partial void ValidateUnregister(string scopeURL);
        /// <summary>
        /// Unregister
        /// </summary>
        /// <param name = "scopeURL">scopeURL</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> UnregisterAsync(string scopeURL)
        {
            ValidateUnregister(scopeURL);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("scopeURL", scopeURL);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("ServiceWorker.unregister", dict);
        }

        partial void ValidateUpdateRegistration(string scopeURL);
        /// <summary>
        /// UpdateRegistration
        /// </summary>
        /// <param name = "scopeURL">scopeURL</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> UpdateRegistrationAsync(string scopeURL)
        {
            ValidateUpdateRegistration(scopeURL);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("scopeURL", scopeURL);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("ServiceWorker.updateRegistration", dict);
        }
    }
}

namespace CefSharp.DevTools.Storage
{
    /// <summary>
    /// GetStorageKeyForFrameResponse
    /// </summary>
    [DataContract]
    public class GetStorageKeyForFrameResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string storageKey
        {
            get;
            set;
        }

        /// <summary>
        /// storageKey
        /// </summary>
        public string StorageKey
        {
            get
            {
                return storageKey;
            }
        }
    }
}

namespace CefSharp.DevTools.Storage
{
    /// <summary>
    /// GetCookiesResponse
    /// </summary>
    [DataContract]
    public class GetCookiesResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.Network.Cookie> cookies
        {
            get;
            set;
        }

        /// <summary>
        /// cookies
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.Network.Cookie> Cookies
        {
            get
            {
                return cookies;
            }
        }
    }
}

namespace CefSharp.DevTools.Storage
{
    /// <summary>
    /// GetUsageAndQuotaResponse
    /// </summary>
    [DataContract]
    public class GetUsageAndQuotaResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal double usage
        {
            get;
            set;
        }

        /// <summary>
        /// usage
        /// </summary>
        public double Usage
        {
            get
            {
                return usage;
            }
        }

        [DataMember]
        internal double quota
        {
            get;
            set;
        }

        /// <summary>
        /// quota
        /// </summary>
        public double Quota
        {
            get
            {
                return quota;
            }
        }

        [DataMember]
        internal bool overrideActive
        {
            get;
            set;
        }

        /// <summary>
        /// overrideActive
        /// </summary>
        public bool OverrideActive
        {
            get
            {
                return overrideActive;
            }
        }

        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.Storage.UsageForType> usageBreakdown
        {
            get;
            set;
        }

        /// <summary>
        /// usageBreakdown
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.Storage.UsageForType> UsageBreakdown
        {
            get
            {
                return usageBreakdown;
            }
        }
    }
}

namespace CefSharp.DevTools.Storage
{
    /// <summary>
    /// GetTrustTokensResponse
    /// </summary>
    [DataContract]
    public class GetTrustTokensResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.Storage.TrustTokens> tokens
        {
            get;
            set;
        }

        /// <summary>
        /// tokens
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.Storage.TrustTokens> Tokens
        {
            get
            {
                return tokens;
            }
        }
    }
}

namespace CefSharp.DevTools.Storage
{
    /// <summary>
    /// ClearTrustTokensResponse
    /// </summary>
    [DataContract]
    public class ClearTrustTokensResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal bool didDeleteTokens
        {
            get;
            set;
        }

        /// <summary>
        /// didDeleteTokens
        /// </summary>
        public bool DidDeleteTokens
        {
            get
            {
                return didDeleteTokens;
            }
        }
    }
}

namespace CefSharp.DevTools.Storage
{
    /// <summary>
    /// GetInterestGroupDetailsResponse
    /// </summary>
    [DataContract]
    public class GetInterestGroupDetailsResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.Storage.InterestGroupDetails details
        {
            get;
            set;
        }

        /// <summary>
        /// details
        /// </summary>
        public CefSharp.DevTools.Storage.InterestGroupDetails Details
        {
            get
            {
                return details;
            }
        }
    }
}

namespace CefSharp.DevTools.Storage
{
    /// <summary>
    /// GetSharedStorageMetadataResponse
    /// </summary>
    [DataContract]
    public class GetSharedStorageMetadataResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.Storage.SharedStorageMetadata metadata
        {
            get;
            set;
        }

        /// <summary>
        /// metadata
        /// </summary>
        public CefSharp.DevTools.Storage.SharedStorageMetadata Metadata
        {
            get
            {
                return metadata;
            }
        }
    }
}

namespace CefSharp.DevTools.Storage
{
    /// <summary>
    /// GetSharedStorageEntriesResponse
    /// </summary>
    [DataContract]
    public class GetSharedStorageEntriesResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.Storage.SharedStorageEntry> entries
        {
            get;
            set;
        }

        /// <summary>
        /// entries
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.Storage.SharedStorageEntry> Entries
        {
            get
            {
                return entries;
            }
        }
    }
}

namespace CefSharp.DevTools.Storage
{
    /// <summary>
    /// RunBounceTrackingMitigationsResponse
    /// </summary>
    [DataContract]
    public class RunBounceTrackingMitigationsResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string[] deletedSites
        {
            get;
            set;
        }

        /// <summary>
        /// deletedSites
        /// </summary>
        public string[] DeletedSites
        {
            get
            {
                return deletedSites;
            }
        }
    }
}

namespace CefSharp.DevTools.Storage
{
    using System.Linq;

    /// <summary>
    /// Storage
    /// </summary>
    public partial class StorageClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// Storage
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public StorageClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// A cache&apos;s contents have been modified.
        /// </summary>
        public event System.EventHandler<CacheStorageContentUpdatedEventArgs> CacheStorageContentUpdated
        {
            add
            {
                _client.AddEventHandler<CacheStorageContentUpdatedEventArgs>("Storage.cacheStorageContentUpdated", value);
            }

            remove
            {
                _client.RemoveEventHandler<CacheStorageContentUpdatedEventArgs>("Storage.cacheStorageContentUpdated", value);
            }
        }

        /// <summary>
        /// A cache has been added/deleted.
        /// </summary>
        public event System.EventHandler<CacheStorageListUpdatedEventArgs> CacheStorageListUpdated
        {
            add
            {
                _client.AddEventHandler<CacheStorageListUpdatedEventArgs>("Storage.cacheStorageListUpdated", value);
            }

            remove
            {
                _client.RemoveEventHandler<CacheStorageListUpdatedEventArgs>("Storage.cacheStorageListUpdated", value);
            }
        }

        /// <summary>
        /// The origin&apos;s IndexedDB object store has been modified.
        /// </summary>
        public event System.EventHandler<IndexedDBContentUpdatedEventArgs> IndexedDBContentUpdated
        {
            add
            {
                _client.AddEventHandler<IndexedDBContentUpdatedEventArgs>("Storage.indexedDBContentUpdated", value);
            }

            remove
            {
                _client.RemoveEventHandler<IndexedDBContentUpdatedEventArgs>("Storage.indexedDBContentUpdated", value);
            }
        }

        /// <summary>
        /// The origin&apos;s IndexedDB database list has been modified.
        /// </summary>
        public event System.EventHandler<IndexedDBListUpdatedEventArgs> IndexedDBListUpdated
        {
            add
            {
                _client.AddEventHandler<IndexedDBListUpdatedEventArgs>("Storage.indexedDBListUpdated", value);
            }

            remove
            {
                _client.RemoveEventHandler<IndexedDBListUpdatedEventArgs>("Storage.indexedDBListUpdated", value);
            }
        }

        /// <summary>
        /// One of the interest groups was accessed. Note that these events are global
        /// to all targets sharing an interest group store.
        /// </summary>
        public event System.EventHandler<InterestGroupAccessedEventArgs> InterestGroupAccessed
        {
            add
            {
                _client.AddEventHandler<InterestGroupAccessedEventArgs>("Storage.interestGroupAccessed", value);
            }

            remove
            {
                _client.RemoveEventHandler<InterestGroupAccessedEventArgs>("Storage.interestGroupAccessed", value);
            }
        }

        /// <summary>
        /// An auction involving interest groups is taking place. These events are
        /// target-specific.
        /// </summary>
        public event System.EventHandler<InterestGroupAuctionEventOccurredEventArgs> InterestGroupAuctionEventOccurred
        {
            add
            {
                _client.AddEventHandler<InterestGroupAuctionEventOccurredEventArgs>("Storage.interestGroupAuctionEventOccurred", value);
            }

            remove
            {
                _client.RemoveEventHandler<InterestGroupAuctionEventOccurredEventArgs>("Storage.interestGroupAuctionEventOccurred", value);
            }
        }

        /// <summary>
        /// Specifies which auctions a particular network fetch may be related to, and
        /// in what role. Note that it is not ordered with respect to
        /// Network.requestWillBeSent (but will happen before loadingFinished
        /// loadingFailed).
        /// </summary>
        public event System.EventHandler<InterestGroupAuctionNetworkRequestCreatedEventArgs> InterestGroupAuctionNetworkRequestCreated
        {
            add
            {
                _client.AddEventHandler<InterestGroupAuctionNetworkRequestCreatedEventArgs>("Storage.interestGroupAuctionNetworkRequestCreated", value);
            }

            remove
            {
                _client.RemoveEventHandler<InterestGroupAuctionNetworkRequestCreatedEventArgs>("Storage.interestGroupAuctionNetworkRequestCreated", value);
            }
        }

        /// <summary>
        /// Shared storage was accessed by the associated page.
        /// The following parameters are included in all events.
        /// </summary>
        public event System.EventHandler<SharedStorageAccessedEventArgs> SharedStorageAccessed
        {
            add
            {
                _client.AddEventHandler<SharedStorageAccessedEventArgs>("Storage.sharedStorageAccessed", value);
            }

            remove
            {
                _client.RemoveEventHandler<SharedStorageAccessedEventArgs>("Storage.sharedStorageAccessed", value);
            }
        }

        /// <summary>
        /// StorageBucketCreatedOrUpdated
        /// </summary>
        public event System.EventHandler<StorageBucketCreatedOrUpdatedEventArgs> StorageBucketCreatedOrUpdated
        {
            add
            {
                _client.AddEventHandler<StorageBucketCreatedOrUpdatedEventArgs>("Storage.storageBucketCreatedOrUpdated", value);
            }

            remove
            {
                _client.RemoveEventHandler<StorageBucketCreatedOrUpdatedEventArgs>("Storage.storageBucketCreatedOrUpdated", value);
            }
        }

        /// <summary>
        /// StorageBucketDeleted
        /// </summary>
        public event System.EventHandler<StorageBucketDeletedEventArgs> StorageBucketDeleted
        {
            add
            {
                _client.AddEventHandler<StorageBucketDeletedEventArgs>("Storage.storageBucketDeleted", value);
            }

            remove
            {
                _client.RemoveEventHandler<StorageBucketDeletedEventArgs>("Storage.storageBucketDeleted", value);
            }
        }

        /// <summary>
        /// AttributionReportingSourceRegistered
        /// </summary>
        public event System.EventHandler<AttributionReportingSourceRegisteredEventArgs> AttributionReportingSourceRegistered
        {
            add
            {
                _client.AddEventHandler<AttributionReportingSourceRegisteredEventArgs>("Storage.attributionReportingSourceRegistered", value);
            }

            remove
            {
                _client.RemoveEventHandler<AttributionReportingSourceRegisteredEventArgs>("Storage.attributionReportingSourceRegistered", value);
            }
        }

        /// <summary>
        /// AttributionReportingTriggerRegistered
        /// </summary>
        public event System.EventHandler<AttributionReportingTriggerRegisteredEventArgs> AttributionReportingTriggerRegistered
        {
            add
            {
                _client.AddEventHandler<AttributionReportingTriggerRegisteredEventArgs>("Storage.attributionReportingTriggerRegistered", value);
            }

            remove
            {
                _client.RemoveEventHandler<AttributionReportingTriggerRegisteredEventArgs>("Storage.attributionReportingTriggerRegistered", value);
            }
        }

        partial void ValidateGetStorageKeyForFrame(string frameId);
        /// <summary>
        /// Returns a storage key given a frame id.
        /// </summary>
        /// <param name = "frameId">frameId</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetStorageKeyForFrameResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetStorageKeyForFrameResponse> GetStorageKeyForFrameAsync(string frameId)
        {
            ValidateGetStorageKeyForFrame(frameId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("frameId", frameId);
            return _client.ExecuteDevToolsMethodAsync<GetStorageKeyForFrameResponse>("Storage.getStorageKeyForFrame", dict);
        }

        partial void ValidateClearDataForOrigin(string origin, string storageTypes);
        /// <summary>
        /// Clears storage for origin.
        /// </summary>
        /// <param name = "origin">Security origin.</param>
        /// <param name = "storageTypes">Comma separated list of StorageType to clear.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ClearDataForOriginAsync(string origin, string storageTypes)
        {
            ValidateClearDataForOrigin(origin, storageTypes);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("origin", origin);
            dict.Add("storageTypes", storageTypes);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Storage.clearDataForOrigin", dict);
        }

        partial void ValidateClearDataForStorageKey(string storageKey, string storageTypes);
        /// <summary>
        /// Clears storage for storage key.
        /// </summary>
        /// <param name = "storageKey">Storage key.</param>
        /// <param name = "storageTypes">Comma separated list of StorageType to clear.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ClearDataForStorageKeyAsync(string storageKey, string storageTypes)
        {
            ValidateClearDataForStorageKey(storageKey, storageTypes);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("storageKey", storageKey);
            dict.Add("storageTypes", storageTypes);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Storage.clearDataForStorageKey", dict);
        }

        partial void ValidateGetCookies(string browserContextId = null);
        /// <summary>
        /// Returns all browser cookies.
        /// </summary>
        /// <param name = "browserContextId">Browser context to use when called on the browser endpoint.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetCookiesResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetCookiesResponse> GetCookiesAsync(string browserContextId = null)
        {
            ValidateGetCookies(browserContextId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (!(string.IsNullOrEmpty(browserContextId)))
            {
                dict.Add("browserContextId", browserContextId);
            }

            return _client.ExecuteDevToolsMethodAsync<GetCookiesResponse>("Storage.getCookies", dict);
        }

        partial void ValidateSetCookies(System.Collections.Generic.IList<CefSharp.DevTools.Network.CookieParam> cookies, string browserContextId = null);
        /// <summary>
        /// Sets given cookies.
        /// </summary>
        /// <param name = "cookies">Cookies to be set.</param>
        /// <param name = "browserContextId">Browser context to use when called on the browser endpoint.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetCookiesAsync(System.Collections.Generic.IList<CefSharp.DevTools.Network.CookieParam> cookies, string browserContextId = null)
        {
            ValidateSetCookies(cookies, browserContextId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("cookies", cookies.Select(x => x.ToDictionary()));
            if (!(string.IsNullOrEmpty(browserContextId)))
            {
                dict.Add("browserContextId", browserContextId);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Storage.setCookies", dict);
        }

        partial void ValidateClearCookies(string browserContextId = null);
        /// <summary>
        /// Clears cookies.
        /// </summary>
        /// <param name = "browserContextId">Browser context to use when called on the browser endpoint.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ClearCookiesAsync(string browserContextId = null)
        {
            ValidateClearCookies(browserContextId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (!(string.IsNullOrEmpty(browserContextId)))
            {
                dict.Add("browserContextId", browserContextId);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Storage.clearCookies", dict);
        }

        partial void ValidateGetUsageAndQuota(string origin);
        /// <summary>
        /// Returns usage and quota in bytes.
        /// </summary>
        /// <param name = "origin">Security origin.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetUsageAndQuotaResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetUsageAndQuotaResponse> GetUsageAndQuotaAsync(string origin)
        {
            ValidateGetUsageAndQuota(origin);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("origin", origin);
            return _client.ExecuteDevToolsMethodAsync<GetUsageAndQuotaResponse>("Storage.getUsageAndQuota", dict);
        }

        partial void ValidateOverrideQuotaForOrigin(string origin, double? quotaSize = null);
        /// <summary>
        /// Override quota for the specified origin
        /// </summary>
        /// <param name = "origin">Security origin.</param>
        /// <param name = "quotaSize">The quota size (in bytes) to override the original quota with.If this is called multiple times, the overridden quota will be equal tothe quotaSize provided in the final call. If this is called withoutspecifying a quotaSize, the quota will be reset to the default value forthe specified origin. If this is called multiple times with differentorigins, the override will be maintained for each origin until it isdisabled (called without a quotaSize).</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> OverrideQuotaForOriginAsync(string origin, double? quotaSize = null)
        {
            ValidateOverrideQuotaForOrigin(origin, quotaSize);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("origin", origin);
            if (quotaSize.HasValue)
            {
                dict.Add("quotaSize", quotaSize.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Storage.overrideQuotaForOrigin", dict);
        }

        partial void ValidateTrackCacheStorageForOrigin(string origin);
        /// <summary>
        /// Registers origin to be notified when an update occurs to its cache storage list.
        /// </summary>
        /// <param name = "origin">Security origin.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> TrackCacheStorageForOriginAsync(string origin)
        {
            ValidateTrackCacheStorageForOrigin(origin);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("origin", origin);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Storage.trackCacheStorageForOrigin", dict);
        }

        partial void ValidateTrackCacheStorageForStorageKey(string storageKey);
        /// <summary>
        /// Registers storage key to be notified when an update occurs to its cache storage list.
        /// </summary>
        /// <param name = "storageKey">Storage key.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> TrackCacheStorageForStorageKeyAsync(string storageKey)
        {
            ValidateTrackCacheStorageForStorageKey(storageKey);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("storageKey", storageKey);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Storage.trackCacheStorageForStorageKey", dict);
        }

        partial void ValidateTrackIndexedDBForOrigin(string origin);
        /// <summary>
        /// Registers origin to be notified when an update occurs to its IndexedDB.
        /// </summary>
        /// <param name = "origin">Security origin.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> TrackIndexedDBForOriginAsync(string origin)
        {
            ValidateTrackIndexedDBForOrigin(origin);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("origin", origin);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Storage.trackIndexedDBForOrigin", dict);
        }

        partial void ValidateTrackIndexedDBForStorageKey(string storageKey);
        /// <summary>
        /// Registers storage key to be notified when an update occurs to its IndexedDB.
        /// </summary>
        /// <param name = "storageKey">Storage key.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> TrackIndexedDBForStorageKeyAsync(string storageKey)
        {
            ValidateTrackIndexedDBForStorageKey(storageKey);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("storageKey", storageKey);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Storage.trackIndexedDBForStorageKey", dict);
        }

        partial void ValidateUntrackCacheStorageForOrigin(string origin);
        /// <summary>
        /// Unregisters origin from receiving notifications for cache storage.
        /// </summary>
        /// <param name = "origin">Security origin.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> UntrackCacheStorageForOriginAsync(string origin)
        {
            ValidateUntrackCacheStorageForOrigin(origin);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("origin", origin);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Storage.untrackCacheStorageForOrigin", dict);
        }

        partial void ValidateUntrackCacheStorageForStorageKey(string storageKey);
        /// <summary>
        /// Unregisters storage key from receiving notifications for cache storage.
        /// </summary>
        /// <param name = "storageKey">Storage key.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> UntrackCacheStorageForStorageKeyAsync(string storageKey)
        {
            ValidateUntrackCacheStorageForStorageKey(storageKey);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("storageKey", storageKey);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Storage.untrackCacheStorageForStorageKey", dict);
        }

        partial void ValidateUntrackIndexedDBForOrigin(string origin);
        /// <summary>
        /// Unregisters origin from receiving notifications for IndexedDB.
        /// </summary>
        /// <param name = "origin">Security origin.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> UntrackIndexedDBForOriginAsync(string origin)
        {
            ValidateUntrackIndexedDBForOrigin(origin);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("origin", origin);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Storage.untrackIndexedDBForOrigin", dict);
        }

        partial void ValidateUntrackIndexedDBForStorageKey(string storageKey);
        /// <summary>
        /// Unregisters storage key from receiving notifications for IndexedDB.
        /// </summary>
        /// <param name = "storageKey">Storage key.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> UntrackIndexedDBForStorageKeyAsync(string storageKey)
        {
            ValidateUntrackIndexedDBForStorageKey(storageKey);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("storageKey", storageKey);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Storage.untrackIndexedDBForStorageKey", dict);
        }

        /// <summary>
        /// Returns the number of stored Trust Tokens per issuer for the
        /// current browsing context.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetTrustTokensResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetTrustTokensResponse> GetTrustTokensAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<GetTrustTokensResponse>("Storage.getTrustTokens", dict);
        }

        partial void ValidateClearTrustTokens(string issuerOrigin);
        /// <summary>
        /// Removes all Trust Tokens issued by the provided issuerOrigin.
        /// Leaves other stored data, including the issuer&apos;s Redemption Records, intact.
        /// </summary>
        /// <param name = "issuerOrigin">issuerOrigin</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;ClearTrustTokensResponse&gt;</returns>
        public System.Threading.Tasks.Task<ClearTrustTokensResponse> ClearTrustTokensAsync(string issuerOrigin)
        {
            ValidateClearTrustTokens(issuerOrigin);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("issuerOrigin", issuerOrigin);
            return _client.ExecuteDevToolsMethodAsync<ClearTrustTokensResponse>("Storage.clearTrustTokens", dict);
        }

        partial void ValidateGetInterestGroupDetails(string ownerOrigin, string name);
        /// <summary>
        /// Gets details for a named interest group.
        /// </summary>
        /// <param name = "ownerOrigin">ownerOrigin</param>
        /// <param name = "name">name</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetInterestGroupDetailsResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetInterestGroupDetailsResponse> GetInterestGroupDetailsAsync(string ownerOrigin, string name)
        {
            ValidateGetInterestGroupDetails(ownerOrigin, name);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("ownerOrigin", ownerOrigin);
            dict.Add("name", name);
            return _client.ExecuteDevToolsMethodAsync<GetInterestGroupDetailsResponse>("Storage.getInterestGroupDetails", dict);
        }

        partial void ValidateSetInterestGroupTracking(bool enable);
        /// <summary>
        /// Enables/Disables issuing of interestGroupAccessed events.
        /// </summary>
        /// <param name = "enable">enable</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetInterestGroupTrackingAsync(bool enable)
        {
            ValidateSetInterestGroupTracking(enable);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("enable", enable);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Storage.setInterestGroupTracking", dict);
        }

        partial void ValidateSetInterestGroupAuctionTracking(bool enable);
        /// <summary>
        /// Enables/Disables issuing of interestGroupAuctionEventOccurred and
        /// interestGroupAuctionNetworkRequestCreated.
        /// </summary>
        /// <param name = "enable">enable</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetInterestGroupAuctionTrackingAsync(bool enable)
        {
            ValidateSetInterestGroupAuctionTracking(enable);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("enable", enable);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Storage.setInterestGroupAuctionTracking", dict);
        }

        partial void ValidateGetSharedStorageMetadata(string ownerOrigin);
        /// <summary>
        /// Gets metadata for an origin&apos;s shared storage.
        /// </summary>
        /// <param name = "ownerOrigin">ownerOrigin</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetSharedStorageMetadataResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetSharedStorageMetadataResponse> GetSharedStorageMetadataAsync(string ownerOrigin)
        {
            ValidateGetSharedStorageMetadata(ownerOrigin);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("ownerOrigin", ownerOrigin);
            return _client.ExecuteDevToolsMethodAsync<GetSharedStorageMetadataResponse>("Storage.getSharedStorageMetadata", dict);
        }

        partial void ValidateGetSharedStorageEntries(string ownerOrigin);
        /// <summary>
        /// Gets the entries in an given origin&apos;s shared storage.
        /// </summary>
        /// <param name = "ownerOrigin">ownerOrigin</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetSharedStorageEntriesResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetSharedStorageEntriesResponse> GetSharedStorageEntriesAsync(string ownerOrigin)
        {
            ValidateGetSharedStorageEntries(ownerOrigin);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("ownerOrigin", ownerOrigin);
            return _client.ExecuteDevToolsMethodAsync<GetSharedStorageEntriesResponse>("Storage.getSharedStorageEntries", dict);
        }

        partial void ValidateSetSharedStorageEntry(string ownerOrigin, string key, string value, bool? ignoreIfPresent = null);
        /// <summary>
        /// Sets entry with `key` and `value` for a given origin&apos;s shared storage.
        /// </summary>
        /// <param name = "ownerOrigin">ownerOrigin</param>
        /// <param name = "key">key</param>
        /// <param name = "value">value</param>
        /// <param name = "ignoreIfPresent">If `ignoreIfPresent` is included and true, then only sets the entry if`key` doesn't already exist.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetSharedStorageEntryAsync(string ownerOrigin, string key, string value, bool? ignoreIfPresent = null)
        {
            ValidateSetSharedStorageEntry(ownerOrigin, key, value, ignoreIfPresent);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("ownerOrigin", ownerOrigin);
            dict.Add("key", key);
            dict.Add("value", value);
            if (ignoreIfPresent.HasValue)
            {
                dict.Add("ignoreIfPresent", ignoreIfPresent.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Storage.setSharedStorageEntry", dict);
        }

        partial void ValidateDeleteSharedStorageEntry(string ownerOrigin, string key);
        /// <summary>
        /// Deletes entry for `key` (if it exists) for a given origin&apos;s shared storage.
        /// </summary>
        /// <param name = "ownerOrigin">ownerOrigin</param>
        /// <param name = "key">key</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DeleteSharedStorageEntryAsync(string ownerOrigin, string key)
        {
            ValidateDeleteSharedStorageEntry(ownerOrigin, key);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("ownerOrigin", ownerOrigin);
            dict.Add("key", key);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Storage.deleteSharedStorageEntry", dict);
        }

        partial void ValidateClearSharedStorageEntries(string ownerOrigin);
        /// <summary>
        /// Clears all entries for a given origin&apos;s shared storage.
        /// </summary>
        /// <param name = "ownerOrigin">ownerOrigin</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ClearSharedStorageEntriesAsync(string ownerOrigin)
        {
            ValidateClearSharedStorageEntries(ownerOrigin);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("ownerOrigin", ownerOrigin);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Storage.clearSharedStorageEntries", dict);
        }

        partial void ValidateResetSharedStorageBudget(string ownerOrigin);
        /// <summary>
        /// Resets the budget for `ownerOrigin` by clearing all budget withdrawals.
        /// </summary>
        /// <param name = "ownerOrigin">ownerOrigin</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ResetSharedStorageBudgetAsync(string ownerOrigin)
        {
            ValidateResetSharedStorageBudget(ownerOrigin);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("ownerOrigin", ownerOrigin);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Storage.resetSharedStorageBudget", dict);
        }

        partial void ValidateSetSharedStorageTracking(bool enable);
        /// <summary>
        /// Enables/disables issuing of sharedStorageAccessed events.
        /// </summary>
        /// <param name = "enable">enable</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetSharedStorageTrackingAsync(bool enable)
        {
            ValidateSetSharedStorageTracking(enable);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("enable", enable);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Storage.setSharedStorageTracking", dict);
        }

        partial void ValidateSetStorageBucketTracking(string storageKey, bool enable);
        /// <summary>
        /// Set tracking for a storage key&apos;s buckets.
        /// </summary>
        /// <param name = "storageKey">storageKey</param>
        /// <param name = "enable">enable</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetStorageBucketTrackingAsync(string storageKey, bool enable)
        {
            ValidateSetStorageBucketTracking(storageKey, enable);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("storageKey", storageKey);
            dict.Add("enable", enable);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Storage.setStorageBucketTracking", dict);
        }

        partial void ValidateDeleteStorageBucket(CefSharp.DevTools.Storage.StorageBucket bucket);
        /// <summary>
        /// Deletes the Storage Bucket with the given storage key and bucket name.
        /// </summary>
        /// <param name = "bucket">bucket</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DeleteStorageBucketAsync(CefSharp.DevTools.Storage.StorageBucket bucket)
        {
            ValidateDeleteStorageBucket(bucket);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("bucket", bucket.ToDictionary());
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Storage.deleteStorageBucket", dict);
        }

        /// <summary>
        /// Deletes state for sites identified as potential bounce trackers, immediately.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;RunBounceTrackingMitigationsResponse&gt;</returns>
        public System.Threading.Tasks.Task<RunBounceTrackingMitigationsResponse> RunBounceTrackingMitigationsAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<RunBounceTrackingMitigationsResponse>("Storage.runBounceTrackingMitigations", dict);
        }

        partial void ValidateSetAttributionReportingLocalTestingMode(bool enabled);
        /// <summary>
        /// https://wicg.github.io/attribution-reporting-api/
        /// </summary>
        /// <param name = "enabled">If enabled, noise is suppressed and reports are sent immediately.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetAttributionReportingLocalTestingModeAsync(bool enabled)
        {
            ValidateSetAttributionReportingLocalTestingMode(enabled);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("enabled", enabled);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Storage.setAttributionReportingLocalTestingMode", dict);
        }

        partial void ValidateSetAttributionReportingTracking(bool enable);
        /// <summary>
        /// Enables/disables issuing of Attribution Reporting events.
        /// </summary>
        /// <param name = "enable">enable</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetAttributionReportingTrackingAsync(bool enable)
        {
            ValidateSetAttributionReportingTracking(enable);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("enable", enable);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Storage.setAttributionReportingTracking", dict);
        }
    }
}

namespace CefSharp.DevTools.SystemInfo
{
    /// <summary>
    /// GetInfoResponse
    /// </summary>
    [DataContract]
    public class GetInfoResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.SystemInfo.GPUInfo gpu
        {
            get;
            set;
        }

        /// <summary>
        /// gpu
        /// </summary>
        public CefSharp.DevTools.SystemInfo.GPUInfo Gpu
        {
            get
            {
                return gpu;
            }
        }

        [DataMember]
        internal string modelName
        {
            get;
            set;
        }

        /// <summary>
        /// modelName
        /// </summary>
        public string ModelName
        {
            get
            {
                return modelName;
            }
        }

        [DataMember]
        internal string modelVersion
        {
            get;
            set;
        }

        /// <summary>
        /// modelVersion
        /// </summary>
        public string ModelVersion
        {
            get
            {
                return modelVersion;
            }
        }

        [DataMember]
        internal string commandLine
        {
            get;
            set;
        }

        /// <summary>
        /// commandLine
        /// </summary>
        public string CommandLine
        {
            get
            {
                return commandLine;
            }
        }
    }
}

namespace CefSharp.DevTools.SystemInfo
{
    /// <summary>
    /// GetFeatureStateResponse
    /// </summary>
    [DataContract]
    public class GetFeatureStateResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal bool featureEnabled
        {
            get;
            set;
        }

        /// <summary>
        /// featureEnabled
        /// </summary>
        public bool FeatureEnabled
        {
            get
            {
                return featureEnabled;
            }
        }
    }
}

namespace CefSharp.DevTools.SystemInfo
{
    /// <summary>
    /// GetProcessInfoResponse
    /// </summary>
    [DataContract]
    public class GetProcessInfoResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.SystemInfo.ProcessInfo> processInfo
        {
            get;
            set;
        }

        /// <summary>
        /// processInfo
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.SystemInfo.ProcessInfo> ProcessInfo
        {
            get
            {
                return processInfo;
            }
        }
    }
}

namespace CefSharp.DevTools.SystemInfo
{
    using System.Linq;

    /// <summary>
    /// The SystemInfo domain defines methods and events for querying low-level system information.
    /// </summary>
    public partial class SystemInfoClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// SystemInfo
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public SystemInfoClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// Returns information about the system.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetInfoResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetInfoResponse> GetInfoAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<GetInfoResponse>("SystemInfo.getInfo", dict);
        }

        partial void ValidateGetFeatureState(string featureState);
        /// <summary>
        /// Returns information about the feature state.
        /// </summary>
        /// <param name = "featureState">featureState</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetFeatureStateResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetFeatureStateResponse> GetFeatureStateAsync(string featureState)
        {
            ValidateGetFeatureState(featureState);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("featureState", featureState);
            return _client.ExecuteDevToolsMethodAsync<GetFeatureStateResponse>("SystemInfo.getFeatureState", dict);
        }

        /// <summary>
        /// Returns information about all running processes.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetProcessInfoResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetProcessInfoResponse> GetProcessInfoAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<GetProcessInfoResponse>("SystemInfo.getProcessInfo", dict);
        }
    }
}

namespace CefSharp.DevTools.Target
{
    /// <summary>
    /// AttachToTargetResponse
    /// </summary>
    [DataContract]
    public class AttachToTargetResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string sessionId
        {
            get;
            set;
        }

        /// <summary>
        /// sessionId
        /// </summary>
        public string SessionId
        {
            get
            {
                return sessionId;
            }
        }
    }
}

namespace CefSharp.DevTools.Target
{
    /// <summary>
    /// AttachToBrowserTargetResponse
    /// </summary>
    [DataContract]
    public class AttachToBrowserTargetResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string sessionId
        {
            get;
            set;
        }

        /// <summary>
        /// sessionId
        /// </summary>
        public string SessionId
        {
            get
            {
                return sessionId;
            }
        }
    }
}

namespace CefSharp.DevTools.Target
{
    /// <summary>
    /// CloseTargetResponse
    /// </summary>
    [DataContract]
    public class CloseTargetResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal bool success
        {
            get;
            set;
        }

        /// <summary>
        /// success
        /// </summary>
        public bool Success
        {
            get
            {
                return success;
            }
        }
    }
}

namespace CefSharp.DevTools.Target
{
    /// <summary>
    /// CreateBrowserContextResponse
    /// </summary>
    [DataContract]
    public class CreateBrowserContextResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string browserContextId
        {
            get;
            set;
        }

        /// <summary>
        /// browserContextId
        /// </summary>
        public string BrowserContextId
        {
            get
            {
                return browserContextId;
            }
        }
    }
}

namespace CefSharp.DevTools.Target
{
    /// <summary>
    /// GetBrowserContextsResponse
    /// </summary>
    [DataContract]
    public class GetBrowserContextsResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string[] browserContextIds
        {
            get;
            set;
        }

        /// <summary>
        /// browserContextIds
        /// </summary>
        public string[] BrowserContextIds
        {
            get
            {
                return browserContextIds;
            }
        }
    }
}

namespace CefSharp.DevTools.Target
{
    /// <summary>
    /// CreateTargetResponse
    /// </summary>
    [DataContract]
    public class CreateTargetResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string targetId
        {
            get;
            set;
        }

        /// <summary>
        /// targetId
        /// </summary>
        public string TargetId
        {
            get
            {
                return targetId;
            }
        }
    }
}

namespace CefSharp.DevTools.Target
{
    /// <summary>
    /// GetTargetInfoResponse
    /// </summary>
    [DataContract]
    public class GetTargetInfoResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.Target.TargetInfo targetInfo
        {
            get;
            set;
        }

        /// <summary>
        /// targetInfo
        /// </summary>
        public CefSharp.DevTools.Target.TargetInfo TargetInfo
        {
            get
            {
                return targetInfo;
            }
        }
    }
}

namespace CefSharp.DevTools.Target
{
    /// <summary>
    /// GetTargetsResponse
    /// </summary>
    [DataContract]
    public class GetTargetsResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.Target.TargetInfo> targetInfos
        {
            get;
            set;
        }

        /// <summary>
        /// targetInfos
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.Target.TargetInfo> TargetInfos
        {
            get
            {
                return targetInfos;
            }
        }
    }
}

namespace CefSharp.DevTools.Target
{
    using System.Linq;

    /// <summary>
    /// Supports additional targets discovery and allows to attach to them.
    /// </summary>
    public partial class TargetClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// Target
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public TargetClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// Issued when attached to target because of auto-attach or `attachToTarget` command.
        /// </summary>
        public event System.EventHandler<AttachedToTargetEventArgs> AttachedToTarget
        {
            add
            {
                _client.AddEventHandler<AttachedToTargetEventArgs>("Target.attachedToTarget", value);
            }

            remove
            {
                _client.RemoveEventHandler<AttachedToTargetEventArgs>("Target.attachedToTarget", value);
            }
        }

        /// <summary>
        /// Issued when detached from target for any reason (including `detachFromTarget` command). Can be
        /// issued multiple times per target if multiple sessions have been attached to it.
        /// </summary>
        public event System.EventHandler<DetachedFromTargetEventArgs> DetachedFromTarget
        {
            add
            {
                _client.AddEventHandler<DetachedFromTargetEventArgs>("Target.detachedFromTarget", value);
            }

            remove
            {
                _client.RemoveEventHandler<DetachedFromTargetEventArgs>("Target.detachedFromTarget", value);
            }
        }

        /// <summary>
        /// Notifies about a new protocol message received from the session (as reported in
        /// `attachedToTarget` event).
        /// </summary>
        public event System.EventHandler<ReceivedMessageFromTargetEventArgs> ReceivedMessageFromTarget
        {
            add
            {
                _client.AddEventHandler<ReceivedMessageFromTargetEventArgs>("Target.receivedMessageFromTarget", value);
            }

            remove
            {
                _client.RemoveEventHandler<ReceivedMessageFromTargetEventArgs>("Target.receivedMessageFromTarget", value);
            }
        }

        /// <summary>
        /// Issued when a possible inspection target is created.
        /// </summary>
        public event System.EventHandler<TargetCreatedEventArgs> TargetCreated
        {
            add
            {
                _client.AddEventHandler<TargetCreatedEventArgs>("Target.targetCreated", value);
            }

            remove
            {
                _client.RemoveEventHandler<TargetCreatedEventArgs>("Target.targetCreated", value);
            }
        }

        /// <summary>
        /// Issued when a target is destroyed.
        /// </summary>
        public event System.EventHandler<TargetDestroyedEventArgs> TargetDestroyed
        {
            add
            {
                _client.AddEventHandler<TargetDestroyedEventArgs>("Target.targetDestroyed", value);
            }

            remove
            {
                _client.RemoveEventHandler<TargetDestroyedEventArgs>("Target.targetDestroyed", value);
            }
        }

        /// <summary>
        /// Issued when a target has crashed.
        /// </summary>
        public event System.EventHandler<TargetCrashedEventArgs> TargetCrashed
        {
            add
            {
                _client.AddEventHandler<TargetCrashedEventArgs>("Target.targetCrashed", value);
            }

            remove
            {
                _client.RemoveEventHandler<TargetCrashedEventArgs>("Target.targetCrashed", value);
            }
        }

        /// <summary>
        /// Issued when some information about a target has changed. This only happens between
        /// `targetCreated` and `targetDestroyed`.
        /// </summary>
        public event System.EventHandler<TargetInfoChangedEventArgs> TargetInfoChanged
        {
            add
            {
                _client.AddEventHandler<TargetInfoChangedEventArgs>("Target.targetInfoChanged", value);
            }

            remove
            {
                _client.RemoveEventHandler<TargetInfoChangedEventArgs>("Target.targetInfoChanged", value);
            }
        }

        partial void ValidateActivateTarget(string targetId);
        /// <summary>
        /// Activates (focuses) the target.
        /// </summary>
        /// <param name = "targetId">targetId</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ActivateTargetAsync(string targetId)
        {
            ValidateActivateTarget(targetId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("targetId", targetId);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Target.activateTarget", dict);
        }

        partial void ValidateAttachToTarget(string targetId, bool? flatten = null);
        /// <summary>
        /// Attaches to the target with given id.
        /// </summary>
        /// <param name = "targetId">targetId</param>
        /// <param name = "flatten">Enables "flat" access to the session via specifying sessionId attribute in the commands.We plan to make this the default, deprecate non-flattened mode,and eventually retire it. See crbug.com/991325.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;AttachToTargetResponse&gt;</returns>
        public System.Threading.Tasks.Task<AttachToTargetResponse> AttachToTargetAsync(string targetId, bool? flatten = null)
        {
            ValidateAttachToTarget(targetId, flatten);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("targetId", targetId);
            if (flatten.HasValue)
            {
                dict.Add("flatten", flatten.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<AttachToTargetResponse>("Target.attachToTarget", dict);
        }

        /// <summary>
        /// Attaches to the browser target, only uses flat sessionId mode.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;AttachToBrowserTargetResponse&gt;</returns>
        public System.Threading.Tasks.Task<AttachToBrowserTargetResponse> AttachToBrowserTargetAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<AttachToBrowserTargetResponse>("Target.attachToBrowserTarget", dict);
        }

        partial void ValidateCloseTarget(string targetId);
        /// <summary>
        /// Closes the target. If the target is a page that gets closed too.
        /// </summary>
        /// <param name = "targetId">targetId</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;CloseTargetResponse&gt;</returns>
        public System.Threading.Tasks.Task<CloseTargetResponse> CloseTargetAsync(string targetId)
        {
            ValidateCloseTarget(targetId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("targetId", targetId);
            return _client.ExecuteDevToolsMethodAsync<CloseTargetResponse>("Target.closeTarget", dict);
        }

        partial void ValidateExposeDevToolsProtocol(string targetId, string bindingName = null);
        /// <summary>
        /// Inject object to the target&apos;s main frame that provides a communication
        /// channel with browser target.
        /// 
        /// Injected object will be available as `window[bindingName]`.
        /// 
        /// The object has the following API:
        /// - `binding.send(json)` - a method to send messages over the remote debugging protocol
        /// - `binding.onmessage = json =&gt; handleMessage(json)` - a callback that will be called for the protocol notifications and command responses.
        /// </summary>
        /// <param name = "targetId">targetId</param>
        /// <param name = "bindingName">Binding name, 'cdp' if not specified.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ExposeDevToolsProtocolAsync(string targetId, string bindingName = null)
        {
            ValidateExposeDevToolsProtocol(targetId, bindingName);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("targetId", targetId);
            if (!(string.IsNullOrEmpty(bindingName)))
            {
                dict.Add("bindingName", bindingName);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Target.exposeDevToolsProtocol", dict);
        }

        partial void ValidateCreateBrowserContext(bool? disposeOnDetach = null, string proxyServer = null, string proxyBypassList = null, string[] originsWithUniversalNetworkAccess = null);
        /// <summary>
        /// Creates a new empty BrowserContext. Similar to an incognito profile but you can have more than
        /// one.
        /// </summary>
        /// <param name = "disposeOnDetach">If specified, disposes this context when debugging session disconnects.</param>
        /// <param name = "proxyServer">Proxy server, similar to the one passed to --proxy-server</param>
        /// <param name = "proxyBypassList">Proxy bypass list, similar to the one passed to --proxy-bypass-list</param>
        /// <param name = "originsWithUniversalNetworkAccess">An optional list of origins to grant unlimited cross-origin access to.Parts of the URL other than those constituting origin are ignored.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;CreateBrowserContextResponse&gt;</returns>
        public System.Threading.Tasks.Task<CreateBrowserContextResponse> CreateBrowserContextAsync(bool? disposeOnDetach = null, string proxyServer = null, string proxyBypassList = null, string[] originsWithUniversalNetworkAccess = null)
        {
            ValidateCreateBrowserContext(disposeOnDetach, proxyServer, proxyBypassList, originsWithUniversalNetworkAccess);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (disposeOnDetach.HasValue)
            {
                dict.Add("disposeOnDetach", disposeOnDetach.Value);
            }

            if (!(string.IsNullOrEmpty(proxyServer)))
            {
                dict.Add("proxyServer", proxyServer);
            }

            if (!(string.IsNullOrEmpty(proxyBypassList)))
            {
                dict.Add("proxyBypassList", proxyBypassList);
            }

            if ((originsWithUniversalNetworkAccess) != (null))
            {
                dict.Add("originsWithUniversalNetworkAccess", originsWithUniversalNetworkAccess);
            }

            return _client.ExecuteDevToolsMethodAsync<CreateBrowserContextResponse>("Target.createBrowserContext", dict);
        }

        /// <summary>
        /// Returns all browser contexts created with `Target.createBrowserContext` method.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetBrowserContextsResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetBrowserContextsResponse> GetBrowserContextsAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<GetBrowserContextsResponse>("Target.getBrowserContexts", dict);
        }

        partial void ValidateCreateTarget(string url, int? width = null, int? height = null, string browserContextId = null, bool? enableBeginFrameControl = null, bool? newWindow = null, bool? background = null, bool? forTab = null);
        /// <summary>
        /// Creates a new page.
        /// </summary>
        /// <param name = "url">The initial URL the page will be navigated to. An empty string indicates about:blank.</param>
        /// <param name = "width">Frame width in DIP (headless chrome only).</param>
        /// <param name = "height">Frame height in DIP (headless chrome only).</param>
        /// <param name = "browserContextId">The browser context to create the page in.</param>
        /// <param name = "enableBeginFrameControl">Whether BeginFrames for this target will be controlled via DevTools (headless chrome only,not supported on MacOS yet, false by default).</param>
        /// <param name = "newWindow">Whether to create a new Window or Tab (chrome-only, false by default).</param>
        /// <param name = "background">Whether to create the target in background or foreground (chrome-only,false by default).</param>
        /// <param name = "forTab">Whether to create the target of type "tab".</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;CreateTargetResponse&gt;</returns>
        public System.Threading.Tasks.Task<CreateTargetResponse> CreateTargetAsync(string url, int? width = null, int? height = null, string browserContextId = null, bool? enableBeginFrameControl = null, bool? newWindow = null, bool? background = null, bool? forTab = null)
        {
            ValidateCreateTarget(url, width, height, browserContextId, enableBeginFrameControl, newWindow, background, forTab);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("url", url);
            if (width.HasValue)
            {
                dict.Add("width", width.Value);
            }

            if (height.HasValue)
            {
                dict.Add("height", height.Value);
            }

            if (!(string.IsNullOrEmpty(browserContextId)))
            {
                dict.Add("browserContextId", browserContextId);
            }

            if (enableBeginFrameControl.HasValue)
            {
                dict.Add("enableBeginFrameControl", enableBeginFrameControl.Value);
            }

            if (newWindow.HasValue)
            {
                dict.Add("newWindow", newWindow.Value);
            }

            if (background.HasValue)
            {
                dict.Add("background", background.Value);
            }

            if (forTab.HasValue)
            {
                dict.Add("forTab", forTab.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<CreateTargetResponse>("Target.createTarget", dict);
        }

        partial void ValidateDetachFromTarget(string sessionId = null, string targetId = null);
        /// <summary>
        /// Detaches session with given id.
        /// </summary>
        /// <param name = "sessionId">Session to detach.</param>
        /// <param name = "targetId">Deprecated.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DetachFromTargetAsync(string sessionId = null, string targetId = null)
        {
            ValidateDetachFromTarget(sessionId, targetId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (!(string.IsNullOrEmpty(sessionId)))
            {
                dict.Add("sessionId", sessionId);
            }

            if (!(string.IsNullOrEmpty(targetId)))
            {
                dict.Add("targetId", targetId);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Target.detachFromTarget", dict);
        }

        partial void ValidateDisposeBrowserContext(string browserContextId);
        /// <summary>
        /// Deletes a BrowserContext. All the belonging pages will be closed without calling their
        /// beforeunload hooks.
        /// </summary>
        /// <param name = "browserContextId">browserContextId</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DisposeBrowserContextAsync(string browserContextId)
        {
            ValidateDisposeBrowserContext(browserContextId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("browserContextId", browserContextId);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Target.disposeBrowserContext", dict);
        }

        partial void ValidateGetTargetInfo(string targetId = null);
        /// <summary>
        /// Returns information about a target.
        /// </summary>
        /// <param name = "targetId">targetId</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetTargetInfoResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetTargetInfoResponse> GetTargetInfoAsync(string targetId = null)
        {
            ValidateGetTargetInfo(targetId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (!(string.IsNullOrEmpty(targetId)))
            {
                dict.Add("targetId", targetId);
            }

            return _client.ExecuteDevToolsMethodAsync<GetTargetInfoResponse>("Target.getTargetInfo", dict);
        }

        partial void ValidateGetTargets(System.Collections.Generic.IList<CefSharp.DevTools.Target.TargetFilter> filter = null);
        /// <summary>
        /// Retrieves a list of available targets.
        /// </summary>
        /// <param name = "filter">Only targets matching filter will be reported. If filter is not specifiedand target discovery is currently enabled, a filter used for target discoveryis used for consistency.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetTargetsResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetTargetsResponse> GetTargetsAsync(System.Collections.Generic.IList<CefSharp.DevTools.Target.TargetFilter> filter = null)
        {
            ValidateGetTargets(filter);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if ((filter) != (null))
            {
                dict.Add("filter", filter.Select(x => x.ToDictionary()));
            }

            return _client.ExecuteDevToolsMethodAsync<GetTargetsResponse>("Target.getTargets", dict);
        }

        partial void ValidateSetAutoAttach(bool autoAttach, bool waitForDebuggerOnStart, bool? flatten = null, System.Collections.Generic.IList<CefSharp.DevTools.Target.TargetFilter> filter = null);
        /// <summary>
        /// Controls whether to automatically attach to new targets which are considered to be related to
        /// this one. When turned on, attaches to all existing related targets as well. When turned off,
        /// automatically detaches from all currently attached targets.
        /// This also clears all targets added by `autoAttachRelated` from the list of targets to watch
        /// for creation of related targets.
        /// </summary>
        /// <param name = "autoAttach">Whether to auto-attach to related targets.</param>
        /// <param name = "waitForDebuggerOnStart">Whether to pause new targets when attaching to them. Use `Runtime.runIfWaitingForDebugger`to run paused targets.</param>
        /// <param name = "flatten">Enables "flat" access to the session via specifying sessionId attribute in the commands.We plan to make this the default, deprecate non-flattened mode,and eventually retire it. See crbug.com/991325.</param>
        /// <param name = "filter">Only targets matching filter will be attached.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetAutoAttachAsync(bool autoAttach, bool waitForDebuggerOnStart, bool? flatten = null, System.Collections.Generic.IList<CefSharp.DevTools.Target.TargetFilter> filter = null)
        {
            ValidateSetAutoAttach(autoAttach, waitForDebuggerOnStart, flatten, filter);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("autoAttach", autoAttach);
            dict.Add("waitForDebuggerOnStart", waitForDebuggerOnStart);
            if (flatten.HasValue)
            {
                dict.Add("flatten", flatten.Value);
            }

            if ((filter) != (null))
            {
                dict.Add("filter", filter.Select(x => x.ToDictionary()));
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Target.setAutoAttach", dict);
        }

        partial void ValidateAutoAttachRelated(string targetId, bool waitForDebuggerOnStart, System.Collections.Generic.IList<CefSharp.DevTools.Target.TargetFilter> filter = null);
        /// <summary>
        /// Adds the specified target to the list of targets that will be monitored for any related target
        /// creation (such as child frames, child workers and new versions of service worker) and reported
        /// through `attachedToTarget`. The specified target is also auto-attached.
        /// This cancels the effect of any previous `setAutoAttach` and is also cancelled by subsequent
        /// `setAutoAttach`. Only available at the Browser target.
        /// </summary>
        /// <param name = "targetId">targetId</param>
        /// <param name = "waitForDebuggerOnStart">Whether to pause new targets when attaching to them. Use `Runtime.runIfWaitingForDebugger`to run paused targets.</param>
        /// <param name = "filter">Only targets matching filter will be attached.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> AutoAttachRelatedAsync(string targetId, bool waitForDebuggerOnStart, System.Collections.Generic.IList<CefSharp.DevTools.Target.TargetFilter> filter = null)
        {
            ValidateAutoAttachRelated(targetId, waitForDebuggerOnStart, filter);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("targetId", targetId);
            dict.Add("waitForDebuggerOnStart", waitForDebuggerOnStart);
            if ((filter) != (null))
            {
                dict.Add("filter", filter.Select(x => x.ToDictionary()));
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Target.autoAttachRelated", dict);
        }

        partial void ValidateSetDiscoverTargets(bool discover, System.Collections.Generic.IList<CefSharp.DevTools.Target.TargetFilter> filter = null);
        /// <summary>
        /// Controls whether to discover available targets and notify via
        /// `targetCreated/targetInfoChanged/targetDestroyed` events.
        /// </summary>
        /// <param name = "discover">Whether to discover available targets.</param>
        /// <param name = "filter">Only targets matching filter will be attached. If `discover` is false,`filter` must be omitted or empty.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetDiscoverTargetsAsync(bool discover, System.Collections.Generic.IList<CefSharp.DevTools.Target.TargetFilter> filter = null)
        {
            ValidateSetDiscoverTargets(discover, filter);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("discover", discover);
            if ((filter) != (null))
            {
                dict.Add("filter", filter.Select(x => x.ToDictionary()));
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Target.setDiscoverTargets", dict);
        }

        partial void ValidateSetRemoteLocations(System.Collections.Generic.IList<CefSharp.DevTools.Target.RemoteLocation> locations);
        /// <summary>
        /// Enables target discovery for the specified locations, when `setDiscoverTargets` was set to
        /// `true`.
        /// </summary>
        /// <param name = "locations">List of remote locations.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetRemoteLocationsAsync(System.Collections.Generic.IList<CefSharp.DevTools.Target.RemoteLocation> locations)
        {
            ValidateSetRemoteLocations(locations);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("locations", locations.Select(x => x.ToDictionary()));
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Target.setRemoteLocations", dict);
        }
    }
}

namespace CefSharp.DevTools.Tethering
{
    using System.Linq;

    /// <summary>
    /// The Tethering domain defines methods and events for browser port binding.
    /// </summary>
    public partial class TetheringClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// Tethering
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public TetheringClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// Informs that port was successfully bound and got a specified connection id.
        /// </summary>
        public event System.EventHandler<AcceptedEventArgs> Accepted
        {
            add
            {
                _client.AddEventHandler<AcceptedEventArgs>("Tethering.accepted", value);
            }

            remove
            {
                _client.RemoveEventHandler<AcceptedEventArgs>("Tethering.accepted", value);
            }
        }

        partial void ValidateBind(int port);
        /// <summary>
        /// Request browser port binding.
        /// </summary>
        /// <param name = "port">Port number to bind.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> BindAsync(int port)
        {
            ValidateBind(port);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("port", port);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Tethering.bind", dict);
        }

        partial void ValidateUnbind(int port);
        /// <summary>
        /// Request browser port unbinding.
        /// </summary>
        /// <param name = "port">Port number to unbind.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> UnbindAsync(int port)
        {
            ValidateUnbind(port);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("port", port);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Tethering.unbind", dict);
        }
    }
}

namespace CefSharp.DevTools.Tracing
{
    /// <summary>
    /// GetCategoriesResponse
    /// </summary>
    [DataContract]
    public class GetCategoriesResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string[] categories
        {
            get;
            set;
        }

        /// <summary>
        /// categories
        /// </summary>
        public string[] Categories
        {
            get
            {
                return categories;
            }
        }
    }
}

namespace CefSharp.DevTools.Tracing
{
    /// <summary>
    /// RequestMemoryDumpResponse
    /// </summary>
    [DataContract]
    public class RequestMemoryDumpResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string dumpGuid
        {
            get;
            set;
        }

        /// <summary>
        /// dumpGuid
        /// </summary>
        public string DumpGuid
        {
            get
            {
                return dumpGuid;
            }
        }

        [DataMember]
        internal bool success
        {
            get;
            set;
        }

        /// <summary>
        /// success
        /// </summary>
        public bool Success
        {
            get
            {
                return success;
            }
        }
    }
}

namespace CefSharp.DevTools.Tracing
{
    using System.Linq;

    /// <summary>
    /// Whether to report trace events as series of dataCollected events or to save trace to a
    /// stream (defaults to `ReportEvents`).
    /// </summary>
    public enum StartTransferMode
    {
        /// <summary>
        /// ReportEvents
        /// </summary>
        [EnumMember(Value = ("ReportEvents"))]
        ReportEvents,
        /// <summary>
        /// ReturnAsStream
        /// </summary>
        [EnumMember(Value = ("ReturnAsStream"))]
        ReturnAsStream
    }

    /// <summary>
    /// Tracing
    /// </summary>
    public partial class TracingClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// Tracing
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public TracingClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// BufferUsage
        /// </summary>
        public event System.EventHandler<BufferUsageEventArgs> BufferUsage
        {
            add
            {
                _client.AddEventHandler<BufferUsageEventArgs>("Tracing.bufferUsage", value);
            }

            remove
            {
                _client.RemoveEventHandler<BufferUsageEventArgs>("Tracing.bufferUsage", value);
            }
        }

        /// <summary>
        /// Contains a bucket of collected trace events. When tracing is stopped collected events will be
        /// sent as a sequence of dataCollected events followed by tracingComplete event.
        /// </summary>
        public event System.EventHandler<DataCollectedEventArgs> DataCollected
        {
            add
            {
                _client.AddEventHandler<DataCollectedEventArgs>("Tracing.dataCollected", value);
            }

            remove
            {
                _client.RemoveEventHandler<DataCollectedEventArgs>("Tracing.dataCollected", value);
            }
        }

        /// <summary>
        /// Signals that tracing is stopped and there is no trace buffers pending flush, all data were
        /// delivered via dataCollected events.
        /// </summary>
        public event System.EventHandler<TracingCompleteEventArgs> TracingComplete
        {
            add
            {
                _client.AddEventHandler<TracingCompleteEventArgs>("Tracing.tracingComplete", value);
            }

            remove
            {
                _client.RemoveEventHandler<TracingCompleteEventArgs>("Tracing.tracingComplete", value);
            }
        }

        /// <summary>
        /// Stop trace events collection.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> EndAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Tracing.end", dict);
        }

        /// <summary>
        /// Gets supported tracing categories.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetCategoriesResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetCategoriesResponse> GetCategoriesAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<GetCategoriesResponse>("Tracing.getCategories", dict);
        }

        partial void ValidateRecordClockSyncMarker(string syncId);
        /// <summary>
        /// Record a clock sync marker in the trace.
        /// </summary>
        /// <param name = "syncId">The ID of this clock sync marker</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> RecordClockSyncMarkerAsync(string syncId)
        {
            ValidateRecordClockSyncMarker(syncId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("syncId", syncId);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Tracing.recordClockSyncMarker", dict);
        }

        partial void ValidateRequestMemoryDump(bool? deterministic = null, CefSharp.DevTools.Tracing.MemoryDumpLevelOfDetail? levelOfDetail = null);
        /// <summary>
        /// Request a global memory dump.
        /// </summary>
        /// <param name = "deterministic">Enables more deterministic results by forcing garbage collection</param>
        /// <param name = "levelOfDetail">Specifies level of details in memory dump. Defaults to "detailed".</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;RequestMemoryDumpResponse&gt;</returns>
        public System.Threading.Tasks.Task<RequestMemoryDumpResponse> RequestMemoryDumpAsync(bool? deterministic = null, CefSharp.DevTools.Tracing.MemoryDumpLevelOfDetail? levelOfDetail = null)
        {
            ValidateRequestMemoryDump(deterministic, levelOfDetail);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (deterministic.HasValue)
            {
                dict.Add("deterministic", deterministic.Value);
            }

            if (levelOfDetail.HasValue)
            {
                dict.Add("levelOfDetail", EnumToString(levelOfDetail));
            }

            return _client.ExecuteDevToolsMethodAsync<RequestMemoryDumpResponse>("Tracing.requestMemoryDump", dict);
        }

        partial void ValidateStart(string categories = null, string options = null, double? bufferUsageReportingInterval = null, CefSharp.DevTools.Tracing.StartTransferMode? transferMode = null, CefSharp.DevTools.Tracing.StreamFormat? streamFormat = null, CefSharp.DevTools.Tracing.StreamCompression? streamCompression = null, CefSharp.DevTools.Tracing.TraceConfig traceConfig = null, byte[] perfettoConfig = null, CefSharp.DevTools.Tracing.TracingBackend? tracingBackend = null);
        /// <summary>
        /// Start trace events collection.
        /// </summary>
        /// <param name = "categories">Category/tag filter</param>
        /// <param name = "options">Tracing options</param>
        /// <param name = "bufferUsageReportingInterval">If set, the agent will issue bufferUsage events at this interval, specified in milliseconds</param>
        /// <param name = "transferMode">Whether to report trace events as series of dataCollected events or to save trace to astream (defaults to `ReportEvents`).</param>
        /// <param name = "streamFormat">Trace data format to use. This only applies when using `ReturnAsStream`transfer mode (defaults to `json`).</param>
        /// <param name = "streamCompression">Compression format to use. This only applies when using `ReturnAsStream`transfer mode (defaults to `none`)</param>
        /// <param name = "traceConfig">traceConfig</param>
        /// <param name = "perfettoConfig">Base64-encoded serialized perfetto.protos.TraceConfig protobuf messageWhen specified, the parameters `categories`, `options`, `traceConfig`are ignored.</param>
        /// <param name = "tracingBackend">Backend type (defaults to `auto`)</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> StartAsync(string categories = null, string options = null, double? bufferUsageReportingInterval = null, CefSharp.DevTools.Tracing.StartTransferMode? transferMode = null, CefSharp.DevTools.Tracing.StreamFormat? streamFormat = null, CefSharp.DevTools.Tracing.StreamCompression? streamCompression = null, CefSharp.DevTools.Tracing.TraceConfig traceConfig = null, byte[] perfettoConfig = null, CefSharp.DevTools.Tracing.TracingBackend? tracingBackend = null)
        {
            ValidateStart(categories, options, bufferUsageReportingInterval, transferMode, streamFormat, streamCompression, traceConfig, perfettoConfig, tracingBackend);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (!(string.IsNullOrEmpty(categories)))
            {
                dict.Add("categories", categories);
            }

            if (!(string.IsNullOrEmpty(options)))
            {
                dict.Add("options", options);
            }

            if (bufferUsageReportingInterval.HasValue)
            {
                dict.Add("bufferUsageReportingInterval", bufferUsageReportingInterval.Value);
            }

            if (transferMode.HasValue)
            {
                dict.Add("transferMode", EnumToString(transferMode));
            }

            if (streamFormat.HasValue)
            {
                dict.Add("streamFormat", EnumToString(streamFormat));
            }

            if (streamCompression.HasValue)
            {
                dict.Add("streamCompression", EnumToString(streamCompression));
            }

            if ((traceConfig) != (null))
            {
                dict.Add("traceConfig", traceConfig.ToDictionary());
            }

            if ((perfettoConfig) != (null))
            {
                dict.Add("perfettoConfig", ToBase64String(perfettoConfig));
            }

            if (tracingBackend.HasValue)
            {
                dict.Add("tracingBackend", EnumToString(tracingBackend));
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Tracing.start", dict);
        }
    }
}

namespace CefSharp.DevTools.Fetch
{
    /// <summary>
    /// GetResponseBodyResponse
    /// </summary>
    [DataContract]
    public class GetResponseBodyResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string body
        {
            get;
            set;
        }

        /// <summary>
        /// body
        /// </summary>
        public string Body
        {
            get
            {
                return body;
            }
        }

        [DataMember]
        internal bool base64Encoded
        {
            get;
            set;
        }

        /// <summary>
        /// base64Encoded
        /// </summary>
        public bool Base64Encoded
        {
            get
            {
                return base64Encoded;
            }
        }
    }
}

namespace CefSharp.DevTools.Fetch
{
    /// <summary>
    /// TakeResponseBodyAsStreamResponse
    /// </summary>
    [DataContract]
    public class TakeResponseBodyAsStreamResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string stream
        {
            get;
            set;
        }

        /// <summary>
        /// stream
        /// </summary>
        public string Stream
        {
            get
            {
                return stream;
            }
        }
    }
}

namespace CefSharp.DevTools.Fetch
{
    using System.Linq;

    /// <summary>
    /// A domain for letting clients substitute browser&apos;s network layer with client code.
    /// </summary>
    public partial class FetchClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// Fetch
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public FetchClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// Issued when the domain is enabled and the request URL matches the
        /// specified filter. The request is paused until the client responds
        /// with one of continueRequest, failRequest or fulfillRequest.
        /// The stage of the request can be determined by presence of responseErrorReason
        /// and responseStatusCode -- the request is at the response stage if either
        /// of these fields is present and in the request stage otherwise.
        /// Redirect responses and subsequent requests are reported similarly to regular
        /// responses and requests. Redirect responses may be distinguished by the value
        /// of `responseStatusCode` (which is one of 301, 302, 303, 307, 308) along with
        /// presence of the `location` header. Requests resulting from a redirect will
        /// have `redirectedRequestId` field set.
        /// </summary>
        public event System.EventHandler<RequestPausedEventArgs> RequestPaused
        {
            add
            {
                _client.AddEventHandler<RequestPausedEventArgs>("Fetch.requestPaused", value);
            }

            remove
            {
                _client.RemoveEventHandler<RequestPausedEventArgs>("Fetch.requestPaused", value);
            }
        }

        /// <summary>
        /// Issued when the domain is enabled with handleAuthRequests set to true.
        /// The request is paused until client responds with continueWithAuth.
        /// </summary>
        public event System.EventHandler<AuthRequiredEventArgs> AuthRequired
        {
            add
            {
                _client.AddEventHandler<AuthRequiredEventArgs>("Fetch.authRequired", value);
            }

            remove
            {
                _client.RemoveEventHandler<AuthRequiredEventArgs>("Fetch.authRequired", value);
            }
        }

        /// <summary>
        /// Disables the fetch domain.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DisableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Fetch.disable", dict);
        }

        partial void ValidateEnable(System.Collections.Generic.IList<CefSharp.DevTools.Fetch.RequestPattern> patterns = null, bool? handleAuthRequests = null);
        /// <summary>
        /// Enables issuing of requestPaused events. A request will be paused until client
        /// calls one of failRequest, fulfillRequest or continueRequest/continueWithAuth.
        /// </summary>
        /// <param name = "patterns">If specified, only requests matching any of these patterns will producefetchRequested event and will be paused until clients response. If not set,all requests will be affected.</param>
        /// <param name = "handleAuthRequests">If true, authRequired events will be issued and requests will be pausedexpecting a call to continueWithAuth.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> EnableAsync(System.Collections.Generic.IList<CefSharp.DevTools.Fetch.RequestPattern> patterns = null, bool? handleAuthRequests = null)
        {
            ValidateEnable(patterns, handleAuthRequests);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if ((patterns) != (null))
            {
                dict.Add("patterns", patterns.Select(x => x.ToDictionary()));
            }

            if (handleAuthRequests.HasValue)
            {
                dict.Add("handleAuthRequests", handleAuthRequests.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Fetch.enable", dict);
        }

        partial void ValidateFailRequest(string requestId, CefSharp.DevTools.Network.ErrorReason errorReason);
        /// <summary>
        /// Causes the request to fail with specified reason.
        /// </summary>
        /// <param name = "requestId">An id the client received in requestPaused event.</param>
        /// <param name = "errorReason">Causes the request to fail with the given reason.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> FailRequestAsync(string requestId, CefSharp.DevTools.Network.ErrorReason errorReason)
        {
            ValidateFailRequest(requestId, errorReason);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("requestId", requestId);
            dict.Add("errorReason", EnumToString(errorReason));
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Fetch.failRequest", dict);
        }

        partial void ValidateFulfillRequest(string requestId, int responseCode, System.Collections.Generic.IList<CefSharp.DevTools.Fetch.HeaderEntry> responseHeaders = null, byte[] binaryResponseHeaders = null, byte[] body = null, string responsePhrase = null);
        /// <summary>
        /// Provides response to the request.
        /// </summary>
        /// <param name = "requestId">An id the client received in requestPaused event.</param>
        /// <param name = "responseCode">An HTTP response code.</param>
        /// <param name = "responseHeaders">Response headers.</param>
        /// <param name = "binaryResponseHeaders">Alternative way of specifying response headers as a \0-separatedseries of name: value pairs. Prefer the above method unless youneed to represent some non-UTF8 values that can't be transmittedover the protocol as text.</param>
        /// <param name = "body">A response body. If absent, original response body will be used ifthe request is intercepted at the response stage and empty bodywill be used if the request is intercepted at the request stage.</param>
        /// <param name = "responsePhrase">A textual representation of responseCode.If absent, a standard phrase matching responseCode is used.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> FulfillRequestAsync(string requestId, int responseCode, System.Collections.Generic.IList<CefSharp.DevTools.Fetch.HeaderEntry> responseHeaders = null, byte[] binaryResponseHeaders = null, byte[] body = null, string responsePhrase = null)
        {
            ValidateFulfillRequest(requestId, responseCode, responseHeaders, binaryResponseHeaders, body, responsePhrase);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("requestId", requestId);
            dict.Add("responseCode", responseCode);
            if ((responseHeaders) != (null))
            {
                dict.Add("responseHeaders", responseHeaders.Select(x => x.ToDictionary()));
            }

            if ((binaryResponseHeaders) != (null))
            {
                dict.Add("binaryResponseHeaders", ToBase64String(binaryResponseHeaders));
            }

            if ((body) != (null))
            {
                dict.Add("body", ToBase64String(body));
            }

            if (!(string.IsNullOrEmpty(responsePhrase)))
            {
                dict.Add("responsePhrase", responsePhrase);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Fetch.fulfillRequest", dict);
        }

        partial void ValidateContinueRequest(string requestId, string url = null, string method = null, byte[] postData = null, System.Collections.Generic.IList<CefSharp.DevTools.Fetch.HeaderEntry> headers = null, bool? interceptResponse = null);
        /// <summary>
        /// Continues the request, optionally modifying some of its parameters.
        /// </summary>
        /// <param name = "requestId">An id the client received in requestPaused event.</param>
        /// <param name = "url">If set, the request url will be modified in a way that's not observable by page.</param>
        /// <param name = "method">If set, the request method is overridden.</param>
        /// <param name = "postData">If set, overrides the post data in the request.</param>
        /// <param name = "headers">If set, overrides the request headers. Note that the overrides do notextend to subsequent redirect hops, if a redirect happens. Another overridemay be applied to a different request produced by a redirect.</param>
        /// <param name = "interceptResponse">If set, overrides response interception behavior for this request.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ContinueRequestAsync(string requestId, string url = null, string method = null, byte[] postData = null, System.Collections.Generic.IList<CefSharp.DevTools.Fetch.HeaderEntry> headers = null, bool? interceptResponse = null)
        {
            ValidateContinueRequest(requestId, url, method, postData, headers, interceptResponse);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("requestId", requestId);
            if (!(string.IsNullOrEmpty(url)))
            {
                dict.Add("url", url);
            }

            if (!(string.IsNullOrEmpty(method)))
            {
                dict.Add("method", method);
            }

            if ((postData) != (null))
            {
                dict.Add("postData", ToBase64String(postData));
            }

            if ((headers) != (null))
            {
                dict.Add("headers", headers.Select(x => x.ToDictionary()));
            }

            if (interceptResponse.HasValue)
            {
                dict.Add("interceptResponse", interceptResponse.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Fetch.continueRequest", dict);
        }

        partial void ValidateContinueWithAuth(string requestId, CefSharp.DevTools.Fetch.AuthChallengeResponse authChallengeResponse);
        /// <summary>
        /// Continues a request supplying authChallengeResponse following authRequired event.
        /// </summary>
        /// <param name = "requestId">An id the client received in authRequired event.</param>
        /// <param name = "authChallengeResponse">Response to  with an authChallenge.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ContinueWithAuthAsync(string requestId, CefSharp.DevTools.Fetch.AuthChallengeResponse authChallengeResponse)
        {
            ValidateContinueWithAuth(requestId, authChallengeResponse);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("requestId", requestId);
            dict.Add("authChallengeResponse", authChallengeResponse.ToDictionary());
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Fetch.continueWithAuth", dict);
        }

        partial void ValidateContinueResponse(string requestId, int? responseCode = null, string responsePhrase = null, System.Collections.Generic.IList<CefSharp.DevTools.Fetch.HeaderEntry> responseHeaders = null, byte[] binaryResponseHeaders = null);
        /// <summary>
        /// Continues loading of the paused response, optionally modifying the
        /// response headers. If either responseCode or headers are modified, all of them
        /// must be present.
        /// </summary>
        /// <param name = "requestId">An id the client received in requestPaused event.</param>
        /// <param name = "responseCode">An HTTP response code. If absent, original response code will be used.</param>
        /// <param name = "responsePhrase">A textual representation of responseCode.If absent, a standard phrase matching responseCode is used.</param>
        /// <param name = "responseHeaders">Response headers. If absent, original response headers will be used.</param>
        /// <param name = "binaryResponseHeaders">Alternative way of specifying response headers as a \0-separatedseries of name: value pairs. Prefer the above method unless youneed to represent some non-UTF8 values that can't be transmittedover the protocol as text.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ContinueResponseAsync(string requestId, int? responseCode = null, string responsePhrase = null, System.Collections.Generic.IList<CefSharp.DevTools.Fetch.HeaderEntry> responseHeaders = null, byte[] binaryResponseHeaders = null)
        {
            ValidateContinueResponse(requestId, responseCode, responsePhrase, responseHeaders, binaryResponseHeaders);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("requestId", requestId);
            if (responseCode.HasValue)
            {
                dict.Add("responseCode", responseCode.Value);
            }

            if (!(string.IsNullOrEmpty(responsePhrase)))
            {
                dict.Add("responsePhrase", responsePhrase);
            }

            if ((responseHeaders) != (null))
            {
                dict.Add("responseHeaders", responseHeaders.Select(x => x.ToDictionary()));
            }

            if ((binaryResponseHeaders) != (null))
            {
                dict.Add("binaryResponseHeaders", ToBase64String(binaryResponseHeaders));
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Fetch.continueResponse", dict);
        }

        partial void ValidateGetResponseBody(string requestId);
        /// <summary>
        /// Causes the body of the response to be received from the server and
        /// returned as a single string. May only be issued for a request that
        /// is paused in the Response stage and is mutually exclusive with
        /// takeResponseBodyForInterceptionAsStream. Calling other methods that
        /// affect the request or disabling fetch domain before body is received
        /// results in an undefined behavior.
        /// Note that the response body is not available for redirects. Requests
        /// paused in the _redirect received_ state may be differentiated by
        /// `responseCode` and presence of `location` response header, see
        /// comments to `requestPaused` for details.
        /// </summary>
        /// <param name = "requestId">Identifier for the intercepted request to get body for.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetResponseBodyResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetResponseBodyResponse> GetResponseBodyAsync(string requestId)
        {
            ValidateGetResponseBody(requestId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("requestId", requestId);
            return _client.ExecuteDevToolsMethodAsync<GetResponseBodyResponse>("Fetch.getResponseBody", dict);
        }

        partial void ValidateTakeResponseBodyAsStream(string requestId);
        /// <summary>
        /// Returns a handle to the stream representing the response body.
        /// The request must be paused in the HeadersReceived stage.
        /// Note that after this command the request can&apos;t be continued
        /// as is -- client either needs to cancel it or to provide the
        /// response body.
        /// The stream only supports sequential read, IO.read will fail if the position
        /// is specified.
        /// This method is mutually exclusive with getResponseBody.
        /// Calling other methods that affect the request or disabling fetch
        /// domain before body is received results in an undefined behavior.
        /// </summary>
        /// <param name = "requestId">requestId</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;TakeResponseBodyAsStreamResponse&gt;</returns>
        public System.Threading.Tasks.Task<TakeResponseBodyAsStreamResponse> TakeResponseBodyAsStreamAsync(string requestId)
        {
            ValidateTakeResponseBodyAsStream(requestId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("requestId", requestId);
            return _client.ExecuteDevToolsMethodAsync<TakeResponseBodyAsStreamResponse>("Fetch.takeResponseBodyAsStream", dict);
        }
    }
}

namespace CefSharp.DevTools.WebAudio
{
    /// <summary>
    /// GetRealtimeDataResponse
    /// </summary>
    [DataContract]
    public class GetRealtimeDataResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.WebAudio.ContextRealtimeData realtimeData
        {
            get;
            set;
        }

        /// <summary>
        /// realtimeData
        /// </summary>
        public CefSharp.DevTools.WebAudio.ContextRealtimeData RealtimeData
        {
            get
            {
                return realtimeData;
            }
        }
    }
}

namespace CefSharp.DevTools.WebAudio
{
    using System.Linq;

    /// <summary>
    /// This domain allows inspection of Web Audio API.
    /// https://webaudio.github.io/web-audio-api/
    /// </summary>
    public partial class WebAudioClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// WebAudio
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public WebAudioClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// Notifies that a new BaseAudioContext has been created.
        /// </summary>
        public event System.EventHandler<ContextCreatedEventArgs> ContextCreated
        {
            add
            {
                _client.AddEventHandler<ContextCreatedEventArgs>("WebAudio.contextCreated", value);
            }

            remove
            {
                _client.RemoveEventHandler<ContextCreatedEventArgs>("WebAudio.contextCreated", value);
            }
        }

        /// <summary>
        /// Notifies that an existing BaseAudioContext will be destroyed.
        /// </summary>
        public event System.EventHandler<ContextWillBeDestroyedEventArgs> ContextWillBeDestroyed
        {
            add
            {
                _client.AddEventHandler<ContextWillBeDestroyedEventArgs>("WebAudio.contextWillBeDestroyed", value);
            }

            remove
            {
                _client.RemoveEventHandler<ContextWillBeDestroyedEventArgs>("WebAudio.contextWillBeDestroyed", value);
            }
        }

        /// <summary>
        /// Notifies that existing BaseAudioContext has changed some properties (id stays the same)..
        /// </summary>
        public event System.EventHandler<ContextChangedEventArgs> ContextChanged
        {
            add
            {
                _client.AddEventHandler<ContextChangedEventArgs>("WebAudio.contextChanged", value);
            }

            remove
            {
                _client.RemoveEventHandler<ContextChangedEventArgs>("WebAudio.contextChanged", value);
            }
        }

        /// <summary>
        /// Notifies that the construction of an AudioListener has finished.
        /// </summary>
        public event System.EventHandler<AudioListenerCreatedEventArgs> AudioListenerCreated
        {
            add
            {
                _client.AddEventHandler<AudioListenerCreatedEventArgs>("WebAudio.audioListenerCreated", value);
            }

            remove
            {
                _client.RemoveEventHandler<AudioListenerCreatedEventArgs>("WebAudio.audioListenerCreated", value);
            }
        }

        /// <summary>
        /// Notifies that a new AudioListener has been created.
        /// </summary>
        public event System.EventHandler<AudioListenerWillBeDestroyedEventArgs> AudioListenerWillBeDestroyed
        {
            add
            {
                _client.AddEventHandler<AudioListenerWillBeDestroyedEventArgs>("WebAudio.audioListenerWillBeDestroyed", value);
            }

            remove
            {
                _client.RemoveEventHandler<AudioListenerWillBeDestroyedEventArgs>("WebAudio.audioListenerWillBeDestroyed", value);
            }
        }

        /// <summary>
        /// Notifies that a new AudioNode has been created.
        /// </summary>
        public event System.EventHandler<AudioNodeCreatedEventArgs> AudioNodeCreated
        {
            add
            {
                _client.AddEventHandler<AudioNodeCreatedEventArgs>("WebAudio.audioNodeCreated", value);
            }

            remove
            {
                _client.RemoveEventHandler<AudioNodeCreatedEventArgs>("WebAudio.audioNodeCreated", value);
            }
        }

        /// <summary>
        /// Notifies that an existing AudioNode has been destroyed.
        /// </summary>
        public event System.EventHandler<AudioNodeWillBeDestroyedEventArgs> AudioNodeWillBeDestroyed
        {
            add
            {
                _client.AddEventHandler<AudioNodeWillBeDestroyedEventArgs>("WebAudio.audioNodeWillBeDestroyed", value);
            }

            remove
            {
                _client.RemoveEventHandler<AudioNodeWillBeDestroyedEventArgs>("WebAudio.audioNodeWillBeDestroyed", value);
            }
        }

        /// <summary>
        /// Notifies that a new AudioParam has been created.
        /// </summary>
        public event System.EventHandler<AudioParamCreatedEventArgs> AudioParamCreated
        {
            add
            {
                _client.AddEventHandler<AudioParamCreatedEventArgs>("WebAudio.audioParamCreated", value);
            }

            remove
            {
                _client.RemoveEventHandler<AudioParamCreatedEventArgs>("WebAudio.audioParamCreated", value);
            }
        }

        /// <summary>
        /// Notifies that an existing AudioParam has been destroyed.
        /// </summary>
        public event System.EventHandler<AudioParamWillBeDestroyedEventArgs> AudioParamWillBeDestroyed
        {
            add
            {
                _client.AddEventHandler<AudioParamWillBeDestroyedEventArgs>("WebAudio.audioParamWillBeDestroyed", value);
            }

            remove
            {
                _client.RemoveEventHandler<AudioParamWillBeDestroyedEventArgs>("WebAudio.audioParamWillBeDestroyed", value);
            }
        }

        /// <summary>
        /// Notifies that two AudioNodes are connected.
        /// </summary>
        public event System.EventHandler<NodesConnectedEventArgs> NodesConnected
        {
            add
            {
                _client.AddEventHandler<NodesConnectedEventArgs>("WebAudio.nodesConnected", value);
            }

            remove
            {
                _client.RemoveEventHandler<NodesConnectedEventArgs>("WebAudio.nodesConnected", value);
            }
        }

        /// <summary>
        /// Notifies that AudioNodes are disconnected. The destination can be null, and it means all the outgoing connections from the source are disconnected.
        /// </summary>
        public event System.EventHandler<NodesDisconnectedEventArgs> NodesDisconnected
        {
            add
            {
                _client.AddEventHandler<NodesDisconnectedEventArgs>("WebAudio.nodesDisconnected", value);
            }

            remove
            {
                _client.RemoveEventHandler<NodesDisconnectedEventArgs>("WebAudio.nodesDisconnected", value);
            }
        }

        /// <summary>
        /// Notifies that an AudioNode is connected to an AudioParam.
        /// </summary>
        public event System.EventHandler<NodeParamConnectedEventArgs> NodeParamConnected
        {
            add
            {
                _client.AddEventHandler<NodeParamConnectedEventArgs>("WebAudio.nodeParamConnected", value);
            }

            remove
            {
                _client.RemoveEventHandler<NodeParamConnectedEventArgs>("WebAudio.nodeParamConnected", value);
            }
        }

        /// <summary>
        /// Notifies that an AudioNode is disconnected to an AudioParam.
        /// </summary>
        public event System.EventHandler<NodeParamDisconnectedEventArgs> NodeParamDisconnected
        {
            add
            {
                _client.AddEventHandler<NodeParamDisconnectedEventArgs>("WebAudio.nodeParamDisconnected", value);
            }

            remove
            {
                _client.RemoveEventHandler<NodeParamDisconnectedEventArgs>("WebAudio.nodeParamDisconnected", value);
            }
        }

        /// <summary>
        /// Enables the WebAudio domain and starts sending context lifetime events.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> EnableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("WebAudio.enable", dict);
        }

        /// <summary>
        /// Disables the WebAudio domain.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DisableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("WebAudio.disable", dict);
        }

        partial void ValidateGetRealtimeData(string contextId);
        /// <summary>
        /// Fetch the realtime data from the registered contexts.
        /// </summary>
        /// <param name = "contextId">contextId</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetRealtimeDataResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetRealtimeDataResponse> GetRealtimeDataAsync(string contextId)
        {
            ValidateGetRealtimeData(contextId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("contextId", contextId);
            return _client.ExecuteDevToolsMethodAsync<GetRealtimeDataResponse>("WebAudio.getRealtimeData", dict);
        }
    }
}

namespace CefSharp.DevTools.WebAuthn
{
    /// <summary>
    /// AddVirtualAuthenticatorResponse
    /// </summary>
    [DataContract]
    public class AddVirtualAuthenticatorResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string authenticatorId
        {
            get;
            set;
        }

        /// <summary>
        /// authenticatorId
        /// </summary>
        public string AuthenticatorId
        {
            get
            {
                return authenticatorId;
            }
        }
    }
}

namespace CefSharp.DevTools.WebAuthn
{
    /// <summary>
    /// GetCredentialResponse
    /// </summary>
    [DataContract]
    public class GetCredentialResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.WebAuthn.Credential credential
        {
            get;
            set;
        }

        /// <summary>
        /// credential
        /// </summary>
        public CefSharp.DevTools.WebAuthn.Credential Credential
        {
            get
            {
                return credential;
            }
        }
    }
}

namespace CefSharp.DevTools.WebAuthn
{
    /// <summary>
    /// GetCredentialsResponse
    /// </summary>
    [DataContract]
    public class GetCredentialsResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.WebAuthn.Credential> credentials
        {
            get;
            set;
        }

        /// <summary>
        /// credentials
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.WebAuthn.Credential> Credentials
        {
            get
            {
                return credentials;
            }
        }
    }
}

namespace CefSharp.DevTools.WebAuthn
{
    using System.Linq;

    /// <summary>
    /// This domain allows configuring virtual authenticators to test the WebAuthn
    /// API.
    /// </summary>
    public partial class WebAuthnClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// WebAuthn
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public WebAuthnClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// Triggered when a credential is added to an authenticator.
        /// </summary>
        public event System.EventHandler<CredentialAddedEventArgs> CredentialAdded
        {
            add
            {
                _client.AddEventHandler<CredentialAddedEventArgs>("WebAuthn.credentialAdded", value);
            }

            remove
            {
                _client.RemoveEventHandler<CredentialAddedEventArgs>("WebAuthn.credentialAdded", value);
            }
        }

        /// <summary>
        /// Triggered when a credential is used in a webauthn assertion.
        /// </summary>
        public event System.EventHandler<CredentialAssertedEventArgs> CredentialAsserted
        {
            add
            {
                _client.AddEventHandler<CredentialAssertedEventArgs>("WebAuthn.credentialAsserted", value);
            }

            remove
            {
                _client.RemoveEventHandler<CredentialAssertedEventArgs>("WebAuthn.credentialAsserted", value);
            }
        }

        partial void ValidateEnable(bool? enableUI = null);
        /// <summary>
        /// Enable the WebAuthn domain and start intercepting credential storage and
        /// retrieval with a virtual authenticator.
        /// </summary>
        /// <param name = "enableUI">Whether to enable the WebAuthn user interface. Enabling the UI isrecommended for debugging and demo purposes, as it is closer to the realexperience. Disabling the UI is recommended for automated testing.Supported at the embedder's discretion if UI is available.Defaults to false.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> EnableAsync(bool? enableUI = null)
        {
            ValidateEnable(enableUI);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (enableUI.HasValue)
            {
                dict.Add("enableUI", enableUI.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("WebAuthn.enable", dict);
        }

        /// <summary>
        /// Disable the WebAuthn domain.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DisableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("WebAuthn.disable", dict);
        }

        partial void ValidateAddVirtualAuthenticator(CefSharp.DevTools.WebAuthn.VirtualAuthenticatorOptions options);
        /// <summary>
        /// Creates and adds a virtual authenticator.
        /// </summary>
        /// <param name = "options">options</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;AddVirtualAuthenticatorResponse&gt;</returns>
        public System.Threading.Tasks.Task<AddVirtualAuthenticatorResponse> AddVirtualAuthenticatorAsync(CefSharp.DevTools.WebAuthn.VirtualAuthenticatorOptions options)
        {
            ValidateAddVirtualAuthenticator(options);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("options", options.ToDictionary());
            return _client.ExecuteDevToolsMethodAsync<AddVirtualAuthenticatorResponse>("WebAuthn.addVirtualAuthenticator", dict);
        }

        partial void ValidateSetResponseOverrideBits(string authenticatorId, bool? isBogusSignature = null, bool? isBadUV = null, bool? isBadUP = null);
        /// <summary>
        /// Resets parameters isBogusSignature, isBadUV, isBadUP to false if they are not present.
        /// </summary>
        /// <param name = "authenticatorId">authenticatorId</param>
        /// <param name = "isBogusSignature">If isBogusSignature is set, overrides the signature in the authenticator response to be zero.Defaults to false.</param>
        /// <param name = "isBadUV">If isBadUV is set, overrides the UV bit in the flags in the authenticator response tobe zero. Defaults to false.</param>
        /// <param name = "isBadUP">If isBadUP is set, overrides the UP bit in the flags in the authenticator response tobe zero. Defaults to false.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetResponseOverrideBitsAsync(string authenticatorId, bool? isBogusSignature = null, bool? isBadUV = null, bool? isBadUP = null)
        {
            ValidateSetResponseOverrideBits(authenticatorId, isBogusSignature, isBadUV, isBadUP);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("authenticatorId", authenticatorId);
            if (isBogusSignature.HasValue)
            {
                dict.Add("isBogusSignature", isBogusSignature.Value);
            }

            if (isBadUV.HasValue)
            {
                dict.Add("isBadUV", isBadUV.Value);
            }

            if (isBadUP.HasValue)
            {
                dict.Add("isBadUP", isBadUP.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("WebAuthn.setResponseOverrideBits", dict);
        }

        partial void ValidateRemoveVirtualAuthenticator(string authenticatorId);
        /// <summary>
        /// Removes the given authenticator.
        /// </summary>
        /// <param name = "authenticatorId">authenticatorId</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> RemoveVirtualAuthenticatorAsync(string authenticatorId)
        {
            ValidateRemoveVirtualAuthenticator(authenticatorId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("authenticatorId", authenticatorId);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("WebAuthn.removeVirtualAuthenticator", dict);
        }

        partial void ValidateAddCredential(string authenticatorId, CefSharp.DevTools.WebAuthn.Credential credential);
        /// <summary>
        /// Adds the credential to the specified authenticator.
        /// </summary>
        /// <param name = "authenticatorId">authenticatorId</param>
        /// <param name = "credential">credential</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> AddCredentialAsync(string authenticatorId, CefSharp.DevTools.WebAuthn.Credential credential)
        {
            ValidateAddCredential(authenticatorId, credential);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("authenticatorId", authenticatorId);
            dict.Add("credential", credential.ToDictionary());
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("WebAuthn.addCredential", dict);
        }

        partial void ValidateGetCredential(string authenticatorId, byte[] credentialId);
        /// <summary>
        /// Returns a single credential stored in the given virtual authenticator that
        /// matches the credential ID.
        /// </summary>
        /// <param name = "authenticatorId">authenticatorId</param>
        /// <param name = "credentialId">credentialId</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetCredentialResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetCredentialResponse> GetCredentialAsync(string authenticatorId, byte[] credentialId)
        {
            ValidateGetCredential(authenticatorId, credentialId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("authenticatorId", authenticatorId);
            dict.Add("credentialId", ToBase64String(credentialId));
            return _client.ExecuteDevToolsMethodAsync<GetCredentialResponse>("WebAuthn.getCredential", dict);
        }

        partial void ValidateGetCredentials(string authenticatorId);
        /// <summary>
        /// Returns all the credentials stored in the given virtual authenticator.
        /// </summary>
        /// <param name = "authenticatorId">authenticatorId</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetCredentialsResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetCredentialsResponse> GetCredentialsAsync(string authenticatorId)
        {
            ValidateGetCredentials(authenticatorId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("authenticatorId", authenticatorId);
            return _client.ExecuteDevToolsMethodAsync<GetCredentialsResponse>("WebAuthn.getCredentials", dict);
        }

        partial void ValidateRemoveCredential(string authenticatorId, byte[] credentialId);
        /// <summary>
        /// Removes a credential from the authenticator.
        /// </summary>
        /// <param name = "authenticatorId">authenticatorId</param>
        /// <param name = "credentialId">credentialId</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> RemoveCredentialAsync(string authenticatorId, byte[] credentialId)
        {
            ValidateRemoveCredential(authenticatorId, credentialId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("authenticatorId", authenticatorId);
            dict.Add("credentialId", ToBase64String(credentialId));
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("WebAuthn.removeCredential", dict);
        }

        partial void ValidateClearCredentials(string authenticatorId);
        /// <summary>
        /// Clears all the credentials from the specified device.
        /// </summary>
        /// <param name = "authenticatorId">authenticatorId</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ClearCredentialsAsync(string authenticatorId)
        {
            ValidateClearCredentials(authenticatorId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("authenticatorId", authenticatorId);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("WebAuthn.clearCredentials", dict);
        }

        partial void ValidateSetUserVerified(string authenticatorId, bool isUserVerified);
        /// <summary>
        /// Sets whether User Verification succeeds or fails for an authenticator.
        /// The default is true.
        /// </summary>
        /// <param name = "authenticatorId">authenticatorId</param>
        /// <param name = "isUserVerified">isUserVerified</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetUserVerifiedAsync(string authenticatorId, bool isUserVerified)
        {
            ValidateSetUserVerified(authenticatorId, isUserVerified);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("authenticatorId", authenticatorId);
            dict.Add("isUserVerified", isUserVerified);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("WebAuthn.setUserVerified", dict);
        }

        partial void ValidateSetAutomaticPresenceSimulation(string authenticatorId, bool enabled);
        /// <summary>
        /// Sets whether tests of user presence will succeed immediately (if true) or fail to resolve (if false) for an authenticator.
        /// The default is true.
        /// </summary>
        /// <param name = "authenticatorId">authenticatorId</param>
        /// <param name = "enabled">enabled</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetAutomaticPresenceSimulationAsync(string authenticatorId, bool enabled)
        {
            ValidateSetAutomaticPresenceSimulation(authenticatorId, enabled);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("authenticatorId", authenticatorId);
            dict.Add("enabled", enabled);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("WebAuthn.setAutomaticPresenceSimulation", dict);
        }

        partial void ValidateSetCredentialProperties(string authenticatorId, byte[] credentialId, bool? backupEligibility = null, bool? backupState = null);
        /// <summary>
        /// Allows setting credential properties.
        /// https://w3c.github.io/webauthn/#sctn-automation-set-credential-properties
        /// </summary>
        /// <param name = "authenticatorId">authenticatorId</param>
        /// <param name = "credentialId">credentialId</param>
        /// <param name = "backupEligibility">backupEligibility</param>
        /// <param name = "backupState">backupState</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetCredentialPropertiesAsync(string authenticatorId, byte[] credentialId, bool? backupEligibility = null, bool? backupState = null)
        {
            ValidateSetCredentialProperties(authenticatorId, credentialId, backupEligibility, backupState);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("authenticatorId", authenticatorId);
            dict.Add("credentialId", ToBase64String(credentialId));
            if (backupEligibility.HasValue)
            {
                dict.Add("backupEligibility", backupEligibility.Value);
            }

            if (backupState.HasValue)
            {
                dict.Add("backupState", backupState.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("WebAuthn.setCredentialProperties", dict);
        }
    }
}

namespace CefSharp.DevTools.Media
{
    using System.Linq;

    /// <summary>
    /// This domain allows detailed inspection of media elements
    /// </summary>
    public partial class MediaClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// Media
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public MediaClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// This can be called multiple times, and can be used to set / override /
        /// remove player properties. A null propValue indicates removal.
        /// </summary>
        public event System.EventHandler<PlayerPropertiesChangedEventArgs> PlayerPropertiesChanged
        {
            add
            {
                _client.AddEventHandler<PlayerPropertiesChangedEventArgs>("Media.playerPropertiesChanged", value);
            }

            remove
            {
                _client.RemoveEventHandler<PlayerPropertiesChangedEventArgs>("Media.playerPropertiesChanged", value);
            }
        }

        /// <summary>
        /// Send events as a list, allowing them to be batched on the browser for less
        /// congestion. If batched, events must ALWAYS be in chronological order.
        /// </summary>
        public event System.EventHandler<PlayerEventsAddedEventArgs> PlayerEventsAdded
        {
            add
            {
                _client.AddEventHandler<PlayerEventsAddedEventArgs>("Media.playerEventsAdded", value);
            }

            remove
            {
                _client.RemoveEventHandler<PlayerEventsAddedEventArgs>("Media.playerEventsAdded", value);
            }
        }

        /// <summary>
        /// Send a list of any messages that need to be delivered.
        /// </summary>
        public event System.EventHandler<PlayerMessagesLoggedEventArgs> PlayerMessagesLogged
        {
            add
            {
                _client.AddEventHandler<PlayerMessagesLoggedEventArgs>("Media.playerMessagesLogged", value);
            }

            remove
            {
                _client.RemoveEventHandler<PlayerMessagesLoggedEventArgs>("Media.playerMessagesLogged", value);
            }
        }

        /// <summary>
        /// Send a list of any errors that need to be delivered.
        /// </summary>
        public event System.EventHandler<PlayerErrorsRaisedEventArgs> PlayerErrorsRaised
        {
            add
            {
                _client.AddEventHandler<PlayerErrorsRaisedEventArgs>("Media.playerErrorsRaised", value);
            }

            remove
            {
                _client.RemoveEventHandler<PlayerErrorsRaisedEventArgs>("Media.playerErrorsRaised", value);
            }
        }

        /// <summary>
        /// Called whenever a player is created, or when a new agent joins and receives
        /// a list of active players. If an agent is restored, it will receive the full
        /// list of player ids and all events again.
        /// </summary>
        public event System.EventHandler<PlayersCreatedEventArgs> PlayersCreated
        {
            add
            {
                _client.AddEventHandler<PlayersCreatedEventArgs>("Media.playersCreated", value);
            }

            remove
            {
                _client.RemoveEventHandler<PlayersCreatedEventArgs>("Media.playersCreated", value);
            }
        }

        /// <summary>
        /// Enables the Media domain
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> EnableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Media.enable", dict);
        }

        /// <summary>
        /// Disables the Media domain.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DisableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Media.disable", dict);
        }
    }
}

namespace CefSharp.DevTools.DeviceAccess
{
    using System.Linq;

    /// <summary>
    /// DeviceAccess
    /// </summary>
    public partial class DeviceAccessClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// DeviceAccess
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public DeviceAccessClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// A device request opened a user prompt to select a device. Respond with the
        /// selectPrompt or cancelPrompt command.
        /// </summary>
        public event System.EventHandler<DeviceRequestPromptedEventArgs> DeviceRequestPrompted
        {
            add
            {
                _client.AddEventHandler<DeviceRequestPromptedEventArgs>("DeviceAccess.deviceRequestPrompted", value);
            }

            remove
            {
                _client.RemoveEventHandler<DeviceRequestPromptedEventArgs>("DeviceAccess.deviceRequestPrompted", value);
            }
        }

        /// <summary>
        /// Enable events in this domain.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> EnableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DeviceAccess.enable", dict);
        }

        /// <summary>
        /// Disable events in this domain.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DisableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DeviceAccess.disable", dict);
        }

        partial void ValidateSelectPrompt(string id, string deviceId);
        /// <summary>
        /// Select a device in response to a DeviceAccess.deviceRequestPrompted event.
        /// </summary>
        /// <param name = "id">id</param>
        /// <param name = "deviceId">deviceId</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SelectPromptAsync(string id, string deviceId)
        {
            ValidateSelectPrompt(id, deviceId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("id", id);
            dict.Add("deviceId", deviceId);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DeviceAccess.selectPrompt", dict);
        }

        partial void ValidateCancelPrompt(string id);
        /// <summary>
        /// Cancel a prompt in response to a DeviceAccess.deviceRequestPrompted event.
        /// </summary>
        /// <param name = "id">id</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> CancelPromptAsync(string id)
        {
            ValidateCancelPrompt(id);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("id", id);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("DeviceAccess.cancelPrompt", dict);
        }
    }
}

namespace CefSharp.DevTools.Preload
{
    using System.Linq;

    /// <summary>
    /// Preload
    /// </summary>
    public partial class PreloadClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// Preload
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public PreloadClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// Upsert. Currently, it is only emitted when a rule set added.
        /// </summary>
        public event System.EventHandler<RuleSetUpdatedEventArgs> RuleSetUpdated
        {
            add
            {
                _client.AddEventHandler<RuleSetUpdatedEventArgs>("Preload.ruleSetUpdated", value);
            }

            remove
            {
                _client.RemoveEventHandler<RuleSetUpdatedEventArgs>("Preload.ruleSetUpdated", value);
            }
        }

        /// <summary>
        /// RuleSetRemoved
        /// </summary>
        public event System.EventHandler<RuleSetRemovedEventArgs> RuleSetRemoved
        {
            add
            {
                _client.AddEventHandler<RuleSetRemovedEventArgs>("Preload.ruleSetRemoved", value);
            }

            remove
            {
                _client.RemoveEventHandler<RuleSetRemovedEventArgs>("Preload.ruleSetRemoved", value);
            }
        }

        /// <summary>
        /// Fired when a preload enabled state is updated.
        /// </summary>
        public event System.EventHandler<PreloadEnabledStateUpdatedEventArgs> PreloadEnabledStateUpdated
        {
            add
            {
                _client.AddEventHandler<PreloadEnabledStateUpdatedEventArgs>("Preload.preloadEnabledStateUpdated", value);
            }

            remove
            {
                _client.RemoveEventHandler<PreloadEnabledStateUpdatedEventArgs>("Preload.preloadEnabledStateUpdated", value);
            }
        }

        /// <summary>
        /// Fired when a prefetch attempt is updated.
        /// </summary>
        public event System.EventHandler<PrefetchStatusUpdatedEventArgs> PrefetchStatusUpdated
        {
            add
            {
                _client.AddEventHandler<PrefetchStatusUpdatedEventArgs>("Preload.prefetchStatusUpdated", value);
            }

            remove
            {
                _client.RemoveEventHandler<PrefetchStatusUpdatedEventArgs>("Preload.prefetchStatusUpdated", value);
            }
        }

        /// <summary>
        /// Fired when a prerender attempt is updated.
        /// </summary>
        public event System.EventHandler<PrerenderStatusUpdatedEventArgs> PrerenderStatusUpdated
        {
            add
            {
                _client.AddEventHandler<PrerenderStatusUpdatedEventArgs>("Preload.prerenderStatusUpdated", value);
            }

            remove
            {
                _client.RemoveEventHandler<PrerenderStatusUpdatedEventArgs>("Preload.prerenderStatusUpdated", value);
            }
        }

        /// <summary>
        /// Send a list of sources for all preloading attempts in a document.
        /// </summary>
        public event System.EventHandler<PreloadingAttemptSourcesUpdatedEventArgs> PreloadingAttemptSourcesUpdated
        {
            add
            {
                _client.AddEventHandler<PreloadingAttemptSourcesUpdatedEventArgs>("Preload.preloadingAttemptSourcesUpdated", value);
            }

            remove
            {
                _client.RemoveEventHandler<PreloadingAttemptSourcesUpdatedEventArgs>("Preload.preloadingAttemptSourcesUpdated", value);
            }
        }

        /// <summary>
        /// Enable
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> EnableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Preload.enable", dict);
        }

        /// <summary>
        /// Disable
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DisableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Preload.disable", dict);
        }
    }
}

namespace CefSharp.DevTools.FedCm
{
    using System.Linq;

    /// <summary>
    /// This domain allows interacting with the FedCM dialog.
    /// </summary>
    public partial class FedCmClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// FedCm
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public FedCmClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// DialogShown
        /// </summary>
        public event System.EventHandler<DialogShownEventArgs> DialogShown
        {
            add
            {
                _client.AddEventHandler<DialogShownEventArgs>("FedCm.dialogShown", value);
            }

            remove
            {
                _client.RemoveEventHandler<DialogShownEventArgs>("FedCm.dialogShown", value);
            }
        }

        /// <summary>
        /// Triggered when a dialog is closed, either by user action, JS abort,
        /// or a command below.
        /// </summary>
        public event System.EventHandler<DialogClosedEventArgs> DialogClosed
        {
            add
            {
                _client.AddEventHandler<DialogClosedEventArgs>("FedCm.dialogClosed", value);
            }

            remove
            {
                _client.RemoveEventHandler<DialogClosedEventArgs>("FedCm.dialogClosed", value);
            }
        }

        partial void ValidateEnable(bool? disableRejectionDelay = null);
        /// <summary>
        /// Enable
        /// </summary>
        /// <param name = "disableRejectionDelay">Allows callers to disable the promise rejection delay that wouldnormally happen, if this is unimportant to what's being tested.(step 4 of https://fedidcg.github.io/FedCM/#browser-api-rp-sign-in)</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> EnableAsync(bool? disableRejectionDelay = null)
        {
            ValidateEnable(disableRejectionDelay);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (disableRejectionDelay.HasValue)
            {
                dict.Add("disableRejectionDelay", disableRejectionDelay.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("FedCm.enable", dict);
        }

        /// <summary>
        /// Disable
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DisableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("FedCm.disable", dict);
        }

        partial void ValidateSelectAccount(string dialogId, int accountIndex);
        /// <summary>
        /// SelectAccount
        /// </summary>
        /// <param name = "dialogId">dialogId</param>
        /// <param name = "accountIndex">accountIndex</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SelectAccountAsync(string dialogId, int accountIndex)
        {
            ValidateSelectAccount(dialogId, accountIndex);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("dialogId", dialogId);
            dict.Add("accountIndex", accountIndex);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("FedCm.selectAccount", dict);
        }

        partial void ValidateClickDialogButton(string dialogId, CefSharp.DevTools.FedCm.DialogButton dialogButton);
        /// <summary>
        /// ClickDialogButton
        /// </summary>
        /// <param name = "dialogId">dialogId</param>
        /// <param name = "dialogButton">dialogButton</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ClickDialogButtonAsync(string dialogId, CefSharp.DevTools.FedCm.DialogButton dialogButton)
        {
            ValidateClickDialogButton(dialogId, dialogButton);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("dialogId", dialogId);
            dict.Add("dialogButton", EnumToString(dialogButton));
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("FedCm.clickDialogButton", dict);
        }

        partial void ValidateOpenUrl(string dialogId, int accountIndex, CefSharp.DevTools.FedCm.AccountUrlType accountUrlType);
        /// <summary>
        /// OpenUrl
        /// </summary>
        /// <param name = "dialogId">dialogId</param>
        /// <param name = "accountIndex">accountIndex</param>
        /// <param name = "accountUrlType">accountUrlType</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> OpenUrlAsync(string dialogId, int accountIndex, CefSharp.DevTools.FedCm.AccountUrlType accountUrlType)
        {
            ValidateOpenUrl(dialogId, accountIndex, accountUrlType);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("dialogId", dialogId);
            dict.Add("accountIndex", accountIndex);
            dict.Add("accountUrlType", EnumToString(accountUrlType));
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("FedCm.openUrl", dict);
        }

        partial void ValidateDismissDialog(string dialogId, bool? triggerCooldown = null);
        /// <summary>
        /// DismissDialog
        /// </summary>
        /// <param name = "dialogId">dialogId</param>
        /// <param name = "triggerCooldown">triggerCooldown</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DismissDialogAsync(string dialogId, bool? triggerCooldown = null)
        {
            ValidateDismissDialog(dialogId, triggerCooldown);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("dialogId", dialogId);
            if (triggerCooldown.HasValue)
            {
                dict.Add("triggerCooldown", triggerCooldown.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("FedCm.dismissDialog", dict);
        }

        /// <summary>
        /// Resets the cooldown time, if any, to allow the next FedCM call to show
        /// a dialog even if one was recently dismissed by the user.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ResetCooldownAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("FedCm.resetCooldown", dict);
        }
    }
}

namespace CefSharp.DevTools.Debugger
{
    /// <summary>
    /// EnableResponse
    /// </summary>
    [DataContract]
    public class EnableResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string debuggerId
        {
            get;
            set;
        }

        /// <summary>
        /// debuggerId
        /// </summary>
        public string DebuggerId
        {
            get
            {
                return debuggerId;
            }
        }
    }
}

namespace CefSharp.DevTools.Debugger
{
    /// <summary>
    /// EvaluateOnCallFrameResponse
    /// </summary>
    [DataContract]
    public class EvaluateOnCallFrameResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.Runtime.RemoteObject result
        {
            get;
            set;
        }

        /// <summary>
        /// result
        /// </summary>
        public CefSharp.DevTools.Runtime.RemoteObject Result
        {
            get
            {
                return result;
            }
        }

        [DataMember]
        internal CefSharp.DevTools.Runtime.ExceptionDetails exceptionDetails
        {
            get;
            set;
        }

        /// <summary>
        /// exceptionDetails
        /// </summary>
        public CefSharp.DevTools.Runtime.ExceptionDetails ExceptionDetails
        {
            get
            {
                return exceptionDetails;
            }
        }
    }
}

namespace CefSharp.DevTools.Debugger
{
    /// <summary>
    /// GetPossibleBreakpointsResponse
    /// </summary>
    [DataContract]
    public class GetPossibleBreakpointsResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.Debugger.BreakLocation> locations
        {
            get;
            set;
        }

        /// <summary>
        /// locations
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.Debugger.BreakLocation> Locations
        {
            get
            {
                return locations;
            }
        }
    }
}

namespace CefSharp.DevTools.Debugger
{
    /// <summary>
    /// GetScriptSourceResponse
    /// </summary>
    [DataContract]
    public class GetScriptSourceResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string scriptSource
        {
            get;
            set;
        }

        /// <summary>
        /// scriptSource
        /// </summary>
        public string ScriptSource
        {
            get
            {
                return scriptSource;
            }
        }

        [DataMember]
        internal string bytecode
        {
            get;
            set;
        }

        /// <summary>
        /// bytecode
        /// </summary>
        public byte[] Bytecode
        {
            get
            {
                return Convert(bytecode);
            }
        }
    }
}

namespace CefSharp.DevTools.Debugger
{
    /// <summary>
    /// DisassembleWasmModuleResponse
    /// </summary>
    [DataContract]
    public class DisassembleWasmModuleResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string streamId
        {
            get;
            set;
        }

        /// <summary>
        /// streamId
        /// </summary>
        public string StreamId
        {
            get
            {
                return streamId;
            }
        }

        [DataMember]
        internal int totalNumberOfLines
        {
            get;
            set;
        }

        /// <summary>
        /// totalNumberOfLines
        /// </summary>
        public int TotalNumberOfLines
        {
            get
            {
                return totalNumberOfLines;
            }
        }

        [DataMember]
        internal int[] functionBodyOffsets
        {
            get;
            set;
        }

        /// <summary>
        /// functionBodyOffsets
        /// </summary>
        public int[] FunctionBodyOffsets
        {
            get
            {
                return functionBodyOffsets;
            }
        }

        [DataMember]
        internal CefSharp.DevTools.Debugger.WasmDisassemblyChunk chunk
        {
            get;
            set;
        }

        /// <summary>
        /// chunk
        /// </summary>
        public CefSharp.DevTools.Debugger.WasmDisassemblyChunk Chunk
        {
            get
            {
                return chunk;
            }
        }
    }
}

namespace CefSharp.DevTools.Debugger
{
    /// <summary>
    /// NextWasmDisassemblyChunkResponse
    /// </summary>
    [DataContract]
    public class NextWasmDisassemblyChunkResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.Debugger.WasmDisassemblyChunk chunk
        {
            get;
            set;
        }

        /// <summary>
        /// chunk
        /// </summary>
        public CefSharp.DevTools.Debugger.WasmDisassemblyChunk Chunk
        {
            get
            {
                return chunk;
            }
        }
    }
}

namespace CefSharp.DevTools.Debugger
{
    /// <summary>
    /// GetStackTraceResponse
    /// </summary>
    [DataContract]
    public class GetStackTraceResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.Runtime.StackTrace stackTrace
        {
            get;
            set;
        }

        /// <summary>
        /// stackTrace
        /// </summary>
        public CefSharp.DevTools.Runtime.StackTrace StackTrace
        {
            get
            {
                return stackTrace;
            }
        }
    }
}

namespace CefSharp.DevTools.Debugger
{
    /// <summary>
    /// RestartFrameResponse
    /// </summary>
    [DataContract]
    public class RestartFrameResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.Debugger.CallFrame> callFrames
        {
            get;
            set;
        }

        /// <summary>
        /// callFrames
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.Debugger.CallFrame> CallFrames
        {
            get
            {
                return callFrames;
            }
        }

        [DataMember]
        internal CefSharp.DevTools.Runtime.StackTrace asyncStackTrace
        {
            get;
            set;
        }

        /// <summary>
        /// asyncStackTrace
        /// </summary>
        public CefSharp.DevTools.Runtime.StackTrace AsyncStackTrace
        {
            get
            {
                return asyncStackTrace;
            }
        }

        [DataMember]
        internal CefSharp.DevTools.Runtime.StackTraceId asyncStackTraceId
        {
            get;
            set;
        }

        /// <summary>
        /// asyncStackTraceId
        /// </summary>
        public CefSharp.DevTools.Runtime.StackTraceId AsyncStackTraceId
        {
            get
            {
                return asyncStackTraceId;
            }
        }
    }
}

namespace CefSharp.DevTools.Debugger
{
    /// <summary>
    /// SearchInContentResponse
    /// </summary>
    [DataContract]
    public class SearchInContentResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.Debugger.SearchMatch> result
        {
            get;
            set;
        }

        /// <summary>
        /// result
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.Debugger.SearchMatch> Result
        {
            get
            {
                return result;
            }
        }
    }
}

namespace CefSharp.DevTools.Debugger
{
    /// <summary>
    /// SetBreakpointResponse
    /// </summary>
    [DataContract]
    public class SetBreakpointResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string breakpointId
        {
            get;
            set;
        }

        /// <summary>
        /// breakpointId
        /// </summary>
        public string BreakpointId
        {
            get
            {
                return breakpointId;
            }
        }

        [DataMember]
        internal CefSharp.DevTools.Debugger.Location actualLocation
        {
            get;
            set;
        }

        /// <summary>
        /// actualLocation
        /// </summary>
        public CefSharp.DevTools.Debugger.Location ActualLocation
        {
            get
            {
                return actualLocation;
            }
        }
    }
}

namespace CefSharp.DevTools.Debugger
{
    /// <summary>
    /// SetInstrumentationBreakpointResponse
    /// </summary>
    [DataContract]
    public class SetInstrumentationBreakpointResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string breakpointId
        {
            get;
            set;
        }

        /// <summary>
        /// breakpointId
        /// </summary>
        public string BreakpointId
        {
            get
            {
                return breakpointId;
            }
        }
    }
}

namespace CefSharp.DevTools.Debugger
{
    /// <summary>
    /// SetBreakpointByUrlResponse
    /// </summary>
    [DataContract]
    public class SetBreakpointByUrlResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string breakpointId
        {
            get;
            set;
        }

        /// <summary>
        /// breakpointId
        /// </summary>
        public string BreakpointId
        {
            get
            {
                return breakpointId;
            }
        }

        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.Debugger.Location> locations
        {
            get;
            set;
        }

        /// <summary>
        /// locations
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.Debugger.Location> Locations
        {
            get
            {
                return locations;
            }
        }
    }
}

namespace CefSharp.DevTools.Debugger
{
    /// <summary>
    /// SetBreakpointOnFunctionCallResponse
    /// </summary>
    [DataContract]
    public class SetBreakpointOnFunctionCallResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string breakpointId
        {
            get;
            set;
        }

        /// <summary>
        /// breakpointId
        /// </summary>
        public string BreakpointId
        {
            get
            {
                return breakpointId;
            }
        }
    }
}

namespace CefSharp.DevTools.Debugger
{
    /// <summary>
    /// SetScriptSourceResponse
    /// </summary>
    [DataContract]
    public class SetScriptSourceResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.Debugger.CallFrame> callFrames
        {
            get;
            set;
        }

        /// <summary>
        /// callFrames
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.Debugger.CallFrame> CallFrames
        {
            get
            {
                return callFrames;
            }
        }

        [DataMember]
        internal bool? stackChanged
        {
            get;
            set;
        }

        /// <summary>
        /// stackChanged
        /// </summary>
        public bool? StackChanged
        {
            get
            {
                return stackChanged;
            }
        }

        [DataMember]
        internal CefSharp.DevTools.Runtime.StackTrace asyncStackTrace
        {
            get;
            set;
        }

        /// <summary>
        /// asyncStackTrace
        /// </summary>
        public CefSharp.DevTools.Runtime.StackTrace AsyncStackTrace
        {
            get
            {
                return asyncStackTrace;
            }
        }

        [DataMember]
        internal CefSharp.DevTools.Runtime.StackTraceId asyncStackTraceId
        {
            get;
            set;
        }

        /// <summary>
        /// asyncStackTraceId
        /// </summary>
        public CefSharp.DevTools.Runtime.StackTraceId AsyncStackTraceId
        {
            get
            {
                return asyncStackTraceId;
            }
        }

        [DataMember]
        internal string status
        {
            get;
            set;
        }

        /// <summary>
        /// status
        /// </summary>
        public string Status
        {
            get
            {
                return status;
            }
        }

        [DataMember]
        internal CefSharp.DevTools.Runtime.ExceptionDetails exceptionDetails
        {
            get;
            set;
        }

        /// <summary>
        /// exceptionDetails
        /// </summary>
        public CefSharp.DevTools.Runtime.ExceptionDetails ExceptionDetails
        {
            get
            {
                return exceptionDetails;
            }
        }
    }
}

namespace CefSharp.DevTools.Debugger
{
    using System.Linq;

    /// <summary>
    /// ContinueToLocationTargetCallFrames
    /// </summary>
    public enum ContinueToLocationTargetCallFrames
    {
        /// <summary>
        /// any
        /// </summary>
        [EnumMember(Value = ("any"))]
        Any,
        /// <summary>
        /// current
        /// </summary>
        [EnumMember(Value = ("current"))]
        Current
    }

    /// <summary>
    /// The `mode` parameter must be present and set to &apos;StepInto&apos;, otherwise
    /// `restartFrame` will error out.
    /// </summary>
    public enum RestartFrameMode
    {
        /// <summary>
        /// StepInto
        /// </summary>
        [EnumMember(Value = ("StepInto"))]
        StepInto
    }

    /// <summary>
    /// Instrumentation name.
    /// </summary>
    public enum SetInstrumentationBreakpointInstrumentation
    {
        /// <summary>
        /// beforeScriptExecution
        /// </summary>
        [EnumMember(Value = ("beforeScriptExecution"))]
        BeforeScriptExecution,
        /// <summary>
        /// beforeScriptWithSourceMapExecution
        /// </summary>
        [EnumMember(Value = ("beforeScriptWithSourceMapExecution"))]
        BeforeScriptWithSourceMapExecution
    }

    /// <summary>
    /// Pause on exceptions mode.
    /// </summary>
    public enum SetPauseOnExceptionsState
    {
        /// <summary>
        /// none
        /// </summary>
        [EnumMember(Value = ("none"))]
        None,
        /// <summary>
        /// caught
        /// </summary>
        [EnumMember(Value = ("caught"))]
        Caught,
        /// <summary>
        /// uncaught
        /// </summary>
        [EnumMember(Value = ("uncaught"))]
        Uncaught,
        /// <summary>
        /// all
        /// </summary>
        [EnumMember(Value = ("all"))]
        All
    }

    /// <summary>
    /// Debugger domain exposes JavaScript debugging capabilities. It allows setting and removing
    /// breakpoints, stepping through execution, exploring stack traces, etc.
    /// </summary>
    public partial class DebuggerClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// Debugger
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public DebuggerClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// Fired when breakpoint is resolved to an actual script and location.
        /// </summary>
        public event System.EventHandler<BreakpointResolvedEventArgs> BreakpointResolved
        {
            add
            {
                _client.AddEventHandler<BreakpointResolvedEventArgs>("Debugger.breakpointResolved", value);
            }

            remove
            {
                _client.RemoveEventHandler<BreakpointResolvedEventArgs>("Debugger.breakpointResolved", value);
            }
        }

        /// <summary>
        /// Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.
        /// </summary>
        public event System.EventHandler<PausedEventArgs> Paused
        {
            add
            {
                _client.AddEventHandler<PausedEventArgs>("Debugger.paused", value);
            }

            remove
            {
                _client.RemoveEventHandler<PausedEventArgs>("Debugger.paused", value);
            }
        }

        /// <summary>
        /// Fired when the virtual machine resumed execution.
        /// </summary>
        public event System.EventHandler<System.EventArgs> Resumed
        {
            add
            {
                _client.AddEventHandler<System.EventArgs>("Debugger.resumed", value);
            }

            remove
            {
                _client.RemoveEventHandler<System.EventArgs>("Debugger.resumed", value);
            }
        }

        /// <summary>
        /// Fired when virtual machine fails to parse the script.
        /// </summary>
        public event System.EventHandler<ScriptFailedToParseEventArgs> ScriptFailedToParse
        {
            add
            {
                _client.AddEventHandler<ScriptFailedToParseEventArgs>("Debugger.scriptFailedToParse", value);
            }

            remove
            {
                _client.RemoveEventHandler<ScriptFailedToParseEventArgs>("Debugger.scriptFailedToParse", value);
            }
        }

        /// <summary>
        /// Fired when virtual machine parses script. This event is also fired for all known and uncollected
        /// scripts upon enabling debugger.
        /// </summary>
        public event System.EventHandler<ScriptParsedEventArgs> ScriptParsed
        {
            add
            {
                _client.AddEventHandler<ScriptParsedEventArgs>("Debugger.scriptParsed", value);
            }

            remove
            {
                _client.RemoveEventHandler<ScriptParsedEventArgs>("Debugger.scriptParsed", value);
            }
        }

        partial void ValidateContinueToLocation(CefSharp.DevTools.Debugger.Location location, CefSharp.DevTools.Debugger.ContinueToLocationTargetCallFrames? targetCallFrames = null);
        /// <summary>
        /// Continues execution until specific location is reached.
        /// </summary>
        /// <param name = "location">Location to continue to.</param>
        /// <param name = "targetCallFrames">targetCallFrames</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ContinueToLocationAsync(CefSharp.DevTools.Debugger.Location location, CefSharp.DevTools.Debugger.ContinueToLocationTargetCallFrames? targetCallFrames = null)
        {
            ValidateContinueToLocation(location, targetCallFrames);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("location", location.ToDictionary());
            if (targetCallFrames.HasValue)
            {
                dict.Add("targetCallFrames", EnumToString(targetCallFrames));
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Debugger.continueToLocation", dict);
        }

        /// <summary>
        /// Disables debugger for given page.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DisableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Debugger.disable", dict);
        }

        partial void ValidateEnable(double? maxScriptsCacheSize = null);
        /// <summary>
        /// Enables debugger for the given page. Clients should not assume that the debugging has been
        /// enabled until the result for this command is received.
        /// </summary>
        /// <param name = "maxScriptsCacheSize">The maximum size in bytes of collected scripts (not referenced by other heap objects)the debugger can hold. Puts no limit if parameter is omitted.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;EnableResponse&gt;</returns>
        public System.Threading.Tasks.Task<EnableResponse> EnableAsync(double? maxScriptsCacheSize = null)
        {
            ValidateEnable(maxScriptsCacheSize);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (maxScriptsCacheSize.HasValue)
            {
                dict.Add("maxScriptsCacheSize", maxScriptsCacheSize.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<EnableResponse>("Debugger.enable", dict);
        }

        partial void ValidateEvaluateOnCallFrame(string callFrameId, string expression, string objectGroup = null, bool? includeCommandLineAPI = null, bool? silent = null, bool? returnByValue = null, bool? generatePreview = null, bool? throwOnSideEffect = null, double? timeout = null);
        /// <summary>
        /// Evaluates expression on a given call frame.
        /// </summary>
        /// <param name = "callFrameId">Call frame identifier to evaluate on.</param>
        /// <param name = "expression">Expression to evaluate.</param>
        /// <param name = "objectGroup">String object group name to put result into (allows rapid releasing resulting object handlesusing `releaseObjectGroup`).</param>
        /// <param name = "includeCommandLineAPI">Specifies whether command line API should be available to the evaluated expression, defaultsto false.</param>
        /// <param name = "silent">In silent mode exceptions thrown during evaluation are not reported and do not pauseexecution. Overrides `setPauseOnException` state.</param>
        /// <param name = "returnByValue">Whether the result is expected to be a JSON object that should be sent by value.</param>
        /// <param name = "generatePreview">Whether preview should be generated for the result.</param>
        /// <param name = "throwOnSideEffect">Whether to throw an exception if side effect cannot be ruled out during evaluation.</param>
        /// <param name = "timeout">Terminate execution after timing out (number of milliseconds).</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;EvaluateOnCallFrameResponse&gt;</returns>
        public System.Threading.Tasks.Task<EvaluateOnCallFrameResponse> EvaluateOnCallFrameAsync(string callFrameId, string expression, string objectGroup = null, bool? includeCommandLineAPI = null, bool? silent = null, bool? returnByValue = null, bool? generatePreview = null, bool? throwOnSideEffect = null, double? timeout = null)
        {
            ValidateEvaluateOnCallFrame(callFrameId, expression, objectGroup, includeCommandLineAPI, silent, returnByValue, generatePreview, throwOnSideEffect, timeout);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("callFrameId", callFrameId);
            dict.Add("expression", expression);
            if (!(string.IsNullOrEmpty(objectGroup)))
            {
                dict.Add("objectGroup", objectGroup);
            }

            if (includeCommandLineAPI.HasValue)
            {
                dict.Add("includeCommandLineAPI", includeCommandLineAPI.Value);
            }

            if (silent.HasValue)
            {
                dict.Add("silent", silent.Value);
            }

            if (returnByValue.HasValue)
            {
                dict.Add("returnByValue", returnByValue.Value);
            }

            if (generatePreview.HasValue)
            {
                dict.Add("generatePreview", generatePreview.Value);
            }

            if (throwOnSideEffect.HasValue)
            {
                dict.Add("throwOnSideEffect", throwOnSideEffect.Value);
            }

            if (timeout.HasValue)
            {
                dict.Add("timeout", timeout.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<EvaluateOnCallFrameResponse>("Debugger.evaluateOnCallFrame", dict);
        }

        partial void ValidateGetPossibleBreakpoints(CefSharp.DevTools.Debugger.Location start, CefSharp.DevTools.Debugger.Location end = null, bool? restrictToFunction = null);
        /// <summary>
        /// Returns possible locations for breakpoint. scriptId in start and end range locations should be
        /// the same.
        /// </summary>
        /// <param name = "start">Start of range to search possible breakpoint locations in.</param>
        /// <param name = "end">End of range to search possible breakpoint locations in (excluding). When not specified, endof scripts is used as end of range.</param>
        /// <param name = "restrictToFunction">Only consider locations which are in the same (non-nested) function as start.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetPossibleBreakpointsResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetPossibleBreakpointsResponse> GetPossibleBreakpointsAsync(CefSharp.DevTools.Debugger.Location start, CefSharp.DevTools.Debugger.Location end = null, bool? restrictToFunction = null)
        {
            ValidateGetPossibleBreakpoints(start, end, restrictToFunction);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("start", start.ToDictionary());
            if ((end) != (null))
            {
                dict.Add("end", end.ToDictionary());
            }

            if (restrictToFunction.HasValue)
            {
                dict.Add("restrictToFunction", restrictToFunction.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<GetPossibleBreakpointsResponse>("Debugger.getPossibleBreakpoints", dict);
        }

        partial void ValidateGetScriptSource(string scriptId);
        /// <summary>
        /// Returns source for the script with given id.
        /// </summary>
        /// <param name = "scriptId">Id of the script to get source for.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetScriptSourceResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetScriptSourceResponse> GetScriptSourceAsync(string scriptId)
        {
            ValidateGetScriptSource(scriptId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("scriptId", scriptId);
            return _client.ExecuteDevToolsMethodAsync<GetScriptSourceResponse>("Debugger.getScriptSource", dict);
        }

        partial void ValidateDisassembleWasmModule(string scriptId);
        /// <summary>
        /// DisassembleWasmModule
        /// </summary>
        /// <param name = "scriptId">Id of the script to disassemble</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DisassembleWasmModuleResponse&gt;</returns>
        public System.Threading.Tasks.Task<DisassembleWasmModuleResponse> DisassembleWasmModuleAsync(string scriptId)
        {
            ValidateDisassembleWasmModule(scriptId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("scriptId", scriptId);
            return _client.ExecuteDevToolsMethodAsync<DisassembleWasmModuleResponse>("Debugger.disassembleWasmModule", dict);
        }

        partial void ValidateNextWasmDisassemblyChunk(string streamId);
        /// <summary>
        /// Disassemble the next chunk of lines for the module corresponding to the
        /// stream. If disassembly is complete, this API will invalidate the streamId
        /// and return an empty chunk. Any subsequent calls for the now invalid stream
        /// will return errors.
        /// </summary>
        /// <param name = "streamId">streamId</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;NextWasmDisassemblyChunkResponse&gt;</returns>
        public System.Threading.Tasks.Task<NextWasmDisassemblyChunkResponse> NextWasmDisassemblyChunkAsync(string streamId)
        {
            ValidateNextWasmDisassemblyChunk(streamId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("streamId", streamId);
            return _client.ExecuteDevToolsMethodAsync<NextWasmDisassemblyChunkResponse>("Debugger.nextWasmDisassemblyChunk", dict);
        }

        partial void ValidateGetStackTrace(CefSharp.DevTools.Runtime.StackTraceId stackTraceId);
        /// <summary>
        /// Returns stack trace with given `stackTraceId`.
        /// </summary>
        /// <param name = "stackTraceId">stackTraceId</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetStackTraceResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetStackTraceResponse> GetStackTraceAsync(CefSharp.DevTools.Runtime.StackTraceId stackTraceId)
        {
            ValidateGetStackTrace(stackTraceId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("stackTraceId", stackTraceId.ToDictionary());
            return _client.ExecuteDevToolsMethodAsync<GetStackTraceResponse>("Debugger.getStackTrace", dict);
        }

        /// <summary>
        /// Stops on the next JavaScript statement.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> PauseAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Debugger.pause", dict);
        }

        partial void ValidateRemoveBreakpoint(string breakpointId);
        /// <summary>
        /// Removes JavaScript breakpoint.
        /// </summary>
        /// <param name = "breakpointId">breakpointId</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> RemoveBreakpointAsync(string breakpointId)
        {
            ValidateRemoveBreakpoint(breakpointId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("breakpointId", breakpointId);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Debugger.removeBreakpoint", dict);
        }

        partial void ValidateRestartFrame(string callFrameId, CefSharp.DevTools.Debugger.RestartFrameMode? mode = null);
        /// <summary>
        /// Restarts particular call frame from the beginning. The old, deprecated
        /// behavior of `restartFrame` is to stay paused and allow further CDP commands
        /// after a restart was scheduled. This can cause problems with restarting, so
        /// we now continue execution immediatly after it has been scheduled until we
        /// reach the beginning of the restarted frame.
        /// 
        /// To stay back-wards compatible, `restartFrame` now expects a `mode`
        /// parameter to be present. If the `mode` parameter is missing, `restartFrame`
        /// errors out.
        /// 
        /// The various return values are deprecated and `callFrames` is always empty.
        /// Use the call frames from the `Debugger#paused` events instead, that fires
        /// once V8 pauses at the beginning of the restarted function.
        /// </summary>
        /// <param name = "callFrameId">Call frame identifier to evaluate on.</param>
        /// <param name = "mode">The `mode` parameter must be present and set to 'StepInto', otherwise`restartFrame` will error out.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;RestartFrameResponse&gt;</returns>
        public System.Threading.Tasks.Task<RestartFrameResponse> RestartFrameAsync(string callFrameId, CefSharp.DevTools.Debugger.RestartFrameMode? mode = null)
        {
            ValidateRestartFrame(callFrameId, mode);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("callFrameId", callFrameId);
            if (mode.HasValue)
            {
                dict.Add("mode", EnumToString(mode));
            }

            return _client.ExecuteDevToolsMethodAsync<RestartFrameResponse>("Debugger.restartFrame", dict);
        }

        partial void ValidateResume(bool? terminateOnResume = null);
        /// <summary>
        /// Resumes JavaScript execution.
        /// </summary>
        /// <param name = "terminateOnResume">Set to true to terminate execution upon resuming execution. In contrastto Runtime.terminateExecution, this will allows to execute furtherJavaScript (i.e. via evaluation) until execution of the paused codeis actually resumed, at which point termination is triggered.If execution is currently not paused, this parameter has no effect.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ResumeAsync(bool? terminateOnResume = null)
        {
            ValidateResume(terminateOnResume);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (terminateOnResume.HasValue)
            {
                dict.Add("terminateOnResume", terminateOnResume.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Debugger.resume", dict);
        }

        partial void ValidateSearchInContent(string scriptId, string query, bool? caseSensitive = null, bool? isRegex = null);
        /// <summary>
        /// Searches for given string in script content.
        /// </summary>
        /// <param name = "scriptId">Id of the script to search in.</param>
        /// <param name = "query">String to search for.</param>
        /// <param name = "caseSensitive">If true, search is case sensitive.</param>
        /// <param name = "isRegex">If true, treats string parameter as regex.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;SearchInContentResponse&gt;</returns>
        public System.Threading.Tasks.Task<SearchInContentResponse> SearchInContentAsync(string scriptId, string query, bool? caseSensitive = null, bool? isRegex = null)
        {
            ValidateSearchInContent(scriptId, query, caseSensitive, isRegex);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("scriptId", scriptId);
            dict.Add("query", query);
            if (caseSensitive.HasValue)
            {
                dict.Add("caseSensitive", caseSensitive.Value);
            }

            if (isRegex.HasValue)
            {
                dict.Add("isRegex", isRegex.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<SearchInContentResponse>("Debugger.searchInContent", dict);
        }

        partial void ValidateSetAsyncCallStackDepth(int maxDepth);
        /// <summary>
        /// Enables or disables async call stacks tracking.
        /// </summary>
        /// <param name = "maxDepth">Maximum depth of async call stacks. Setting to `0` will effectively disable collecting asynccall stacks (default).</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetAsyncCallStackDepthAsync(int maxDepth)
        {
            ValidateSetAsyncCallStackDepth(maxDepth);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("maxDepth", maxDepth);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Debugger.setAsyncCallStackDepth", dict);
        }

        partial void ValidateSetBlackboxPatterns(string[] patterns);
        /// <summary>
        /// Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in
        /// scripts with url matching one of the patterns. VM will try to leave blackboxed script by
        /// performing &apos;step in&apos; several times, finally resorting to &apos;step out&apos; if unsuccessful.
        /// </summary>
        /// <param name = "patterns">Array of regexps that will be used to check script url for blackbox state.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetBlackboxPatternsAsync(string[] patterns)
        {
            ValidateSetBlackboxPatterns(patterns);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("patterns", patterns);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Debugger.setBlackboxPatterns", dict);
        }

        partial void ValidateSetBlackboxedRanges(string scriptId, System.Collections.Generic.IList<CefSharp.DevTools.Debugger.ScriptPosition> positions);
        /// <summary>
        /// Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted
        /// scripts by performing &apos;step in&apos; several times, finally resorting to &apos;step out&apos; if unsuccessful.
        /// Positions array contains positions where blackbox state is changed. First interval isn&apos;t
        /// blackboxed. Array should be sorted.
        /// </summary>
        /// <param name = "scriptId">Id of the script.</param>
        /// <param name = "positions">positions</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetBlackboxedRangesAsync(string scriptId, System.Collections.Generic.IList<CefSharp.DevTools.Debugger.ScriptPosition> positions)
        {
            ValidateSetBlackboxedRanges(scriptId, positions);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("scriptId", scriptId);
            dict.Add("positions", positions.Select(x => x.ToDictionary()));
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Debugger.setBlackboxedRanges", dict);
        }

        partial void ValidateSetBreakpoint(CefSharp.DevTools.Debugger.Location location, string condition = null);
        /// <summary>
        /// Sets JavaScript breakpoint at a given location.
        /// </summary>
        /// <param name = "location">Location to set breakpoint in.</param>
        /// <param name = "condition">Expression to use as a breakpoint condition. When specified, debugger will only stop on thebreakpoint if this expression evaluates to true.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;SetBreakpointResponse&gt;</returns>
        public System.Threading.Tasks.Task<SetBreakpointResponse> SetBreakpointAsync(CefSharp.DevTools.Debugger.Location location, string condition = null)
        {
            ValidateSetBreakpoint(location, condition);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("location", location.ToDictionary());
            if (!(string.IsNullOrEmpty(condition)))
            {
                dict.Add("condition", condition);
            }

            return _client.ExecuteDevToolsMethodAsync<SetBreakpointResponse>("Debugger.setBreakpoint", dict);
        }

        partial void ValidateSetInstrumentationBreakpoint(CefSharp.DevTools.Debugger.SetInstrumentationBreakpointInstrumentation instrumentation);
        /// <summary>
        /// Sets instrumentation breakpoint.
        /// </summary>
        /// <param name = "instrumentation">Instrumentation name.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;SetInstrumentationBreakpointResponse&gt;</returns>
        public System.Threading.Tasks.Task<SetInstrumentationBreakpointResponse> SetInstrumentationBreakpointAsync(CefSharp.DevTools.Debugger.SetInstrumentationBreakpointInstrumentation instrumentation)
        {
            ValidateSetInstrumentationBreakpoint(instrumentation);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("instrumentation", EnumToString(instrumentation));
            return _client.ExecuteDevToolsMethodAsync<SetInstrumentationBreakpointResponse>("Debugger.setInstrumentationBreakpoint", dict);
        }

        partial void ValidateSetBreakpointByUrl(int lineNumber, string url = null, string urlRegex = null, string scriptHash = null, int? columnNumber = null, string condition = null);
        /// <summary>
        /// Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this
        /// command is issued, all existing parsed scripts will have breakpoints resolved and returned in
        /// `locations` property. Further matching script parsing will result in subsequent
        /// `breakpointResolved` events issued. This logical breakpoint will survive page reloads.
        /// </summary>
        /// <param name = "lineNumber">Line number to set breakpoint at.</param>
        /// <param name = "url">URL of the resources to set breakpoint on.</param>
        /// <param name = "urlRegex">Regex pattern for the URLs of the resources to set breakpoints on. Either `url` or`urlRegex` must be specified.</param>
        /// <param name = "scriptHash">Script hash of the resources to set breakpoint on.</param>
        /// <param name = "columnNumber">Offset in the line to set breakpoint at.</param>
        /// <param name = "condition">Expression to use as a breakpoint condition. When specified, debugger will only stop on thebreakpoint if this expression evaluates to true.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;SetBreakpointByUrlResponse&gt;</returns>
        public System.Threading.Tasks.Task<SetBreakpointByUrlResponse> SetBreakpointByUrlAsync(int lineNumber, string url = null, string urlRegex = null, string scriptHash = null, int? columnNumber = null, string condition = null)
        {
            ValidateSetBreakpointByUrl(lineNumber, url, urlRegex, scriptHash, columnNumber, condition);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("lineNumber", lineNumber);
            if (!(string.IsNullOrEmpty(url)))
            {
                dict.Add("url", url);
            }

            if (!(string.IsNullOrEmpty(urlRegex)))
            {
                dict.Add("urlRegex", urlRegex);
            }

            if (!(string.IsNullOrEmpty(scriptHash)))
            {
                dict.Add("scriptHash", scriptHash);
            }

            if (columnNumber.HasValue)
            {
                dict.Add("columnNumber", columnNumber.Value);
            }

            if (!(string.IsNullOrEmpty(condition)))
            {
                dict.Add("condition", condition);
            }

            return _client.ExecuteDevToolsMethodAsync<SetBreakpointByUrlResponse>("Debugger.setBreakpointByUrl", dict);
        }

        partial void ValidateSetBreakpointOnFunctionCall(string objectId, string condition = null);
        /// <summary>
        /// Sets JavaScript breakpoint before each call to the given function.
        /// If another function was created from the same source as a given one,
        /// calling it will also trigger the breakpoint.
        /// </summary>
        /// <param name = "objectId">Function object id.</param>
        /// <param name = "condition">Expression to use as a breakpoint condition. When specified, debugger willstop on the breakpoint if this expression evaluates to true.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;SetBreakpointOnFunctionCallResponse&gt;</returns>
        public System.Threading.Tasks.Task<SetBreakpointOnFunctionCallResponse> SetBreakpointOnFunctionCallAsync(string objectId, string condition = null)
        {
            ValidateSetBreakpointOnFunctionCall(objectId, condition);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("objectId", objectId);
            if (!(string.IsNullOrEmpty(condition)))
            {
                dict.Add("condition", condition);
            }

            return _client.ExecuteDevToolsMethodAsync<SetBreakpointOnFunctionCallResponse>("Debugger.setBreakpointOnFunctionCall", dict);
        }

        partial void ValidateSetBreakpointsActive(bool active);
        /// <summary>
        /// Activates / deactivates all breakpoints on the page.
        /// </summary>
        /// <param name = "active">New value for breakpoints active state.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetBreakpointsActiveAsync(bool active)
        {
            ValidateSetBreakpointsActive(active);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("active", active);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Debugger.setBreakpointsActive", dict);
        }

        partial void ValidateSetPauseOnExceptions(CefSharp.DevTools.Debugger.SetPauseOnExceptionsState state);
        /// <summary>
        /// Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions,
        /// or caught exceptions, no exceptions. Initial pause on exceptions state is `none`.
        /// </summary>
        /// <param name = "state">Pause on exceptions mode.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetPauseOnExceptionsAsync(CefSharp.DevTools.Debugger.SetPauseOnExceptionsState state)
        {
            ValidateSetPauseOnExceptions(state);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("state", EnumToString(state));
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Debugger.setPauseOnExceptions", dict);
        }

        partial void ValidateSetReturnValue(CefSharp.DevTools.Runtime.CallArgument newValue);
        /// <summary>
        /// Changes return value in top frame. Available only at return break position.
        /// </summary>
        /// <param name = "newValue">New return value.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetReturnValueAsync(CefSharp.DevTools.Runtime.CallArgument newValue)
        {
            ValidateSetReturnValue(newValue);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("newValue", newValue.ToDictionary());
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Debugger.setReturnValue", dict);
        }

        partial void ValidateSetScriptSource(string scriptId, string scriptSource, bool? dryRun = null, bool? allowTopFrameEditing = null);
        /// <summary>
        /// Edits JavaScript source live.
        /// 
        /// In general, functions that are currently on the stack can not be edited with
        /// a single exception: If the edited function is the top-most stack frame and
        /// that is the only activation of that function on the stack. In this case
        /// the live edit will be successful and a `Debugger.restartFrame` for the
        /// top-most function is automatically triggered.
        /// </summary>
        /// <param name = "scriptId">Id of the script to edit.</param>
        /// <param name = "scriptSource">New content of the script.</param>
        /// <param name = "dryRun">If true the change will not actually be applied. Dry run may be used to get resultdescription without actually modifying the code.</param>
        /// <param name = "allowTopFrameEditing">If true, then `scriptSource` is allowed to change the function on top of the stackas long as the top-most stack frame is the only activation of that function.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;SetScriptSourceResponse&gt;</returns>
        public System.Threading.Tasks.Task<SetScriptSourceResponse> SetScriptSourceAsync(string scriptId, string scriptSource, bool? dryRun = null, bool? allowTopFrameEditing = null)
        {
            ValidateSetScriptSource(scriptId, scriptSource, dryRun, allowTopFrameEditing);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("scriptId", scriptId);
            dict.Add("scriptSource", scriptSource);
            if (dryRun.HasValue)
            {
                dict.Add("dryRun", dryRun.Value);
            }

            if (allowTopFrameEditing.HasValue)
            {
                dict.Add("allowTopFrameEditing", allowTopFrameEditing.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<SetScriptSourceResponse>("Debugger.setScriptSource", dict);
        }

        partial void ValidateSetSkipAllPauses(bool skip);
        /// <summary>
        /// Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc).
        /// </summary>
        /// <param name = "skip">New value for skip pauses state.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetSkipAllPausesAsync(bool skip)
        {
            ValidateSetSkipAllPauses(skip);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("skip", skip);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Debugger.setSkipAllPauses", dict);
        }

        partial void ValidateSetVariableValue(int scopeNumber, string variableName, CefSharp.DevTools.Runtime.CallArgument newValue, string callFrameId);
        /// <summary>
        /// Changes value of variable in a callframe. Object-based scopes are not supported and must be
        /// mutated manually.
        /// </summary>
        /// <param name = "scopeNumber">0-based number of scope as was listed in scope chain. Only 'local', 'closure' and 'catch'scope types are allowed. Other scopes could be manipulated manually.</param>
        /// <param name = "variableName">Variable name.</param>
        /// <param name = "newValue">New variable value.</param>
        /// <param name = "callFrameId">Id of callframe that holds variable.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetVariableValueAsync(int scopeNumber, string variableName, CefSharp.DevTools.Runtime.CallArgument newValue, string callFrameId)
        {
            ValidateSetVariableValue(scopeNumber, variableName, newValue, callFrameId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("scopeNumber", scopeNumber);
            dict.Add("variableName", variableName);
            dict.Add("newValue", newValue.ToDictionary());
            dict.Add("callFrameId", callFrameId);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Debugger.setVariableValue", dict);
        }

        partial void ValidateStepInto(bool? breakOnAsyncCall = null, System.Collections.Generic.IList<CefSharp.DevTools.Debugger.LocationRange> skipList = null);
        /// <summary>
        /// Steps into the function call.
        /// </summary>
        /// <param name = "breakOnAsyncCall">Debugger will pause on the execution of the first async task which was scheduledbefore next pause.</param>
        /// <param name = "skipList">The skipList specifies location ranges that should be skipped on step into.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> StepIntoAsync(bool? breakOnAsyncCall = null, System.Collections.Generic.IList<CefSharp.DevTools.Debugger.LocationRange> skipList = null)
        {
            ValidateStepInto(breakOnAsyncCall, skipList);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (breakOnAsyncCall.HasValue)
            {
                dict.Add("breakOnAsyncCall", breakOnAsyncCall.Value);
            }

            if ((skipList) != (null))
            {
                dict.Add("skipList", skipList.Select(x => x.ToDictionary()));
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Debugger.stepInto", dict);
        }

        /// <summary>
        /// Steps out of the function call.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> StepOutAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Debugger.stepOut", dict);
        }

        partial void ValidateStepOver(System.Collections.Generic.IList<CefSharp.DevTools.Debugger.LocationRange> skipList = null);
        /// <summary>
        /// Steps over the statement.
        /// </summary>
        /// <param name = "skipList">The skipList specifies location ranges that should be skipped on step over.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> StepOverAsync(System.Collections.Generic.IList<CefSharp.DevTools.Debugger.LocationRange> skipList = null)
        {
            ValidateStepOver(skipList);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if ((skipList) != (null))
            {
                dict.Add("skipList", skipList.Select(x => x.ToDictionary()));
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Debugger.stepOver", dict);
        }
    }
}

namespace CefSharp.DevTools.HeapProfiler
{
    /// <summary>
    /// GetHeapObjectIdResponse
    /// </summary>
    [DataContract]
    public class GetHeapObjectIdResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string heapSnapshotObjectId
        {
            get;
            set;
        }

        /// <summary>
        /// heapSnapshotObjectId
        /// </summary>
        public string HeapSnapshotObjectId
        {
            get
            {
                return heapSnapshotObjectId;
            }
        }
    }
}

namespace CefSharp.DevTools.HeapProfiler
{
    /// <summary>
    /// GetObjectByHeapObjectIdResponse
    /// </summary>
    [DataContract]
    public class GetObjectByHeapObjectIdResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.Runtime.RemoteObject result
        {
            get;
            set;
        }

        /// <summary>
        /// result
        /// </summary>
        public CefSharp.DevTools.Runtime.RemoteObject Result
        {
            get
            {
                return result;
            }
        }
    }
}

namespace CefSharp.DevTools.HeapProfiler
{
    /// <summary>
    /// GetSamplingProfileResponse
    /// </summary>
    [DataContract]
    public class GetSamplingProfileResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.HeapProfiler.SamplingHeapProfile profile
        {
            get;
            set;
        }

        /// <summary>
        /// profile
        /// </summary>
        public CefSharp.DevTools.HeapProfiler.SamplingHeapProfile Profile
        {
            get
            {
                return profile;
            }
        }
    }
}

namespace CefSharp.DevTools.HeapProfiler
{
    /// <summary>
    /// StopSamplingResponse
    /// </summary>
    [DataContract]
    public class StopSamplingResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.HeapProfiler.SamplingHeapProfile profile
        {
            get;
            set;
        }

        /// <summary>
        /// profile
        /// </summary>
        public CefSharp.DevTools.HeapProfiler.SamplingHeapProfile Profile
        {
            get
            {
                return profile;
            }
        }
    }
}

namespace CefSharp.DevTools.HeapProfiler
{
    using System.Linq;

    /// <summary>
    /// HeapProfiler
    /// </summary>
    public partial class HeapProfilerClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// HeapProfiler
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public HeapProfilerClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// AddHeapSnapshotChunk
        /// </summary>
        public event System.EventHandler<AddHeapSnapshotChunkEventArgs> AddHeapSnapshotChunk
        {
            add
            {
                _client.AddEventHandler<AddHeapSnapshotChunkEventArgs>("HeapProfiler.addHeapSnapshotChunk", value);
            }

            remove
            {
                _client.RemoveEventHandler<AddHeapSnapshotChunkEventArgs>("HeapProfiler.addHeapSnapshotChunk", value);
            }
        }

        /// <summary>
        /// If heap objects tracking has been started then backend may send update for one or more fragments
        /// </summary>
        public event System.EventHandler<HeapStatsUpdateEventArgs> HeapStatsUpdate
        {
            add
            {
                _client.AddEventHandler<HeapStatsUpdateEventArgs>("HeapProfiler.heapStatsUpdate", value);
            }

            remove
            {
                _client.RemoveEventHandler<HeapStatsUpdateEventArgs>("HeapProfiler.heapStatsUpdate", value);
            }
        }

        /// <summary>
        /// If heap objects tracking has been started then backend regularly sends a current value for last
        /// seen object id and corresponding timestamp. If the were changes in the heap since last event
        /// then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.
        /// </summary>
        public event System.EventHandler<LastSeenObjectIdEventArgs> LastSeenObjectId
        {
            add
            {
                _client.AddEventHandler<LastSeenObjectIdEventArgs>("HeapProfiler.lastSeenObjectId", value);
            }

            remove
            {
                _client.RemoveEventHandler<LastSeenObjectIdEventArgs>("HeapProfiler.lastSeenObjectId", value);
            }
        }

        /// <summary>
        /// ReportHeapSnapshotProgress
        /// </summary>
        public event System.EventHandler<ReportHeapSnapshotProgressEventArgs> ReportHeapSnapshotProgress
        {
            add
            {
                _client.AddEventHandler<ReportHeapSnapshotProgressEventArgs>("HeapProfiler.reportHeapSnapshotProgress", value);
            }

            remove
            {
                _client.RemoveEventHandler<ReportHeapSnapshotProgressEventArgs>("HeapProfiler.reportHeapSnapshotProgress", value);
            }
        }

        /// <summary>
        /// ResetProfiles
        /// </summary>
        public event System.EventHandler<System.EventArgs> ResetProfiles
        {
            add
            {
                _client.AddEventHandler<System.EventArgs>("HeapProfiler.resetProfiles", value);
            }

            remove
            {
                _client.RemoveEventHandler<System.EventArgs>("HeapProfiler.resetProfiles", value);
            }
        }

        partial void ValidateAddInspectedHeapObject(string heapObjectId);
        /// <summary>
        /// Enables console to refer to the node with given id via $x (see Command Line API for more details
        /// $x functions).
        /// </summary>
        /// <param name = "heapObjectId">Heap snapshot object id to be accessible by means of $x command line API.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> AddInspectedHeapObjectAsync(string heapObjectId)
        {
            ValidateAddInspectedHeapObject(heapObjectId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("heapObjectId", heapObjectId);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("HeapProfiler.addInspectedHeapObject", dict);
        }

        /// <summary>
        /// CollectGarbage
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> CollectGarbageAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("HeapProfiler.collectGarbage", dict);
        }

        /// <summary>
        /// Disable
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DisableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("HeapProfiler.disable", dict);
        }

        /// <summary>
        /// Enable
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> EnableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("HeapProfiler.enable", dict);
        }

        partial void ValidateGetHeapObjectId(string objectId);
        /// <summary>
        /// GetHeapObjectId
        /// </summary>
        /// <param name = "objectId">Identifier of the object to get heap object id for.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetHeapObjectIdResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetHeapObjectIdResponse> GetHeapObjectIdAsync(string objectId)
        {
            ValidateGetHeapObjectId(objectId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("objectId", objectId);
            return _client.ExecuteDevToolsMethodAsync<GetHeapObjectIdResponse>("HeapProfiler.getHeapObjectId", dict);
        }

        partial void ValidateGetObjectByHeapObjectId(string objectId, string objectGroup = null);
        /// <summary>
        /// GetObjectByHeapObjectId
        /// </summary>
        /// <param name = "objectId">objectId</param>
        /// <param name = "objectGroup">Symbolic group name that can be used to release multiple objects.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetObjectByHeapObjectIdResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetObjectByHeapObjectIdResponse> GetObjectByHeapObjectIdAsync(string objectId, string objectGroup = null)
        {
            ValidateGetObjectByHeapObjectId(objectId, objectGroup);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("objectId", objectId);
            if (!(string.IsNullOrEmpty(objectGroup)))
            {
                dict.Add("objectGroup", objectGroup);
            }

            return _client.ExecuteDevToolsMethodAsync<GetObjectByHeapObjectIdResponse>("HeapProfiler.getObjectByHeapObjectId", dict);
        }

        /// <summary>
        /// GetSamplingProfile
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetSamplingProfileResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetSamplingProfileResponse> GetSamplingProfileAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<GetSamplingProfileResponse>("HeapProfiler.getSamplingProfile", dict);
        }

        partial void ValidateStartSampling(double? samplingInterval = null, bool? includeObjectsCollectedByMajorGC = null, bool? includeObjectsCollectedByMinorGC = null);
        /// <summary>
        /// StartSampling
        /// </summary>
        /// <param name = "samplingInterval">Average sample interval in bytes. Poisson distribution is used for the intervals. Thedefault value is 32768 bytes.</param>
        /// <param name = "includeObjectsCollectedByMajorGC">By default, the sampling heap profiler reports only objects which arestill alive when the profile is returned via getSamplingProfile orstopSampling, which is useful for determining what functions contributethe most to steady-state memory usage. This flag instructs the samplingheap profiler to also include information about objects discarded bymajor GC, which will show which functions cause large temporary memoryusage or long GC pauses.</param>
        /// <param name = "includeObjectsCollectedByMinorGC">By default, the sampling heap profiler reports only objects which arestill alive when the profile is returned via getSamplingProfile orstopSampling, which is useful for determining what functions contributethe most to steady-state memory usage. This flag instructs the samplingheap profiler to also include information about objects discarded byminor GC, which is useful when tuning a latency-sensitive applicationfor minimal GC activity.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> StartSamplingAsync(double? samplingInterval = null, bool? includeObjectsCollectedByMajorGC = null, bool? includeObjectsCollectedByMinorGC = null)
        {
            ValidateStartSampling(samplingInterval, includeObjectsCollectedByMajorGC, includeObjectsCollectedByMinorGC);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (samplingInterval.HasValue)
            {
                dict.Add("samplingInterval", samplingInterval.Value);
            }

            if (includeObjectsCollectedByMajorGC.HasValue)
            {
                dict.Add("includeObjectsCollectedByMajorGC", includeObjectsCollectedByMajorGC.Value);
            }

            if (includeObjectsCollectedByMinorGC.HasValue)
            {
                dict.Add("includeObjectsCollectedByMinorGC", includeObjectsCollectedByMinorGC.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("HeapProfiler.startSampling", dict);
        }

        partial void ValidateStartTrackingHeapObjects(bool? trackAllocations = null);
        /// <summary>
        /// StartTrackingHeapObjects
        /// </summary>
        /// <param name = "trackAllocations">trackAllocations</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> StartTrackingHeapObjectsAsync(bool? trackAllocations = null)
        {
            ValidateStartTrackingHeapObjects(trackAllocations);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (trackAllocations.HasValue)
            {
                dict.Add("trackAllocations", trackAllocations.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("HeapProfiler.startTrackingHeapObjects", dict);
        }

        /// <summary>
        /// StopSampling
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;StopSamplingResponse&gt;</returns>
        public System.Threading.Tasks.Task<StopSamplingResponse> StopSamplingAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<StopSamplingResponse>("HeapProfiler.stopSampling", dict);
        }

        partial void ValidateStopTrackingHeapObjects(bool? reportProgress = null, bool? treatGlobalObjectsAsRoots = null, bool? captureNumericValue = null, bool? exposeInternals = null);
        /// <summary>
        /// StopTrackingHeapObjects
        /// </summary>
        /// <param name = "reportProgress">If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being takenwhen the tracking is stopped.</param>
        /// <param name = "treatGlobalObjectsAsRoots">Deprecated in favor of `exposeInternals`.</param>
        /// <param name = "captureNumericValue">If true, numerical values are included in the snapshot</param>
        /// <param name = "exposeInternals">If true, exposes internals of the snapshot.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> StopTrackingHeapObjectsAsync(bool? reportProgress = null, bool? treatGlobalObjectsAsRoots = null, bool? captureNumericValue = null, bool? exposeInternals = null)
        {
            ValidateStopTrackingHeapObjects(reportProgress, treatGlobalObjectsAsRoots, captureNumericValue, exposeInternals);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (reportProgress.HasValue)
            {
                dict.Add("reportProgress", reportProgress.Value);
            }

            if (treatGlobalObjectsAsRoots.HasValue)
            {
                dict.Add("treatGlobalObjectsAsRoots", treatGlobalObjectsAsRoots.Value);
            }

            if (captureNumericValue.HasValue)
            {
                dict.Add("captureNumericValue", captureNumericValue.Value);
            }

            if (exposeInternals.HasValue)
            {
                dict.Add("exposeInternals", exposeInternals.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("HeapProfiler.stopTrackingHeapObjects", dict);
        }

        partial void ValidateTakeHeapSnapshot(bool? reportProgress = null, bool? treatGlobalObjectsAsRoots = null, bool? captureNumericValue = null, bool? exposeInternals = null);
        /// <summary>
        /// TakeHeapSnapshot
        /// </summary>
        /// <param name = "reportProgress">If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken.</param>
        /// <param name = "treatGlobalObjectsAsRoots">If true, a raw snapshot without artificial roots will be generated.Deprecated in favor of `exposeInternals`.</param>
        /// <param name = "captureNumericValue">If true, numerical values are included in the snapshot</param>
        /// <param name = "exposeInternals">If true, exposes internals of the snapshot.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> TakeHeapSnapshotAsync(bool? reportProgress = null, bool? treatGlobalObjectsAsRoots = null, bool? captureNumericValue = null, bool? exposeInternals = null)
        {
            ValidateTakeHeapSnapshot(reportProgress, treatGlobalObjectsAsRoots, captureNumericValue, exposeInternals);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (reportProgress.HasValue)
            {
                dict.Add("reportProgress", reportProgress.Value);
            }

            if (treatGlobalObjectsAsRoots.HasValue)
            {
                dict.Add("treatGlobalObjectsAsRoots", treatGlobalObjectsAsRoots.Value);
            }

            if (captureNumericValue.HasValue)
            {
                dict.Add("captureNumericValue", captureNumericValue.Value);
            }

            if (exposeInternals.HasValue)
            {
                dict.Add("exposeInternals", exposeInternals.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("HeapProfiler.takeHeapSnapshot", dict);
        }
    }
}

namespace CefSharp.DevTools.Profiler
{
    /// <summary>
    /// GetBestEffortCoverageResponse
    /// </summary>
    [DataContract]
    public class GetBestEffortCoverageResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.Profiler.ScriptCoverage> result
        {
            get;
            set;
        }

        /// <summary>
        /// result
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.Profiler.ScriptCoverage> Result
        {
            get
            {
                return result;
            }
        }
    }
}

namespace CefSharp.DevTools.Profiler
{
    /// <summary>
    /// StartPreciseCoverageResponse
    /// </summary>
    [DataContract]
    public class StartPreciseCoverageResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal double timestamp
        {
            get;
            set;
        }

        /// <summary>
        /// timestamp
        /// </summary>
        public double Timestamp
        {
            get
            {
                return timestamp;
            }
        }
    }
}

namespace CefSharp.DevTools.Profiler
{
    /// <summary>
    /// StopResponse
    /// </summary>
    [DataContract]
    public class StopResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.Profiler.Profile profile
        {
            get;
            set;
        }

        /// <summary>
        /// profile
        /// </summary>
        public CefSharp.DevTools.Profiler.Profile Profile
        {
            get
            {
                return profile;
            }
        }
    }
}

namespace CefSharp.DevTools.Profiler
{
    /// <summary>
    /// TakePreciseCoverageResponse
    /// </summary>
    [DataContract]
    public class TakePreciseCoverageResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.Profiler.ScriptCoverage> result
        {
            get;
            set;
        }

        /// <summary>
        /// result
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.Profiler.ScriptCoverage> Result
        {
            get
            {
                return result;
            }
        }

        [DataMember]
        internal double timestamp
        {
            get;
            set;
        }

        /// <summary>
        /// timestamp
        /// </summary>
        public double Timestamp
        {
            get
            {
                return timestamp;
            }
        }
    }
}

namespace CefSharp.DevTools.Profiler
{
    using System.Linq;

    /// <summary>
    /// Profiler
    /// </summary>
    public partial class ProfilerClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// Profiler
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public ProfilerClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// ConsoleProfileFinished
        /// </summary>
        public event System.EventHandler<ConsoleProfileFinishedEventArgs> ConsoleProfileFinished
        {
            add
            {
                _client.AddEventHandler<ConsoleProfileFinishedEventArgs>("Profiler.consoleProfileFinished", value);
            }

            remove
            {
                _client.RemoveEventHandler<ConsoleProfileFinishedEventArgs>("Profiler.consoleProfileFinished", value);
            }
        }

        /// <summary>
        /// Sent when new profile recording is started using console.profile() call.
        /// </summary>
        public event System.EventHandler<ConsoleProfileStartedEventArgs> ConsoleProfileStarted
        {
            add
            {
                _client.AddEventHandler<ConsoleProfileStartedEventArgs>("Profiler.consoleProfileStarted", value);
            }

            remove
            {
                _client.RemoveEventHandler<ConsoleProfileStartedEventArgs>("Profiler.consoleProfileStarted", value);
            }
        }

        /// <summary>
        /// Reports coverage delta since the last poll (either from an event like this, or from
        /// `takePreciseCoverage` for the current isolate. May only be sent if precise code
        /// coverage has been started. This event can be trigged by the embedder to, for example,
        /// trigger collection of coverage data immediately at a certain point in time.
        /// </summary>
        public event System.EventHandler<PreciseCoverageDeltaUpdateEventArgs> PreciseCoverageDeltaUpdate
        {
            add
            {
                _client.AddEventHandler<PreciseCoverageDeltaUpdateEventArgs>("Profiler.preciseCoverageDeltaUpdate", value);
            }

            remove
            {
                _client.RemoveEventHandler<PreciseCoverageDeltaUpdateEventArgs>("Profiler.preciseCoverageDeltaUpdate", value);
            }
        }

        /// <summary>
        /// Disable
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DisableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Profiler.disable", dict);
        }

        /// <summary>
        /// Enable
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> EnableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Profiler.enable", dict);
        }

        /// <summary>
        /// Collect coverage data for the current isolate. The coverage data may be incomplete due to
        /// garbage collection.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetBestEffortCoverageResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetBestEffortCoverageResponse> GetBestEffortCoverageAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<GetBestEffortCoverageResponse>("Profiler.getBestEffortCoverage", dict);
        }

        partial void ValidateSetSamplingInterval(int interval);
        /// <summary>
        /// Changes CPU profiler sampling interval. Must be called before CPU profiles recording started.
        /// </summary>
        /// <param name = "interval">New sampling interval in microseconds.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetSamplingIntervalAsync(int interval)
        {
            ValidateSetSamplingInterval(interval);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("interval", interval);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Profiler.setSamplingInterval", dict);
        }

        /// <summary>
        /// Start
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> StartAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Profiler.start", dict);
        }

        partial void ValidateStartPreciseCoverage(bool? callCount = null, bool? detailed = null, bool? allowTriggeredUpdates = null);
        /// <summary>
        /// Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code
        /// coverage may be incomplete. Enabling prevents running optimized code and resets execution
        /// counters.
        /// </summary>
        /// <param name = "callCount">Collect accurate call counts beyond simple 'covered' or 'not covered'.</param>
        /// <param name = "detailed">Collect block-based coverage.</param>
        /// <param name = "allowTriggeredUpdates">Allow the backend to send updates on its own initiative</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;StartPreciseCoverageResponse&gt;</returns>
        public System.Threading.Tasks.Task<StartPreciseCoverageResponse> StartPreciseCoverageAsync(bool? callCount = null, bool? detailed = null, bool? allowTriggeredUpdates = null)
        {
            ValidateStartPreciseCoverage(callCount, detailed, allowTriggeredUpdates);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (callCount.HasValue)
            {
                dict.Add("callCount", callCount.Value);
            }

            if (detailed.HasValue)
            {
                dict.Add("detailed", detailed.Value);
            }

            if (allowTriggeredUpdates.HasValue)
            {
                dict.Add("allowTriggeredUpdates", allowTriggeredUpdates.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<StartPreciseCoverageResponse>("Profiler.startPreciseCoverage", dict);
        }

        /// <summary>
        /// Stop
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;StopResponse&gt;</returns>
        public System.Threading.Tasks.Task<StopResponse> StopAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<StopResponse>("Profiler.stop", dict);
        }

        /// <summary>
        /// Disable precise code coverage. Disabling releases unnecessary execution count records and allows
        /// executing optimized code.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> StopPreciseCoverageAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Profiler.stopPreciseCoverage", dict);
        }

        /// <summary>
        /// Collect coverage data for the current isolate, and resets execution counters. Precise code
        /// coverage needs to have started.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;TakePreciseCoverageResponse&gt;</returns>
        public System.Threading.Tasks.Task<TakePreciseCoverageResponse> TakePreciseCoverageAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<TakePreciseCoverageResponse>("Profiler.takePreciseCoverage", dict);
        }
    }
}

namespace CefSharp.DevTools.Runtime
{
    /// <summary>
    /// AwaitPromiseResponse
    /// </summary>
    [DataContract]
    public class AwaitPromiseResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.Runtime.RemoteObject result
        {
            get;
            set;
        }

        /// <summary>
        /// result
        /// </summary>
        public CefSharp.DevTools.Runtime.RemoteObject Result
        {
            get
            {
                return result;
            }
        }

        [DataMember]
        internal CefSharp.DevTools.Runtime.ExceptionDetails exceptionDetails
        {
            get;
            set;
        }

        /// <summary>
        /// exceptionDetails
        /// </summary>
        public CefSharp.DevTools.Runtime.ExceptionDetails ExceptionDetails
        {
            get
            {
                return exceptionDetails;
            }
        }
    }
}

namespace CefSharp.DevTools.Runtime
{
    /// <summary>
    /// CallFunctionOnResponse
    /// </summary>
    [DataContract]
    public class CallFunctionOnResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.Runtime.RemoteObject result
        {
            get;
            set;
        }

        /// <summary>
        /// result
        /// </summary>
        public CefSharp.DevTools.Runtime.RemoteObject Result
        {
            get
            {
                return result;
            }
        }

        [DataMember]
        internal CefSharp.DevTools.Runtime.ExceptionDetails exceptionDetails
        {
            get;
            set;
        }

        /// <summary>
        /// exceptionDetails
        /// </summary>
        public CefSharp.DevTools.Runtime.ExceptionDetails ExceptionDetails
        {
            get
            {
                return exceptionDetails;
            }
        }
    }
}

namespace CefSharp.DevTools.Runtime
{
    /// <summary>
    /// CompileScriptResponse
    /// </summary>
    [DataContract]
    public class CompileScriptResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string scriptId
        {
            get;
            set;
        }

        /// <summary>
        /// scriptId
        /// </summary>
        public string ScriptId
        {
            get
            {
                return scriptId;
            }
        }

        [DataMember]
        internal CefSharp.DevTools.Runtime.ExceptionDetails exceptionDetails
        {
            get;
            set;
        }

        /// <summary>
        /// exceptionDetails
        /// </summary>
        public CefSharp.DevTools.Runtime.ExceptionDetails ExceptionDetails
        {
            get
            {
                return exceptionDetails;
            }
        }
    }
}

namespace CefSharp.DevTools.Runtime
{
    /// <summary>
    /// EvaluateResponse
    /// </summary>
    [DataContract]
    public class EvaluateResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.Runtime.RemoteObject result
        {
            get;
            set;
        }

        /// <summary>
        /// result
        /// </summary>
        public CefSharp.DevTools.Runtime.RemoteObject Result
        {
            get
            {
                return result;
            }
        }

        [DataMember]
        internal CefSharp.DevTools.Runtime.ExceptionDetails exceptionDetails
        {
            get;
            set;
        }

        /// <summary>
        /// exceptionDetails
        /// </summary>
        public CefSharp.DevTools.Runtime.ExceptionDetails ExceptionDetails
        {
            get
            {
                return exceptionDetails;
            }
        }
    }
}

namespace CefSharp.DevTools.Runtime
{
    /// <summary>
    /// GetIsolateIdResponse
    /// </summary>
    [DataContract]
    public class GetIsolateIdResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string id
        {
            get;
            set;
        }

        /// <summary>
        /// id
        /// </summary>
        public string Id
        {
            get
            {
                return id;
            }
        }
    }
}

namespace CefSharp.DevTools.Runtime
{
    /// <summary>
    /// GetHeapUsageResponse
    /// </summary>
    [DataContract]
    public class GetHeapUsageResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal double usedSize
        {
            get;
            set;
        }

        /// <summary>
        /// usedSize
        /// </summary>
        public double UsedSize
        {
            get
            {
                return usedSize;
            }
        }

        [DataMember]
        internal double totalSize
        {
            get;
            set;
        }

        /// <summary>
        /// totalSize
        /// </summary>
        public double TotalSize
        {
            get
            {
                return totalSize;
            }
        }
    }
}

namespace CefSharp.DevTools.Runtime
{
    /// <summary>
    /// GetPropertiesResponse
    /// </summary>
    [DataContract]
    public class GetPropertiesResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.Runtime.PropertyDescriptor> result
        {
            get;
            set;
        }

        /// <summary>
        /// result
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.Runtime.PropertyDescriptor> Result
        {
            get
            {
                return result;
            }
        }

        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.Runtime.InternalPropertyDescriptor> internalProperties
        {
            get;
            set;
        }

        /// <summary>
        /// internalProperties
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.Runtime.InternalPropertyDescriptor> InternalProperties
        {
            get
            {
                return internalProperties;
            }
        }

        [DataMember]
        internal System.Collections.Generic.IList<CefSharp.DevTools.Runtime.PrivatePropertyDescriptor> privateProperties
        {
            get;
            set;
        }

        /// <summary>
        /// privateProperties
        /// </summary>
        public System.Collections.Generic.IList<CefSharp.DevTools.Runtime.PrivatePropertyDescriptor> PrivateProperties
        {
            get
            {
                return privateProperties;
            }
        }

        [DataMember]
        internal CefSharp.DevTools.Runtime.ExceptionDetails exceptionDetails
        {
            get;
            set;
        }

        /// <summary>
        /// exceptionDetails
        /// </summary>
        public CefSharp.DevTools.Runtime.ExceptionDetails ExceptionDetails
        {
            get
            {
                return exceptionDetails;
            }
        }
    }
}

namespace CefSharp.DevTools.Runtime
{
    /// <summary>
    /// GlobalLexicalScopeNamesResponse
    /// </summary>
    [DataContract]
    public class GlobalLexicalScopeNamesResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal string[] names
        {
            get;
            set;
        }

        /// <summary>
        /// names
        /// </summary>
        public string[] Names
        {
            get
            {
                return names;
            }
        }
    }
}

namespace CefSharp.DevTools.Runtime
{
    /// <summary>
    /// QueryObjectsResponse
    /// </summary>
    [DataContract]
    public class QueryObjectsResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.Runtime.RemoteObject objects
        {
            get;
            set;
        }

        /// <summary>
        /// objects
        /// </summary>
        public CefSharp.DevTools.Runtime.RemoteObject Objects
        {
            get
            {
                return objects;
            }
        }
    }
}

namespace CefSharp.DevTools.Runtime
{
    /// <summary>
    /// RunScriptResponse
    /// </summary>
    [DataContract]
    public class RunScriptResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.Runtime.RemoteObject result
        {
            get;
            set;
        }

        /// <summary>
        /// result
        /// </summary>
        public CefSharp.DevTools.Runtime.RemoteObject Result
        {
            get
            {
                return result;
            }
        }

        [DataMember]
        internal CefSharp.DevTools.Runtime.ExceptionDetails exceptionDetails
        {
            get;
            set;
        }

        /// <summary>
        /// exceptionDetails
        /// </summary>
        public CefSharp.DevTools.Runtime.ExceptionDetails ExceptionDetails
        {
            get
            {
                return exceptionDetails;
            }
        }
    }
}

namespace CefSharp.DevTools.Runtime
{
    /// <summary>
    /// GetExceptionDetailsResponse
    /// </summary>
    [DataContract]
    public class GetExceptionDetailsResponse : DevToolsDomainResponseBase
    {
        [DataMember]
        internal CefSharp.DevTools.Runtime.ExceptionDetails exceptionDetails
        {
            get;
            set;
        }

        /// <summary>
        /// exceptionDetails
        /// </summary>
        public CefSharp.DevTools.Runtime.ExceptionDetails ExceptionDetails
        {
            get
            {
                return exceptionDetails;
            }
        }
    }
}

namespace CefSharp.DevTools.Runtime
{
    using System.Linq;

    /// <summary>
    /// Runtime domain exposes JavaScript runtime by means of remote evaluation and mirror objects.
    /// Evaluation results are returned as mirror object that expose object type, string representation
    /// and unique identifier that can be used for further object reference. Original objects are
    /// maintained in memory unless they are either explicitly released or are released along with the
    /// other objects in their object group.
    /// </summary>
    public partial class RuntimeClient : DevToolsDomainBase
    {
        private CefSharp.DevTools.IDevToolsClient _client;
        /// <summary>
        /// Runtime
        /// </summary>
        /// <param name = "client">DevToolsClient</param>
        public RuntimeClient(CefSharp.DevTools.IDevToolsClient client)
        {
            _client = (client);
        }

        /// <summary>
        /// Notification is issued every time when binding is called.
        /// </summary>
        public event System.EventHandler<BindingCalledEventArgs> BindingCalled
        {
            add
            {
                _client.AddEventHandler<BindingCalledEventArgs>("Runtime.bindingCalled", value);
            }

            remove
            {
                _client.RemoveEventHandler<BindingCalledEventArgs>("Runtime.bindingCalled", value);
            }
        }

        /// <summary>
        /// Issued when console API was called.
        /// </summary>
        public event System.EventHandler<ConsoleAPICalledEventArgs> ConsoleAPICalled
        {
            add
            {
                _client.AddEventHandler<ConsoleAPICalledEventArgs>("Runtime.consoleAPICalled", value);
            }

            remove
            {
                _client.RemoveEventHandler<ConsoleAPICalledEventArgs>("Runtime.consoleAPICalled", value);
            }
        }

        /// <summary>
        /// Issued when unhandled exception was revoked.
        /// </summary>
        public event System.EventHandler<ExceptionRevokedEventArgs> ExceptionRevoked
        {
            add
            {
                _client.AddEventHandler<ExceptionRevokedEventArgs>("Runtime.exceptionRevoked", value);
            }

            remove
            {
                _client.RemoveEventHandler<ExceptionRevokedEventArgs>("Runtime.exceptionRevoked", value);
            }
        }

        /// <summary>
        /// Issued when exception was thrown and unhandled.
        /// </summary>
        public event System.EventHandler<ExceptionThrownEventArgs> ExceptionThrown
        {
            add
            {
                _client.AddEventHandler<ExceptionThrownEventArgs>("Runtime.exceptionThrown", value);
            }

            remove
            {
                _client.RemoveEventHandler<ExceptionThrownEventArgs>("Runtime.exceptionThrown", value);
            }
        }

        /// <summary>
        /// Issued when new execution context is created.
        /// </summary>
        public event System.EventHandler<ExecutionContextCreatedEventArgs> ExecutionContextCreated
        {
            add
            {
                _client.AddEventHandler<ExecutionContextCreatedEventArgs>("Runtime.executionContextCreated", value);
            }

            remove
            {
                _client.RemoveEventHandler<ExecutionContextCreatedEventArgs>("Runtime.executionContextCreated", value);
            }
        }

        /// <summary>
        /// Issued when execution context is destroyed.
        /// </summary>
        public event System.EventHandler<ExecutionContextDestroyedEventArgs> ExecutionContextDestroyed
        {
            add
            {
                _client.AddEventHandler<ExecutionContextDestroyedEventArgs>("Runtime.executionContextDestroyed", value);
            }

            remove
            {
                _client.RemoveEventHandler<ExecutionContextDestroyedEventArgs>("Runtime.executionContextDestroyed", value);
            }
        }

        /// <summary>
        /// Issued when all executionContexts were cleared in browser
        /// </summary>
        public event System.EventHandler<System.EventArgs> ExecutionContextsCleared
        {
            add
            {
                _client.AddEventHandler<System.EventArgs>("Runtime.executionContextsCleared", value);
            }

            remove
            {
                _client.RemoveEventHandler<System.EventArgs>("Runtime.executionContextsCleared", value);
            }
        }

        /// <summary>
        /// Issued when object should be inspected (for example, as a result of inspect() command line API
        /// call).
        /// </summary>
        public event System.EventHandler<InspectRequestedEventArgs> InspectRequested
        {
            add
            {
                _client.AddEventHandler<InspectRequestedEventArgs>("Runtime.inspectRequested", value);
            }

            remove
            {
                _client.RemoveEventHandler<InspectRequestedEventArgs>("Runtime.inspectRequested", value);
            }
        }

        partial void ValidateAwaitPromise(string promiseObjectId, bool? returnByValue = null, bool? generatePreview = null);
        /// <summary>
        /// Add handler to promise with given promise object id.
        /// </summary>
        /// <param name = "promiseObjectId">Identifier of the promise.</param>
        /// <param name = "returnByValue">Whether the result is expected to be a JSON object that should be sent by value.</param>
        /// <param name = "generatePreview">Whether preview should be generated for the result.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;AwaitPromiseResponse&gt;</returns>
        public System.Threading.Tasks.Task<AwaitPromiseResponse> AwaitPromiseAsync(string promiseObjectId, bool? returnByValue = null, bool? generatePreview = null)
        {
            ValidateAwaitPromise(promiseObjectId, returnByValue, generatePreview);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("promiseObjectId", promiseObjectId);
            if (returnByValue.HasValue)
            {
                dict.Add("returnByValue", returnByValue.Value);
            }

            if (generatePreview.HasValue)
            {
                dict.Add("generatePreview", generatePreview.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<AwaitPromiseResponse>("Runtime.awaitPromise", dict);
        }

        partial void ValidateCallFunctionOn(string functionDeclaration, string objectId = null, System.Collections.Generic.IList<CefSharp.DevTools.Runtime.CallArgument> arguments = null, bool? silent = null, bool? returnByValue = null, bool? generatePreview = null, bool? userGesture = null, bool? awaitPromise = null, int? executionContextId = null, string objectGroup = null, bool? throwOnSideEffect = null, string uniqueContextId = null, CefSharp.DevTools.Runtime.SerializationOptions serializationOptions = null);
        /// <summary>
        /// Calls function with given declaration on the given object. Object group of the result is
        /// inherited from the target object.
        /// </summary>
        /// <param name = "functionDeclaration">Declaration of the function to call.</param>
        /// <param name = "objectId">Identifier of the object to call function on. Either objectId or executionContextId shouldbe specified.</param>
        /// <param name = "arguments">Call arguments. All call arguments must belong to the same JavaScript world as the targetobject.</param>
        /// <param name = "silent">In silent mode exceptions thrown during evaluation are not reported and do not pauseexecution. Overrides `setPauseOnException` state.</param>
        /// <param name = "returnByValue">Whether the result is expected to be a JSON object which should be sent by value.Can be overriden by `serializationOptions`.</param>
        /// <param name = "generatePreview">Whether preview should be generated for the result.</param>
        /// <param name = "userGesture">Whether execution should be treated as initiated by user in the UI.</param>
        /// <param name = "awaitPromise">Whether execution should `await` for resulting value and return once awaited promise isresolved.</param>
        /// <param name = "executionContextId">Specifies execution context which global object will be used to call function on. EitherexecutionContextId or objectId should be specified.</param>
        /// <param name = "objectGroup">Symbolic group name that can be used to release multiple objects. If objectGroup is notspecified and objectId is, objectGroup will be inherited from object.</param>
        /// <param name = "throwOnSideEffect">Whether to throw an exception if side effect cannot be ruled out during evaluation.</param>
        /// <param name = "uniqueContextId">An alternative way to specify the execution context to call function on.Compared to contextId that may be reused across processes, this is guaranteed to besystem-unique, so it can be used to prevent accidental function callin context different than intended (e.g. as a result of navigation across processboundaries).This is mutually exclusive with `executionContextId`.</param>
        /// <param name = "serializationOptions">Specifies the result serialization. If provided, overrides`generatePreview` and `returnByValue`.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;CallFunctionOnResponse&gt;</returns>
        public System.Threading.Tasks.Task<CallFunctionOnResponse> CallFunctionOnAsync(string functionDeclaration, string objectId = null, System.Collections.Generic.IList<CefSharp.DevTools.Runtime.CallArgument> arguments = null, bool? silent = null, bool? returnByValue = null, bool? generatePreview = null, bool? userGesture = null, bool? awaitPromise = null, int? executionContextId = null, string objectGroup = null, bool? throwOnSideEffect = null, string uniqueContextId = null, CefSharp.DevTools.Runtime.SerializationOptions serializationOptions = null)
        {
            ValidateCallFunctionOn(functionDeclaration, objectId, arguments, silent, returnByValue, generatePreview, userGesture, awaitPromise, executionContextId, objectGroup, throwOnSideEffect, uniqueContextId, serializationOptions);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("functionDeclaration", functionDeclaration);
            if (!(string.IsNullOrEmpty(objectId)))
            {
                dict.Add("objectId", objectId);
            }

            if ((arguments) != (null))
            {
                dict.Add("arguments", arguments.Select(x => x.ToDictionary()));
            }

            if (silent.HasValue)
            {
                dict.Add("silent", silent.Value);
            }

            if (returnByValue.HasValue)
            {
                dict.Add("returnByValue", returnByValue.Value);
            }

            if (generatePreview.HasValue)
            {
                dict.Add("generatePreview", generatePreview.Value);
            }

            if (userGesture.HasValue)
            {
                dict.Add("userGesture", userGesture.Value);
            }

            if (awaitPromise.HasValue)
            {
                dict.Add("awaitPromise", awaitPromise.Value);
            }

            if (executionContextId.HasValue)
            {
                dict.Add("executionContextId", executionContextId.Value);
            }

            if (!(string.IsNullOrEmpty(objectGroup)))
            {
                dict.Add("objectGroup", objectGroup);
            }

            if (throwOnSideEffect.HasValue)
            {
                dict.Add("throwOnSideEffect", throwOnSideEffect.Value);
            }

            if (!(string.IsNullOrEmpty(uniqueContextId)))
            {
                dict.Add("uniqueContextId", uniqueContextId);
            }

            if ((serializationOptions) != (null))
            {
                dict.Add("serializationOptions", serializationOptions.ToDictionary());
            }

            return _client.ExecuteDevToolsMethodAsync<CallFunctionOnResponse>("Runtime.callFunctionOn", dict);
        }

        partial void ValidateCompileScript(string expression, string sourceURL, bool persistScript, int? executionContextId = null);
        /// <summary>
        /// Compiles expression.
        /// </summary>
        /// <param name = "expression">Expression to compile.</param>
        /// <param name = "sourceURL">Source url to be set for the script.</param>
        /// <param name = "persistScript">Specifies whether the compiled script should be persisted.</param>
        /// <param name = "executionContextId">Specifies in which execution context to perform script run. If the parameter is omitted theevaluation will be performed in the context of the inspected page.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;CompileScriptResponse&gt;</returns>
        public System.Threading.Tasks.Task<CompileScriptResponse> CompileScriptAsync(string expression, string sourceURL, bool persistScript, int? executionContextId = null)
        {
            ValidateCompileScript(expression, sourceURL, persistScript, executionContextId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("expression", expression);
            dict.Add("sourceURL", sourceURL);
            dict.Add("persistScript", persistScript);
            if (executionContextId.HasValue)
            {
                dict.Add("executionContextId", executionContextId.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<CompileScriptResponse>("Runtime.compileScript", dict);
        }

        /// <summary>
        /// Disables reporting of execution contexts creation.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DisableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Runtime.disable", dict);
        }

        /// <summary>
        /// Discards collected exceptions and console API calls.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> DiscardConsoleEntriesAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Runtime.discardConsoleEntries", dict);
        }

        /// <summary>
        /// Enables reporting of execution contexts creation by means of `executionContextCreated` event.
        /// When the reporting gets enabled the event will be sent immediately for each existing execution
        /// context.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> EnableAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Runtime.enable", dict);
        }

        partial void ValidateEvaluate(string expression, string objectGroup = null, bool? includeCommandLineAPI = null, bool? silent = null, int? contextId = null, bool? returnByValue = null, bool? generatePreview = null, bool? userGesture = null, bool? awaitPromise = null, bool? throwOnSideEffect = null, double? timeout = null, bool? disableBreaks = null, bool? replMode = null, bool? allowUnsafeEvalBlockedByCSP = null, string uniqueContextId = null, CefSharp.DevTools.Runtime.SerializationOptions serializationOptions = null);
        /// <summary>
        /// Evaluates expression on global object.
        /// </summary>
        /// <param name = "expression">Expression to evaluate.</param>
        /// <param name = "objectGroup">Symbolic group name that can be used to release multiple objects.</param>
        /// <param name = "includeCommandLineAPI">Determines whether Command Line API should be available during the evaluation.</param>
        /// <param name = "silent">In silent mode exceptions thrown during evaluation are not reported and do not pauseexecution. Overrides `setPauseOnException` state.</param>
        /// <param name = "contextId">Specifies in which execution context to perform evaluation. If the parameter is omitted theevaluation will be performed in the context of the inspected page.This is mutually exclusive with `uniqueContextId`, which offers analternative way to identify the execution context that is more reliablein a multi-process environment.</param>
        /// <param name = "returnByValue">Whether the result is expected to be a JSON object that should be sent by value.</param>
        /// <param name = "generatePreview">Whether preview should be generated for the result.</param>
        /// <param name = "userGesture">Whether execution should be treated as initiated by user in the UI.</param>
        /// <param name = "awaitPromise">Whether execution should `await` for resulting value and return once awaited promise isresolved.</param>
        /// <param name = "throwOnSideEffect">Whether to throw an exception if side effect cannot be ruled out during evaluation.This implies `disableBreaks` below.</param>
        /// <param name = "timeout">Terminate execution after timing out (number of milliseconds).</param>
        /// <param name = "disableBreaks">Disable breakpoints during execution.</param>
        /// <param name = "replMode">Setting this flag to true enables `let` re-declaration and top-level `await`.Note that `let` variables can only be re-declared if they originate from`replMode` themselves.</param>
        /// <param name = "allowUnsafeEvalBlockedByCSP">The Content Security Policy (CSP) for the target might block 'unsafe-eval'which includes eval(), Function(), setTimeout() and setInterval()when called with non-callable arguments. This flag bypasses CSP for thisevaluation and allows unsafe-eval. Defaults to true.</param>
        /// <param name = "uniqueContextId">An alternative way to specify the execution context to evaluate in.Compared to contextId that may be reused across processes, this is guaranteed to besystem-unique, so it can be used to prevent accidental evaluation of the expressionin context different than intended (e.g. as a result of navigation across processboundaries).This is mutually exclusive with `contextId`.</param>
        /// <param name = "serializationOptions">Specifies the result serialization. If provided, overrides`generatePreview` and `returnByValue`.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;EvaluateResponse&gt;</returns>
        public System.Threading.Tasks.Task<EvaluateResponse> EvaluateAsync(string expression, string objectGroup = null, bool? includeCommandLineAPI = null, bool? silent = null, int? contextId = null, bool? returnByValue = null, bool? generatePreview = null, bool? userGesture = null, bool? awaitPromise = null, bool? throwOnSideEffect = null, double? timeout = null, bool? disableBreaks = null, bool? replMode = null, bool? allowUnsafeEvalBlockedByCSP = null, string uniqueContextId = null, CefSharp.DevTools.Runtime.SerializationOptions serializationOptions = null)
        {
            ValidateEvaluate(expression, objectGroup, includeCommandLineAPI, silent, contextId, returnByValue, generatePreview, userGesture, awaitPromise, throwOnSideEffect, timeout, disableBreaks, replMode, allowUnsafeEvalBlockedByCSP, uniqueContextId, serializationOptions);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("expression", expression);
            if (!(string.IsNullOrEmpty(objectGroup)))
            {
                dict.Add("objectGroup", objectGroup);
            }

            if (includeCommandLineAPI.HasValue)
            {
                dict.Add("includeCommandLineAPI", includeCommandLineAPI.Value);
            }

            if (silent.HasValue)
            {
                dict.Add("silent", silent.Value);
            }

            if (contextId.HasValue)
            {
                dict.Add("contextId", contextId.Value);
            }

            if (returnByValue.HasValue)
            {
                dict.Add("returnByValue", returnByValue.Value);
            }

            if (generatePreview.HasValue)
            {
                dict.Add("generatePreview", generatePreview.Value);
            }

            if (userGesture.HasValue)
            {
                dict.Add("userGesture", userGesture.Value);
            }

            if (awaitPromise.HasValue)
            {
                dict.Add("awaitPromise", awaitPromise.Value);
            }

            if (throwOnSideEffect.HasValue)
            {
                dict.Add("throwOnSideEffect", throwOnSideEffect.Value);
            }

            if (timeout.HasValue)
            {
                dict.Add("timeout", timeout.Value);
            }

            if (disableBreaks.HasValue)
            {
                dict.Add("disableBreaks", disableBreaks.Value);
            }

            if (replMode.HasValue)
            {
                dict.Add("replMode", replMode.Value);
            }

            if (allowUnsafeEvalBlockedByCSP.HasValue)
            {
                dict.Add("allowUnsafeEvalBlockedByCSP", allowUnsafeEvalBlockedByCSP.Value);
            }

            if (!(string.IsNullOrEmpty(uniqueContextId)))
            {
                dict.Add("uniqueContextId", uniqueContextId);
            }

            if ((serializationOptions) != (null))
            {
                dict.Add("serializationOptions", serializationOptions.ToDictionary());
            }

            return _client.ExecuteDevToolsMethodAsync<EvaluateResponse>("Runtime.evaluate", dict);
        }

        /// <summary>
        /// Returns the isolate id.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetIsolateIdResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetIsolateIdResponse> GetIsolateIdAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<GetIsolateIdResponse>("Runtime.getIsolateId", dict);
        }

        /// <summary>
        /// Returns the JavaScript heap usage.
        /// It is the total usage of the corresponding isolate not scoped to a particular Runtime.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetHeapUsageResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetHeapUsageResponse> GetHeapUsageAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<GetHeapUsageResponse>("Runtime.getHeapUsage", dict);
        }

        partial void ValidateGetProperties(string objectId, bool? ownProperties = null, bool? accessorPropertiesOnly = null, bool? generatePreview = null, bool? nonIndexedPropertiesOnly = null);
        /// <summary>
        /// Returns properties of a given object. Object group of the result is inherited from the target
        /// object.
        /// </summary>
        /// <param name = "objectId">Identifier of the object to return properties for.</param>
        /// <param name = "ownProperties">If true, returns properties belonging only to the element itself, not to its prototypechain.</param>
        /// <param name = "accessorPropertiesOnly">If true, returns accessor properties (with getter/setter) only; internal properties are notreturned either.</param>
        /// <param name = "generatePreview">Whether preview should be generated for the results.</param>
        /// <param name = "nonIndexedPropertiesOnly">If true, returns non-indexed properties only.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetPropertiesResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetPropertiesResponse> GetPropertiesAsync(string objectId, bool? ownProperties = null, bool? accessorPropertiesOnly = null, bool? generatePreview = null, bool? nonIndexedPropertiesOnly = null)
        {
            ValidateGetProperties(objectId, ownProperties, accessorPropertiesOnly, generatePreview, nonIndexedPropertiesOnly);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("objectId", objectId);
            if (ownProperties.HasValue)
            {
                dict.Add("ownProperties", ownProperties.Value);
            }

            if (accessorPropertiesOnly.HasValue)
            {
                dict.Add("accessorPropertiesOnly", accessorPropertiesOnly.Value);
            }

            if (generatePreview.HasValue)
            {
                dict.Add("generatePreview", generatePreview.Value);
            }

            if (nonIndexedPropertiesOnly.HasValue)
            {
                dict.Add("nonIndexedPropertiesOnly", nonIndexedPropertiesOnly.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<GetPropertiesResponse>("Runtime.getProperties", dict);
        }

        partial void ValidateGlobalLexicalScopeNames(int? executionContextId = null);
        /// <summary>
        /// Returns all let, const and class variables from global scope.
        /// </summary>
        /// <param name = "executionContextId">Specifies in which execution context to lookup global scope variables.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GlobalLexicalScopeNamesResponse&gt;</returns>
        public System.Threading.Tasks.Task<GlobalLexicalScopeNamesResponse> GlobalLexicalScopeNamesAsync(int? executionContextId = null)
        {
            ValidateGlobalLexicalScopeNames(executionContextId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            if (executionContextId.HasValue)
            {
                dict.Add("executionContextId", executionContextId.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<GlobalLexicalScopeNamesResponse>("Runtime.globalLexicalScopeNames", dict);
        }

        partial void ValidateQueryObjects(string prototypeObjectId, string objectGroup = null);
        /// <summary>
        /// QueryObjects
        /// </summary>
        /// <param name = "prototypeObjectId">Identifier of the prototype to return objects for.</param>
        /// <param name = "objectGroup">Symbolic group name that can be used to release the results.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;QueryObjectsResponse&gt;</returns>
        public System.Threading.Tasks.Task<QueryObjectsResponse> QueryObjectsAsync(string prototypeObjectId, string objectGroup = null)
        {
            ValidateQueryObjects(prototypeObjectId, objectGroup);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("prototypeObjectId", prototypeObjectId);
            if (!(string.IsNullOrEmpty(objectGroup)))
            {
                dict.Add("objectGroup", objectGroup);
            }

            return _client.ExecuteDevToolsMethodAsync<QueryObjectsResponse>("Runtime.queryObjects", dict);
        }

        partial void ValidateReleaseObject(string objectId);
        /// <summary>
        /// Releases remote object with given id.
        /// </summary>
        /// <param name = "objectId">Identifier of the object to release.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ReleaseObjectAsync(string objectId)
        {
            ValidateReleaseObject(objectId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("objectId", objectId);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Runtime.releaseObject", dict);
        }

        partial void ValidateReleaseObjectGroup(string objectGroup);
        /// <summary>
        /// Releases all remote objects that belong to a given group.
        /// </summary>
        /// <param name = "objectGroup">Symbolic object group name.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> ReleaseObjectGroupAsync(string objectGroup)
        {
            ValidateReleaseObjectGroup(objectGroup);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("objectGroup", objectGroup);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Runtime.releaseObjectGroup", dict);
        }

        /// <summary>
        /// Tells inspected instance to run if it was waiting for debugger to attach.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> RunIfWaitingForDebuggerAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Runtime.runIfWaitingForDebugger", dict);
        }

        partial void ValidateRunScript(string scriptId, int? executionContextId = null, string objectGroup = null, bool? silent = null, bool? includeCommandLineAPI = null, bool? returnByValue = null, bool? generatePreview = null, bool? awaitPromise = null);
        /// <summary>
        /// Runs script with given id in a given context.
        /// </summary>
        /// <param name = "scriptId">Id of the script to run.</param>
        /// <param name = "executionContextId">Specifies in which execution context to perform script run. If the parameter is omitted theevaluation will be performed in the context of the inspected page.</param>
        /// <param name = "objectGroup">Symbolic group name that can be used to release multiple objects.</param>
        /// <param name = "silent">In silent mode exceptions thrown during evaluation are not reported and do not pauseexecution. Overrides `setPauseOnException` state.</param>
        /// <param name = "includeCommandLineAPI">Determines whether Command Line API should be available during the evaluation.</param>
        /// <param name = "returnByValue">Whether the result is expected to be a JSON object which should be sent by value.</param>
        /// <param name = "generatePreview">Whether preview should be generated for the result.</param>
        /// <param name = "awaitPromise">Whether execution should `await` for resulting value and return once awaited promise isresolved.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;RunScriptResponse&gt;</returns>
        public System.Threading.Tasks.Task<RunScriptResponse> RunScriptAsync(string scriptId, int? executionContextId = null, string objectGroup = null, bool? silent = null, bool? includeCommandLineAPI = null, bool? returnByValue = null, bool? generatePreview = null, bool? awaitPromise = null)
        {
            ValidateRunScript(scriptId, executionContextId, objectGroup, silent, includeCommandLineAPI, returnByValue, generatePreview, awaitPromise);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("scriptId", scriptId);
            if (executionContextId.HasValue)
            {
                dict.Add("executionContextId", executionContextId.Value);
            }

            if (!(string.IsNullOrEmpty(objectGroup)))
            {
                dict.Add("objectGroup", objectGroup);
            }

            if (silent.HasValue)
            {
                dict.Add("silent", silent.Value);
            }

            if (includeCommandLineAPI.HasValue)
            {
                dict.Add("includeCommandLineAPI", includeCommandLineAPI.Value);
            }

            if (returnByValue.HasValue)
            {
                dict.Add("returnByValue", returnByValue.Value);
            }

            if (generatePreview.HasValue)
            {
                dict.Add("generatePreview", generatePreview.Value);
            }

            if (awaitPromise.HasValue)
            {
                dict.Add("awaitPromise", awaitPromise.Value);
            }

            return _client.ExecuteDevToolsMethodAsync<RunScriptResponse>("Runtime.runScript", dict);
        }

        partial void ValidateSetAsyncCallStackDepth(int maxDepth);
        /// <summary>
        /// Enables or disables async call stacks tracking.
        /// </summary>
        /// <param name = "maxDepth">Maximum depth of async call stacks. Setting to `0` will effectively disable collecting asynccall stacks (default).</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetAsyncCallStackDepthAsync(int maxDepth)
        {
            ValidateSetAsyncCallStackDepth(maxDepth);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("maxDepth", maxDepth);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Runtime.setAsyncCallStackDepth", dict);
        }

        partial void ValidateSetCustomObjectFormatterEnabled(bool enabled);
        /// <summary>
        /// SetCustomObjectFormatterEnabled
        /// </summary>
        /// <param name = "enabled">enabled</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetCustomObjectFormatterEnabledAsync(bool enabled)
        {
            ValidateSetCustomObjectFormatterEnabled(enabled);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("enabled", enabled);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Runtime.setCustomObjectFormatterEnabled", dict);
        }

        partial void ValidateSetMaxCallStackSizeToCapture(int size);
        /// <summary>
        /// SetMaxCallStackSizeToCapture
        /// </summary>
        /// <param name = "size">size</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> SetMaxCallStackSizeToCaptureAsync(int size)
        {
            ValidateSetMaxCallStackSizeToCapture(size);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("size", size);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Runtime.setMaxCallStackSizeToCapture", dict);
        }

        /// <summary>
        /// Terminate current or next JavaScript execution.
        /// Will cancel the termination when the outer-most script execution ends.
        /// </summary>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> TerminateExecutionAsync()
        {
            System.Collections.Generic.Dictionary<string, object> dict = null;
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Runtime.terminateExecution", dict);
        }

        partial void ValidateAddBinding(string name, int? executionContextId = null, string executionContextName = null);
        /// <summary>
        /// If executionContextId is empty, adds binding with the given name on the
        /// global objects of all inspected contexts, including those created later,
        /// bindings survive reloads.
        /// Binding function takes exactly one argument, this argument should be string,
        /// in case of any other input, function throws an exception.
        /// Each binding function call produces Runtime.bindingCalled notification.
        /// </summary>
        /// <param name = "name">name</param>
        /// <param name = "executionContextId">If specified, the binding would only be exposed to the specifiedexecution context. If omitted and `executionContextName` is not set,the binding is exposed to all execution contexts of the target.This parameter is mutually exclusive with `executionContextName`.Deprecated in favor of `executionContextName` due to an unclear use caseand bugs in implementation (crbug.com/1169639). `executionContextId` will beremoved in the future.</param>
        /// <param name = "executionContextName">If specified, the binding is exposed to the executionContext withmatching name, even for contexts created after the binding is added.See also `ExecutionContext.name` and `worldName` parameter to`Page.addScriptToEvaluateOnNewDocument`.This parameter is mutually exclusive with `executionContextId`.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> AddBindingAsync(string name, int? executionContextId = null, string executionContextName = null)
        {
            ValidateAddBinding(name, executionContextId, executionContextName);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("name", name);
            if (executionContextId.HasValue)
            {
                dict.Add("executionContextId", executionContextId.Value);
            }

            if (!(string.IsNullOrEmpty(executionContextName)))
            {
                dict.Add("executionContextName", executionContextName);
            }

            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Runtime.addBinding", dict);
        }

        partial void ValidateRemoveBinding(string name);
        /// <summary>
        /// This method does not remove binding function from global object but
        /// unsubscribes current runtime agent from Runtime.bindingCalled notifications.
        /// </summary>
        /// <param name = "name">name</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;DevToolsMethodResponse&gt;</returns>
        public System.Threading.Tasks.Task<DevToolsMethodResponse> RemoveBindingAsync(string name)
        {
            ValidateRemoveBinding(name);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("name", name);
            return _client.ExecuteDevToolsMethodAsync<DevToolsMethodResponse>("Runtime.removeBinding", dict);
        }

        partial void ValidateGetExceptionDetails(string errorObjectId);
        /// <summary>
        /// This method tries to lookup and populate exception details for a
        /// JavaScript Error object.
        /// Note that the stackTrace portion of the resulting exceptionDetails will
        /// only be populated if the Runtime domain was enabled at the time when the
        /// Error was thrown.
        /// </summary>
        /// <param name = "errorObjectId">The error object for which to resolve the exception details.</param>
        /// <returns>returns System.Threading.Tasks.Task&lt;GetExceptionDetailsResponse&gt;</returns>
        public System.Threading.Tasks.Task<GetExceptionDetailsResponse> GetExceptionDetailsAsync(string errorObjectId)
        {
            ValidateGetExceptionDetails(errorObjectId);
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            dict.Add("errorObjectId", errorObjectId);
            return _client.ExecuteDevToolsMethodAsync<GetExceptionDetailsResponse>("Runtime.getExceptionDetails", dict);
        }
    }
}

namespace CefSharp.DevTools
{
    /// <summary>
    /// Generated DevToolsClient methods
    /// </summary>
    public partial class DevToolsClient
    {
        private CefSharp.DevTools.Accessibility.AccessibilityClient _Accessibility;
        /// <summary>
        /// Accessibility
        /// </summary>
        public CefSharp.DevTools.Accessibility.AccessibilityClient Accessibility
        {
            get
            {
                if ((_Accessibility) == (null))
                {
                    _Accessibility = (new CefSharp.DevTools.Accessibility.AccessibilityClient(this));
                }

                return _Accessibility;
            }
        }

        private CefSharp.DevTools.Animation.AnimationClient _Animation;
        /// <summary>
        /// Animation
        /// </summary>
        public CefSharp.DevTools.Animation.AnimationClient Animation
        {
            get
            {
                if ((_Animation) == (null))
                {
                    _Animation = (new CefSharp.DevTools.Animation.AnimationClient(this));
                }

                return _Animation;
            }
        }

        private CefSharp.DevTools.Audits.AuditsClient _Audits;
        /// <summary>
        /// Audits domain allows investigation of page violations and possible improvements.
        /// </summary>
        public CefSharp.DevTools.Audits.AuditsClient Audits
        {
            get
            {
                if ((_Audits) == (null))
                {
                    _Audits = (new CefSharp.DevTools.Audits.AuditsClient(this));
                }

                return _Audits;
            }
        }

        private CefSharp.DevTools.Autofill.AutofillClient _Autofill;
        /// <summary>
        /// Defines commands and events for Autofill.
        /// </summary>
        public CefSharp.DevTools.Autofill.AutofillClient Autofill
        {
            get
            {
                if ((_Autofill) == (null))
                {
                    _Autofill = (new CefSharp.DevTools.Autofill.AutofillClient(this));
                }

                return _Autofill;
            }
        }

        private CefSharp.DevTools.BackgroundService.BackgroundServiceClient _BackgroundService;
        /// <summary>
        /// Defines events for background web platform features.
        /// </summary>
        public CefSharp.DevTools.BackgroundService.BackgroundServiceClient BackgroundService
        {
            get
            {
                if ((_BackgroundService) == (null))
                {
                    _BackgroundService = (new CefSharp.DevTools.BackgroundService.BackgroundServiceClient(this));
                }

                return _BackgroundService;
            }
        }

        private CefSharp.DevTools.Browser.BrowserClient _Browser;
        /// <summary>
        /// The Browser domain defines methods and events for browser managing.
        /// </summary>
        public CefSharp.DevTools.Browser.BrowserClient Browser
        {
            get
            {
                if ((_Browser) == (null))
                {
                    _Browser = (new CefSharp.DevTools.Browser.BrowserClient(this));
                }

                return _Browser;
            }
        }

        private CefSharp.DevTools.CSS.CSSClient _CSS;
        /// <summary>
        /// This domain exposes CSS read/write operations. All CSS objects (stylesheets, rules, and styles)
        /// have an associated `id` used in subsequent operations on the related object. Each object type has
        /// a specific `id` structure, and those are not interchangeable between objects of different kinds.
        /// CSS objects can be loaded using the `get*ForNode()` calls (which accept a DOM node id). A client
        /// can also keep track of stylesheets via the `styleSheetAdded`/`styleSheetRemoved` events and
        /// subsequently load the required stylesheet contents using the `getStyleSheet[Text]()` methods.
        /// </summary>
        public CefSharp.DevTools.CSS.CSSClient CSS
        {
            get
            {
                if ((_CSS) == (null))
                {
                    _CSS = (new CefSharp.DevTools.CSS.CSSClient(this));
                }

                return _CSS;
            }
        }

        private CefSharp.DevTools.CacheStorage.CacheStorageClient _CacheStorage;
        /// <summary>
        /// CacheStorage
        /// </summary>
        public CefSharp.DevTools.CacheStorage.CacheStorageClient CacheStorage
        {
            get
            {
                if ((_CacheStorage) == (null))
                {
                    _CacheStorage = (new CefSharp.DevTools.CacheStorage.CacheStorageClient(this));
                }

                return _CacheStorage;
            }
        }

        private CefSharp.DevTools.Cast.CastClient _Cast;
        /// <summary>
        /// A domain for interacting with Cast, Presentation API, and Remote Playback API
        /// functionalities.
        /// </summary>
        public CefSharp.DevTools.Cast.CastClient Cast
        {
            get
            {
                if ((_Cast) == (null))
                {
                    _Cast = (new CefSharp.DevTools.Cast.CastClient(this));
                }

                return _Cast;
            }
        }

        private CefSharp.DevTools.DOM.DOMClient _DOM;
        /// <summary>
        /// This domain exposes DOM read/write operations. Each DOM Node is represented with its mirror object
        /// that has an `id`. This `id` can be used to get additional information on the Node, resolve it into
        /// the JavaScript object wrapper, etc. It is important that client receives DOM events only for the
        /// nodes that are known to the client. Backend keeps track of the nodes that were sent to the client
        /// and never sends the same node twice. It is client&apos;s responsibility to collect information about
        /// the nodes that were sent to the client. Note that `iframe` owner elements will return
        /// corresponding document elements as their child nodes.
        /// </summary>
        public CefSharp.DevTools.DOM.DOMClient DOM
        {
            get
            {
                if ((_DOM) == (null))
                {
                    _DOM = (new CefSharp.DevTools.DOM.DOMClient(this));
                }

                return _DOM;
            }
        }

        private CefSharp.DevTools.DOMDebugger.DOMDebuggerClient _DOMDebugger;
        /// <summary>
        /// DOM debugging allows setting breakpoints on particular DOM operations and events. JavaScript
        /// execution will stop on these operations as if there was a regular breakpoint set.
        /// </summary>
        public CefSharp.DevTools.DOMDebugger.DOMDebuggerClient DOMDebugger
        {
            get
            {
                if ((_DOMDebugger) == (null))
                {
                    _DOMDebugger = (new CefSharp.DevTools.DOMDebugger.DOMDebuggerClient(this));
                }

                return _DOMDebugger;
            }
        }

        private CefSharp.DevTools.EventBreakpoints.EventBreakpointsClient _EventBreakpoints;
        /// <summary>
        /// EventBreakpoints permits setting JavaScript breakpoints on operations and events
        /// occurring in native code invoked from JavaScript. Once breakpoint is hit, it is
        /// reported through Debugger domain, similarly to regular breakpoints being hit.
        /// </summary>
        public CefSharp.DevTools.EventBreakpoints.EventBreakpointsClient EventBreakpoints
        {
            get
            {
                if ((_EventBreakpoints) == (null))
                {
                    _EventBreakpoints = (new CefSharp.DevTools.EventBreakpoints.EventBreakpointsClient(this));
                }

                return _EventBreakpoints;
            }
        }

        private CefSharp.DevTools.DOMSnapshot.DOMSnapshotClient _DOMSnapshot;
        /// <summary>
        /// This domain facilitates obtaining document snapshots with DOM, layout, and style information.
        /// </summary>
        public CefSharp.DevTools.DOMSnapshot.DOMSnapshotClient DOMSnapshot
        {
            get
            {
                if ((_DOMSnapshot) == (null))
                {
                    _DOMSnapshot = (new CefSharp.DevTools.DOMSnapshot.DOMSnapshotClient(this));
                }

                return _DOMSnapshot;
            }
        }

        private CefSharp.DevTools.DOMStorage.DOMStorageClient _DOMStorage;
        /// <summary>
        /// Query and modify DOM storage.
        /// </summary>
        public CefSharp.DevTools.DOMStorage.DOMStorageClient DOMStorage
        {
            get
            {
                if ((_DOMStorage) == (null))
                {
                    _DOMStorage = (new CefSharp.DevTools.DOMStorage.DOMStorageClient(this));
                }

                return _DOMStorage;
            }
        }

        private CefSharp.DevTools.Database.DatabaseClient _Database;
        /// <summary>
        /// Database
        /// </summary>
        public CefSharp.DevTools.Database.DatabaseClient Database
        {
            get
            {
                if ((_Database) == (null))
                {
                    _Database = (new CefSharp.DevTools.Database.DatabaseClient(this));
                }

                return _Database;
            }
        }

        private CefSharp.DevTools.DeviceOrientation.DeviceOrientationClient _DeviceOrientation;
        /// <summary>
        /// DeviceOrientation
        /// </summary>
        public CefSharp.DevTools.DeviceOrientation.DeviceOrientationClient DeviceOrientation
        {
            get
            {
                if ((_DeviceOrientation) == (null))
                {
                    _DeviceOrientation = (new CefSharp.DevTools.DeviceOrientation.DeviceOrientationClient(this));
                }

                return _DeviceOrientation;
            }
        }

        private CefSharp.DevTools.Emulation.EmulationClient _Emulation;
        /// <summary>
        /// This domain emulates different environments for the page.
        /// </summary>
        public CefSharp.DevTools.Emulation.EmulationClient Emulation
        {
            get
            {
                if ((_Emulation) == (null))
                {
                    _Emulation = (new CefSharp.DevTools.Emulation.EmulationClient(this));
                }

                return _Emulation;
            }
        }

        private CefSharp.DevTools.HeadlessExperimental.HeadlessExperimentalClient _HeadlessExperimental;
        /// <summary>
        /// This domain provides experimental commands only supported in headless mode.
        /// </summary>
        public CefSharp.DevTools.HeadlessExperimental.HeadlessExperimentalClient HeadlessExperimental
        {
            get
            {
                if ((_HeadlessExperimental) == (null))
                {
                    _HeadlessExperimental = (new CefSharp.DevTools.HeadlessExperimental.HeadlessExperimentalClient(this));
                }

                return _HeadlessExperimental;
            }
        }

        private CefSharp.DevTools.IO.IOClient _IO;
        /// <summary>
        /// Input/Output operations for streams produced by DevTools.
        /// </summary>
        public CefSharp.DevTools.IO.IOClient IO
        {
            get
            {
                if ((_IO) == (null))
                {
                    _IO = (new CefSharp.DevTools.IO.IOClient(this));
                }

                return _IO;
            }
        }

        private CefSharp.DevTools.IndexedDB.IndexedDBClient _IndexedDB;
        /// <summary>
        /// IndexedDB
        /// </summary>
        public CefSharp.DevTools.IndexedDB.IndexedDBClient IndexedDB
        {
            get
            {
                if ((_IndexedDB) == (null))
                {
                    _IndexedDB = (new CefSharp.DevTools.IndexedDB.IndexedDBClient(this));
                }

                return _IndexedDB;
            }
        }

        private CefSharp.DevTools.Input.InputClient _Input;
        /// <summary>
        /// Input
        /// </summary>
        public CefSharp.DevTools.Input.InputClient Input
        {
            get
            {
                if ((_Input) == (null))
                {
                    _Input = (new CefSharp.DevTools.Input.InputClient(this));
                }

                return _Input;
            }
        }

        private CefSharp.DevTools.Inspector.InspectorClient _Inspector;
        /// <summary>
        /// Inspector
        /// </summary>
        public CefSharp.DevTools.Inspector.InspectorClient Inspector
        {
            get
            {
                if ((_Inspector) == (null))
                {
                    _Inspector = (new CefSharp.DevTools.Inspector.InspectorClient(this));
                }

                return _Inspector;
            }
        }

        private CefSharp.DevTools.LayerTree.LayerTreeClient _LayerTree;
        /// <summary>
        /// LayerTree
        /// </summary>
        public CefSharp.DevTools.LayerTree.LayerTreeClient LayerTree
        {
            get
            {
                if ((_LayerTree) == (null))
                {
                    _LayerTree = (new CefSharp.DevTools.LayerTree.LayerTreeClient(this));
                }

                return _LayerTree;
            }
        }

        private CefSharp.DevTools.Log.LogClient _Log;
        /// <summary>
        /// Provides access to log entries.
        /// </summary>
        public CefSharp.DevTools.Log.LogClient Log
        {
            get
            {
                if ((_Log) == (null))
                {
                    _Log = (new CefSharp.DevTools.Log.LogClient(this));
                }

                return _Log;
            }
        }

        private CefSharp.DevTools.Memory.MemoryClient _Memory;
        /// <summary>
        /// Memory
        /// </summary>
        public CefSharp.DevTools.Memory.MemoryClient Memory
        {
            get
            {
                if ((_Memory) == (null))
                {
                    _Memory = (new CefSharp.DevTools.Memory.MemoryClient(this));
                }

                return _Memory;
            }
        }

        private CefSharp.DevTools.Network.NetworkClient _Network;
        /// <summary>
        /// Network domain allows tracking network activities of the page. It exposes information about http,
        /// file, data and other requests and responses, their headers, bodies, timing, etc.
        /// </summary>
        public CefSharp.DevTools.Network.NetworkClient Network
        {
            get
            {
                if ((_Network) == (null))
                {
                    _Network = (new CefSharp.DevTools.Network.NetworkClient(this));
                }

                return _Network;
            }
        }

        private CefSharp.DevTools.Overlay.OverlayClient _Overlay;
        /// <summary>
        /// This domain provides various functionality related to drawing atop the inspected page.
        /// </summary>
        public CefSharp.DevTools.Overlay.OverlayClient Overlay
        {
            get
            {
                if ((_Overlay) == (null))
                {
                    _Overlay = (new CefSharp.DevTools.Overlay.OverlayClient(this));
                }

                return _Overlay;
            }
        }

        private CefSharp.DevTools.Page.PageClient _Page;
        /// <summary>
        /// Actions and events related to the inspected page belong to the page domain.
        /// </summary>
        public CefSharp.DevTools.Page.PageClient Page
        {
            get
            {
                if ((_Page) == (null))
                {
                    _Page = (new CefSharp.DevTools.Page.PageClient(this));
                }

                return _Page;
            }
        }

        private CefSharp.DevTools.Performance.PerformanceClient _Performance;
        /// <summary>
        /// Performance
        /// </summary>
        public CefSharp.DevTools.Performance.PerformanceClient Performance
        {
            get
            {
                if ((_Performance) == (null))
                {
                    _Performance = (new CefSharp.DevTools.Performance.PerformanceClient(this));
                }

                return _Performance;
            }
        }

        private CefSharp.DevTools.PerformanceTimeline.PerformanceTimelineClient _PerformanceTimeline;
        /// <summary>
        /// Reporting of performance timeline events, as specified in
        /// https://w3c.github.io/performance-timeline/#dom-performanceobserver.
        /// </summary>
        public CefSharp.DevTools.PerformanceTimeline.PerformanceTimelineClient PerformanceTimeline
        {
            get
            {
                if ((_PerformanceTimeline) == (null))
                {
                    _PerformanceTimeline = (new CefSharp.DevTools.PerformanceTimeline.PerformanceTimelineClient(this));
                }

                return _PerformanceTimeline;
            }
        }

        private CefSharp.DevTools.Security.SecurityClient _Security;
        /// <summary>
        /// Security
        /// </summary>
        public CefSharp.DevTools.Security.SecurityClient Security
        {
            get
            {
                if ((_Security) == (null))
                {
                    _Security = (new CefSharp.DevTools.Security.SecurityClient(this));
                }

                return _Security;
            }
        }

        private CefSharp.DevTools.ServiceWorker.ServiceWorkerClient _ServiceWorker;
        /// <summary>
        /// ServiceWorker
        /// </summary>
        public CefSharp.DevTools.ServiceWorker.ServiceWorkerClient ServiceWorker
        {
            get
            {
                if ((_ServiceWorker) == (null))
                {
                    _ServiceWorker = (new CefSharp.DevTools.ServiceWorker.ServiceWorkerClient(this));
                }

                return _ServiceWorker;
            }
        }

        private CefSharp.DevTools.Storage.StorageClient _Storage;
        /// <summary>
        /// Storage
        /// </summary>
        public CefSharp.DevTools.Storage.StorageClient Storage
        {
            get
            {
                if ((_Storage) == (null))
                {
                    _Storage = (new CefSharp.DevTools.Storage.StorageClient(this));
                }

                return _Storage;
            }
        }

        private CefSharp.DevTools.SystemInfo.SystemInfoClient _SystemInfo;
        /// <summary>
        /// The SystemInfo domain defines methods and events for querying low-level system information.
        /// </summary>
        public CefSharp.DevTools.SystemInfo.SystemInfoClient SystemInfo
        {
            get
            {
                if ((_SystemInfo) == (null))
                {
                    _SystemInfo = (new CefSharp.DevTools.SystemInfo.SystemInfoClient(this));
                }

                return _SystemInfo;
            }
        }

        private CefSharp.DevTools.Target.TargetClient _Target;
        /// <summary>
        /// Supports additional targets discovery and allows to attach to them.
        /// </summary>
        public CefSharp.DevTools.Target.TargetClient Target
        {
            get
            {
                if ((_Target) == (null))
                {
                    _Target = (new CefSharp.DevTools.Target.TargetClient(this));
                }

                return _Target;
            }
        }

        private CefSharp.DevTools.Tethering.TetheringClient _Tethering;
        /// <summary>
        /// The Tethering domain defines methods and events for browser port binding.
        /// </summary>
        public CefSharp.DevTools.Tethering.TetheringClient Tethering
        {
            get
            {
                if ((_Tethering) == (null))
                {
                    _Tethering = (new CefSharp.DevTools.Tethering.TetheringClient(this));
                }

                return _Tethering;
            }
        }

        private CefSharp.DevTools.Tracing.TracingClient _Tracing;
        /// <summary>
        /// Tracing
        /// </summary>
        public CefSharp.DevTools.Tracing.TracingClient Tracing
        {
            get
            {
                if ((_Tracing) == (null))
                {
                    _Tracing = (new CefSharp.DevTools.Tracing.TracingClient(this));
                }

                return _Tracing;
            }
        }

        private CefSharp.DevTools.Fetch.FetchClient _Fetch;
        /// <summary>
        /// A domain for letting clients substitute browser&apos;s network layer with client code.
        /// </summary>
        public CefSharp.DevTools.Fetch.FetchClient Fetch
        {
            get
            {
                if ((_Fetch) == (null))
                {
                    _Fetch = (new CefSharp.DevTools.Fetch.FetchClient(this));
                }

                return _Fetch;
            }
        }

        private CefSharp.DevTools.WebAudio.WebAudioClient _WebAudio;
        /// <summary>
        /// This domain allows inspection of Web Audio API.
        /// https://webaudio.github.io/web-audio-api/
        /// </summary>
        public CefSharp.DevTools.WebAudio.WebAudioClient WebAudio
        {
            get
            {
                if ((_WebAudio) == (null))
                {
                    _WebAudio = (new CefSharp.DevTools.WebAudio.WebAudioClient(this));
                }

                return _WebAudio;
            }
        }

        private CefSharp.DevTools.WebAuthn.WebAuthnClient _WebAuthn;
        /// <summary>
        /// This domain allows configuring virtual authenticators to test the WebAuthn
        /// API.
        /// </summary>
        public CefSharp.DevTools.WebAuthn.WebAuthnClient WebAuthn
        {
            get
            {
                if ((_WebAuthn) == (null))
                {
                    _WebAuthn = (new CefSharp.DevTools.WebAuthn.WebAuthnClient(this));
                }

                return _WebAuthn;
            }
        }

        private CefSharp.DevTools.Media.MediaClient _Media;
        /// <summary>
        /// This domain allows detailed inspection of media elements
        /// </summary>
        public CefSharp.DevTools.Media.MediaClient Media
        {
            get
            {
                if ((_Media) == (null))
                {
                    _Media = (new CefSharp.DevTools.Media.MediaClient(this));
                }

                return _Media;
            }
        }

        private CefSharp.DevTools.DeviceAccess.DeviceAccessClient _DeviceAccess;
        /// <summary>
        /// DeviceAccess
        /// </summary>
        public CefSharp.DevTools.DeviceAccess.DeviceAccessClient DeviceAccess
        {
            get
            {
                if ((_DeviceAccess) == (null))
                {
                    _DeviceAccess = (new CefSharp.DevTools.DeviceAccess.DeviceAccessClient(this));
                }

                return _DeviceAccess;
            }
        }

        private CefSharp.DevTools.Preload.PreloadClient _Preload;
        /// <summary>
        /// Preload
        /// </summary>
        public CefSharp.DevTools.Preload.PreloadClient Preload
        {
            get
            {
                if ((_Preload) == (null))
                {
                    _Preload = (new CefSharp.DevTools.Preload.PreloadClient(this));
                }

                return _Preload;
            }
        }

        private CefSharp.DevTools.FedCm.FedCmClient _FedCm;
        /// <summary>
        /// This domain allows interacting with the FedCM dialog.
        /// </summary>
        public CefSharp.DevTools.FedCm.FedCmClient FedCm
        {
            get
            {
                if ((_FedCm) == (null))
                {
                    _FedCm = (new CefSharp.DevTools.FedCm.FedCmClient(this));
                }

                return _FedCm;
            }
        }

        private CefSharp.DevTools.Debugger.DebuggerClient _Debugger;
        /// <summary>
        /// Debugger domain exposes JavaScript debugging capabilities. It allows setting and removing
        /// breakpoints, stepping through execution, exploring stack traces, etc.
        /// </summary>
        public CefSharp.DevTools.Debugger.DebuggerClient Debugger
        {
            get
            {
                if ((_Debugger) == (null))
                {
                    _Debugger = (new CefSharp.DevTools.Debugger.DebuggerClient(this));
                }

                return _Debugger;
            }
        }

        private CefSharp.DevTools.HeapProfiler.HeapProfilerClient _HeapProfiler;
        /// <summary>
        /// HeapProfiler
        /// </summary>
        public CefSharp.DevTools.HeapProfiler.HeapProfilerClient HeapProfiler
        {
            get
            {
                if ((_HeapProfiler) == (null))
                {
                    _HeapProfiler = (new CefSharp.DevTools.HeapProfiler.HeapProfilerClient(this));
                }

                return _HeapProfiler;
            }
        }

        private CefSharp.DevTools.Profiler.ProfilerClient _Profiler;
        /// <summary>
        /// Profiler
        /// </summary>
        public CefSharp.DevTools.Profiler.ProfilerClient Profiler
        {
            get
            {
                if ((_Profiler) == (null))
                {
                    _Profiler = (new CefSharp.DevTools.Profiler.ProfilerClient(this));
                }

                return _Profiler;
            }
        }

        private CefSharp.DevTools.Runtime.RuntimeClient _Runtime;
        /// <summary>
        /// Runtime domain exposes JavaScript runtime by means of remote evaluation and mirror objects.
        /// Evaluation results are returned as mirror object that expose object type, string representation
        /// and unique identifier that can be used for further object reference. Original objects are
        /// maintained in memory unless they are either explicitly released or are released along with the
        /// other objects in their object group.
        /// </summary>
        public CefSharp.DevTools.Runtime.RuntimeClient Runtime
        {
            get
            {
                if ((_Runtime) == (null))
                {
                    _Runtime = (new CefSharp.DevTools.Runtime.RuntimeClient(this));
                }

                return _Runtime;
            }
        }
    }
}