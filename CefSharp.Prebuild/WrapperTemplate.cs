// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CefSharp.Prebuild
{
    using System.Linq;
    using System.Text.RegularExpressions;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class WrapperTemplate : WrapperTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n");
            
            #line 9 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"

    Regex CefRefPtrMatcher = new Regex(@"(const )?CefRefPtr<(.*Handler)>.*");
 
            
            #line default
            #line hidden
            this.Write("\r\n#pragma once\r\n\r\n#include \"include/");
            
            #line 15 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassData.Location));
            
            #line default
            #line hidden
            this.Write("\"\r\n");
            
            #line 16 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"

foreach(var method in ClassData.Methods.Distinct())
{
    var match = CefRefPtrMatcher.Match(method.Result);
    if(match.Success)
    {

            
            #line default
            #line hidden
            this.Write("#include \"");
            
            #line 23 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(match.Groups[2].Value));
            
            #line default
            #line hidden
            this.Write("Safe.h\"\r\n");
            
            #line 24 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"

        var dependentClass = match.Groups[2].Value;
        if(!SafeClasses.Contains(dependentClass))
        {
            SafeClasses.Add(dependentClass);
        }
    }
}

            
            #line default
            #line hidden
            this.Write("\r\ntemplate<typename TImplementation=");
            
            #line 34 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassData.Name));
            
            #line default
            #line hidden
            this.Write(">\r\nclass ");
            
            #line 35 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassData.Name));
            
            #line default
            #line hidden
            
            #line 35 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SafeTypeTemplateName));
            
            #line default
            #line hidden
            this.Write(" : public ");
            
            #line 35 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassData.Name));
            
            #line default
            #line hidden
            this.Write(" {\r\npublic:\r\n    ");
            
            #line 37 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassData.Name));
            
            #line default
            #line hidden
            
            #line 37 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SafeTypeTemplateName));
            
            #line default
            #line hidden
            this.Write("(const CefRefPtr<");
            
            #line 37 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassData.Name));
            
            #line default
            #line hidden
            this.Write("> wrapped) {\r\n        this->wrapped = wrapped.get();\r\n        this->wrapped->AddR" +
                    "ef();\r\n        this->appDomainId = System::AppDomain::CurrentDomain->Id;\r\n    }\r" +
                    "\n\r\n    ~");
            
            #line 43 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassData.Name));
            
            #line default
            #line hidden
            
            #line 43 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SafeTypeTemplateName));
            
            #line default
            #line hidden
            this.Write(@"() {
        this->wrapped->Release();
    }

    TImplementation* operator ->() const {
        return static_cast<TImplementation*>(wrapped);
    }

    virtual void AddRef() const OVERRIDE { 
        return refct.AddRef(); 
    }

    virtual bool Release() const OVERRIDE {
        bool retval = refct.Release();
        if (retval)
            if (this->appDomainId != System::AppDomain::CurrentDomain->Id) {
                msclr::call_in_appdomain(appDomainId, &_Release, this);
            } else {
                _Release(this);
            }
        return retval;
    }

    virtual bool HasOneRef() const OVERRIDE {
        return refct.HasOneRef(); 
    }

");
            
            #line 70 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"

    foreach(var method in ClassData.Methods.Distinct())
    { 

            
            #line default
            #line hidden
            this.Write("    virtual ");
            
            #line 74 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Result));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 74 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Name));
            
            #line default
            #line hidden
            this.Write(" (");
            
            #line 74 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
RenderParameterList(method.Parameters);
            
            #line default
            #line hidden
            this.Write(") OVERRIDE {\r\n        if (this->appDomainId != System::AppDomain::CurrentDomain->" +
                    "Id) {\r\n            ");
            
            #line 76 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
 RenderReturn(method); 
            
            #line default
            #line hidden
            this.Write(" msclr::call_in_appdomain(appDomainId, &_");
            
            #line 76 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Name));
            
            #line default
            #line hidden
            this.Write(", wrapped");
            
            #line 76 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
 RenderCallParameterList(method.Parameters); 
            
            #line default
            #line hidden
            this.Write(");\r\n        } else {\r\n            ");
            
            #line 78 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
 RenderReturn(method); 
            
            #line default
            #line hidden
            this.Write("_");
            
            #line 78 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Name));
            
            #line default
            #line hidden
            this.Write("(wrapped");
            
            #line 78 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
 RenderCallParameterList(method.Parameters); 
            
            #line default
            #line hidden
            this.Write(");\r\n        }\r\n    }\r\n\r\n");
            
            #line 82 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
  }

            
            #line default
            #line hidden
            this.Write("private:\r\n    CefRefCount refct;\r\n    ");
            
            #line 86 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassData.Name));
            
            #line default
            #line hidden
            this.Write("* wrapped;\r\n    int appDomainId;\r\n\r\n    static void _Release(const ");
            
            #line 89 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassData.Name));
            
            #line default
            #line hidden
            
            #line 89 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SafeTypeTemplateName));
            
            #line default
            #line hidden
            this.Write("* _this) {\r\n        delete _this;\r\n    }\r\n\r\n");
            
            #line 93 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"

    foreach(var method in ClassData.Methods.Distinct())
    { 
        var match = CefRefPtrMatcher.Match(method.Result);

            
            #line default
            #line hidden
            this.Write("\r\n    static ");
            
            #line 99 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Result));
            
            #line default
            #line hidden
            this.Write(" _");
            
            #line 99 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Name));
            
            #line default
            #line hidden
            this.Write(" (");
            
            #line 99 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
 RenderStaticParameterList(ClassData.Name, method.Parameters); 
            
            #line default
            #line hidden
            this.Write(") {\r\n");
            
            #line 100 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"

        if(match.Success)
        {

            
            #line default
            #line hidden
            this.Write("        auto res = wrapped->");
            
            #line 104 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 104 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
 RenderStaticCallParameterList(method.Parameters); 
            
            #line default
            #line hidden
            this.Write(");\r\n        if(res) {\r\n            res = new ");
            
            #line 106 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(match.Groups[2].Value));
            
            #line default
            #line hidden
            this.Write("Safe(res);\r\n        }\r\n        return res;\r\n");
            
            #line 109 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"

        }
        else
        {

            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 114 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
 RenderReturn(method); 
            
            #line default
            #line hidden
            this.Write(" wrapped->");
            
            #line 114 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 114 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
 RenderStaticCallParameterList(method.Parameters); 
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 115 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"

        }

            
            #line default
            #line hidden
            this.Write("    }\r\n\r\n");
            
            #line 120 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"

    }

            
            #line default
            #line hidden
            this.Write("};\r\n\r\ntypedef ");
            
            #line 125 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassData.Name));
            
            #line default
            #line hidden
            
            #line 125 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SafeTypeTemplateName));
            
            #line default
            #line hidden
            this.Write("<> ");
            
            #line 125 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassData.Name));
            
            #line default
            #line hidden
            
            #line 125 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SafeTypeName));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 127 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
 
    void RenderParameterList(System.Collections.Generic.List<System.Tuple<string, string>> parameters)
    {            
        for(var i = 0; i < parameters.Count; i++)
        {
        
        
        #line default
        #line hidden
        
        #line 132 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(i > 0 ? ", " : ""));

        
        #line default
        #line hidden
        
        #line 132 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(parameters[i].Item1));

        
        #line default
        #line hidden
        
        #line 132 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 132 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(parameters[i].Item2));

        
        #line default
        #line hidden
        
        #line 132 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"

        }
    }    

        
        #line default
        #line hidden
        
        #line 137 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
 
    void RenderStaticParameterList(string className, System.Collections.Generic.List<System.Tuple<string, string>> parameters)
    {
        
        #line default
        #line hidden
        
        #line 139 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(className));

        
        #line default
        #line hidden
        
        #line 139 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
this.Write("* wrapped");

        
        #line default
        #line hidden
        
        #line 139 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"

        for(var i = 0; i < parameters.Count; i++)
        {
            var item1 = parameters[i].Item1;
            if (item1.Contains("&") && item1.Contains("const"))
            {
                item1 = item1.Replace("&", "").Replace("const ", "");
            }
            else if (item1.Contains("&"))
            {
                item1 = item1.Replace("&", "*");
            }

        
        #line default
        #line hidden
        
        #line 151 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
this.Write(", ");

        
        #line default
        #line hidden
        
        #line 151 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(item1));

        
        #line default
        #line hidden
        
        #line 151 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 151 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(parameters[i].Item2));

        
        #line default
        #line hidden
        
        #line 151 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"

        }
    }    

        
        #line default
        #line hidden
        
        #line 156 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
 
    void RenderCallParameterList(System.Collections.Generic.List<System.Tuple<string, string>> parameters)
    {            
        for(var i = 0; i < parameters.Count; i++)
        {
            var param = parameters[i];
        
        
        #line default
        #line hidden
        
        #line 162 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
this.Write(", ");

        
        #line default
        #line hidden
        
        #line 162 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(param.Item1.Contains("&") && !param.Item1.Contains("const ") ? "&" : ""));

        
        #line default
        #line hidden
        
        #line 162 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(param.Item2));

        
        #line default
        #line hidden
        
        #line 162 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"

        }
    }    

        
        #line default
        #line hidden
        
        #line 167 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
 
    void RenderStaticCallParameterList(System.Collections.Generic.List<System.Tuple<string, string>> parameters)
    {            
        for(var i = 0; i < parameters.Count; i++)
        {
            var param = parameters[i];
        
        
        #line default
        #line hidden
        
        #line 173 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(i > 0 ? ", " : ""));

        
        #line default
        #line hidden
        
        #line 173 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(param.Item1.Contains("&") && !param.Item1.Contains("const ") ? "*" : ""));

        
        #line default
        #line hidden
        
        #line 173 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(param.Item2));

        
        #line default
        #line hidden
        
        #line 173 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"

        }
    }    

        
        #line default
        #line hidden
        
        #line 178 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"

    void RenderReturn(CefSharp.Prebuild.MethodDescriptor method)
    {
    
        
        #line default
        #line hidden
        
        #line 181 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(method.Result != "void" ? "return " : ""));

        
        #line default
        #line hidden
        
        #line 181 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"

    }

        
        #line default
        #line hidden
        
        #line 1 "C:\dev\github\CefSharp\CefSharp.Prebuild\WrapperTemplate.tt"

private global::CefSharp.Prebuild.ClassDescriptor _ClassDataField;

/// <summary>
/// Access the ClassData parameter of the template.
/// </summary>
private global::CefSharp.Prebuild.ClassDescriptor ClassData
{
    get
    {
        return this._ClassDataField;
    }
}

private global::System.Collections.Generic.List<string> _SafeClassesField;

/// <summary>
/// Access the SafeClasses parameter of the template.
/// </summary>
private global::System.Collections.Generic.List<string> SafeClasses
{
    get
    {
        return this._SafeClassesField;
    }
}

private string _SafeTypeTemplateNameField;

/// <summary>
/// Access the SafeTypeTemplateName parameter of the template.
/// </summary>
private string SafeTypeTemplateName
{
    get
    {
        return this._SafeTypeTemplateNameField;
    }
}

private string _SafeTypeNameField;

/// <summary>
/// Access the SafeTypeName parameter of the template.
/// </summary>
private string SafeTypeName
{
    get
    {
        return this._SafeTypeNameField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool ClassDataValueAcquired = false;
if (this.Session.ContainsKey("ClassData"))
{
    this._ClassDataField = ((global::CefSharp.Prebuild.ClassDescriptor)(this.Session["ClassData"]));
    ClassDataValueAcquired = true;
}
if ((ClassDataValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ClassData");
    if ((data != null))
    {
        this._ClassDataField = ((global::CefSharp.Prebuild.ClassDescriptor)(data));
    }
}
bool SafeClassesValueAcquired = false;
if (this.Session.ContainsKey("SafeClasses"))
{
    this._SafeClassesField = ((global::System.Collections.Generic.List<string>)(this.Session["SafeClasses"]));
    SafeClassesValueAcquired = true;
}
if ((SafeClassesValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("SafeClasses");
    if ((data != null))
    {
        this._SafeClassesField = ((global::System.Collections.Generic.List<string>)(data));
    }
}
bool SafeTypeTemplateNameValueAcquired = false;
if (this.Session.ContainsKey("SafeTypeTemplateName"))
{
    this._SafeTypeTemplateNameField = ((string)(this.Session["SafeTypeTemplateName"]));
    SafeTypeTemplateNameValueAcquired = true;
}
if ((SafeTypeTemplateNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("SafeTypeTemplateName");
    if ((data != null))
    {
        this._SafeTypeTemplateNameField = ((string)(data));
    }
}
bool SafeTypeNameValueAcquired = false;
if (this.Session.ContainsKey("SafeTypeName"))
{
    this._SafeTypeNameField = ((string)(this.Session["SafeTypeName"]));
    SafeTypeNameValueAcquired = true;
}
if ((SafeTypeNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("SafeTypeName");
    if ((data != null))
    {
        this._SafeTypeNameField = ((string)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class WrapperTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
